datasource:
    NoCloud:
        meta-data: |
            instance-id: {{ .HOSTNAME }}
        network-config: |
            version: 2
            renderer: networkd
            ethernets:
              id0:
                match:
                  macaddress: {{ .HOST_MAC }}
                dhcp4: true
                dhcp4-overrides:
                  use-dns: true
        user-data: |
            #cloud-config
            preserve_hostname: false
            hostname: {{ .HOSTNAME }}
            create_hostname_file: true
            prefer_fqdn_over_hostname: false
            
            {{- if or .DEV_MODE .LOCAL_ACCOUNT_ENABLED }}
            users:
              - default
              {{- if .DEV_MODE }}
              - name: {{ .DEV_USER }}
                shell: /bin/bash
                home: /home/{{ .DEV_USER }}
                groups: sudo
                lock_passwd: false
                plain_text_passwd: {{ .DEV_USER_PASSWD }}
              {{- end }}
              {{- if .LOCAL_ACCOUNT_ENABLED }}
              - name: {{ .LOCAL_ACCOUNT_USERNAME }}
                shell: /bin/bash
                home: /home/{{ .LOCAL_ACCOUNT_USERNAME }}
                groups: sudo
                sudo: ALL=(ALL) NOPASSWD:ALL
                ssh_authorized_keys:
                  - {{ .LOCAL_USER_SSH_KEY }}
              {{- end }}
            {{- end }}
            ca_certs:
              trusted:
                - |
                 {{- .CA_CERT | nindent 17 }}
            ntp:
              enabled: true
              ntp_client: systemd-timesyncd
              servers: [ {{ .NTP_SERVERS }} ]
            write_files:
              {{- if .WITH_PRESERVE_IP }}
              - path: /opt/intel_edge_node/staticip.sh
                permissions: '0755'
                content: |
                 #!/bin/bash
                 interface=$(ip route show default | awk '/default/ {print $5}')
                 gateway=$(ip route show default | awk '/default/ {print $3}')
                 sub_net=$(ip addr show | grep $interface | grep -E 'inet ./*' | awk '{print $2}' | awk -F'/' '{print $2}')
                 if [ -z $interface ] || [ -z $gateway ] || [ -z $sub_net ]; then
                   exit 1
                 fi
                 config_yaml="
                 network:
                   version: 2
                   renderer: networkd
                   ethernets:
                     id0:
                       match:
                         macaddress: {{ .HOST_MAC }}
                       dhcp4: no
                       addresses: [ {{ .HOST_IP }}/$sub_net ]
                       gateway4: $gateway
                       {{- if .DNS_SERVERS }}
                       nameservers:
                         addresses: [ {{ join ", " .DNS_SERVERS }} ]
                       {{- end }}
                 "
                 echo "$config_yaml" | tee /etc/netplan/50-cloud-init.yaml
                 netplan apply
              {{- end }}
              - path: /opt/intel_edge_node/bootmgr.sh
                permissions: '0755'
                content: |
                 #!/bin/bash

                 present_boot=$(efibootmgr | grep -i "Bootcurrent" | awk '{print $2}')
                 while IFS= read -r boot_part_number; do
                     if [[ "$boot_part_number" = "$present_boot" ]]; then
                         continue;
                     else
                         efibootmgr -b "$boot_part_number" -B
                     fi
                 done < <(efibootmgr | grep -i {{- if .IS_MICROVISOR }} "EFI Fixed" {{- else }} ubuntu {{- end }} | awk '{print $1}'| cut -c 5-8 )

                 while IFS= read -r boot_part_number; do
                     last_char="${boot_part_number: -1}"
                     # Check if the last character is not an asterisk ,make it activate
                     if [ "$last_char" != "*" ]; then
                         efibootmgr -b "$boot_part_number" -a
                     fi
                 done < <(efibootmgr | grep "Boot" | grep -i -v -E "BootCurrent|BootOrder" | awk '{print $1}' | cut -c 5-9)
              - path: /etc/intel_edge_node/orch-ca-cert/orch-ca.crt # CA cert path used by Prometheus
                content: |
                 {{- .CA_CERT | nindent 17 }}
              - path: /etc/edge-node/node/agent_variables
                content: |
                 CLUSTER_ORCH_URL={{ .ORCH_CLUSTER }}
                 HW_INVENTORY_URL={{ .ORCH_INFRA }}
                 NODE_ONBOARDING_ENABLED=true
                 NODE_ONBOARDING_URL={{ .ORCH_INFRA }}
                 NODE_ONBOARDING_HEARTBEAT=10s
                 NODE_ACCESS_URL={{ .KEYCLOAK_URL }}
                 NODE_RS_URL={{ .RELEASE_TOKEN_URL }}
                 CADDY_APT_PROXY_URL={{ .FILE_SERVER }}
                 CADDY_APT_PROXY_PORT={{ .ORCH_APT_PORT }}
                 CADDY_REGISTRY_PROXY_URL={{ .IMG_REGISTRY_URL }}
                 CADDY_REGISTRY_PROXY_PORT={{ .ORCH_IMG_PORT }}
                 OBSERVABILITY_LOGGING_URL={{ .ORCH_PLATFORM_OBS_HOST }}
                 OBSERVABILITY_LOGGING_PORT={{ .ORCH_PLATFORM_OBS_PORT }}
                 OBSERVABILITY_METRICS_URL={{ .ORCH_PLATFORM_OBS_METRICS_HOST }}
                 OBSERVABILITY_METRICS_PORT={{ .ORCH_PLATFORM_OBS_METRICS_PORT }}
                 UPDATE_SERVICE_URL={{ .ORCH_UPDATE }}
                 TELEMETRY_MANAGER_URL={{ .ORCH_TELEMETRY_HOST }}:{{ .ORCH_TELEMETRY_PORT }}
                 KEYCLOAK_FQDN={{ .KEYCLOAK_FQDN }}
                 RELEASE_FQDN={{ .RELEASE_FQDN }}
                 RS_TYPE={{ .RS_TYPE }}
                 RSTYPE={{ .RS_TYPE }}
              {{- if not .IS_MICROVISOR }}
              - path: /etc/intel_edge_node/agent_versions
                content: |
                 APT_DISTRO={{ .APT_DISTRO }}
                 CADDY_VERSION={{ index . "caddy-VERSION" }}
                 NODE_AGENT_VERSION={{ index . "node-agent-VERSION" }}
                 CLUSTER_AGENT_VERSION={{ index . "cluster-agent-VERSION" }}
                 HARDWARE_DISCOVERY_AGENT_VERSION={{ index . "hardware-discovery-agent-VERSION" }}
                 PLATFORM_OBSERVABILITY_AGENT_VERSION={{ index . "platform-observability-agent-VERSION" }}
                 TRTL_VERSION={{ index . "trtl-VERSION" }}
                 INBM_CLOUDADAPTER_AGENT_VERSION={{ index . "inbm-cloudadapter-agent-VERSION" }}
                 INBM_DISPATCHER_AGENT_VERSION={{ index . "inbm-dispatcher-agent-VERSION" }}
                 INBM_CONFIGURATION_AGENT_VERSION={{ index . "inbm-configuration-agent-VERSION" }}
                 INBM_TELEMETRY_AGENT_VERSION={{ index . "inbm-telemetry-agent-VERSION" }}
                 INBM_DIAGNOSTIC_AGENT_VERSION={{ index . "inbm-diagnostic-agent-VERSION" }}
                 MQTT_VERSION={{ index . "mqtt-VERSION" }}
                 TPM_PROVISION_VERSION={{ index . "tpm-provision-VERSION" }}
                 INBC_PROGRAM_VERSION={{ index . "inbc-program-VERSION" }}
                 PLATFORM_UPDATE_AGENT_VERSION={{ index . "platform-update-agent-VERSION" }}
                 PLATFORM_TELEMETRY_AGENT_VERSION={{ index . "platform-telemetry-agent-VERSION" }}
                 DEB_PACKAGES_REPO={{ .DEB_PACKAGES_REPO }}
                 FILE_RS_ROOT={{ .FILE_RS_ROOT }}
              {{- if .DNS_SERVERS }}
              - path: /etc/systemd/resolved.conf
                content: |
                 [Resolve]
                 DNS "{{ join " " .DNS_SERVERS }}"
              {{- end }}
              {{- end }}
              - path: /etc/hosts
                content: |
                 127.0.0.1 localhost localhost.localdomain
                 ::1 localhost localhost.localdomain ipv6-localhost ipv6-loopback
                 127.0.0.1 localhost.internal localhost
                 127.0.0.1 {{ .HOSTNAME }}
                 {{- if contains ".kind.internal" .ORCH_CLUSTER }}
                 {{- range .EXTRA_HOSTS }}
                 {{ . }}
                 {{- end }}
                 {{- end }}
              - path: /etc/intel_edge_node/tenantId
                content: |
                 TENANT_ID={{ .TENANT_ID }}
              - path: /etc/intel_edge_node/client-credentials/client_id
                permissions: '0600'
                content: |
                 {{ .CLIENT_ID }}
              - path: /etc/intel_edge_node/client-credentials/client_secret
                permissions: '0600'
                content: |
                 {{ .CLIENT_SECRET }}

              - path: /etc/ssh/sshd_config
                content: |
                 PermitRootLogin no
                 PasswordAuthentication no
                 PubkeyAuthentication yes
                 AuthenticationMethods publickey
                 KbdInteractiveAuthentication no
                 GSSAPIAuthentication no
                 HostbasedAuthentication no
                 HostKeyAlgorithms ecdsa-sha2-nistp384,ecdsa-sha2-nistp384-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-512-cert-v01@openssh.com,ecdsa-sha2-nistp521,ecdsa-sha2-nistp521-cert-v01@openssh.com
                 PubkeyAcceptedAlgorithms ssh-ed25519,ecdsa-sha2-nistp521
                 KexAlgorithms ecdh-sha2-nistp384,ecdh-sha2-nistp521
                 MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com
                 Ciphers aes256-gcm@openssh.com,chacha20-poly1305@openssh.com,aes256-ctr
                 UsePAM yes
            runcmd:
              {{- if .WITH_PRESERVE_IP }}
              - bash /opt/intel_edge_node/staticip.sh
              {{- end }}
              - |
                {{- if .EN_HTTP_PROXY }}
                grep -qF "http_proxy" /etc/environment || echo http_proxy={{ .EN_HTTP_PROXY }} >> /etc/environment
                {{- end }}
                {{- if .EN_HTTPS_PROXY }}
                grep -qF "https_proxy" /etc/environment || echo https_proxy={{ .EN_HTTPS_PROXY }} >> /etc/environment
                {{- end }}
                {{- if .EN_FTP_PROXY }}
                grep -qF "ftp_proxy" /etc/environment || echo ftp_proxy={{ .EN_FTP_PROXY }} >> /etc/environment
                {{- end }}
                {{- if .EN_SOCKS_PROXY }}
                grep -qF "socks_server" /etc/environment || echo socks_proxy={{ .EN_SOCKS_PROXY }} >> /etc/environment
                {{- end }}
                {{- if .EN_NO_PROXY }}
                grep -qF "no_proxy" /etc/environment || echo no_proxy={{ .EN_NO_PROXY }} >> /etc/environment
                {{- end }}
                . /etc/environment
                export http_proxy https_proxy ftp_proxy socks_server no_proxy
                {{- if .IS_MICROVISOR }}
                chown -R node-agent:bm-agents /etc/intel_edge_node/client-credentials/client_id
                chown -R node-agent:bm-agents /etc/intel_edge_node/client-credentials/client_secret
                systemctl restart caddy.service # workaround for caddy issue. Remove the line once Image is ready with caddy changes.
                SERVICES=("caddy.service" "node-agent.service" "cluster-agent.service" "hardware-discovery-agent.service" "platform-observability-collector.service" "platform-observability-health-check.service" "platform-observability-logging.service" "platform-observability-metrics.service" "platform-telemetry-agent.service" "platform-update-agent.service" "rasdaemon.service")
                for SERVICE in "${SERVICES[@]}"
                do
                    systemctl start  "$SERVICE" &
                done
                {{- else }}
                ln -sf /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf
                {{- end }}

                {{- if eq .FIREWALL_PROVIDER "iptables" }}
                #enabling firewall
                iptables -A INPUT -i lo -j ACCEPT
                iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
                iptables -P INPUT DROP
                iptables -P FORWARD DROP
                iptables -P OUTPUT ACCEPT
                {{- range .FIREWALL_RULES }}
                {{ . }}
                {{- end }}
                {{- else if eq .FIREWALL_PROVIDER "ufw" }}
                systemctl enable ufw
                echo "y" | ufw enable
                ufw default allow outgoing
                {{- if .FIREWALL_RULES }}
                {{- range .FIREWALL_RULES }}
                {{ . }}
                {{- end }}
                {{- end }}
                ufw reload
                {{- end }}
                {{- if .LOCAL_ACCOUNT_ENABLED }}
                # When local account is set, start sshd service in dev/production mode
                systemctl enable sshd
                systemctl start sshd
                {{- if eq .FIREWALL_PROVIDER "iptables" }}
                # Add iptables rules for SSH
                iptables -A INPUT -p tcp --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
                iptables -A OUTPUT -p tcp --sport 22 -m conntrack --ctstate ESTABLISHED -j ACCEPT
                {{- else if eq .FIREWALL_PROVIDER "ufw" }}
                # Allow SSH in UFW
                ufw allow ssh
                {{- end }}
                {{- else}}
                # When localAccount is not set, disable sshd service
                systemctl stop sshd
                systemctl disable sshd
                {{- end }}
              - bash /opt/intel_edge_node/bootmgr.sh
