datasource:
    NoCloud:
        meta-data: |
            instance-id: test-hostname
        network-config: |
            version: 2
            renderer: networkd
            ethernets:
              id0:
                match:
                  macaddress: aa:bb:cc:dd:ee:ff
                dhcp4: true
                dhcp4-overrides:
                  use-dns: true
        user-data: |
            #cloud-config
            hostname: test-hostname
            create_hostname_file: true
            users:
              - default
              - name: user
                shell: /bin/bash
                home: /home/user
                groups: sudo
                lock_passwd: false
                plain_text_passwd: pass
            ca_certs:
              trusted:
                - |
                 TEST CA CONTENT
            ntp:
              enabled: true
              ntp_client: systemd-timesyncd
              servers: [ ntp1.org,ntp2.org ]
            write_files:
              - path: /opt/intel_edge_node/bootmgr.sh
                permissions: '0755'
                content: |
                 #!/bin/bash

                 present_boot=$(efibootmgr | grep -i "Bootcurrent" | awk '{print $2}')
                 while IFS= read -r boot_part_number; do
                     if [[ "$boot_part_number" = "$present_boot" ]]; then
                         continue;
                     else
                         efibootmgr -b "$boot_part_number" -B
                     fi
                 done < <(efibootmgr | grep -i "EFI Fixed" | awk '{print $1}'| cut -c 5-8 )

                 while IFS= read -r boot_part_number; do
                     last_char="${boot_part_number: -1}"
                     # Check if the last character is not an asterisk ,make it activate
                     if [ "$last_char" != "*" ]; then
                         efibootmgr -b "$boot_part_number" -a
                     fi
                 done < <(efibootmgr | grep "Boot" | grep -i -v -E "BootCurrent|BootOrder" | awk '{print $1}' | cut -c 5-9)
              - path: /etc/intel_edge_node/orch-ca-cert/orch-ca.crt # CA cert path used by Prometheus
                content: |
                 TEST CA CONTENT
              - path: /etc/edge-node/node/agent_variables
                content: |
                 CLUSTER_ORCH_URL=cluster.kind.internal
                 HW_INVENTORY_URL=infra.test:443
                 NODE_ONBOARDING_ENABLED=true
                 NODE_ONBOARDING_URL=infra.test:443
                 NODE_ONBOARDING_HEARTBEAT=10s
                 NODE_ACCESS_URL=keycloak.test:443
                 NODE_RS_URL=rs.test:443
                 CADDY_APT_PROXY_URL=fs.test
                 CADDY_APT_PROXY_PORT=443
                 CADDY_REGISTRY_PROXY_URL=registry.test
                 CADDY_REGISTRY_PROXY_PORT=443
                 OBSERVABILITY_LOGGING_URL=logs.test
                 OBSERVABILITY_LOGGING_PORT=443
                 OBSERVABILITY_METRICS_URL=metrics.test
                 OBSERVABILITY_METRICS_PORT=443
                 UPDATE_SERVICE_URL=update.test:443
                 TELEMETRY_MANAGER_URL=telemetry.test:443
                 KEYCLOAK_FQDN=keycloak.test
                 RELEASE_FQDN=rs.test
                 RS_TYPE=
                 RSTYPE=
              - path: /etc/hosts
                content: |
                 127.0.0.1 localhost localhost.localdomain
                 ::1 localhost localhost.localdomain ipv6-localhost ipv6-loopback
                 127.0.0.1 localhost.internal localhost
                 127.0.0.1 test-hostname
                 1.1.1.1 a.test
                 2.2.2.2 b.test
              - path: /etc/intel_edge_node/tenantId
                content: |
                 TENANT_ID=test-tenantid
              - path: /etc/intel_edge_node/client-credentials/client_id
                content: |
                 test-client-id
              - path: /etc/intel_edge_node/client-credentials/client_secret
                content: |
                 test-client-secret

              - path: /etc/ssh/sshd_config
                content: |
                 PermitRootLogin no
                 PasswordAuthentication no
                 PubkeyAuthentication yes
                 AuthenticationMethods publickey
                 KbdInteractiveAuthentication no
                 GSSAPIAuthentication no
                 HostbasedAuthentication no
                 HostKeyAlgorithms ecdsa-sha2-nistp384,ecdsa-sha2-nistp384-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-512-cert-v01@openssh.com,ecdsa-sha2-nistp521,ecdsa-sha2-nistp521-cert-v01@openssh.com
                 PubkeyAcceptedAlgorithms ssh-ed25519,ecdsa-sha2-nistp521
                 KexAlgorithms ecdh-sha2-nistp384,ecdh-sha2-nistp521
                 MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com
                 Ciphers aes256-gcm@openssh.com,chacha20-poly1305@openssh.com,aes256-ctr
                 UsePAM yes
            runcmd:
              - |
                grep -qF "http_proxy" /etc/environment || echo http_proxy=http-proxy.test >> /etc/environment
                grep -qF "https_proxy" /etc/environment || echo https_proxy=https-proxy.test >> /etc/environment
                grep -qF "ftp_proxy" /etc/environment || echo ftp_proxy=ftp-proxy.test >> /etc/environment
                grep -qF "socks_server" /etc/environment || echo socks_proxy=socks.test >> /etc/environment
                grep -qF "no_proxy" /etc/environment || echo no_proxy=no-proxy.test >> /etc/environment
                . /etc/environment
                export http_proxy https_proxy ftp_proxy socks_server no_proxy
                chown -R node-agent:bm-agents /etc/intel_edge_node/client-credentials/client_id
                chown -R node-agent:bm-agents /etc/intel_edge_node/client-credentials/client_secret
                systemctl restart caddy.service # workaround for caddy issue. Remove the line once Image is ready with caddy changes.
                SERVICES=("caddy.service" "node-agent.service" "cluster-agent.service" "hardware-discovery-agent.service" "platform-observability-collector.service" "platform-observability-health-check.service" "platform-observability-logging.service" "platform-observability-metrics.service" "platform-telemetry-agent.service" "platform-update-agent.service" "rasdaemon.service")
                for SERVICE in "${SERVICES[@]}"
                do
                    systemctl start  "$SERVICE" &
                done
                #enabling firewall
                iptables -A INPUT -i lo -j ACCEPT
                iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
                iptables -P INPUT DROP
                iptables -P FORWARD DROP
                iptables -P OUTPUT ACCEPT
                iptables -A INPUT -p tcp --dport 80 -j ACCEPT
                iptables -A INPUT -p tcp --dport 443 -j ACCEPT
                # When localAccount is not set, disable sshd service
                systemctl disable sshd
              - bash /opt/intel_edge_node/bootmgr.sh
