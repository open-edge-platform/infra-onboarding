#!/bin/bash

# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

exec &> >(tee >(systemd-cat -t /home/postinstall/Setup/installer.sh))
set -euo pipefail

. /etc/environment
export http_proxy https_proxy ftp_proxy socks_server no_proxy;
# TODO: Investigate and find the root cause of the issue with the HOME environment variable not found.
# Set the HOME environment variable if not already set
export HOME=/root

SETUP_STATUS_FILENAME="install_pkgs_status"
STATUS_FILENAME=".success_install_status"
SCRIPT_DIR=$(pwd)
touch "$SCRIPT_DIR/$SETUP_STATUS_FILENAME"
touch "$SCRIPT_DIR/$STATUS_FILENAME"

if [[ -s "/etc/intel_edge_node/client-credentials/client_id" && -s "/etc/intel_edge_node/client-credentials/client_secret" ]]; then
    CLIENT_ID=$(cat /etc/intel_edge_node/client-credentials/client_id)
    CLIENT_SECRET=$(cat /etc/intel_edge_node/client-credentials/client_secret)
else
    echo "Client credentials are not yet provisioned"
    exit 1
fi

if [ -s "/etc/edge-node/node/agent_variables" ]; then
    source /etc/edge-node/node/agent_variables
else
    echo "/etc/edge-node/node/agent_variables file does not exists"
    exit 1
fi

if [ -s "/etc/intel_edge_node/agent_versions" ]; then
    source /etc/intel_edge_node/agent_versions
else
    echo "/etc/intel_edge_node/agent_versions file does not exists"
    exit 1
fi

# TODO: decide where to get them from, for now hardcode them here
KERNEL_CONFIG_OVER_COMMIT_MEMORY=1
KERNEL_CONFIG_KERNEL_PANIC=10
KERNEL_CONFIG_PANIC_ON_OOPS=1
KERNEL_CONFIG_MAX_USER_INSTANCE=8192

#Get the function name which is causing error
get_trap_func_name(){
    line_number=$1
    script_file="$0"
    line_content=$(sed "${line_number}q;d" "$script_file")
    func_name=$(echo $line_content | awk '{print $1}')
    echo  "$func_name"
}
#Function to handle errors
print_error_on_console() {
    sudo dpkg --configure -a
    local exit_code=$?
    local line_number="$1"
    local func_name=$(get_trap_func_name $line_number)
    echo "[ERROR] in function ${func_name} at line ${line_number} - exit code: ${exit_code}" > /dev/tty1
}

trap 'print_error_on_console ${LINENO}' ERR

install_dependencies() {
    if grep -q "install_dependencies done" "$SCRIPT_DIR"/$STATUS_FILENAME; then
		echo "Skipping install_dependencies"
    else
        echo "Install all dependencies."
        rm -f /etc/apt/sources.list.d/edge-node.list
        apt-get update
        echo -e "\e[32m[install git python3-pip]\e[0m"
        sudo apt-get install -y curl wget unzip apparmor iptables lvm2 cryptsetup lxc mosquitto tpm2-abrmd tpm2-tools software-properties-common python3-venv git jq libpq5 python3-pip ca-certificates gnupg dmidecode

        # IMPORTANT: These hardcoded uid/gid must be aligned to that in Edge Microvisor Toolkit specified in cluster-agent.conf.
        # If additional new users or groups need to be created by DKAM, they MUST be added after the users and group created below to
        # avoid those users or groups being assigned to IDs that are reserved. A list of the reserved UID and GID values are below:
        #
        #|----------|------------|--------------|
        #|   Name   | User/Group | Reserverd ID |
        #|----------|------------|--------------|
        #|bm-agents |    Group   |      500     |
        #|prometheus|    User    |      501     |
        #|fluent-bit|    User    |      502     |
        #|tc-agent  |    User    |      503     |
        #|tc-ima    |    User    |      504     |
        #|----------|------------|--------------|

        groupadd -f bm-agents -g 500 --system
        id -u prometheus &>/dev/null || useradd prometheus -u 501 --system -g bm-agents -s /sbin/nologin
        id -u fluent-bit &>/dev/null || useradd fluent-bit -u 502 --system -g bm-agents -G adm -s /sbin/nologin
        id -u node-agent &>/dev/null || useradd node-agent --system -g bm-agents -s /sbin/nologin
        id -u platform-update-agent &>/dev/null || useradd platform-update-agent --system -g bm-agents -s /sbin/nologin
        id -u tc-agent &>/dev/null || useradd tc-agent -u 503 --system -g bm-agents -s /sbin/nologin
        id -u tc-ima &>/dev/null || useradd tc-ima -u 504 --system -g bm-agents -s /sbin/nologin

        echo "install_dependencies done" | tee -a "$SCRIPT_DIR"/$STATUS_FILENAME
    fi
}

install_node_agent(){
    if grep -q "install_node_agent done" "$SCRIPT_DIR"/$STATUS_FILENAME; then
		echo "Skipping install_node_agent"
    else
        rm -f /etc/apt/sources.list.d/edge-node.list
        if [ "$RS_TYPE" == "auth" ]; then
            # Temp file to store response
            tempfile=$(mktemp)

            echo "get access token from orchestrator"
            # Save the response to the temporary file
            curl -X POST -u "$CLIENT_ID:$CLIENT_SECRET" -d "grant_type=client_credentials" https://${KEYCLOAK_FQDN}/realms/master/protocol/openid-connect/token -o "$tempfile"

            # Check the exit status of curl
            if [ ! -s "$tempfile" ]; then
                echo "error in getting Keycloak token"
                rm "$tempfile"
                exit 1
            fi

            # Parse the response with jq
            AT=$(jq -r '.access_token' "$tempfile")
            rm "$tempfile"

            # Get RS token now
            tempfile=$(mktemp)
            curl -XGET https://${RELEASE_FQDN}/token -H "Authorization: Bearer $AT" -o "$tempfile"

            if [ ! -s "$tempfile" ]; then
                echo "error in getting Release Service token"
                rm "$tempfile"
                exit 1
            fi

            RS_AT=$(cat "$tempfile")
            rm "$tempfile"
        else
            echo "RS_TYPE is not auth"
        fi

        echo "setup oras"
        ORAS_VERSION="1.1.0"
        expected_checksum="e09e85323b24ccc8209a1506f142e3d481e6e809018537c6b3db979c891e6ad7"
        curl -LO "https://github.com/oras-project/oras/releases/download/v${ORAS_VERSION}/oras_${ORAS_VERSION}_linux_amd64.tar.gz"
        if [ -f "oras_1.1.0_linux_amd64.tar.gz" ]; then
            actual_checksum=$(sha256sum "oras_1.1.0_linux_amd64.tar.gz" | awk '{print $1}')
            if [ "$actual_checksum" != "$expected_checksum" ]; then
                    echo "Checksum mismatch. File may be corrupted."
                    exit 1
                fi
                echo "Checksum verification successful."
        else
            echo "Downloaded file does not exist. Aborting installation."
            exit 1
        fi
        mkdir -p oras-install/
        tar -zxf oras_${ORAS_VERSION}_*.tar.gz -C oras-install/
        sudo mv oras-install/oras /usr/local/bin/
        rm -rf oras_${ORAS_VERSION}_*.tar.gz oras-install/

        USERNAME="etcd"

        # Check if the etcd already exists
        if id "$USERNAME" &>/dev/null; then
            echo "User '$USERNAME' already exists."
        else
            # Add the etcd if it doesn't exist
            useradd -r -c "etcd user" -s /sbin/nologin -M "$USERNAME" -U
            echo "User '$USERNAME' added successfully."
        fi

        echo "node-agent node-agent/onboarding.serviceURL string ${HW_INVENTORY_URL}" | debconf-set-selections
        echo "node-agent node-agent/auth.accessTokenURL string ${NODE_ACCESS_URL}" | debconf-set-selections
        echo "node-agent node-agent/auth.rsTokenURL string ${NODE_RS_URL}" | debconf-set-selections
        echo "node-agent node-agent/proxy.aptSourceURL string ${CADDY_APT_PROXY_URL}" | debconf-set-selections
        echo "node-agent node-agent/proxy.aptSourceProxyPort string ${CADDY_APT_PROXY_PORT}" | debconf-set-selections
        echo "node-agent node-agent/proxy.imgRegistryURL string ${CADDY_REGISTRY_PROXY_URL}" | debconf-set-selections
        echo "node-agent node-agent/proxy.imgRegistryProxyPort string ${CADDY_REGISTRY_PROXY_PORT}" | debconf-set-selections
        echo "node-agent node-agent/auth.RSType string ${RS_TYPE}" | debconf-set-selections

        echo "Install caddy for node agent..."

        echo "download caddy deb package..."
        CADDY_PKGFILE="./caddy_${CADDY_VERSION}_linux_amd64.deb"
         if [ "$RS_TYPE" == "auth" ]; then
            echo "${RS_AT}" | oras pull "${CADDY_REGISTRY_PROXY_URL}/${DEB_PACKAGES_REPO}/caddy:$CADDY_VERSION" --password-stdin
        else
            oras pull "${CADDY_REGISTRY_PROXY_URL}/${DEB_PACKAGES_REPO}/caddy:$CADDY_VERSION"
        fi

        if [ ! -f "${CADDY_PKGFILE}" ]; then
            echo "caddy debian package could not be downloaded. Aborting installation"
            exit 1
        fi

        echo "install caddy"
        apt-get install -y "${CADDY_PKGFILE}"

        echo "remove caddy debian"
        rm -f "${CADDY_PKGFILE}"

        echo "Install node agent..."
        echo "download node agent..."
        echo $NODE_AGENT_VERSION
        PKGFILE="./node-agent_${NODE_AGENT_VERSION}_amd64.deb"

        echo "download node agent"
         if [ "$RS_TYPE" == "auth" ]; then
            echo "${RS_AT}" | oras pull "${CADDY_REGISTRY_PROXY_URL}/${DEB_PACKAGES_REPO}/node-agent:$NODE_AGENT_VERSION" --password-stdin
        else
            oras pull "${CADDY_REGISTRY_PROXY_URL}/${DEB_PACKAGES_REPO}/node-agent:$NODE_AGENT_VERSION"
        fi

        if [ ! -f "${PKGFILE}" ]; then
            echo "node agent debian could not be downloaded. Aborting installation"
            exit 1
        fi

        echo "install node agent"
        apt-get install -y -o Dpkg::Options::="--force-confnew" "${PKGFILE}"

        echo "remove node agent debian"
        rm -f "${PKGFILE}"

        echo "wait for node agent and client proxy to start"
        while true; do
            http_status=$(curl -s -o /dev/null -w "%{http_code}" "https://localhost:$CADDY_APT_PROXY_PORT/${FILE_RS_ROOT}/edge-node.asc")
            if [ "$http_status" -eq 200 ]; then
                echo "Client proxy is active"
                break
            else
                echo "HTTP status code is $http_status. Retrying in 5 seconds..."
                sleep 5
            fi
        done

        echo "setup apt source"
        if [ "$RS_TYPE" == "auth" ]; then
            curl -kfsSL "https://$CADDY_APT_PROXY_URL/${FILE_RS_ROOT}/edge-node.asc" -H "Authorization: Bearer $RS_AT" -o /etc/apt/trusted.gpg.d/edge-node.asc
        else
            curl -kfsSL "https://$CADDY_APT_PROXY_URL/${FILE_RS_ROOT}/edge-node.asc" -o /etc/apt/trusted.gpg.d/edge-node.asc
        fi
        echo "deb https://localhost:$CADDY_APT_PROXY_PORT/${FILE_RS_ROOT}/repository ${APT_DISTRO} main" | tee /etc/apt/sources.list.d/edge-node.list

        apt-get update
        echo "install_node_agent done" | tee -a "$SCRIPT_DIR"/$STATUS_FILENAME
    fi
}

install_other_agents() {
  if grep -q "install_other_agents done" "$SCRIPT_DIR"/$STATUS_FILENAME; then
  		echo "Skipping install_other_agents"
  else
      echo "Install bare-metal agents..."
      echo "cluster-agent cluster-agent/cluster-orchestrator-url string ${CLUSTER_ORCH_URL}" | debconf-set-selections
      echo "hardware-discovery-agent hardware-discovery-agent/onboarding.serviceURL string ${HW_INVENTORY_URL}" | debconf-set-selections
      echo "platform-observability-agent platform-observability-agent/host string $OBSERVABILITY_LOGGING_URL" | debconf-set-selections
      echo "platform-observability-agent platform-observability-agent/port string $OBSERVABILITY_LOGGING_PORT" | debconf-set-selections
      echo "platform-observability-agent platform-observability-agent/metrics-host string $OBSERVABILITY_METRICS_URL" | debconf-set-selections
      echo "platform-observability-agent platform-observability-agent/metrics-port string $OBSERVABILITY_METRICS_PORT" | debconf-set-selections
      echo "platform-update-agent platform-update-agent/enaDebURL string ${CADDY_APT_PROXY_URL}" | debconf-set-selections
      echo "platform-update-agent platform-update-agent/updateServiceURL string ${UPDATE_SERVICE_URL}" | debconf-set-selections
      echo "telemetry-agent telemetry-agent/telemetrymanager.serviceURL string ${TELEMETRY_MANAGER_URL}" | debconf-set-selections

      apt-get install -y -o Dpkg::Options::="--force-confnew" \
        cluster-agent="$CLUSTER_AGENT_VERSION" \
        hardware-discovery-agent="$HARDWARE_DISCOVERY_AGENT_VERSION" \
        platform-observability-agent="$PLATFORM_OBSERVABILITY_AGENT_VERSION" \
        trtl="$TRTL_VERSION" \
        inbm-cloudadapter-agent="$INBM_CLOUDADAPTER_AGENT_VERSION" \
        inbm-configuration-agent="$INBM_CONFIGURATION_AGENT_VERSION" \
        inbm-dispatcher-agent="$INBM_DISPATCHER_AGENT_VERSION" \
        inbm-telemetry-agent="$INBM_TELEMETRY_AGENT_VERSION" \
        inbm-diagnostic-agent="$INBM_DIAGNOSTIC_AGENT_VERSION" \
        mqtt="$MQTT_VERSION" \
        tpm-provision="$TPM_PROVISION_VERSION" \
        inbc-program="$INBC_PROGRAM_VERSION" \
        platform-update-agent="$PLATFORM_UPDATE_AGENT_VERSION" \
        platform-telemetry-agent="$PLATFORM_TELEMETRY_AGENT_VERSION"
      echo "install_other_agents done" | tee -a "$SCRIPT_DIR"/$STATUS_FILENAME
  fi
}

install_syslogrotate_job(){
if grep -q "install_syslogrotate_job done" "$SCRIPT_DIR"/$STATUS_FILENAME; then
    echo "Skipping install_syslogrotate_job"
else
##### Managing log rotation
echo "Install sys log"
if ! sudo grep -q "cron.emf" "/etc/crontab"; then
  sudo sed -i '$ d' /etc/crontab
  echo "*/5 *   * * *   root    cd / && run-parts --report /etc/cron.emf" | sudo tee -a /etc/crontab
  echo "#" | sudo tee -a /etc/crontab
fi

sudo rm -rf /etc/cron.emf
sudo mkdir -p /etc/cron.emf
sudo tee /etc/cron.emf/logrotate << 'END'
#!/bin/sh
/usr/sbin/logrotate /etc/logrotate.conf
EXITVALUE=$?
if [ $EXITVALUE != 0 ]; then
    /usr/bin/logger -t logrotate "ALERT exited abnormally with [$EXITVALUE]"
fi
exit $EXITVALUE
END

sudo chmod +x /etc/cron.emf/logrotate

sudo tee /etc/logrotate.d/rsyslog << 'END'
/var/log/syslog
/var/log/mail.info
/var/log/mail.warn
/var/log/mail.err
/var/log/mail.log
/var/log/daemon.log
/var/log/kern.log
/var/log/auth.log
/var/log/user.log
/var/log/lpr.log
/var/log/cron.log
/var/log/debug
/var/log/messages
{
        rotate 4
        weekly
        missingok
        size 1G
        notifempty
        compress
        delaycompress
        sharedscripts
        postrotate
                /usr/lib/rsyslog/rsyslog-rotate
        endscript
}
END

sudo systemctl restart rsyslog.service

sudo systemctl restart cron.service
sudo /usr/sbin/logrotate /etc/logrotate.conf
##### Managing log rotation
echo "install_syslogrotate_job done" | tee -a "$SCRIPT_DIR"/$STATUS_FILENAME
fi
}

install_syslogrotate_ufw(){
if grep -q "install_syslogrotate_ufw done" "$SCRIPT_DIR"/$STATUS_FILENAME; then
	echo "Skipping install_syslogrotate_ufw"
else
sudo tee /etc/logrotate.d/ufw << 'END'
/var/log/ufw.log
{
        rotate 4
        weekly
        missingok
        notifempty
        size 1G
        compress
        delaycompress
        sharedscripts
        postrotate
                [ -x /usr/lib/rsyslog/rsyslog-rotate ] && /usr/lib/rsyslog/rsyslog-rotate || true
        endscript
}
END

sudo systemctl restart ufw.service
sudo ufw logging low
echo "install_syslogrotate_ufw done" | tee -a "$SCRIPT_DIR"/$STATUS_FILENAME
fi
}

enable_kernel_config(){
    if grep -q "enable_kernel_config done" "$SCRIPT_DIR"/$STATUS_FILENAME; then
		echo "Skipping enable_kernel_config"
    else
        echo "Enable kernel config"
        sysctl -w vm.overcommit_memory=${KERNEL_CONFIG_OVER_COMMIT_MEMORY}
        sysctl -w kernel.panic=${KERNEL_CONFIG_KERNEL_PANIC}
        sysctl -w kernel.panic_on_oops=${KERNEL_CONFIG_PANIC_ON_OOPS}
        sysctl -w fs.inotify.max_user_instances=${KERNEL_CONFIG_MAX_USER_INSTANCE}
        echo vm.overcommit_memory=${KERNEL_CONFIG_OVER_COMMIT_MEMORY} | tee -a /etc/sysctl.conf
        echo kernel.panic=${KERNEL_CONFIG_KERNEL_PANIC} | tee -a /etc/sysctl.conf
        echo kernel.panic_on_oops=${KERNEL_CONFIG_PANIC_ON_OOPS} | tee -a /etc/sysctl.conf
        echo fs.inotify.max_user_instances=${KERNEL_CONFIG_MAX_USER_INSTANCE} | tee -a /etc/sysctl.conf
        sysctl -p
        echo "enable_kernel_config done" | tee -a "$SCRIPT_DIR"/$STATUS_FILENAME
    fi
}

disable_unattended_upgrade(){
    if grep -q "disable_unattended_upgrade done" "$SCRIPT_DIR"/$STATUS_FILENAME; then
		echo "Skipping disable_unattended_upgrade"
    else
    echo "Disable unattended upgrade"
        config_file="/etc/apt/apt.conf.d/20auto-upgrades"
        if [ -f "$config_file" ]; then
            sed -i 's/APT::Periodic::Update-Package-Lists "1";/APT::Periodic::Update-Package-Lists "0";/' "$config_file"
            sed -i 's/APT::Periodic::Unattended-Upgrade "1";/APT::Periodic::Unattended-Upgrade "0";/' "$config_file"
            echo "APT::Periodic::Update-Package-Lists set to \"0\" in $config_file"
        else
            echo "Error: $config_file does not exist."
            exit 1
        fi
        apt remove -y unattended-upgrades
        echo "disable_unattended_upgrade done" | tee -a "$SCRIPT_DIR"/$STATUS_FILENAME
    fi
}

creat_lvm_partition(){
    if grep -q "creat_lvm_partition done" "$SCRIPT_DIR"/$STATUS_FILENAME; then
                echo "Skipping creat_lvm_partition"
    else
	disk_count=$1
	shift
        lvm_disks=("$@")
        echo "starting the LVM creation for the disk volume ${lvm_disks[@]}"

        #if one disk found and it has rootfs
        if [ "$disk_count" == "1" ];then
        lvm_part=$(parted "/dev/$lvm_disks" p | grep -i "primary" | awk '{print $1}')
            if [[ "$lvm_disks" == *"nvme"* ]]; then
            part_number=p
            disks+=("/dev/${lvm_disks}${part_number}${lvm_part}")
        else
            part_number=""
            disks+=("/dev/${lvm_disks}${part_number}${lvm_part}")
        fi
        #more than one disk found
        else
            for disk in "${lvm_disks[@]}"
            do
		#before creating the partition clear the disk content
		# this will make sure luks crypto will be deleted if FDE was performed previously
		dd if=/dev/zero of="/dev/$disk" bs=100MB count=20

	 	#Before start the LVM,clear the previously created LVM if exist
        	for lvname in $(lvs --noheadings -o lv_name lvmvg)
        	do
			if [ -n "$lvname" ]; then
			    umount -f /dev/lvmvg/${lvname}
                	    lvremove /dev/lvmvg/${lvname} -y
			fi
        	done

                parted -s "/dev/$disk" mklabel gpt mkpart primary 0% 100%
                partprobe
		sync
                if [[ "$disk" == *"nvme"* ]]; then
                    part_number=p
                    disks+=("/dev/${disk}${part_number}1")
                else
                    part_number=""
                    disks+=("/dev/${disk}${part_number}1")
                fi
            done
        fi
	#wipse the crypt luck offset if its created during FDE enabled case
        for disk in "${disks[@]}"
        do
            wipefs -o 0 "$disk"
        done

	#remove previously created lvm if exist
        vgs=$(vgs --noheadings -o vg_name)
        #remove trailing and leading spaces
        vgs=$(echo "$vgs" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
        if [ -n "$vgs" ]; then
            vgremove -f "$vgs"
            echo "successfully deleted the previous lvm"
        fi

        #remove previously created pv if exist
        pvs=$(pvs --noheadings -o pv_name)
        pvs=$(echo "$pvs" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
        if [ -n "$pvs" ]; then
	    for pv in ${pvs[@]}; do
                pvremove -f "$pv"
                echo "successfully deleted the previous pvs"
           done
        fi

	#pv create
	for disk in "${disks[@]}"
	do
    	    if echo "y" | pvcreate "$disk"; then
                echo "Successfuly done pvcreate"
            else
                echo "Failure in pvcreate"
                exit 1
            fi
	done

        if echo "y" | vgcreate lvmvg "${disks[@]}"; then
            echo "Successfuly done vgcreate"
        else
            echo "Failure in vgcreate"
            exit 1
        fi
        vgscan
        vgchange -ay

	if vgchange -ay; then
    	    echo "Successfuly created the logical volume group"
	else
    	    echo "Failure in creating the logical volume group"
	    exit 1
        fi
	echo "creat_lvm_partition done" | tee -a "$SCRIPT_DIR"/$STATUS_FILENAME
    fi
}

install_lvm_on_disk(){
    if grep -q "install_lvm_on_disk done" "$SCRIPT_DIR"/$STATUS_FILENAME; then
		echo "Skipping install_lvm_on_disk"
    else

        echo "lvm setup for secondary disk"
        #check if FDE enabled , if not enabled  do the LVM for the secondary disk
        if [ ! -L /dev/mapper/rootfs_crypt ]; then

            echo "FDE not enabled and starting the LVM creation"
            #check for NVME && SATA disk types , ignore USB and virtual media devices
            disk_list=$(lsblk -o NAME,TYPE,SIZE,RM | grep -i disk | awk '$1 ~ /sd*|nvme*/ {if ($3 !="0B" && $4 !=1)  {print $1}}')
            for disk_name in ${disk_list[@]}
            do
                #add to disk_list only if its nvme or sata
                if [[ "$disk_name" == *"nvme"* ]] || [[ "$disk_name" = *"sd"* ]]; then
                    final_disk_list+=("$disk_name")
                else
                    continue;
                fi
            done

            rootfs=$(df / | awk 'NR==2 {print $1}')
            if [[ "$rootfs" == *"nvme"* ]]; then
                os_disk=$(echo "$rootfs" | grep -oE 'nvme[0-9]+n[0-9]+' | head -n 1)
		part_num=$(echo "$rootfs" | awk 'NR==1 {print $1}' | awk -F'p' '{print $2}')
            fi
            if [[ "$rootfs" == *"sd"* ]]; then
                 os_disk=$(echo "$rootfs" | grep -oE 'sd[a-z]+' | head -n 1)
		 part_num=$(echo "$rootfs" | awk 'NR==1 {print $1}' | sed 's/[^0-9]*//g')
            fi

            num_disks=${#final_disk_list[@]}

	    #single Hard disk with rootfs
            if [ "$num_disks" -eq 1 ]; then
                echo "found single hard disk && create LVM on the Primary harddisk"
		creat_lvm_partition "$num_disks" "${os_disk[@]}"

            #multiple Hard disks
            elif [ "$num_disks" -ge 2 ]; then
	        echo "found more than 1 disk for LVM creation"
                #create lvm for the secondary disk
                for lvm_disk in "${final_disk_list[@]}"
                do
                    #skip for rootfs disk
                    if [ "$lvm_disk" == "$os_disk" ]; then
                        continue;
                    #other than OS disks
                    else
                        lvm_disks+=("$lvm_disk")
                    fi
                done
                #disk with no rootfs and can be used for the LVM creation
                creat_lvm_partition "$num_disks" "${lvm_disks[@]}"
		#check if rootfs size increased max or not, if not increase it
		rootfs_size=$(df / | awk 'NR==2 {gsub("%", "", $5); print $5}')
		if [ "$rootfs_size" -ge 20 ]; then
			growpart "/dev/${os_disk}" "$part_num"
			resize2fs "/dev/${os_disk}$part_num"
		fi
            else
                echo "No valid disk found on the system for LVM creation"
                exit 1
            fi
            echo "install_lvm_on_disk done" | tee -a "$SCRIPT_DIR"/$STATUS_FILENAME
	else
	    echo "FDE enabled and skipping LVM creation"
        fi
    fi
}

install_lvm_on_disk 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
install_dependencies 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
enable_kernel_config 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
install_syslogrotate_job 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
echo "Install agents..........................."
install_node_agent 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
install_other_agents 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
install_syslogrotate_ufw 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
disable_unattended_upgrade 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
echo "Installation completed Successfuly on EdgeNode!!!!" > /dev/tty1
echo "Installation done" > "$SCRIPT_DIR"/.base_pkg_install_done
