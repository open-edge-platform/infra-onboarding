// SPDX-FileCopyrightText: (C) 2022 Intel Corporation
// SPDX-License-Identifier: LicenseRef-Intel
// Imported groovy libraries:
// 1cicd: ["intel-innersource/applications.devops.jenkins.jenkins-common-pipelines"]

def branchPattern = /(main|release-[0-9].[0-9]|release-[0-9][0-9].[0-9][0-9]|release-[0-9][0-9].[0-9]|release-[0-9].[0-9][0-9])/

def getEnvFromBranch(branch) {
    if (branch ==~ /main/) {
        return 'protex'
    }
    else {
        return 'virus,trivy'
        // PR checks can be extended with checkmarx, bandit, snyk but source code has to available for them to pass. Protex should be kept only at branch level scanning.
    }
}

pipeline {
	agent none
    triggers {
        // nightly build between 23:00 a.m. - 23:59 a.m.(Etc/UTC), Monday - Friday:
        cron(env.BRANCH_NAME =~ /main/ ? 'H 23 * * 1-5' : '')
    }
    stages {
		stage('OIE Host') {
			agent {
				label 'oie_maestro_spot'
			}
			environment {
				GIT_SHORT_URL=env.GIT_URL.split('/')[4].toString().replaceAll('.git','')
				SUB_PROJECT_NAME='maestro-i'          //update the sub project name based on your repo, eg:maestro-a/i, springboard
				authorEmail = sh (script: 'git --no-pager show -s --format=\'%ae\'',returnStdout: true).trim()
			}
			stages {		
				stage('Scan Source') {
						parallel {
							stage('Scan Virus, Checkmarx, Protex, Trivy'){
								environment {
									PROJECT_NAME                 = "oie-${GIT_SHORT_URL}"
									SCANNERS                     = getEnvFromBranch(env.BRANCH_NAME)

									// publishArtifacts details
									ARTIFACT_RETENTION_PERIOD    = ''
									ARTIFACTORY_URL              = 'https://ubit-artifactory-or.intel.com/artifactory'
									ARTIFACTS_REPO               = "one-intel-edge-or-local/${SUB_PROJECT_NAME}"
									PUBLISH_TO_ARTIFACTORY       = true
									ARTIFACTORY_CREDENTIAL_ID    = 'sys_oie_devops_ubit-artifactory-or.intel.com'
									ARTIFACTORY_BYPASS_PROXY     = true

									CHECKMARX_FORCE_SCAN         = true
									CHECKMARX_USER_AUTH_DOMAIN   = 'GER'

									PROTEX_PROJECT_NAME          = "${GIT_SHORT_URL}"

									VIRUS_SCAN_DIR               = "."
						SNYK_PRE_SCAN_SCRIPT = '''\
										env
									echo 'Adding GitHub credentials to ~/.netrc'
										umask 077
										echo 'machine github.com' >> ~/.netrc
										echo "login $GITHUB_USER" >> ~/.netrc
										echo "password $GITHUB_TOKEN" >> ~/.netrc
										echo 'machine api.github.com' >> ~/.netrc
										echo "login $GITHUB_USER" >> ~/.netrc
										echo "password $GITHUB_TOKEN" >> ~/.netrc
										umask 022
									'''.stripIndent()
								}
								when {
									anyOf { branch 'main'; branch 'iaas-*-*'; branch 'release-*'; changeRequest();}
								}
								steps {
									withCredentials([
										usernamePassword(
											credentialsId: 'sys_oie_devops_github_api',
											usernameVariable: 'GITHUB_USER',
											passwordVariable: 'GITHUB_TOKEN',
										),
									]){
									rbheStaticCodeScan()
									}
								}
							}
							// stage('Trivy config scan') {
							// 	when {
							// 		anyOf { branch 'main'; branch 'iaas-*-*'; branch 'release-*'; changeRequest();}
							// 	}
							// 	steps {
							// 		script {
							// 			catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
							// 				sh '''
							// 				trivy conf --exit-code 1 --severity CRITICAL . 2>&1 > trivy_conf.log
							// 				'''
							// 			}
							// 			sh '''
							// 			[ -d "artifacts" ] && mkdir artifacts/Trivy_conf || mkdir -p artifacts/Trivy_conf
							// 			mv trivy_conf.log artifacts/Trivy_conf
							// 			'''
							// 			archiveArtifacts artifacts: 'artifacts/Trivy_conf/*.log',
							// 			fingerprint: true,
							// 			onlyIfSuccessful: false
							// 			publishArtifacts([artifactsRepo: 'one-intel-edge-or-local/${SUB_PROJECT_NAME}',
							// 						credentialId: 'sys_oie_devops_ubit-artifactory-or.intel.com',
							// 						bypassProxy: true])
							// 		}
							// 	}
							// }
						}
					}

				stage('Setup') {
						steps {
							withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'sys_oie_devops_github_api',usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']])
							{
								sh '''
								echo "Setup Build environment"
								echo "machine github.com" >> $HOME/.netrc
								echo "    login not-used" >> $HOME/.netrc
								echo "    password $PASSWORD" >> $HOME/.netrc
								echo "machine api.github.com" >> $HOME/.netrc
								echo "    login not-used" >> $HOME/.netrc
								echo "    password $PASSWORD" >> $HOME/.netrc
								'''
							}
						}
				}
				// This stage is required for service/agent repos only
				// Please remove it for chart repos
			
				// stage('Version Check') {
				// 	steps {
				// 		echo "Check if its a valid code version"
				// 		sh '''
				// 		/opt/ci/version-check.sh
				// 		'''
				// 	}        
				// }
				stage('Lint Code') {
					steps {
						sh '''
						echo "Linting the code"
						make lint-ci
						'''
					}
				}
				stage('Build-Hookos') {
					steps {
					    script { 	
						withCredentials([
							usernamePassword(
								credentialsId: 'sys_oie_devops_github_api',
								usernameVariable: 'GITHUB_USER',
								passwordVariable: 'GITHUB_TOKEN',
							),
						]) {
						sh '''
						git clone https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/intel-innersource/frameworks.edge.one-intel-edge.edge-node.os-provision.tinker-actions.git tinker-actions
						'''
						}
						sh """
      					echo 'http_proxy=http://proxy-dmz.intel.com:911' >> config
						echo 'https_proxy=http://proxy-dmz.intel.com:911' >> config
						echo 'ftp_proxy=http://proxy-dmz.intel.com:911' >> config
						echo 'socks_proxy=socks://proxy-dmz.intel.com:1080' >> config
						echo 'no_proxy=localhost,*.intel.com,*intel.com,192.168.0.0/16,172.16.0.0/12,127.0.0.0/8,10.0.0.0/8,/var/run/docker.sock' >> config
						echo 'nameserver=(10.248.2.1 172.30.90.4 10.223.45.36)' >> config
						echo 'keycloak_url=keycloak.validation.maestro.intel.com' >> config
						"""
						def tag = sh(script: 'cat tinker-actions/VERSION', returnStdout: true).trim()
						images_list = []
						images = sh(script: "cat patch.p | grep -i '+.*image:.*:.*\$' | awk -F: '{print \$2}'", returnStdout: true).trim()
						images_list = images.split("\n")
						for (image in images_list) {
						    image = image.trim()
						    if (!image.contains('/')) {
						        sh """
        						sed -i "s+${image}+amr-registry.caas.intel.com/one-intel-edge/edge-node/tinker-actions/${image}+g" patch.p
        						docker pull amr-registry.caas.intel.com/one-intel-edge/edge-node/tinker-actions/${image}:${tag}
        						"""
						    } 
						  
						}
						sh """
						docker pull amr-registry.caas.intel.com/one-intel-edge/edge-node/hook-kernel:5.10.85-i225-igc
						docker image tag amr-registry.caas.intel.com/one-intel-edge/edge-node/hook-kernel:5.10.85-i225-igc quay.io/tinkerbell/hook-kernel:5.10.85-e546ea099917c006d1d08fe6b8398101de65cbc7
						eval \$(ssh-agent) > /dev/null
					    make build
						"""
						stash name: "alpine_image", includes: "alpine_image/hook_x86_64.tar.gz"
						stash name: "alpine_image_secureboot", includes: "alpine_image_secureboot/"
					    }
					}
				}
				stage('Push to OCI harbor') {
					when {
						anyOf { branch 'main'; branch 'feature*'; branch 'release*' }
					}
					steps {
						 withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'intel-harbor-credentials',
                                        usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']])
                        		{
							sh '''
							/opt/ci/push-oci-package.sh -f 'alpine_image/hook_x86_64.tar.gz alpine_image_secureboot/*'
							'''
						}
					}
				}
				// stage('Test Code') {
					// steps {
						// echo "Test the code"
						// sh '''
						// make test
						// '''
					// }
				// }

				// stage('Validate clean repo') {
					// steps {
						// sh '''
						// bash -c "diff -u <(echo -n) <(git diff)"
						// '''
					// }
				// }
			
				// This stage is required for service/agent repos only
				// Please remove it for chart repos
				// stage('Version Tag') {
				// 	when {
				// 		anyOf { branch 'main'; branch 'feature*'; branch 'release*' }
				// 	}
				// 	steps {
				// 		withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'sys_oie_devops_github_api',usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']])
				// 			{
				// 				echo "Generate tag if SemVer"
				// 				sh '''
				// 				# Use writable user for git
				// 				echo "machine github.com" >> $HOME/.netrc
				// 				echo "  login not-used" >> $HOME/.netrc
				// 				echo "  password $PASSWORD" >> $HOME/.netrc
				// 				echo "machine api.github.com" >> $HOME/.netrc
				// 				echo "  login not-used" >> $HOME/.netrc
				// 				echo "  password $PASSWORD" >> $HOME/.netrc
				// 				# Tag the version
				// 				/opt/ci/version-tag.sh
				// 				'''
				// 		}
				// 	}
				// }
				// stage ('Scan Containers') {
					// when {
						// anyOf {
							// anyOf { branch 'main'; branch 'iaas-*-*'; branch 'release-*'; changeRequest() }
						// }
					// }
					// environment {
						// PROJECT_NAME                 = "oie-${GIT_SHORT_URL}"
						// SCANNERS                     = 'trivy'

						// TRIVY_SEVERITY_THRESHOLD_CVE = 'CRITICAL'
					// }
					// steps {
						// script {
							// DOCKER_IMAGES=sh(script: '''
							// docker images --format '{{.Repository}}:{{.Tag}}' | grep -v -e "rrp-devops" -e "rbhe-public" -e "earthly/buildkitd" | awk 'BEGIN {ORS=","} {print $0} END {if (NR) print "\\n"}' | sed 's/,$//'
							// ''', returnStdout: true).trim()

							// sh """
							// echo $DOCKER_IMAGES
							// """

							// withEnv(["TRIVY_TARGET_DOCKER_IMAGE=${DOCKER_IMAGES}"]) {
							// rbheStaticCodeScan()
							// }
						// }
					// }
				// }
				

				// stage('Docker Publish') {
					// when {
						// anyOf { branch 'main'; branch 'iaas-*-*'; branch 'release-*'; expression{ common.isMatchingCommit(/.*\[push-docker-image\]*/) }; }
					// }
					// steps {
						// withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'intel-harbor-credentials', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']])
						// {
							// sh '''
							// docker login -u $USERNAME -p $PASSWORD https://amr-registry.caas.intel.com
							// make docker-push
							// docker logout
							// '''
						// }
					// }
				// }

				// stage('Version dev') {
				// 	when {
				// 		anyOf { branch 'main'; branch 'iaas-*-*'; branch 'release-*'; }
				// 	}
				// 	steps {
				// 		withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'sys_oie_devops_github_api',usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']])
				// 		{
				// 		echo "Start new development cycle if needed"
				// 		sh '''
				// 		# Use writable user for git
				// 		echo "machine github.com" >> $HOME/.netrc
				// 		echo "  login not-used" >> $HOME/.netrc
				// 		echo "  password $PASSWORD" >> $HOME/.netrc
				// 		echo "machine api.github.com" >> $HOME/.netrc
				// 		echo "  login not-used" >> $HOME/.netrc
				// 		echo "  password $PASSWORD" >> $HOME/.netrc

				// 		# Append -dev
				// 		REVIEWER_1="raphaelvrosa" REVIEWER_2="daniele-moro" /opt/ci/version-dev.sh
				// 		'''
				// 		}
				// 	}
				// }

				// stage('Artifact') {
				// 	steps {
				// 		sh '''
				// 		tar -zcvf "${GIT_SHORT_URL}.tar.gz" *
				// 		'''
				// 		archiveArtifacts artifacts: '**/*.tar.gz',
				// 		allowEmptyArchive: true,
				// 		fingerprint: true,
				// 		onlyIfSuccessful: true
				// 		sh '''
				// 			[ -d "artifacts" ] || mkdir -p artifacts
				// 			mv  *.tar.gz artifacts/
				// 		'''
				// 		publishArtifacts([artifactsRepo: "one-intel-edge-or-local/${SUB_PROJECT_NAME}",
				// 						  credentialId: 'sys_oie_devops_ubit-artifactory-or.intel.com',
				// 						  bypassProxy: true])
				// 	}
				// }
			}
			post {
					always {
						jcpSummaryReport()
						cleanWs()
					}
					failure {
						script {
							def currentBranch = env.BRANCH_NAME
							if ((currentBranch ==~ env.branchPattern) && authorEmail?.contains('.intel')) {
								emailext(
								subject: "Build failed on main branch for ${GIT_SHORT_URL}",
								body: "The build on the main branch failed. Please check the logs for more details. Your PR was the last change, this is why you're receiving this email",
								to: authorEmail,
								attachLog: true
								)
							}
						}
					}
			}
		}
				
		stage('Execute in file server') {
            agent {
                label 'edgenode_internal_deb_file_server'
            }
            when {
        	anyOf { branch 'main'; branch 'release-*' }
            }
            steps {
                script {
					unstash 'alpine_image'
					unstash 'alpine_image_secureboot'
				
                    def repoVersion = sh(script: 'cat VERSION', returnStdout: true).trim()
                    def commitId = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    echo "repoVersion: ${repoVersion}"
                    if (!repoVersion.contains('-dev')) {
                        // Perform mkdir and cp steps only if repoVersion doesn't contain '-dev'
                        sh """
                            [ -d /srv/repos/apt/debian/fm_en_artifacts/hook-os/${repoVersion}/alpine_image ] || mkdir -p /srv/repos/apt/debian/publish/fm_en_artifacts/hook-os/${repoVersion}/alpine_image/
							[ -d /srv/repos/apt/debian/fm_en_artifacts/hook-os/${repoVersion}/alpine_image_secureboot ] || mkdir -p /srv/repos/apt/debian/publish/fm_en_artifacts/hook-os/${repoVersion}/alpine_image_secureboot/
                            cp ${WORKSPACE}/alpine_image/hook_x86_64.tar.gz /srv/repos/apt/debian/publish/fm_en_artifacts/hook-os/${repoVersion}/alpine_image/hook_x86_64.tar.gz
                            cp -R ${WORKSPACE}/alpine_image_secureboot/* /srv/repos/apt/debian/publish/fm_en_artifacts/hook-os/${repoVersion}/alpine_image_secureboot/
                        """
                    } else {
                        sh """
                            [ -d /srv/repos/apt/debian/fm_en_artifacts/hook-os/${repoVersion}-${commitId}/alpine_image ] || mkdir -p /srv/repos/apt/debian/publish/fm_en_artifacts/hook-os/${repoVersion}-${commitId}/alpine_image/
							[ -d /srv/repos/apt/debian/fm_en_artifacts/hook-os/${repoVersion}-${commitId}/alpine_image_secureboot ] || mkdir -p /srv/repos/apt/debian/publish/fm_en_artifacts/hook-os/${repoVersion}-${commitId}/alpine_image_secureboot/
                            cp ${WORKSPACE}/alpine_image/hook_x86_64.tar.gz /srv/repos/apt/debian/publish/fm_en_artifacts/hook-os/${repoVersion}-${commitId}/alpine_image/hook_x86_64.tar.gz
                            cp -R ${WORKSPACE}/alpine_image_secureboot/* /srv/repos/apt/debian/publish/fm_en_artifacts/hook-os/${repoVersion}-${commitId}/alpine_image_secureboot/
                        """
                    }
                }
            }
        }
    }
}
