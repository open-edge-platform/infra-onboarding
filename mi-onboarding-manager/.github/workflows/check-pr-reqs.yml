---
# SPDX-FileCopyrightText: (C) 2023 Intel Corporation
# SPDX-License-Identifier: LicenseRef-Intel

on:
  pull_request:
    types:
      - labeled
      - opened
      - synchronize
      - reopened
      - edited
jobs:
  Check-PR-Reqs:
    runs-on: generic
    steps:
      - name: Check for any Jira IDs from PR description
        id: matched_jira_ids
        env:
          PR_BODY: ${{ github.event.pull_request.body }}
        if: ${{ ! contains(github.event.pull_request.labels.*.name, 'skip-jira-validation') }}
        run: |
          # Match [A-Z0-9]-[0-9] as long as they have no [a-zA-Z] prefix or suffix
          regex='(?<![a-zA-Z])[A-Z0-9]+?-[0-9]+(?![a-zA-Z])'
          # For regex capture groups we need to use -P (perl regex flavor)
          jira_ids=$(echo "${PR_BODY}" | grep -Po "${regex}" || true)
          if [ -z "$jira_ids" ]; then
            echo "++++++++++++++++++++++++++++++"
            echo "ERROR:"
            echo "Jira ID is not found in the PR description. Add the valid Jira ID in PR Description."
            echo "To skip this check, add the label skip-jira-validation to the PR to skip this check."
            echo "++++++++++++++++++++++++++++++"
            exit 1
          fi
          jira_ids=$(echo $jira_ids | tr '\n' ' ')
          echo "jira_ids=$jira_ids" >> $GITHUB_OUTPUT
          echo "Jira IDs Found: $jira_ids"
      - name: Validate Jira IDs using the Jira service
        id: validate_jira_ids
        env:
          SYS_OIE_DEVOPS_JIRAAPI: ${{ secrets.SYS_OIE_DEVOPS_JIRAAPI }}
        if: ${{ ! contains(github.event.pull_request.labels.*.name, 'skip-jira-validation') }}
        run: |
          failed_ids=""
          for id in ${{ steps.matched_jira_ids.outputs.jira_ids }}; do
            response=$(curl -vv -s -k \
              -X GET verify=false \
              -H "Authorization: Bearer ${SYS_OIE_DEVOPS_JIRAAPI}" \
              -H "Content-Type: application/json" \
              "https://jira.devtools.intel.com/rest/api/latest/issue/${id}")
            echo "Checking for Jira ID ${id}"

            if [[ "$response" == *"errorMessages"* ]]; then
              failed_ids="${failed_ids} ${id}"
            else
              echo "Jira ID ${id} exists"
            fi
          done

          if [[ -n "$failed_ids" ]]; then
            echo "failed_ids=$failed_ids" >> $GITHUB_OUTPUT
            echo "++++++++++++++++++++++++++++++"
            echo "ERROR:"
            echo "Jira ID(s)${failed_ids} specified in PR description does not exist. Use a valid Jira ID."
            echo "To skip this check, add the label skip-jira-validation to the PR to skip this check."
            echo "++++++++++++++++++++++++++++++"
            exit 1
          fi
      - name: Post a comment on PR if Jira ID validation fails
        id: post_comment
        env:
          SYS_OIE_DEVOPS_GITHUBAPI_TOKEN: ${{ secrets.SYS_OIE_DEVOPS_GITHUBAPI_TOKEN }}
        if: ${{ success() || failure() }} && ${{ ! contains(github.event.pull_request.labels.*.name, 'skip-jira-validation') }}
        run: |
          if [[ -n "${{ steps.validate_jira_ids.outputs.failed_ids }}" ]]; then
            curl -L -s -k \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Token ${SYS_OIE_DEVOPS_GITHUBAPI_TOKEN}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              ${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.number }}/comments \
              -d '{"body":"Jira ID(s)${{ steps.validate_jira_ids.outputs.failed_ids }} specified in PR description does not exist, use valid Jira IDs only. To skip this check, add the label ${{ github.server_url }}/${{ github.repository }}/labels/skip-jira-validation to the PR to skip this check."}'
          fi
          echo "Jira ID validation completed successfully"
