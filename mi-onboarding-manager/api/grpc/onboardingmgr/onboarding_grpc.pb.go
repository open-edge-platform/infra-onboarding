// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: onboarding.proto

package onboardingmgr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NodeArtifactServiceNB_CreateArtifacts_FullMethodName     = "/onboardingmgr.NodeArtifactServiceNB/CreateArtifacts"
	NodeArtifactServiceNB_GetArtifacts_FullMethodName        = "/onboardingmgr.NodeArtifactServiceNB/GetArtifacts"
	NodeArtifactServiceNB_UpdateArtifactsById_FullMethodName = "/onboardingmgr.NodeArtifactServiceNB/UpdateArtifactsById"
	NodeArtifactServiceNB_DeleteArtifacts_FullMethodName     = "/onboardingmgr.NodeArtifactServiceNB/DeleteArtifacts"
	NodeArtifactServiceNB_CreateNodes_FullMethodName         = "/onboardingmgr.NodeArtifactServiceNB/CreateNodes"
	NodeArtifactServiceNB_GetNodes_FullMethodName            = "/onboardingmgr.NodeArtifactServiceNB/GetNodes"
	NodeArtifactServiceNB_UpdateNodes_FullMethodName         = "/onboardingmgr.NodeArtifactServiceNB/UpdateNodes"
	NodeArtifactServiceNB_DeleteNodes_FullMethodName         = "/onboardingmgr.NodeArtifactServiceNB/DeleteNodes"
)

// NodeArtifactServiceNBClient is the client API for NodeArtifactServiceNB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeArtifactServiceNBClient interface {
	CreateArtifacts(ctx context.Context, in *ArtifactRequest, opts ...grpc.CallOption) (*ArtifactResponse, error)
	GetArtifacts(ctx context.Context, in *ArtifactRequest, opts ...grpc.CallOption) (*ArtifactResponse, error)
	UpdateArtifactsById(ctx context.Context, in *ArtifactRequest, opts ...grpc.CallOption) (*ArtifactResponse, error)
	DeleteArtifacts(ctx context.Context, in *ArtifactRequest, opts ...grpc.CallOption) (*ArtifactResponse, error)
	CreateNodes(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	GetNodes(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	UpdateNodes(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	DeleteNodes(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error)
}

type nodeArtifactServiceNBClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeArtifactServiceNBClient(cc grpc.ClientConnInterface) NodeArtifactServiceNBClient {
	return &nodeArtifactServiceNBClient{cc}
}

func (c *nodeArtifactServiceNBClient) CreateArtifacts(ctx context.Context, in *ArtifactRequest, opts ...grpc.CallOption) (*ArtifactResponse, error) {
	out := new(ArtifactResponse)
	err := c.cc.Invoke(ctx, NodeArtifactServiceNB_CreateArtifacts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeArtifactServiceNBClient) GetArtifacts(ctx context.Context, in *ArtifactRequest, opts ...grpc.CallOption) (*ArtifactResponse, error) {
	out := new(ArtifactResponse)
	err := c.cc.Invoke(ctx, NodeArtifactServiceNB_GetArtifacts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeArtifactServiceNBClient) UpdateArtifactsById(ctx context.Context, in *ArtifactRequest, opts ...grpc.CallOption) (*ArtifactResponse, error) {
	out := new(ArtifactResponse)
	err := c.cc.Invoke(ctx, NodeArtifactServiceNB_UpdateArtifactsById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeArtifactServiceNBClient) DeleteArtifacts(ctx context.Context, in *ArtifactRequest, opts ...grpc.CallOption) (*ArtifactResponse, error) {
	out := new(ArtifactResponse)
	err := c.cc.Invoke(ctx, NodeArtifactServiceNB_DeleteArtifacts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeArtifactServiceNBClient) CreateNodes(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, NodeArtifactServiceNB_CreateNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeArtifactServiceNBClient) GetNodes(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, NodeArtifactServiceNB_GetNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeArtifactServiceNBClient) UpdateNodes(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, NodeArtifactServiceNB_UpdateNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeArtifactServiceNBClient) DeleteNodes(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, NodeArtifactServiceNB_DeleteNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeArtifactServiceNBServer is the server API for NodeArtifactServiceNB service.
// All implementations must embed UnimplementedNodeArtifactServiceNBServer
// for forward compatibility
type NodeArtifactServiceNBServer interface {
	CreateArtifacts(context.Context, *ArtifactRequest) (*ArtifactResponse, error)
	GetArtifacts(context.Context, *ArtifactRequest) (*ArtifactResponse, error)
	UpdateArtifactsById(context.Context, *ArtifactRequest) (*ArtifactResponse, error)
	DeleteArtifacts(context.Context, *ArtifactRequest) (*ArtifactResponse, error)
	CreateNodes(context.Context, *NodeRequest) (*NodeResponse, error)
	GetNodes(context.Context, *NodeRequest) (*NodeResponse, error)
	UpdateNodes(context.Context, *NodeRequest) (*NodeResponse, error)
	DeleteNodes(context.Context, *NodeRequest) (*NodeResponse, error)
	mustEmbedUnimplementedNodeArtifactServiceNBServer()
}

// UnimplementedNodeArtifactServiceNBServer must be embedded to have forward compatible implementations.
type UnimplementedNodeArtifactServiceNBServer struct {
}

func (UnimplementedNodeArtifactServiceNBServer) CreateArtifacts(context.Context, *ArtifactRequest) (*ArtifactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArtifacts not implemented")
}
func (UnimplementedNodeArtifactServiceNBServer) GetArtifacts(context.Context, *ArtifactRequest) (*ArtifactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtifacts not implemented")
}
func (UnimplementedNodeArtifactServiceNBServer) UpdateArtifactsById(context.Context, *ArtifactRequest) (*ArtifactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArtifactsById not implemented")
}
func (UnimplementedNodeArtifactServiceNBServer) DeleteArtifacts(context.Context, *ArtifactRequest) (*ArtifactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArtifacts not implemented")
}
func (UnimplementedNodeArtifactServiceNBServer) CreateNodes(context.Context, *NodeRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNodes not implemented")
}
func (UnimplementedNodeArtifactServiceNBServer) GetNodes(context.Context, *NodeRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (UnimplementedNodeArtifactServiceNBServer) UpdateNodes(context.Context, *NodeRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodes not implemented")
}
func (UnimplementedNodeArtifactServiceNBServer) DeleteNodes(context.Context, *NodeRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNodes not implemented")
}
func (UnimplementedNodeArtifactServiceNBServer) mustEmbedUnimplementedNodeArtifactServiceNBServer() {}

// UnsafeNodeArtifactServiceNBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeArtifactServiceNBServer will
// result in compilation errors.
type UnsafeNodeArtifactServiceNBServer interface {
	mustEmbedUnimplementedNodeArtifactServiceNBServer()
}

func RegisterNodeArtifactServiceNBServer(s grpc.ServiceRegistrar, srv NodeArtifactServiceNBServer) {
	s.RegisterService(&NodeArtifactServiceNB_ServiceDesc, srv)
}

func _NodeArtifactServiceNB_CreateArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactServiceNBServer).CreateArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeArtifactServiceNB_CreateArtifacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactServiceNBServer).CreateArtifacts(ctx, req.(*ArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeArtifactServiceNB_GetArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactServiceNBServer).GetArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeArtifactServiceNB_GetArtifacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactServiceNBServer).GetArtifacts(ctx, req.(*ArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeArtifactServiceNB_UpdateArtifactsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactServiceNBServer).UpdateArtifactsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeArtifactServiceNB_UpdateArtifactsById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactServiceNBServer).UpdateArtifactsById(ctx, req.(*ArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeArtifactServiceNB_DeleteArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactServiceNBServer).DeleteArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeArtifactServiceNB_DeleteArtifacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactServiceNBServer).DeleteArtifacts(ctx, req.(*ArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeArtifactServiceNB_CreateNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactServiceNBServer).CreateNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeArtifactServiceNB_CreateNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactServiceNBServer).CreateNodes(ctx, req.(*NodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeArtifactServiceNB_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactServiceNBServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeArtifactServiceNB_GetNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactServiceNBServer).GetNodes(ctx, req.(*NodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeArtifactServiceNB_UpdateNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactServiceNBServer).UpdateNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeArtifactServiceNB_UpdateNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactServiceNBServer).UpdateNodes(ctx, req.(*NodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeArtifactServiceNB_DeleteNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactServiceNBServer).DeleteNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeArtifactServiceNB_DeleteNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactServiceNBServer).DeleteNodes(ctx, req.(*NodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeArtifactServiceNB_ServiceDesc is the grpc.ServiceDesc for NodeArtifactServiceNB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeArtifactServiceNB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "onboardingmgr.NodeArtifactServiceNB",
	HandlerType: (*NodeArtifactServiceNBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateArtifacts",
			Handler:    _NodeArtifactServiceNB_CreateArtifacts_Handler,
		},
		{
			MethodName: "GetArtifacts",
			Handler:    _NodeArtifactServiceNB_GetArtifacts_Handler,
		},
		{
			MethodName: "UpdateArtifactsById",
			Handler:    _NodeArtifactServiceNB_UpdateArtifactsById_Handler,
		},
		{
			MethodName: "DeleteArtifacts",
			Handler:    _NodeArtifactServiceNB_DeleteArtifacts_Handler,
		},
		{
			MethodName: "CreateNodes",
			Handler:    _NodeArtifactServiceNB_CreateNodes_Handler,
		},
		{
			MethodName: "GetNodes",
			Handler:    _NodeArtifactServiceNB_GetNodes_Handler,
		},
		{
			MethodName: "UpdateNodes",
			Handler:    _NodeArtifactServiceNB_UpdateNodes_Handler,
		},
		{
			MethodName: "DeleteNodes",
			Handler:    _NodeArtifactServiceNB_DeleteNodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "onboarding.proto",
}

const (
	OnBoardingEB_StartOnboarding_FullMethodName = "/onboardingmgr.OnBoardingEB/StartOnboarding"
)

// OnBoardingEBClient is the client API for OnBoardingEB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OnBoardingEBClient interface {
	// Initialize connection with node
	StartOnboarding(ctx context.Context, in *OnboardingRequest, opts ...grpc.CallOption) (*OnboardingResponse, error)
}

type onBoardingEBClient struct {
	cc grpc.ClientConnInterface
}

func NewOnBoardingEBClient(cc grpc.ClientConnInterface) OnBoardingEBClient {
	return &onBoardingEBClient{cc}
}

func (c *onBoardingEBClient) StartOnboarding(ctx context.Context, in *OnboardingRequest, opts ...grpc.CallOption) (*OnboardingResponse, error) {
	out := new(OnboardingResponse)
	err := c.cc.Invoke(ctx, OnBoardingEB_StartOnboarding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnBoardingEBServer is the server API for OnBoardingEB service.
// All implementations must embed UnimplementedOnBoardingEBServer
// for forward compatibility
type OnBoardingEBServer interface {
	// Initialize connection with node
	StartOnboarding(context.Context, *OnboardingRequest) (*OnboardingResponse, error)
	mustEmbedUnimplementedOnBoardingEBServer()
}

// UnimplementedOnBoardingEBServer must be embedded to have forward compatible implementations.
type UnimplementedOnBoardingEBServer struct {
}

func (UnimplementedOnBoardingEBServer) StartOnboarding(context.Context, *OnboardingRequest) (*OnboardingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartOnboarding not implemented")
}
func (UnimplementedOnBoardingEBServer) mustEmbedUnimplementedOnBoardingEBServer() {}

// UnsafeOnBoardingEBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OnBoardingEBServer will
// result in compilation errors.
type UnsafeOnBoardingEBServer interface {
	mustEmbedUnimplementedOnBoardingEBServer()
}

func RegisterOnBoardingEBServer(s grpc.ServiceRegistrar, srv OnBoardingEBServer) {
	s.RegisterService(&OnBoardingEB_ServiceDesc, srv)
}

func _OnBoardingEB_StartOnboarding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnboardingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnBoardingEBServer).StartOnboarding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnBoardingEB_StartOnboarding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnBoardingEBServer).StartOnboarding(ctx, req.(*OnboardingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OnBoardingEB_ServiceDesc is the grpc.ServiceDesc for OnBoardingEB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OnBoardingEB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "onboardingmgr.OnBoardingEB",
	HandlerType: (*OnBoardingEBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartOnboarding",
			Handler:    _OnBoardingEB_StartOnboarding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "onboarding.proto",
}
