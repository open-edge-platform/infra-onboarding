// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: inventorymgr_nb.proto

package onboardingmgr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodeArtifactServiceNBClient is the client API for NodeArtifactServiceNB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeArtifactServiceNBClient interface {
	CreateArtifacts(ctx context.Context, in *ArtifactRequest, opts ...grpc.CallOption) (*ArtifactResponse, error)
	GetArtifacts(ctx context.Context, in *ArtifactRequest, opts ...grpc.CallOption) (*ArtifactResponse, error)
	GetArtifactsById(ctx context.Context, in *ArtifactRequest, opts ...grpc.CallOption) (*ArtifactResponse, error)
	UpdateArtifactsById(ctx context.Context, in *ArtifactRequest, opts ...grpc.CallOption) (*ArtifactResponse, error)
	DeleteArtifacts(ctx context.Context, in *ArtifactRequest, opts ...grpc.CallOption) (*ArtifactResponse, error)
	DeleteArtifactsById(ctx context.Context, in *ArtifactRequest, opts ...grpc.CallOption) (*ArtifactResponse, error)
	CreateProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error)
	GetProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error)
	UpdateProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error)
	DeleteProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error)
	CreateNodes(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	GetNodes(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	GetNodesById(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	UpdateNodesbyId(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	DeleteNodes(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	DeleteNodesById(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	UpdateManagerStatusById(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	UpdateAvailableById(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	UpdateOnboardingStatus(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	CreateGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupResponse, error)
	GetGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupResponse, error)
	UpdateGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupResponse, error)
	DeleteGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupResponse, error)
}

type nodeArtifactServiceNBClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeArtifactServiceNBClient(cc grpc.ClientConnInterface) NodeArtifactServiceNBClient {
	return &nodeArtifactServiceNBClient{cc}
}

func (c *nodeArtifactServiceNBClient) CreateArtifacts(ctx context.Context, in *ArtifactRequest, opts ...grpc.CallOption) (*ArtifactResponse, error) {
	out := new(ArtifactResponse)
	err := c.cc.Invoke(ctx, "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/CreateArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeArtifactServiceNBClient) GetArtifacts(ctx context.Context, in *ArtifactRequest, opts ...grpc.CallOption) (*ArtifactResponse, error) {
	out := new(ArtifactResponse)
	err := c.cc.Invoke(ctx, "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/GetArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeArtifactServiceNBClient) GetArtifactsById(ctx context.Context, in *ArtifactRequest, opts ...grpc.CallOption) (*ArtifactResponse, error) {
	out := new(ArtifactResponse)
	err := c.cc.Invoke(ctx, "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/GetArtifactsById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeArtifactServiceNBClient) UpdateArtifactsById(ctx context.Context, in *ArtifactRequest, opts ...grpc.CallOption) (*ArtifactResponse, error) {
	out := new(ArtifactResponse)
	err := c.cc.Invoke(ctx, "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/UpdateArtifactsById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeArtifactServiceNBClient) DeleteArtifacts(ctx context.Context, in *ArtifactRequest, opts ...grpc.CallOption) (*ArtifactResponse, error) {
	out := new(ArtifactResponse)
	err := c.cc.Invoke(ctx, "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/DeleteArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeArtifactServiceNBClient) DeleteArtifactsById(ctx context.Context, in *ArtifactRequest, opts ...grpc.CallOption) (*ArtifactResponse, error) {
	out := new(ArtifactResponse)
	err := c.cc.Invoke(ctx, "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/DeleteArtifactsById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeArtifactServiceNBClient) CreateProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error) {
	out := new(ProfileResponse)
	err := c.cc.Invoke(ctx, "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/CreateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeArtifactServiceNBClient) GetProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error) {
	out := new(ProfileResponse)
	err := c.cc.Invoke(ctx, "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/GetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeArtifactServiceNBClient) UpdateProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error) {
	out := new(ProfileResponse)
	err := c.cc.Invoke(ctx, "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/UpdateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeArtifactServiceNBClient) DeleteProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error) {
	out := new(ProfileResponse)
	err := c.cc.Invoke(ctx, "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/DeleteProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeArtifactServiceNBClient) CreateNodes(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/CreateNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeArtifactServiceNBClient) GetNodes(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/GetNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeArtifactServiceNBClient) GetNodesById(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/GetNodesById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeArtifactServiceNBClient) UpdateNodesbyId(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/UpdateNodesbyId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeArtifactServiceNBClient) DeleteNodes(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/DeleteNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeArtifactServiceNBClient) DeleteNodesById(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/DeleteNodesById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeArtifactServiceNBClient) UpdateManagerStatusById(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/UpdateManagerStatusById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeArtifactServiceNBClient) UpdateAvailableById(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/UpdateAvailableById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeArtifactServiceNBClient) UpdateOnboardingStatus(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/UpdateOnboardingStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeArtifactServiceNBClient) CreateGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupResponse, error) {
	out := new(GroupResponse)
	err := c.cc.Invoke(ctx, "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeArtifactServiceNBClient) GetGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupResponse, error) {
	out := new(GroupResponse)
	err := c.cc.Invoke(ctx, "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeArtifactServiceNBClient) UpdateGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupResponse, error) {
	out := new(GroupResponse)
	err := c.cc.Invoke(ctx, "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/UpdateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeArtifactServiceNBClient) DeleteGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupResponse, error) {
	out := new(GroupResponse)
	err := c.cc.Invoke(ctx, "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeArtifactServiceNBServer is the server API for NodeArtifactServiceNB service.
// All implementations must embed UnimplementedNodeArtifactServiceNBServer
// for forward compatibility
type NodeArtifactServiceNBServer interface {
	CreateArtifacts(context.Context, *ArtifactRequest) (*ArtifactResponse, error)
	GetArtifacts(context.Context, *ArtifactRequest) (*ArtifactResponse, error)
	GetArtifactsById(context.Context, *ArtifactRequest) (*ArtifactResponse, error)
	UpdateArtifactsById(context.Context, *ArtifactRequest) (*ArtifactResponse, error)
	DeleteArtifacts(context.Context, *ArtifactRequest) (*ArtifactResponse, error)
	DeleteArtifactsById(context.Context, *ArtifactRequest) (*ArtifactResponse, error)
	CreateProfile(context.Context, *ProfileRequest) (*ProfileResponse, error)
	GetProfile(context.Context, *ProfileRequest) (*ProfileResponse, error)
	UpdateProfile(context.Context, *ProfileRequest) (*ProfileResponse, error)
	DeleteProfile(context.Context, *ProfileRequest) (*ProfileResponse, error)
	CreateNodes(context.Context, *NodeRequest) (*NodeResponse, error)
	GetNodes(context.Context, *NodeRequest) (*NodeResponse, error)
	GetNodesById(context.Context, *NodeRequest) (*NodeResponse, error)
	UpdateNodesbyId(context.Context, *NodeRequest) (*NodeResponse, error)
	DeleteNodes(context.Context, *NodeRequest) (*NodeResponse, error)
	DeleteNodesById(context.Context, *NodeRequest) (*NodeResponse, error)
	UpdateManagerStatusById(context.Context, *NodeRequest) (*NodeResponse, error)
	UpdateAvailableById(context.Context, *NodeRequest) (*NodeResponse, error)
	UpdateOnboardingStatus(context.Context, *NodeRequest) (*NodeResponse, error)
	CreateGroup(context.Context, *GroupRequest) (*GroupResponse, error)
	GetGroup(context.Context, *GroupRequest) (*GroupResponse, error)
	UpdateGroup(context.Context, *GroupRequest) (*GroupResponse, error)
	DeleteGroup(context.Context, *GroupRequest) (*GroupResponse, error)
	mustEmbedUnimplementedNodeArtifactServiceNBServer()
}

// UnimplementedNodeArtifactServiceNBServer must be embedded to have forward compatible implementations.
type UnimplementedNodeArtifactServiceNBServer struct {
}

func (UnimplementedNodeArtifactServiceNBServer) CreateArtifacts(context.Context, *ArtifactRequest) (*ArtifactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArtifacts not implemented")
}
func (UnimplementedNodeArtifactServiceNBServer) GetArtifacts(context.Context, *ArtifactRequest) (*ArtifactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtifacts not implemented")
}
func (UnimplementedNodeArtifactServiceNBServer) GetArtifactsById(context.Context, *ArtifactRequest) (*ArtifactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtifactsById not implemented")
}
func (UnimplementedNodeArtifactServiceNBServer) UpdateArtifactsById(context.Context, *ArtifactRequest) (*ArtifactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArtifactsById not implemented")
}
func (UnimplementedNodeArtifactServiceNBServer) DeleteArtifacts(context.Context, *ArtifactRequest) (*ArtifactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArtifacts not implemented")
}
func (UnimplementedNodeArtifactServiceNBServer) DeleteArtifactsById(context.Context, *ArtifactRequest) (*ArtifactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArtifactsById not implemented")
}
func (UnimplementedNodeArtifactServiceNBServer) CreateProfile(context.Context, *ProfileRequest) (*ProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfile not implemented")
}
func (UnimplementedNodeArtifactServiceNBServer) GetProfile(context.Context, *ProfileRequest) (*ProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedNodeArtifactServiceNBServer) UpdateProfile(context.Context, *ProfileRequest) (*ProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedNodeArtifactServiceNBServer) DeleteProfile(context.Context, *ProfileRequest) (*ProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProfile not implemented")
}
func (UnimplementedNodeArtifactServiceNBServer) CreateNodes(context.Context, *NodeRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNodes not implemented")
}
func (UnimplementedNodeArtifactServiceNBServer) GetNodes(context.Context, *NodeRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (UnimplementedNodeArtifactServiceNBServer) GetNodesById(context.Context, *NodeRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodesById not implemented")
}
func (UnimplementedNodeArtifactServiceNBServer) UpdateNodesbyId(context.Context, *NodeRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodesbyId not implemented")
}
func (UnimplementedNodeArtifactServiceNBServer) DeleteNodes(context.Context, *NodeRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNodes not implemented")
}
func (UnimplementedNodeArtifactServiceNBServer) DeleteNodesById(context.Context, *NodeRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNodesById not implemented")
}
func (UnimplementedNodeArtifactServiceNBServer) UpdateManagerStatusById(context.Context, *NodeRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateManagerStatusById not implemented")
}
func (UnimplementedNodeArtifactServiceNBServer) UpdateAvailableById(context.Context, *NodeRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAvailableById not implemented")
}
func (UnimplementedNodeArtifactServiceNBServer) UpdateOnboardingStatus(context.Context, *NodeRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOnboardingStatus not implemented")
}
func (UnimplementedNodeArtifactServiceNBServer) CreateGroup(context.Context, *GroupRequest) (*GroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedNodeArtifactServiceNBServer) GetGroup(context.Context, *GroupRequest) (*GroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedNodeArtifactServiceNBServer) UpdateGroup(context.Context, *GroupRequest) (*GroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedNodeArtifactServiceNBServer) DeleteGroup(context.Context, *GroupRequest) (*GroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedNodeArtifactServiceNBServer) mustEmbedUnimplementedNodeArtifactServiceNBServer() {}

// UnsafeNodeArtifactServiceNBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeArtifactServiceNBServer will
// result in compilation errors.
type UnsafeNodeArtifactServiceNBServer interface {
	mustEmbedUnimplementedNodeArtifactServiceNBServer()
}

func RegisterNodeArtifactServiceNBServer(s grpc.ServiceRegistrar, srv NodeArtifactServiceNBServer) {
	s.RegisterService(&NodeArtifactServiceNB_ServiceDesc, srv)
}

func _NodeArtifactServiceNB_CreateArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactServiceNBServer).CreateArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/CreateArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactServiceNBServer).CreateArtifacts(ctx, req.(*ArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeArtifactServiceNB_GetArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactServiceNBServer).GetArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/GetArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactServiceNBServer).GetArtifacts(ctx, req.(*ArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeArtifactServiceNB_GetArtifactsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactServiceNBServer).GetArtifactsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/GetArtifactsById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactServiceNBServer).GetArtifactsById(ctx, req.(*ArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeArtifactServiceNB_UpdateArtifactsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactServiceNBServer).UpdateArtifactsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/UpdateArtifactsById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactServiceNBServer).UpdateArtifactsById(ctx, req.(*ArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeArtifactServiceNB_DeleteArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactServiceNBServer).DeleteArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/DeleteArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactServiceNBServer).DeleteArtifacts(ctx, req.(*ArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeArtifactServiceNB_DeleteArtifactsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactServiceNBServer).DeleteArtifactsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/DeleteArtifactsById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactServiceNBServer).DeleteArtifactsById(ctx, req.(*ArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeArtifactServiceNB_CreateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactServiceNBServer).CreateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/CreateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactServiceNBServer).CreateProfile(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeArtifactServiceNB_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactServiceNBServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactServiceNBServer).GetProfile(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeArtifactServiceNB_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactServiceNBServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/UpdateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactServiceNBServer).UpdateProfile(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeArtifactServiceNB_DeleteProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactServiceNBServer).DeleteProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/DeleteProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactServiceNBServer).DeleteProfile(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeArtifactServiceNB_CreateNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactServiceNBServer).CreateNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/CreateNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactServiceNBServer).CreateNodes(ctx, req.(*NodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeArtifactServiceNB_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactServiceNBServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/GetNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactServiceNBServer).GetNodes(ctx, req.(*NodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeArtifactServiceNB_GetNodesById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactServiceNBServer).GetNodesById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/GetNodesById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactServiceNBServer).GetNodesById(ctx, req.(*NodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeArtifactServiceNB_UpdateNodesbyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactServiceNBServer).UpdateNodesbyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/UpdateNodesbyId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactServiceNBServer).UpdateNodesbyId(ctx, req.(*NodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeArtifactServiceNB_DeleteNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactServiceNBServer).DeleteNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/DeleteNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactServiceNBServer).DeleteNodes(ctx, req.(*NodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeArtifactServiceNB_DeleteNodesById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactServiceNBServer).DeleteNodesById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/DeleteNodesById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactServiceNBServer).DeleteNodesById(ctx, req.(*NodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeArtifactServiceNB_UpdateManagerStatusById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactServiceNBServer).UpdateManagerStatusById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/UpdateManagerStatusById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactServiceNBServer).UpdateManagerStatusById(ctx, req.(*NodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeArtifactServiceNB_UpdateAvailableById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactServiceNBServer).UpdateAvailableById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/UpdateAvailableById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactServiceNBServer).UpdateAvailableById(ctx, req.(*NodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeArtifactServiceNB_UpdateOnboardingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactServiceNBServer).UpdateOnboardingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/UpdateOnboardingStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactServiceNBServer).UpdateOnboardingStatus(ctx, req.(*NodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeArtifactServiceNB_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactServiceNBServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactServiceNBServer).CreateGroup(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeArtifactServiceNB_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactServiceNBServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactServiceNBServer).GetGroup(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeArtifactServiceNB_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactServiceNBServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactServiceNBServer).UpdateGroup(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeArtifactServiceNB_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactServiceNBServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactServiceNBServer).DeleteGroup(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeArtifactServiceNB_ServiceDesc is the grpc.ServiceDesc for NodeArtifactServiceNB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeArtifactServiceNB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "infrastructure.edge.iaas.platform.inventorymgr.NodeArtifactServiceNB",
	HandlerType: (*NodeArtifactServiceNBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateArtifacts",
			Handler:    _NodeArtifactServiceNB_CreateArtifacts_Handler,
		},
		{
			MethodName: "GetArtifacts",
			Handler:    _NodeArtifactServiceNB_GetArtifacts_Handler,
		},
		{
			MethodName: "GetArtifactsById",
			Handler:    _NodeArtifactServiceNB_GetArtifactsById_Handler,
		},
		{
			MethodName: "UpdateArtifactsById",
			Handler:    _NodeArtifactServiceNB_UpdateArtifactsById_Handler,
		},
		{
			MethodName: "DeleteArtifacts",
			Handler:    _NodeArtifactServiceNB_DeleteArtifacts_Handler,
		},
		{
			MethodName: "DeleteArtifactsById",
			Handler:    _NodeArtifactServiceNB_DeleteArtifactsById_Handler,
		},
		{
			MethodName: "CreateProfile",
			Handler:    _NodeArtifactServiceNB_CreateProfile_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _NodeArtifactServiceNB_GetProfile_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _NodeArtifactServiceNB_UpdateProfile_Handler,
		},
		{
			MethodName: "DeleteProfile",
			Handler:    _NodeArtifactServiceNB_DeleteProfile_Handler,
		},
		{
			MethodName: "CreateNodes",
			Handler:    _NodeArtifactServiceNB_CreateNodes_Handler,
		},
		{
			MethodName: "GetNodes",
			Handler:    _NodeArtifactServiceNB_GetNodes_Handler,
		},
		{
			MethodName: "GetNodesById",
			Handler:    _NodeArtifactServiceNB_GetNodesById_Handler,
		},
		{
			MethodName: "UpdateNodesbyId",
			Handler:    _NodeArtifactServiceNB_UpdateNodesbyId_Handler,
		},
		{
			MethodName: "DeleteNodes",
			Handler:    _NodeArtifactServiceNB_DeleteNodes_Handler,
		},
		{
			MethodName: "DeleteNodesById",
			Handler:    _NodeArtifactServiceNB_DeleteNodesById_Handler,
		},
		{
			MethodName: "UpdateManagerStatusById",
			Handler:    _NodeArtifactServiceNB_UpdateManagerStatusById_Handler,
		},
		{
			MethodName: "UpdateAvailableById",
			Handler:    _NodeArtifactServiceNB_UpdateAvailableById_Handler,
		},
		{
			MethodName: "UpdateOnboardingStatus",
			Handler:    _NodeArtifactServiceNB_UpdateOnboardingStatus_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _NodeArtifactServiceNB_CreateGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _NodeArtifactServiceNB_GetGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _NodeArtifactServiceNB_UpdateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _NodeArtifactServiceNB_DeleteGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inventorymgr_nb.proto",
}

// NodeServiceBBClient is the client API for NodeServiceBB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeServiceBBClient interface {
	UpdateAgentStatus(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	UpdateAgentDeviceInfo(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error)
}

type nodeServiceBBClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeServiceBBClient(cc grpc.ClientConnInterface) NodeServiceBBClient {
	return &nodeServiceBBClient{cc}
}

func (c *nodeServiceBBClient) UpdateAgentStatus(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, "/infrastructure.edge.iaas.platform.inventorymgr.NodeServiceBB/UpdateAgentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceBBClient) UpdateAgentDeviceInfo(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, "/infrastructure.edge.iaas.platform.inventorymgr.NodeServiceBB/UpdateAgentDeviceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServiceBBServer is the server API for NodeServiceBB service.
// All implementations must embed UnimplementedNodeServiceBBServer
// for forward compatibility
type NodeServiceBBServer interface {
	UpdateAgentStatus(context.Context, *NodeRequest) (*NodeResponse, error)
	UpdateAgentDeviceInfo(context.Context, *NodeRequest) (*NodeResponse, error)
	mustEmbedUnimplementedNodeServiceBBServer()
}

// UnimplementedNodeServiceBBServer must be embedded to have forward compatible implementations.
type UnimplementedNodeServiceBBServer struct {
}

func (UnimplementedNodeServiceBBServer) UpdateAgentStatus(context.Context, *NodeRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentStatus not implemented")
}
func (UnimplementedNodeServiceBBServer) UpdateAgentDeviceInfo(context.Context, *NodeRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentDeviceInfo not implemented")
}
func (UnimplementedNodeServiceBBServer) mustEmbedUnimplementedNodeServiceBBServer() {}

// UnsafeNodeServiceBBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServiceBBServer will
// result in compilation errors.
type UnsafeNodeServiceBBServer interface {
	mustEmbedUnimplementedNodeServiceBBServer()
}

func RegisterNodeServiceBBServer(s grpc.ServiceRegistrar, srv NodeServiceBBServer) {
	s.RegisterService(&NodeServiceBB_ServiceDesc, srv)
}

func _NodeServiceBB_UpdateAgentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceBBServer).UpdateAgentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infrastructure.edge.iaas.platform.inventorymgr.NodeServiceBB/UpdateAgentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceBBServer).UpdateAgentStatus(ctx, req.(*NodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeServiceBB_UpdateAgentDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceBBServer).UpdateAgentDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infrastructure.edge.iaas.platform.inventorymgr.NodeServiceBB/UpdateAgentDeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceBBServer).UpdateAgentDeviceInfo(ctx, req.(*NodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeServiceBB_ServiceDesc is the grpc.ServiceDesc for NodeServiceBB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeServiceBB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "infrastructure.edge.iaas.platform.inventorymgr.NodeServiceBB",
	HandlerType: (*NodeServiceBBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateAgentStatus",
			Handler:    _NodeServiceBB_UpdateAgentStatus_Handler,
		},
		{
			MethodName: "UpdateAgentDeviceInfo",
			Handler:    _NodeServiceBB_UpdateAgentDeviceInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inventorymgr_nb.proto",
}
