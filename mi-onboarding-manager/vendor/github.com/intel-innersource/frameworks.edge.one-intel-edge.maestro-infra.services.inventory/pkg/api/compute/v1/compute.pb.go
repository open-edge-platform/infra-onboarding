// SPDX-FileCopyrightText: (C) 2022 Intel Corporation
// SPDX-License-Identifier: LicenseRef-Intel

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: compute/v1/compute.proto

package computev1

import (
	_ "entgo.io/contrib/entproto/cmd/protoc-gen-ent/options/ent"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	v1 "github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/pkg/api/location/v1"
	v13 "github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/pkg/api/os/v1"
	v11 "github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/pkg/api/provider/v1"
	v12 "github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/pkg/api/tenant/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// --------------------------------------------------- Host Resources --------------------------------------------------
type HostState int32

const (
	HostState_HOST_STATE_UNSPECIFIED HostState = 0
	HostState_HOST_STATE_ERROR       HostState = 1
	HostState_HOST_STATE_DELETING    HostState = 2
	HostState_HOST_STATE_DELETED     HostState = 3
	HostState_HOST_STATE_ONBOARDED   HostState = 4
	HostState_HOST_STATE_PROVISIONED HostState = 5
	HostState_HOST_STATE_UNTRUSTED   HostState = 6
)

// Enum value maps for HostState.
var (
	HostState_name = map[int32]string{
		0: "HOST_STATE_UNSPECIFIED",
		1: "HOST_STATE_ERROR",
		2: "HOST_STATE_DELETING",
		3: "HOST_STATE_DELETED",
		4: "HOST_STATE_ONBOARDED",
		5: "HOST_STATE_PROVISIONED",
		6: "HOST_STATE_UNTRUSTED",
	}
	HostState_value = map[string]int32{
		"HOST_STATE_UNSPECIFIED": 0,
		"HOST_STATE_ERROR":       1,
		"HOST_STATE_DELETING":    2,
		"HOST_STATE_DELETED":     3,
		"HOST_STATE_ONBOARDED":   4,
		"HOST_STATE_PROVISIONED": 5,
		"HOST_STATE_UNTRUSTED":   6,
	}
)

func (x HostState) Enum() *HostState {
	p := new(HostState)
	*p = x
	return p
}

func (x HostState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HostState) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_v1_compute_proto_enumTypes[0].Descriptor()
}

func (HostState) Type() protoreflect.EnumType {
	return &file_compute_v1_compute_proto_enumTypes[0]
}

func (x HostState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HostState.Descriptor instead.
func (HostState) EnumDescriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{0}
}

type HostStatus int32

const (
	HostStatus_HOST_STATUS_UNSPECIFIED      HostStatus = 0
	HostStatus_HOST_STATUS_BOOTING          HostStatus = 1
	HostStatus_HOST_STATUS_BOOT_FAILED      HostStatus = 2
	HostStatus_HOST_STATUS_PROVISIONING     HostStatus = 3
	HostStatus_HOST_STATUS_PROVISIONED      HostStatus = 4
	HostStatus_HOST_STATUS_PROVISION_FAILED HostStatus = 5
	HostStatus_HOST_STATUS_RUNNING          HostStatus = 6
	HostStatus_HOST_STATUS_ERROR            HostStatus = 7
	HostStatus_HOST_STATUS_REGISTERING      HostStatus = 8
	HostStatus_HOST_STATUS_UPDATING         HostStatus = 9
	HostStatus_HOST_STATUS_UPDATE_FAILED    HostStatus = 10
	HostStatus_HOST_STATUS_CONNECTION_LOST  HostStatus = 11
	HostStatus_HOST_STATUS_INVALIDATING     HostStatus = 12
	HostStatus_HOST_STATUS_INVALIDATED      HostStatus = 13
)

// Enum value maps for HostStatus.
var (
	HostStatus_name = map[int32]string{
		0:  "HOST_STATUS_UNSPECIFIED",
		1:  "HOST_STATUS_BOOTING",
		2:  "HOST_STATUS_BOOT_FAILED",
		3:  "HOST_STATUS_PROVISIONING",
		4:  "HOST_STATUS_PROVISIONED",
		5:  "HOST_STATUS_PROVISION_FAILED",
		6:  "HOST_STATUS_RUNNING",
		7:  "HOST_STATUS_ERROR",
		8:  "HOST_STATUS_REGISTERING",
		9:  "HOST_STATUS_UPDATING",
		10: "HOST_STATUS_UPDATE_FAILED",
		11: "HOST_STATUS_CONNECTION_LOST",
		12: "HOST_STATUS_INVALIDATING",
		13: "HOST_STATUS_INVALIDATED",
	}
	HostStatus_value = map[string]int32{
		"HOST_STATUS_UNSPECIFIED":      0,
		"HOST_STATUS_BOOTING":          1,
		"HOST_STATUS_BOOT_FAILED":      2,
		"HOST_STATUS_PROVISIONING":     3,
		"HOST_STATUS_PROVISIONED":      4,
		"HOST_STATUS_PROVISION_FAILED": 5,
		"HOST_STATUS_RUNNING":          6,
		"HOST_STATUS_ERROR":            7,
		"HOST_STATUS_REGISTERING":      8,
		"HOST_STATUS_UPDATING":         9,
		"HOST_STATUS_UPDATE_FAILED":    10,
		"HOST_STATUS_CONNECTION_LOST":  11,
		"HOST_STATUS_INVALIDATING":     12,
		"HOST_STATUS_INVALIDATED":      13,
	}
)

func (x HostStatus) Enum() *HostStatus {
	p := new(HostStatus)
	*p = x
	return p
}

func (x HostStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HostStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_v1_compute_proto_enumTypes[1].Descriptor()
}

func (HostStatus) Type() protoreflect.EnumType {
	return &file_compute_v1_compute_proto_enumTypes[1]
}

func (x HostStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HostStatus.Descriptor instead.
func (HostStatus) EnumDescriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{1}
}

type PowerState int32

const (
	PowerState_POWER_STATE_UNSPECIFIED PowerState = 0
	PowerState_POWER_STATE_ERROR       PowerState = 1
	PowerState_POWER_STATE_ON          PowerState = 2
	PowerState_POWER_STATE_OFF         PowerState = 3
)

// Enum value maps for PowerState.
var (
	PowerState_name = map[int32]string{
		0: "POWER_STATE_UNSPECIFIED",
		1: "POWER_STATE_ERROR",
		2: "POWER_STATE_ON",
		3: "POWER_STATE_OFF",
	}
	PowerState_value = map[string]int32{
		"POWER_STATE_UNSPECIFIED": 0,
		"POWER_STATE_ERROR":       1,
		"POWER_STATE_ON":          2,
		"POWER_STATE_OFF":         3,
	}
)

func (x PowerState) Enum() *PowerState {
	p := new(PowerState)
	*p = x
	return p
}

func (x PowerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PowerState) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_v1_compute_proto_enumTypes[2].Descriptor()
}

func (PowerState) Type() protoreflect.EnumType {
	return &file_compute_v1_compute_proto_enumTypes[2]
}

func (x PowerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PowerState.Descriptor instead.
func (PowerState) EnumDescriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{2}
}

type BaremetalControllerKind int32

const (
	BaremetalControllerKind_BAREMETAL_CONTROLLER_KIND_UNSPECIFIED BaremetalControllerKind = 0
	BaremetalControllerKind_BAREMETAL_CONTROLLER_KIND_NONE        BaremetalControllerKind = 1
	BaremetalControllerKind_BAREMETAL_CONTROLLER_KIND_IPMI        BaremetalControllerKind = 2
	BaremetalControllerKind_BAREMETAL_CONTROLLER_KIND_VPRO        BaremetalControllerKind = 3
	BaremetalControllerKind_BAREMETAL_CONTROLLER_KIND_PDU         BaremetalControllerKind = 4
	BaremetalControllerKind_BAREMETAL_CONTROLLER_KIND_FDO         BaremetalControllerKind = 5
)

// Enum value maps for BaremetalControllerKind.
var (
	BaremetalControllerKind_name = map[int32]string{
		0: "BAREMETAL_CONTROLLER_KIND_UNSPECIFIED",
		1: "BAREMETAL_CONTROLLER_KIND_NONE",
		2: "BAREMETAL_CONTROLLER_KIND_IPMI",
		3: "BAREMETAL_CONTROLLER_KIND_VPRO",
		4: "BAREMETAL_CONTROLLER_KIND_PDU",
		5: "BAREMETAL_CONTROLLER_KIND_FDO",
	}
	BaremetalControllerKind_value = map[string]int32{
		"BAREMETAL_CONTROLLER_KIND_UNSPECIFIED": 0,
		"BAREMETAL_CONTROLLER_KIND_NONE":        1,
		"BAREMETAL_CONTROLLER_KIND_IPMI":        2,
		"BAREMETAL_CONTROLLER_KIND_VPRO":        3,
		"BAREMETAL_CONTROLLER_KIND_PDU":         4,
		"BAREMETAL_CONTROLLER_KIND_FDO":         5,
	}
)

func (x BaremetalControllerKind) Enum() *BaremetalControllerKind {
	p := new(BaremetalControllerKind)
	*p = x
	return p
}

func (x BaremetalControllerKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BaremetalControllerKind) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_v1_compute_proto_enumTypes[3].Descriptor()
}

func (BaremetalControllerKind) Type() protoreflect.EnumType {
	return &file_compute_v1_compute_proto_enumTypes[3]
}

func (x BaremetalControllerKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BaremetalControllerKind.Descriptor instead.
func (BaremetalControllerKind) EnumDescriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{3}
}

type HostComponentState int32

const (
	HostComponentState_HOST_COMPONENT_STATE_UNSPECIFIED HostComponentState = 0
	HostComponentState_HOST_COMPONENT_STATE_ERROR       HostComponentState = 1
	HostComponentState_HOST_COMPONENT_STATE_DELETED     HostComponentState = 2
	HostComponentState_HOST_COMPONENT_STATE_EXISTS      HostComponentState = 3
)

// Enum value maps for HostComponentState.
var (
	HostComponentState_name = map[int32]string{
		0: "HOST_COMPONENT_STATE_UNSPECIFIED",
		1: "HOST_COMPONENT_STATE_ERROR",
		2: "HOST_COMPONENT_STATE_DELETED",
		3: "HOST_COMPONENT_STATE_EXISTS",
	}
	HostComponentState_value = map[string]int32{
		"HOST_COMPONENT_STATE_UNSPECIFIED": 0,
		"HOST_COMPONENT_STATE_ERROR":       1,
		"HOST_COMPONENT_STATE_DELETED":     2,
		"HOST_COMPONENT_STATE_EXISTS":      3,
	}
)

func (x HostComponentState) Enum() *HostComponentState {
	p := new(HostComponentState)
	*p = x
	return p
}

func (x HostComponentState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HostComponentState) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_v1_compute_proto_enumTypes[4].Descriptor()
}

func (HostComponentState) Type() protoreflect.EnumType {
	return &file_compute_v1_compute_proto_enumTypes[4]
}

func (x HostComponentState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HostComponentState.Descriptor instead.
func (HostComponentState) EnumDescriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{4}
}

type NetworkInterfaceLinkState int32

const (
	NetworkInterfaceLinkState_NETWORK_INTERFACE_LINK_STATE_UNSPECIFIED NetworkInterfaceLinkState = 0
	NetworkInterfaceLinkState_NETWORK_INTERFACE_LINK_STATE_UP          NetworkInterfaceLinkState = 1
	NetworkInterfaceLinkState_NETWORK_INTERFACE_LINK_STATE_DOWN        NetworkInterfaceLinkState = 2
)

// Enum value maps for NetworkInterfaceLinkState.
var (
	NetworkInterfaceLinkState_name = map[int32]string{
		0: "NETWORK_INTERFACE_LINK_STATE_UNSPECIFIED",
		1: "NETWORK_INTERFACE_LINK_STATE_UP",
		2: "NETWORK_INTERFACE_LINK_STATE_DOWN",
	}
	NetworkInterfaceLinkState_value = map[string]int32{
		"NETWORK_INTERFACE_LINK_STATE_UNSPECIFIED": 0,
		"NETWORK_INTERFACE_LINK_STATE_UP":          1,
		"NETWORK_INTERFACE_LINK_STATE_DOWN":        2,
	}
)

func (x NetworkInterfaceLinkState) Enum() *NetworkInterfaceLinkState {
	p := new(NetworkInterfaceLinkState)
	*p = x
	return p
}

func (x NetworkInterfaceLinkState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkInterfaceLinkState) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_v1_compute_proto_enumTypes[5].Descriptor()
}

func (NetworkInterfaceLinkState) Type() protoreflect.EnumType {
	return &file_compute_v1_compute_proto_enumTypes[5]
}

func (x NetworkInterfaceLinkState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkInterfaceLinkState.Descriptor instead.
func (NetworkInterfaceLinkState) EnumDescriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{5}
}

// --------------------------------------------- Instance Resources ----------------------------------------------------
type InstanceState int32

const (
	InstanceState_INSTANCE_STATE_UNSPECIFIED InstanceState = 0 // unconfigured
	InstanceState_INSTANCE_STATE_ERROR       InstanceState = 1 // unknown
	InstanceState_INSTANCE_STATE_INSTALLED   InstanceState = 2 // OS is installed, but hasn't been started
	InstanceState_INSTANCE_STATE_RUNNING     InstanceState = 3 // OS is Running
	InstanceState_INSTANCE_STATE_STOPPED     InstanceState = 4 // OS is Stopped
	InstanceState_INSTANCE_STATE_DELETED     InstanceState = 5 // OS should be Deleted
)

// Enum value maps for InstanceState.
var (
	InstanceState_name = map[int32]string{
		0: "INSTANCE_STATE_UNSPECIFIED",
		1: "INSTANCE_STATE_ERROR",
		2: "INSTANCE_STATE_INSTALLED",
		3: "INSTANCE_STATE_RUNNING",
		4: "INSTANCE_STATE_STOPPED",
		5: "INSTANCE_STATE_DELETED",
	}
	InstanceState_value = map[string]int32{
		"INSTANCE_STATE_UNSPECIFIED": 0,
		"INSTANCE_STATE_ERROR":       1,
		"INSTANCE_STATE_INSTALLED":   2,
		"INSTANCE_STATE_RUNNING":     3,
		"INSTANCE_STATE_STOPPED":     4,
		"INSTANCE_STATE_DELETED":     5,
	}
)

func (x InstanceState) Enum() *InstanceState {
	p := new(InstanceState)
	*p = x
	return p
}

func (x InstanceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstanceState) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_v1_compute_proto_enumTypes[6].Descriptor()
}

func (InstanceState) Type() protoreflect.EnumType {
	return &file_compute_v1_compute_proto_enumTypes[6]
}

func (x InstanceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstanceState.Descriptor instead.
func (InstanceState) EnumDescriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{6}
}

type InstanceKind int32

const (
	InstanceKind_INSTANCE_KIND_UNSPECIFIED InstanceKind = 0
	InstanceKind_INSTANCE_KIND_VM          InstanceKind = 1
	InstanceKind_INSTANCE_KIND_METAL       InstanceKind = 2
)

// Enum value maps for InstanceKind.
var (
	InstanceKind_name = map[int32]string{
		0: "INSTANCE_KIND_UNSPECIFIED",
		1: "INSTANCE_KIND_VM",
		2: "INSTANCE_KIND_METAL",
	}
	InstanceKind_value = map[string]int32{
		"INSTANCE_KIND_UNSPECIFIED": 0,
		"INSTANCE_KIND_VM":          1,
		"INSTANCE_KIND_METAL":       2,
	}
)

func (x InstanceKind) Enum() *InstanceKind {
	p := new(InstanceKind)
	*p = x
	return p
}

func (x InstanceKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstanceKind) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_v1_compute_proto_enumTypes[7].Descriptor()
}

func (InstanceKind) Type() protoreflect.EnumType {
	return &file_compute_v1_compute_proto_enumTypes[7]
}

func (x InstanceKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstanceKind.Descriptor instead.
func (InstanceKind) EnumDescriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{7}
}

type InstanceStatus int32

const (
	InstanceStatus_INSTANCE_STATUS_UNSPECIFIED      InstanceStatus = 0
	InstanceStatus_INSTANCE_STATUS_BOOTING          InstanceStatus = 1
	InstanceStatus_INSTANCE_STATUS_BOOT_FAILED      InstanceStatus = 2
	InstanceStatus_INSTANCE_STATUS_PROVISIONING     InstanceStatus = 3
	InstanceStatus_INSTANCE_STATUS_PROVISIONED      InstanceStatus = 4
	InstanceStatus_INSTANCE_STATUS_PROVISION_FAILED InstanceStatus = 5
	InstanceStatus_INSTANCE_STATUS_RUNNING          InstanceStatus = 6
	InstanceStatus_INSTANCE_STATUS_ERROR            InstanceStatus = 7
	InstanceStatus_INSTANCE_STATUS_UPDATING         InstanceStatus = 9
	InstanceStatus_INSTANCE_STATUS_UPDATE_FAILED    InstanceStatus = 10
)

// Enum value maps for InstanceStatus.
var (
	InstanceStatus_name = map[int32]string{
		0:  "INSTANCE_STATUS_UNSPECIFIED",
		1:  "INSTANCE_STATUS_BOOTING",
		2:  "INSTANCE_STATUS_BOOT_FAILED",
		3:  "INSTANCE_STATUS_PROVISIONING",
		4:  "INSTANCE_STATUS_PROVISIONED",
		5:  "INSTANCE_STATUS_PROVISION_FAILED",
		6:  "INSTANCE_STATUS_RUNNING",
		7:  "INSTANCE_STATUS_ERROR",
		9:  "INSTANCE_STATUS_UPDATING",
		10: "INSTANCE_STATUS_UPDATE_FAILED",
	}
	InstanceStatus_value = map[string]int32{
		"INSTANCE_STATUS_UNSPECIFIED":      0,
		"INSTANCE_STATUS_BOOTING":          1,
		"INSTANCE_STATUS_BOOT_FAILED":      2,
		"INSTANCE_STATUS_PROVISIONING":     3,
		"INSTANCE_STATUS_PROVISIONED":      4,
		"INSTANCE_STATUS_PROVISION_FAILED": 5,
		"INSTANCE_STATUS_RUNNING":          6,
		"INSTANCE_STATUS_ERROR":            7,
		"INSTANCE_STATUS_UPDATING":         9,
		"INSTANCE_STATUS_UPDATE_FAILED":    10,
	}
)

func (x InstanceStatus) Enum() *InstanceStatus {
	p := new(InstanceStatus)
	*p = x
	return p
}

func (x InstanceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstanceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_v1_compute_proto_enumTypes[8].Descriptor()
}

func (InstanceStatus) Type() protoreflect.EnumType {
	return &file_compute_v1_compute_proto_enumTypes[8]
}

func (x InstanceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstanceStatus.Descriptor instead.
func (InstanceStatus) EnumDescriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{8}
}

// --------------------------------------------- Workload Resources ----------------------------------------------------
// Represents the Workload state, used for both current and desired state.
type WorkloadState int32

const (
	WorkloadState_WORKLOAD_STATE_UNSPECIFIED WorkloadState = 0
	WorkloadState_WORKLOAD_STATE_ERROR       WorkloadState = 1
	WorkloadState_WORKLOAD_STATE_DELETING    WorkloadState = 2
	WorkloadState_WORKLOAD_STATE_DELETED     WorkloadState = 3
	WorkloadState_WORKLOAD_STATE_PROVISIONED WorkloadState = 4
)

// Enum value maps for WorkloadState.
var (
	WorkloadState_name = map[int32]string{
		0: "WORKLOAD_STATE_UNSPECIFIED",
		1: "WORKLOAD_STATE_ERROR",
		2: "WORKLOAD_STATE_DELETING",
		3: "WORKLOAD_STATE_DELETED",
		4: "WORKLOAD_STATE_PROVISIONED",
	}
	WorkloadState_value = map[string]int32{
		"WORKLOAD_STATE_UNSPECIFIED": 0,
		"WORKLOAD_STATE_ERROR":       1,
		"WORKLOAD_STATE_DELETING":    2,
		"WORKLOAD_STATE_DELETED":     3,
		"WORKLOAD_STATE_PROVISIONED": 4,
	}
)

func (x WorkloadState) Enum() *WorkloadState {
	p := new(WorkloadState)
	*p = x
	return p
}

func (x WorkloadState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkloadState) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_v1_compute_proto_enumTypes[9].Descriptor()
}

func (WorkloadState) Type() protoreflect.EnumType {
	return &file_compute_v1_compute_proto_enumTypes[9]
}

func (x WorkloadState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkloadState.Descriptor instead.
func (WorkloadState) EnumDescriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{9}
}

// Represents the type of workload (e.g., cluster, DHCP, DNS...).
type WorkloadKind int32

const (
	WorkloadKind_WORKLOAD_KIND_UNSPECIFIED WorkloadKind = 0 // Should never be used
	WorkloadKind_WORKLOAD_KIND_CLUSTER     WorkloadKind = 1
	WorkloadKind_WORKLOAD_KIND_DHCP        WorkloadKind = 2 // currently unused, but useful to test 2-phase delete
)

// Enum value maps for WorkloadKind.
var (
	WorkloadKind_name = map[int32]string{
		0: "WORKLOAD_KIND_UNSPECIFIED",
		1: "WORKLOAD_KIND_CLUSTER",
		2: "WORKLOAD_KIND_DHCP",
	}
	WorkloadKind_value = map[string]int32{
		"WORKLOAD_KIND_UNSPECIFIED": 0,
		"WORKLOAD_KIND_CLUSTER":     1,
		"WORKLOAD_KIND_DHCP":        2,
	}
)

func (x WorkloadKind) Enum() *WorkloadKind {
	p := new(WorkloadKind)
	*p = x
	return p
}

func (x WorkloadKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkloadKind) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_v1_compute_proto_enumTypes[10].Descriptor()
}

func (WorkloadKind) Type() protoreflect.EnumType {
	return &file_compute_v1_compute_proto_enumTypes[10]
}

func (x WorkloadKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkloadKind.Descriptor instead.
func (WorkloadKind) EnumDescriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{10}
}

// Represents the type of the workload member.
type WorkloadMemberKind int32

const (
	WorkloadMemberKind_WORKLOAD_MEMBER_KIND_UNSPECIFIED  WorkloadMemberKind = 0 // Should never be used
	WorkloadMemberKind_WORKLOAD_MEMBER_KIND_CLUSTER_NODE WorkloadMemberKind = 1 // Node of a cluster workload
)

// Enum value maps for WorkloadMemberKind.
var (
	WorkloadMemberKind_name = map[int32]string{
		0: "WORKLOAD_MEMBER_KIND_UNSPECIFIED",
		1: "WORKLOAD_MEMBER_KIND_CLUSTER_NODE",
	}
	WorkloadMemberKind_value = map[string]int32{
		"WORKLOAD_MEMBER_KIND_UNSPECIFIED":  0,
		"WORKLOAD_MEMBER_KIND_CLUSTER_NODE": 1,
	}
)

func (x WorkloadMemberKind) Enum() *WorkloadMemberKind {
	p := new(WorkloadMemberKind)
	*p = x
	return p
}

func (x WorkloadMemberKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkloadMemberKind) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_v1_compute_proto_enumTypes[11].Descriptor()
}

func (WorkloadMemberKind) Type() protoreflect.EnumType {
	return &file_compute_v1_compute_proto_enumTypes[11]
}

func (x WorkloadMemberKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkloadMemberKind.Descriptor instead.
func (WorkloadMemberKind) EnumDescriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{11}
}

type HostResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId           string                `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"` // resource ID, generated by inventory on Create
	Kind                 string                `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`                               // Kind of resource. Frequently tied to Provider
	Name                 string                `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                               // user-provided, human-readable name of host
	DesiredState         HostState             `protobuf:"varint,4,opt,name=desired_state,json=desiredState,proto3,enum=compute.v1.HostState" json:"desired_state,omitempty"`
	CurrentState         HostState             `protobuf:"varint,5,opt,name=current_state,json=currentState,proto3,enum=compute.v1.HostState" json:"current_state,omitempty"`
	ProviderStatus       string                `protobuf:"bytes,6,opt,name=provider_status,json=providerStatus,proto3" json:"provider_status,omitempty"`                      // Details of current status of the resource according to the provider
	HostStatus           HostStatus            `protobuf:"varint,7,opt,name=host_status,json=hostStatus,proto3,enum=compute.v1.HostStatus" json:"host_status,omitempty"`      // Current status of the resource according to the provider, required to be visible at UI
	Site                 *v1.SiteResource      `protobuf:"bytes,8,opt,name=site,proto3" json:"site,omitempty"`                                                                // Site this VM is located at
	Provider             *v11.ProviderResource `protobuf:"bytes,9,opt,name=provider,proto3" json:"provider,omitempty"`                                                        // Provider this host is onboarded through
	Project              *v12.ProjectResource  `protobuf:"bytes,10,opt,name=project,proto3" json:"project,omitempty"`                                                         // Project this VM belongs to
	User                 *v12.UserResource     `protobuf:"bytes,11,opt,name=user,proto3" json:"user,omitempty"`                                                               // User this VM belongs to
	ProviderStatusDetail string                `protobuf:"bytes,12,opt,name=provider_status_detail,json=providerStatusDetail,proto3" json:"provider_status_detail,omitempty"` // low level details of the provider status
	Note                 string                `protobuf:"bytes,13,opt,name=note,proto3" json:"note,omitempty"`                                                               // user-provided reason for change or a freeform field
	// FIXME: add validation rules on the below items
	HardwareKind      string                  `protobuf:"bytes,15,opt,name=hardware_kind,json=hardwareKind,proto3" json:"hardware_kind,omitempty"`                                              // type such as "XSPgen3", "XDgen2", "CI7gen12"
	SerialNumber      string                  `protobuf:"bytes,16,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`                                              // SMBIOS device Serial Number
	Uuid              string                  `protobuf:"bytes,17,opt,name=uuid,proto3" json:"uuid,omitempty"`                                                                                  // SMBIOS device UUID. See pages 37-38 of https://www.dmtf.org/sites/default/files/standards/documents/DSP0134_3.6.0.pdf
	MemoryBytes       uint64                  `protobuf:"varint,18,opt,name=memory_bytes,json=memoryBytes,proto3" json:"memory_bytes,omitempty"`                                                // Quantity of memory in the system in bytes.
	CpuModel          string                  `protobuf:"bytes,19,opt,name=cpu_model,json=cpuModel,proto3" json:"cpu_model,omitempty"`                                                          // Which CPU model in use
	CpuSockets        uint32                  `protobuf:"varint,20,opt,name=cpu_sockets,json=cpuSockets,proto3" json:"cpu_sockets,omitempty"`                                                   // number of physical CPU sockets
	CpuCores          uint32                  `protobuf:"varint,21,opt,name=cpu_cores,json=cpuCores,proto3" json:"cpu_cores,omitempty"`                                                         // number of CPU cores
	CpuCapabilities   string                  `protobuf:"bytes,22,opt,name=cpu_capabilities,json=cpuCapabilities,proto3" json:"cpu_capabilities,omitempty"`                                     // string list of all CPU capabilities (possibly JSON)
	CpuArchitecture   string                  `protobuf:"bytes,23,opt,name=cpu_architecture,json=cpuArchitecture,proto3" json:"cpu_architecture,omitempty"`                                     // usually x86_64
	CpuThreads        uint32                  `protobuf:"varint,24,opt,name=cpu_threads,json=cpuThreads,proto3" json:"cpu_threads,omitempty"`                                                   // total in system
	MgmtIp            string                  `protobuf:"bytes,30,opt,name=mgmt_ip,json=mgmtIp,proto3" json:"mgmt_ip,omitempty"`                                                                // IP address of management network
	BmcKind           BaremetalControllerKind `protobuf:"varint,34,opt,name=bmc_kind,json=bmcKind,proto3,enum=compute.v1.BaremetalControllerKind" json:"bmc_kind,omitempty"`                    // Kind of BMC
	BmcIp             string                  `protobuf:"bytes,35,opt,name=bmc_ip,json=bmcIp,proto3" json:"bmc_ip,omitempty"`                                                                   // BMC IP address, such as "192.0.0.1"
	BmcUsername       string                  `protobuf:"bytes,36,opt,name=bmc_username,json=bmcUsername,proto3" json:"bmc_username,omitempty"`                                                 // BMC user name, such as "admin"
	BmcPassword       string                  `protobuf:"bytes,37,opt,name=bmc_password,json=bmcPassword,proto3" json:"bmc_password,omitempty"`                                                 // BMC password, such as "admin"
	PxeMac            string                  `protobuf:"bytes,38,opt,name=pxe_mac,json=pxeMac,proto3" json:"pxe_mac,omitempty"`                                                                // MAC address for PXE boot
	Hostname          string                  `protobuf:"bytes,43,opt,name=hostname,proto3" json:"hostname,omitempty"`                                                                          // Hostname
	ProductName       string                  `protobuf:"bytes,44,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`                                                 // System Product Name
	BiosVersion       string                  `protobuf:"bytes,46,opt,name=bios_version,json=biosVersion,proto3" json:"bios_version,omitempty"`                                                 // BIOS Version
	BiosReleaseDate   string                  `protobuf:"bytes,47,opt,name=bios_release_date,json=biosReleaseDate,proto3" json:"bios_release_date,omitempty"`                                   // BIOS Release Date
	BiosVendor        string                  `protobuf:"bytes,48,opt,name=bios_vendor,json=biosVendor,proto3" json:"bios_vendor,omitempty"`                                                    // BIOS Vendor
	Metadata          string                  `protobuf:"bytes,45,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                          // Record metadata with format as json string. Example: [{"key":"cluster-name","value":""},{"key":"app-id","value":""}]
	DesiredPowerState PowerState              `protobuf:"varint,50,opt,name=desired_power_state,json=desiredPowerState,proto3,enum=compute.v1.PowerState" json:"desired_power_state,omitempty"` // desired power state of the host
	CurrentPowerState PowerState              `protobuf:"varint,51,opt,name=current_power_state,json=currentPowerState,proto3,enum=compute.v1.PowerState" json:"current_power_state,omitempty"` // current power state of the host
	HostStorages      []*HoststorageResource  `protobuf:"bytes,70,rep,name=host_storages,json=hostStorages,proto3" json:"host_storages,omitempty"`                                              // Back-reference to attached host storage resources. This edge is read-only.
	HostNics          []*HostnicResource      `protobuf:"bytes,71,rep,name=host_nics,json=hostNics,proto3" json:"host_nics,omitempty"`                                                          // Back-reference to attached host NIC resources. This edge is read-only.
	HostUsbs          []*HostusbResource      `protobuf:"bytes,72,rep,name=host_usbs,json=hostUsbs,proto3" json:"host_usbs,omitempty"`                                                          // Back-reference to attached host USB resources. This edge is read-only.
	HostGpus          []*HostgpuResource      `protobuf:"bytes,73,rep,name=host_gpus,json=hostGpus,proto3" json:"host_gpus,omitempty"`                                                          // Back-reference to attached host GPU resources. This edge is read-only.
	Instance          *InstanceResource       `protobuf:"bytes,90,opt,name=instance,proto3" json:"instance,omitempty"`                                                                          // back-reference to baremetal Instance associated to this host
}

func (x *HostResource) Reset() {
	*x = HostResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_v1_compute_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostResource) ProtoMessage() {}

func (x *HostResource) ProtoReflect() protoreflect.Message {
	mi := &file_compute_v1_compute_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostResource.ProtoReflect.Descriptor instead.
func (*HostResource) Descriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{0}
}

func (x *HostResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *HostResource) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *HostResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HostResource) GetDesiredState() HostState {
	if x != nil {
		return x.DesiredState
	}
	return HostState_HOST_STATE_UNSPECIFIED
}

func (x *HostResource) GetCurrentState() HostState {
	if x != nil {
		return x.CurrentState
	}
	return HostState_HOST_STATE_UNSPECIFIED
}

func (x *HostResource) GetProviderStatus() string {
	if x != nil {
		return x.ProviderStatus
	}
	return ""
}

func (x *HostResource) GetHostStatus() HostStatus {
	if x != nil {
		return x.HostStatus
	}
	return HostStatus_HOST_STATUS_UNSPECIFIED
}

func (x *HostResource) GetSite() *v1.SiteResource {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *HostResource) GetProvider() *v11.ProviderResource {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *HostResource) GetProject() *v12.ProjectResource {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *HostResource) GetUser() *v12.UserResource {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *HostResource) GetProviderStatusDetail() string {
	if x != nil {
		return x.ProviderStatusDetail
	}
	return ""
}

func (x *HostResource) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *HostResource) GetHardwareKind() string {
	if x != nil {
		return x.HardwareKind
	}
	return ""
}

func (x *HostResource) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *HostResource) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *HostResource) GetMemoryBytes() uint64 {
	if x != nil {
		return x.MemoryBytes
	}
	return 0
}

func (x *HostResource) GetCpuModel() string {
	if x != nil {
		return x.CpuModel
	}
	return ""
}

func (x *HostResource) GetCpuSockets() uint32 {
	if x != nil {
		return x.CpuSockets
	}
	return 0
}

func (x *HostResource) GetCpuCores() uint32 {
	if x != nil {
		return x.CpuCores
	}
	return 0
}

func (x *HostResource) GetCpuCapabilities() string {
	if x != nil {
		return x.CpuCapabilities
	}
	return ""
}

func (x *HostResource) GetCpuArchitecture() string {
	if x != nil {
		return x.CpuArchitecture
	}
	return ""
}

func (x *HostResource) GetCpuThreads() uint32 {
	if x != nil {
		return x.CpuThreads
	}
	return 0
}

func (x *HostResource) GetMgmtIp() string {
	if x != nil {
		return x.MgmtIp
	}
	return ""
}

func (x *HostResource) GetBmcKind() BaremetalControllerKind {
	if x != nil {
		return x.BmcKind
	}
	return BaremetalControllerKind_BAREMETAL_CONTROLLER_KIND_UNSPECIFIED
}

func (x *HostResource) GetBmcIp() string {
	if x != nil {
		return x.BmcIp
	}
	return ""
}

func (x *HostResource) GetBmcUsername() string {
	if x != nil {
		return x.BmcUsername
	}
	return ""
}

func (x *HostResource) GetBmcPassword() string {
	if x != nil {
		return x.BmcPassword
	}
	return ""
}

func (x *HostResource) GetPxeMac() string {
	if x != nil {
		return x.PxeMac
	}
	return ""
}

func (x *HostResource) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *HostResource) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *HostResource) GetBiosVersion() string {
	if x != nil {
		return x.BiosVersion
	}
	return ""
}

func (x *HostResource) GetBiosReleaseDate() string {
	if x != nil {
		return x.BiosReleaseDate
	}
	return ""
}

func (x *HostResource) GetBiosVendor() string {
	if x != nil {
		return x.BiosVendor
	}
	return ""
}

func (x *HostResource) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *HostResource) GetDesiredPowerState() PowerState {
	if x != nil {
		return x.DesiredPowerState
	}
	return PowerState_POWER_STATE_UNSPECIFIED
}

func (x *HostResource) GetCurrentPowerState() PowerState {
	if x != nil {
		return x.CurrentPowerState
	}
	return PowerState_POWER_STATE_UNSPECIFIED
}

func (x *HostResource) GetHostStorages() []*HoststorageResource {
	if x != nil {
		return x.HostStorages
	}
	return nil
}

func (x *HostResource) GetHostNics() []*HostnicResource {
	if x != nil {
		return x.HostNics
	}
	return nil
}

func (x *HostResource) GetHostUsbs() []*HostusbResource {
	if x != nil {
		return x.HostUsbs
	}
	return nil
}

func (x *HostResource) GetHostGpus() []*HostgpuResource {
	if x != nil {
		return x.HostGpus
	}
	return nil
}

func (x *HostResource) GetInstance() *InstanceResource {
	if x != nil {
		return x.Instance
	}
	return nil
}

type HoststorageResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId     string                `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`             // Resource ID
	Kind           string                `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`                                           // Kind of resource. Frequently tied to Provider
	ProviderStatus string                `protobuf:"bytes,6,opt,name=provider_status,json=providerStatus,proto3" json:"provider_status,omitempty"` // current status of the resource according to the provider
	Site           *v1.SiteResource      `protobuf:"bytes,8,opt,name=site,proto3" json:"site,omitempty"`                                           // Site this VM is located at
	Provider       *v11.ProviderResource `protobuf:"bytes,9,opt,name=provider,proto3" json:"provider,omitempty"`                                   // Provider this VM is located at
	Project        *v12.ProjectResource  `protobuf:"bytes,10,opt,name=project,proto3" json:"project,omitempty"`                                    // Project this VM belongs to
	Host           *HostResource         `protobuf:"bytes,12,opt,name=host,proto3" json:"host,omitempty"`                                          // The Host where this storage device is installed
	// FIXME: better validation of the below values
	Wwid          string `protobuf:"bytes,16,opt,name=wwid,proto3" json:"wwid,omitempty"`                                         // Storage device WWID (unique identifier)
	Serial        string `protobuf:"bytes,17,opt,name=serial,proto3" json:"serial,omitempty"`                                     // Device serial name
	Vendor        string `protobuf:"bytes,18,opt,name=vendor,proto3" json:"vendor,omitempty"`                                     // Device vendor
	Model         string `protobuf:"bytes,19,opt,name=model,proto3" json:"model,omitempty"`                                       // Device model string
	CapacityBytes uint64 `protobuf:"varint,20,opt,name=capacity_bytes,json=capacityBytes,proto3" json:"capacity_bytes,omitempty"` // Capacity (size) of the device in bytes
	DeviceName    string `protobuf:"bytes,21,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`           // Device name (OS provided, like sda, sdb, etc.)
}

func (x *HoststorageResource) Reset() {
	*x = HoststorageResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_v1_compute_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HoststorageResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoststorageResource) ProtoMessage() {}

func (x *HoststorageResource) ProtoReflect() protoreflect.Message {
	mi := &file_compute_v1_compute_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoststorageResource.ProtoReflect.Descriptor instead.
func (*HoststorageResource) Descriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{1}
}

func (x *HoststorageResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *HoststorageResource) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *HoststorageResource) GetProviderStatus() string {
	if x != nil {
		return x.ProviderStatus
	}
	return ""
}

func (x *HoststorageResource) GetSite() *v1.SiteResource {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *HoststorageResource) GetProvider() *v11.ProviderResource {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *HoststorageResource) GetProject() *v12.ProjectResource {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *HoststorageResource) GetHost() *HostResource {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *HoststorageResource) GetWwid() string {
	if x != nil {
		return x.Wwid
	}
	return ""
}

func (x *HoststorageResource) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

func (x *HoststorageResource) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *HoststorageResource) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *HoststorageResource) GetCapacityBytes() uint64 {
	if x != nil {
		return x.CapacityBytes
	}
	return 0
}

func (x *HoststorageResource) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

type HostnicResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId     string                `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`             // Resource ID
	Kind           string                `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`                                           // Kind of resource. Frequently tied to Provider
	ProviderStatus string                `protobuf:"bytes,6,opt,name=provider_status,json=providerStatus,proto3" json:"provider_status,omitempty"` // current status of the resource according to the provider
	Site           *v1.SiteResource      `protobuf:"bytes,8,opt,name=site,proto3" json:"site,omitempty"`                                           // Site this NIC is located at
	Provider       *v11.ProviderResource `protobuf:"bytes,9,opt,name=provider,proto3" json:"provider,omitempty"`                                   // Provider this NIC is located at
	Project        *v12.ProjectResource  `protobuf:"bytes,10,opt,name=project,proto3" json:"project,omitempty"`                                    // Project this NIC belongs to
	Host           *HostResource         `protobuf:"bytes,12,opt,name=host,proto3" json:"host,omitempty"`                                          // The Host where this NIC is installed
	// FIXME: Better validation on fields below
	DeviceName          string                    `protobuf:"bytes,16,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`                                         // the device name (OS provided, like eth0, enp1s0, etc.)
	PciIdentifier       string                    `protobuf:"bytes,17,opt,name=pci_identifier,json=pciIdentifier,proto3" json:"pci_identifier,omitempty"`                                // PCI identifier string for this network interface
	MacAddr             string                    `protobuf:"bytes,18,opt,name=mac_addr,json=macAddr,proto3" json:"mac_addr,omitempty"`                                                  // MAC address
	SriovEnabled        bool                      `protobuf:"varint,19,opt,name=sriov_enabled,json=sriovEnabled,proto3" json:"sriov_enabled,omitempty"`                                  // has SRIOV
	SriovVfsNum         uint32                    `protobuf:"varint,20,opt,name=sriov_vfs_num,json=sriovVfsNum,proto3" json:"sriov_vfs_num,omitempty"`                                   // Number of VFS currently configured
	SriovVfsTotal       uint32                    `protobuf:"varint,31,opt,name=sriov_vfs_total,json=sriovVfsTotal,proto3" json:"sriov_vfs_total,omitempty"`                             // Total number of VFs available
	PeerName            string                    `protobuf:"bytes,21,opt,name=peer_name,json=peerName,proto3" json:"peer_name,omitempty"`                                               // the neighbor device (the other side of the link), collecting via LLDP
	PeerDescription     string                    `protobuf:"bytes,22,opt,name=peer_description,json=peerDescription,proto3" json:"peer_description,omitempty"`                          // the neighbor device description
	PeerMac             string                    `protobuf:"bytes,23,opt,name=peer_mac,json=peerMac,proto3" json:"peer_mac,omitempty"`                                                  // the neighbor device MAC address
	PeerMgmtIp          string                    `protobuf:"bytes,24,opt,name=peer_mgmt_ip,json=peerMgmtIp,proto3" json:"peer_mgmt_ip,omitempty"`                                       // the neighbor device management IP address
	PeerPort            string                    `protobuf:"bytes,25,opt,name=peer_port,json=peerPort,proto3" json:"peer_port,omitempty"`                                               // the neighbor device port number
	SupportedLinkMode   string                    `protobuf:"bytes,26,opt,name=supported_link_mode,json=supportedLinkMode,proto3" json:"supported_link_mode,omitempty"`                  // the link mode supported by this interface, comma separated
	AdvertisingLinkMode string                    `protobuf:"bytes,27,opt,name=advertising_link_mode,json=advertisingLinkMode,proto3" json:"advertising_link_mode,omitempty"`            // the link mode advertising by this interface
	CurrentSpeedBps     uint64                    `protobuf:"varint,28,opt,name=current_speed_bps,json=currentSpeedBps,proto3" json:"current_speed_bps,omitempty"`                       // the current speed of this interface
	CurrentDuplex       string                    `protobuf:"bytes,29,opt,name=current_duplex,json=currentDuplex,proto3" json:"current_duplex,omitempty"`                                // the current duplex of this interface
	Features            string                    `protobuf:"bytes,30,opt,name=features,proto3" json:"features,omitempty"`                                                               // the features of this interface, comma separated
	Mtu                 uint32                    `protobuf:"varint,40,opt,name=mtu,proto3" json:"mtu,omitempty"`                                                                        // the maximum transmission unit of this interface
	LinkState           NetworkInterfaceLinkState `protobuf:"varint,41,opt,name=link_state,json=linkState,proto3,enum=compute.v1.NetworkInterfaceLinkState" json:"link_state,omitempty"` // link state of this interface
	BmcInterface        bool                      `protobuf:"varint,43,opt,name=bmc_interface,json=bmcInterface,proto3" json:"bmc_interface,omitempty"`                                  // whether this is a bmc interface or not
}

func (x *HostnicResource) Reset() {
	*x = HostnicResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_v1_compute_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostnicResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostnicResource) ProtoMessage() {}

func (x *HostnicResource) ProtoReflect() protoreflect.Message {
	mi := &file_compute_v1_compute_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostnicResource.ProtoReflect.Descriptor instead.
func (*HostnicResource) Descriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{2}
}

func (x *HostnicResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *HostnicResource) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *HostnicResource) GetProviderStatus() string {
	if x != nil {
		return x.ProviderStatus
	}
	return ""
}

func (x *HostnicResource) GetSite() *v1.SiteResource {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *HostnicResource) GetProvider() *v11.ProviderResource {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *HostnicResource) GetProject() *v12.ProjectResource {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *HostnicResource) GetHost() *HostResource {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *HostnicResource) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *HostnicResource) GetPciIdentifier() string {
	if x != nil {
		return x.PciIdentifier
	}
	return ""
}

func (x *HostnicResource) GetMacAddr() string {
	if x != nil {
		return x.MacAddr
	}
	return ""
}

func (x *HostnicResource) GetSriovEnabled() bool {
	if x != nil {
		return x.SriovEnabled
	}
	return false
}

func (x *HostnicResource) GetSriovVfsNum() uint32 {
	if x != nil {
		return x.SriovVfsNum
	}
	return 0
}

func (x *HostnicResource) GetSriovVfsTotal() uint32 {
	if x != nil {
		return x.SriovVfsTotal
	}
	return 0
}

func (x *HostnicResource) GetPeerName() string {
	if x != nil {
		return x.PeerName
	}
	return ""
}

func (x *HostnicResource) GetPeerDescription() string {
	if x != nil {
		return x.PeerDescription
	}
	return ""
}

func (x *HostnicResource) GetPeerMac() string {
	if x != nil {
		return x.PeerMac
	}
	return ""
}

func (x *HostnicResource) GetPeerMgmtIp() string {
	if x != nil {
		return x.PeerMgmtIp
	}
	return ""
}

func (x *HostnicResource) GetPeerPort() string {
	if x != nil {
		return x.PeerPort
	}
	return ""
}

func (x *HostnicResource) GetSupportedLinkMode() string {
	if x != nil {
		return x.SupportedLinkMode
	}
	return ""
}

func (x *HostnicResource) GetAdvertisingLinkMode() string {
	if x != nil {
		return x.AdvertisingLinkMode
	}
	return ""
}

func (x *HostnicResource) GetCurrentSpeedBps() uint64 {
	if x != nil {
		return x.CurrentSpeedBps
	}
	return 0
}

func (x *HostnicResource) GetCurrentDuplex() string {
	if x != nil {
		return x.CurrentDuplex
	}
	return ""
}

func (x *HostnicResource) GetFeatures() string {
	if x != nil {
		return x.Features
	}
	return ""
}

func (x *HostnicResource) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *HostnicResource) GetLinkState() NetworkInterfaceLinkState {
	if x != nil {
		return x.LinkState
	}
	return NetworkInterfaceLinkState_NETWORK_INTERFACE_LINK_STATE_UNSPECIFIED
}

func (x *HostnicResource) GetBmcInterface() bool {
	if x != nil {
		return x.BmcInterface
	}
	return false
}

type HostusbResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId string        `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"` // Resource ID
	Kind       string        `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`                               // Kind of resource.
	Host       *HostResource `protobuf:"bytes,8,opt,name=host,proto3" json:"host,omitempty"`                               // The Host where this USB device is installed
	OwnerId    string        `protobuf:"bytes,9,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`          // VM or container this usb device allocated to
	// FIXME: better validation of the below values
	Idvendor   string `protobuf:"bytes,10,opt,name=idvendor,proto3" json:"idvendor,omitempty"`                       // a hexadecimal number representing  ID of vendor
	Idproduct  string `protobuf:"bytes,11,opt,name=idproduct,proto3" json:"idproduct,omitempty"`                     // a hexadecimal number representing ID of product
	Bus        uint32 `protobuf:"varint,12,opt,name=bus,proto3" json:"bus,omitempty"`                                // Bus number of device connected with
	Addr       uint32 `protobuf:"varint,13,opt,name=addr,proto3" json:"addr,omitempty"`                              // Device number assigned by OS
	Class      string `protobuf:"bytes,20,opt,name=class,proto3" json:"class,omitempty"`                             // class defined by USB-IF
	Serial     string `protobuf:"bytes,21,opt,name=serial,proto3" json:"serial,omitempty"`                           // Serial number of device
	DeviceName string `protobuf:"bytes,22,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"` // the OS-provided device name
}

func (x *HostusbResource) Reset() {
	*x = HostusbResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_v1_compute_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostusbResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostusbResource) ProtoMessage() {}

func (x *HostusbResource) ProtoReflect() protoreflect.Message {
	mi := &file_compute_v1_compute_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostusbResource.ProtoReflect.Descriptor instead.
func (*HostusbResource) Descriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{3}
}

func (x *HostusbResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *HostusbResource) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *HostusbResource) GetHost() *HostResource {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *HostusbResource) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *HostusbResource) GetIdvendor() string {
	if x != nil {
		return x.Idvendor
	}
	return ""
}

func (x *HostusbResource) GetIdproduct() string {
	if x != nil {
		return x.Idproduct
	}
	return ""
}

func (x *HostusbResource) GetBus() uint32 {
	if x != nil {
		return x.Bus
	}
	return 0
}

func (x *HostusbResource) GetAddr() uint32 {
	if x != nil {
		return x.Addr
	}
	return 0
}

func (x *HostusbResource) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *HostusbResource) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

func (x *HostusbResource) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

type HostgpuResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId  string        `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`  // Resource ID
	Host        *HostResource `protobuf:"bytes,10,opt,name=host,proto3" json:"host,omitempty"`                               // Host this GPU device is installed in
	PciId       string        `protobuf:"bytes,20,opt,name=pci_id,json=pciId,proto3" json:"pci_id,omitempty"`                // PCI device id of GPU
	Product     string        `protobuf:"bytes,21,opt,name=product,proto3" json:"product,omitempty"`                         // Product info of GPU
	Vendor      string        `protobuf:"bytes,22,opt,name=vendor,proto3" json:"vendor,omitempty"`                           // Vendor info of GPU
	Description string        `protobuf:"bytes,23,opt,name=description,proto3" json:"description,omitempty"`                 // Additional info for GPU
	DeviceName  string        `protobuf:"bytes,24,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"` // GPU name as reported by OS
}

func (x *HostgpuResource) Reset() {
	*x = HostgpuResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_v1_compute_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostgpuResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostgpuResource) ProtoMessage() {}

func (x *HostgpuResource) ProtoReflect() protoreflect.Message {
	mi := &file_compute_v1_compute_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostgpuResource.ProtoReflect.Descriptor instead.
func (*HostgpuResource) Descriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{4}
}

func (x *HostgpuResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *HostgpuResource) GetHost() *HostResource {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *HostgpuResource) GetPciId() string {
	if x != nil {
		return x.PciId
	}
	return ""
}

func (x *HostgpuResource) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *HostgpuResource) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *HostgpuResource) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *HostgpuResource) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

// InstanceResource describes an instantiated OS install, running on either a
// host or hypervisor.
type InstanceResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId      string                       `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"` // resource ID, generated by inventory on Create.
	Kind            InstanceKind                 `protobuf:"varint,2,opt,name=kind,proto3,enum=compute.v1.InstanceKind" json:"kind,omitempty"` // Kind of resource. Frequently tied to Provider.
	Name            string                       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                               // user-provided, human-readable name of Instance
	DesiredState    InstanceState                `protobuf:"varint,4,opt,name=desired_state,json=desiredState,proto3,enum=compute.v1.InstanceState" json:"desired_state,omitempty"`
	CurrentState    InstanceState                `protobuf:"varint,5,opt,name=current_state,json=currentState,proto3,enum=compute.v1.InstanceState" json:"current_state,omitempty"`
	VmMemoryBytes   uint64                       `protobuf:"varint,6,opt,name=vm_memory_bytes,json=vmMemoryBytes,proto3" json:"vm_memory_bytes,omitempty"`     // Quantity of memory in the system, in bytes. Only applicable to VM instances.
	VmCpuCores      uint32                       `protobuf:"varint,7,opt,name=vm_cpu_cores,json=vmCpuCores,proto3" json:"vm_cpu_cores,omitempty"`              // Number of CPU cores. Only applicable to VM instances.
	VmStorageBytes  uint64                       `protobuf:"varint,8,opt,name=vm_storage_bytes,json=vmStorageBytes,proto3" json:"vm_storage_bytes,omitempty"`  // Storage quantity (primary), in bytes. Only applicable to VM instances.
	Host            *HostResource                `protobuf:"bytes,9,opt,name=host,proto3" json:"host,omitempty"`                                               // Host this Instance is placed on. Only applicable to baremetal instances.
	User            *v12.UserResource            `protobuf:"bytes,10,opt,name=user,proto3" json:"user,omitempty"`                                              // SSH user credentials configured on this instance.
	Os              *v13.OperatingSystemResource `protobuf:"bytes,11,opt,name=os,proto3" json:"os,omitempty"`                                                  // OS resource associated to this instance.
	Status          InstanceStatus               `protobuf:"varint,12,opt,name=status,proto3,enum=compute.v1.InstanceStatus" json:"status,omitempty"`          // Current status of the instance set by the provider of it.
	StatusDetail    string                       `protobuf:"bytes,13,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`          // The low level details of the provider status.
	WorkloadMembers []*WorkloadMember            `protobuf:"bytes,30,rep,name=workload_members,json=workloadMembers,proto3" json:"workload_members,omitempty"` // back-reference to the Workload Members associated to this Instance
	Provider        *v11.ProviderResource        `protobuf:"bytes,40,opt,name=provider,proto3" json:"provider,omitempty"`                                      // Provider this Instance is provisioned through
}

func (x *InstanceResource) Reset() {
	*x = InstanceResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_v1_compute_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceResource) ProtoMessage() {}

func (x *InstanceResource) ProtoReflect() protoreflect.Message {
	mi := &file_compute_v1_compute_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceResource.ProtoReflect.Descriptor instead.
func (*InstanceResource) Descriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{5}
}

func (x *InstanceResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *InstanceResource) GetKind() InstanceKind {
	if x != nil {
		return x.Kind
	}
	return InstanceKind_INSTANCE_KIND_UNSPECIFIED
}

func (x *InstanceResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstanceResource) GetDesiredState() InstanceState {
	if x != nil {
		return x.DesiredState
	}
	return InstanceState_INSTANCE_STATE_UNSPECIFIED
}

func (x *InstanceResource) GetCurrentState() InstanceState {
	if x != nil {
		return x.CurrentState
	}
	return InstanceState_INSTANCE_STATE_UNSPECIFIED
}

func (x *InstanceResource) GetVmMemoryBytes() uint64 {
	if x != nil {
		return x.VmMemoryBytes
	}
	return 0
}

func (x *InstanceResource) GetVmCpuCores() uint32 {
	if x != nil {
		return x.VmCpuCores
	}
	return 0
}

func (x *InstanceResource) GetVmStorageBytes() uint64 {
	if x != nil {
		return x.VmStorageBytes
	}
	return 0
}

func (x *InstanceResource) GetHost() *HostResource {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *InstanceResource) GetUser() *v12.UserResource {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *InstanceResource) GetOs() *v13.OperatingSystemResource {
	if x != nil {
		return x.Os
	}
	return nil
}

func (x *InstanceResource) GetStatus() InstanceStatus {
	if x != nil {
		return x.Status
	}
	return InstanceStatus_INSTANCE_STATUS_UNSPECIFIED
}

func (x *InstanceResource) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *InstanceResource) GetWorkloadMembers() []*WorkloadMember {
	if x != nil {
		return x.WorkloadMembers
	}
	return nil
}

func (x *InstanceResource) GetProvider() *v11.ProviderResource {
	if x != nil {
		return x.Provider
	}
	return nil
}

// Represents a generic way to group compute resources (e.g., cluster, DHCP...).
// More details: https://maestro.app.intel.com/docs/specs/lp-i-workload/
type WorkloadResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId   string            `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"` // resource ID, generated by inventory on Create
	Kind         WorkloadKind      `protobuf:"varint,2,opt,name=kind,proto3,enum=compute.v1.WorkloadKind" json:"kind,omitempty"` // Type of workload
	Name         string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                               // user-provided, human-readable name of workload
	ExternalId   string            `protobuf:"bytes,5,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"` // Edge towards a resource that sits outside IaaS realm (for example, ID of the Cluster managed by ECM). We don't enforce any pattern, but the max length of the field is 40 chars.
	DesiredState WorkloadState     `protobuf:"varint,10,opt,name=desired_state,json=desiredState,proto3,enum=compute.v1.WorkloadState" json:"desired_state,omitempty"`
	CurrentState WorkloadState     `protobuf:"varint,11,opt,name=current_state,json=currentState,proto3,enum=compute.v1.WorkloadState" json:"current_state,omitempty"`
	Status       string            `protobuf:"bytes,15,opt,name=status,proto3" json:"status,omitempty"`     // Human-readable status of the workload
	Members      []*WorkloadMember `protobuf:"bytes,20,rep,name=members,proto3" json:"members,omitempty"`   // Should not be used to set members
	Metadata     string            `protobuf:"bytes,30,opt,name=metadata,proto3" json:"metadata,omitempty"` // Record metadata with format as json string. Example: [{"key":"cluster-name","value":""},{"key":"app-id","value":""}]
}

func (x *WorkloadResource) Reset() {
	*x = WorkloadResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_v1_compute_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkloadResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadResource) ProtoMessage() {}

func (x *WorkloadResource) ProtoReflect() protoreflect.Message {
	mi := &file_compute_v1_compute_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadResource.ProtoReflect.Descriptor instead.
func (*WorkloadResource) Descriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{6}
}

func (x *WorkloadResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *WorkloadResource) GetKind() WorkloadKind {
	if x != nil {
		return x.Kind
	}
	return WorkloadKind_WORKLOAD_KIND_UNSPECIFIED
}

func (x *WorkloadResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkloadResource) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *WorkloadResource) GetDesiredState() WorkloadState {
	if x != nil {
		return x.DesiredState
	}
	return WorkloadState_WORKLOAD_STATE_UNSPECIFIED
}

func (x *WorkloadResource) GetCurrentState() WorkloadState {
	if x != nil {
		return x.CurrentState
	}
	return WorkloadState_WORKLOAD_STATE_UNSPECIFIED
}

func (x *WorkloadResource) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *WorkloadResource) GetMembers() []*WorkloadMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *WorkloadResource) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

// Intermediate resource to represent a relation between a workload and a compute resource (i.e., instance).
type WorkloadMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId string             `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`       // resource ID, generated by inventory on Create
	Kind       WorkloadMemberKind `protobuf:"varint,2,opt,name=kind,proto3,enum=compute.v1.WorkloadMemberKind" json:"kind,omitempty"` // Type of member
	Workload   *WorkloadResource  `protobuf:"bytes,10,opt,name=workload,proto3" json:"workload,omitempty"`
	Instance   *InstanceResource  `protobuf:"bytes,11,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (x *WorkloadMember) Reset() {
	*x = WorkloadMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_v1_compute_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkloadMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadMember) ProtoMessage() {}

func (x *WorkloadMember) ProtoReflect() protoreflect.Message {
	mi := &file_compute_v1_compute_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadMember.ProtoReflect.Descriptor instead.
func (*WorkloadMember) Descriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{7}
}

func (x *WorkloadMember) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *WorkloadMember) GetKind() WorkloadMemberKind {
	if x != nil {
		return x.Kind
	}
	return WorkloadMemberKind_WORKLOAD_MEMBER_KIND_UNSPECIFIED
}

func (x *WorkloadMember) GetWorkload() *WorkloadResource {
	if x != nil {
		return x.Workload
	}
	return nil
}

func (x *WorkloadMember) GetInstance() *InstanceResource {
	if x != nil {
		return x.Instance
	}
	return nil
}

var File_compute_v1_compute_proto protoreflect.FileDescriptor

var file_compute_v1_compute_proto_rawDesc = []byte{
	0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x0e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0e, 0x6f, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x99, 0x11, 0x0a, 0x0c, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x45, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x1b, 0x72, 0x19, 0x28, 0x0d, 0x32, 0x12,
	0x5e, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38,
	0x7d, 0x24, 0xd0, 0x01, 0x01, 0xba, 0xa6, 0x49, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x42, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x06, 0xba,
	0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x68,
	0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x73, 0x69, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x42, 0x06, 0xc2, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65,
	0x12, 0x41, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x06, 0xc2, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x42, 0x06, 0xc2, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x33, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x06, 0xc2, 0xa6, 0x49, 0x02, 0x08, 0x01,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x14,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x01, 0x18, 0x80, 0x04, 0xd0, 0x01,
	0x01, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x2b, 0x0a,
	0x0d, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x0d, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x28, 0x24, 0xd0, 0x01,
	0x01, 0xb0, 0x01, 0x01, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x29, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0b,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x09, 0x63,
	0x70, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x08, 0x63, 0x70, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x27, 0x0a, 0x0b, 0x63, 0x70, 0x75, 0x5f, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x63,
	0x70, 0x75, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x09, 0x63, 0x70, 0x75,
	0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xba, 0xa6,
	0x49, 0x02, 0x08, 0x01, 0x52, 0x08, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x31,
	0x0a, 0x10, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01,
	0x52, 0x0f, 0x63, 0x70, 0x75, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x31, 0x0a, 0x10, 0x63, 0x70, 0x75, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49,
	0x02, 0x08, 0x01, 0x52, 0x0f, 0x63, 0x70, 0x75, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0b, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08,
	0x01, 0x52, 0x0a, 0x63, 0x70, 0x75, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x1f, 0x0a,
	0x07, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x06, 0x6d, 0x67, 0x6d, 0x74, 0x49, 0x70, 0x12, 0x46,
	0x0a, 0x08, 0x62, 0x6d, 0x63, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x72, 0x65, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x07, 0x62,
	0x6d, 0x63, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x06, 0x62, 0x6d, 0x63, 0x5f, 0x69, 0x70,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x05,
	0x62, 0x6d, 0x63, 0x49, 0x70, 0x12, 0x29, 0x0a, 0x0c, 0x62, 0x6d, 0x63, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49,
	0x02, 0x08, 0x01, 0x52, 0x0b, 0x62, 0x6d, 0x63, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x0c, 0x62, 0x6d, 0x63, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0b,
	0x62, 0x6d, 0x63, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x07, 0x70,
	0x78, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6,
	0x49, 0x02, 0x08, 0x01, 0x52, 0x06, 0x70, 0x78, 0x65, 0x4d, 0x61, 0x63, 0x12, 0x22, 0x0a, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0c, 0x62,
	0x69, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x62, 0x69, 0x6f, 0x73, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x11, 0x62, 0x69, 0x6f, 0x73, 0x5f, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0f, 0x62, 0x69, 0x6f, 0x73, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0b, 0x62, 0x69,
	0x6f, 0x73, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x62, 0x69, 0x6f, 0x73, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x06, 0xba, 0xa6,
	0x49, 0x02, 0x08, 0x01, 0x52, 0x11, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x06, 0xba, 0xa6,
	0x49, 0x02, 0x08, 0x01, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x18, 0x46, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42,
	0x0a, 0xc2, 0xa6, 0x49, 0x06, 0x12, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x52, 0x0c, 0x68, 0x6f, 0x73,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x09, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x6e, 0x69, 0x63, 0x73, 0x18, 0x47, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x69,
	0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0a, 0xc2, 0xa6, 0x49, 0x06, 0x12,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x69, 0x63, 0x73, 0x12,
	0x44, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x62, 0x73, 0x18, 0x48, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x6f, 0x73, 0x74, 0x75, 0x73, 0x62, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42,
	0x0a, 0xc2, 0xa6, 0x49, 0x06, 0x12, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x52, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x55, 0x73, 0x62, 0x73, 0x12, 0x44, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x67, 0x70,
	0x75, 0x73, 0x18, 0x49, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x67, 0x70, 0x75, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0a, 0xc2, 0xa6, 0x49, 0x06, 0x12, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x70, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0c, 0xc2, 0xa6, 0x49,
	0x08, 0x08, 0x01, 0x12, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x3a, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x22, 0xfa, 0x04, 0x0a, 0x13,
	0x48, 0x6f, 0x73, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xfa, 0x42, 0x22, 0x72, 0x20, 0x28,
	0x14, 0x32, 0x19, 0x5e, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0xba,
	0xa6, 0x49, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2f, 0x0a,
	0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35,
	0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x06, 0xc2, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52,
	0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x06, 0xc2, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x06, 0xc2, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08,
	0xc2, 0xa6, 0x49, 0x04, 0x08, 0x01, 0x18, 0x01, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x04, 0x77, 0x77, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6,
	0x49, 0x02, 0x08, 0x01, 0x52, 0x04, 0x77, 0x77, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x06, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02,
	0x08, 0x01, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x06, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02,
	0x08, 0x01, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08,
	0x01, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2d, 0x0a, 0x0e, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0d, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6,
	0x49, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x3a, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x22, 0xfe, 0x09, 0x0a, 0x0f, 0x48, 0x6f, 0x73,
	0x74, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0b,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x27, 0xfa, 0x42, 0x1e, 0x72, 0x1c, 0x28, 0x10, 0x32, 0x15, 0x5e, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x69, 0x63, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d,
	0x24, 0xd0, 0x01, 0x01, 0xba, 0xa6, 0x49, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49,
	0x02, 0x08, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x06, 0xc2, 0xa6,
	0x49, 0x02, 0x08, 0x01, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x06, 0xc2, 0xa6, 0x49,
	0x02, 0x08, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x06, 0xc2, 0xa6, 0x49, 0x02,
	0x08, 0x01, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x42, 0x08, 0xc2, 0xa6, 0x49, 0x04, 0x08, 0x01, 0x18, 0x01, 0x52, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01,
	0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0e,
	0x70, 0x63, 0x69, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0d, 0x70, 0x63,
	0x69, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x08, 0x6d,
	0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2b,
	0x0a, 0x0d, 0x73, 0x72, 0x69, 0x6f, 0x76, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x73,
	0x72, 0x69, 0x6f, 0x76, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x0d, 0x73,
	0x72, 0x69, 0x6f, 0x76, 0x5f, 0x76, 0x66, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x73, 0x72, 0x69, 0x6f,
	0x76, 0x56, 0x66, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x0f, 0x73, 0x72, 0x69, 0x6f, 0x76,
	0x5f, 0x76, 0x66, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0d, 0x73, 0x72, 0x69, 0x6f, 0x76, 0x56,
	0x66, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02,
	0x08, 0x01, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x10,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0f,
	0x70, 0x65, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x4d,
	0x61, 0x63, 0x12, 0x28, 0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6d, 0x67, 0x6d, 0x74, 0x5f,
	0x69, 0x70, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01,
	0x52, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x4d, 0x67, 0x6d, 0x74, 0x49, 0x70, 0x12, 0x23, 0x0a, 0x09,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x36, 0x0a, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x15, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01,
	0x52, 0x13, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6e,
	0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x42, 0x70, 0x73, 0x12, 0x2d, 0x0a, 0x0e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02,
	0x08, 0x01, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x03,
	0x6d, 0x74, 0x75, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08,
	0x01, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x4c, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x0d, 0x62, 0x6d, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xba, 0xa6, 0x49,
	0x02, 0x08, 0x01, 0x52, 0x0c, 0x62, 0x6d, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x3a, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x22, 0xc1, 0x03, 0x0a, 0x0f, 0x48, 0x6f,
	0x73, 0x74, 0x75, 0x73, 0x62, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x48, 0x0a,
	0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x27, 0xfa, 0x42, 0x1e, 0x72, 0x1c, 0x28, 0x14, 0x32, 0x15, 0x5e, 0x68, 0x6f,
	0x73, 0x74, 0x75, 0x73, 0x62, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38,
	0x7d, 0x24, 0xd0, 0x01, 0x01, 0xba, 0xa6, 0x49, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0xc2, 0xa6, 0x49,
	0x04, 0x08, 0x01, 0x18, 0x01, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x08, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x08, 0x69, 0x64, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x08, 0x69, 0x64, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x12, 0x24, 0x0a, 0x09, 0x69, 0x64, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x09, 0x69,
	0x64, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x03, 0x62, 0x75, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x03, 0x62,
	0x75, 0x73, 0x12, 0x1a, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x1c,
	0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x06,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6,
	0x49, 0x02, 0x08, 0x01, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0b,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x22, 0xcf, 0x02,
	0x0a, 0x0f, 0x48, 0x6f, 0x73, 0x74, 0x67, 0x70, 0x75, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x48, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xfa, 0x42, 0x1e, 0x72, 0x1c, 0x28, 0x10, 0x32,
	0x15, 0x5e, 0x68, 0x6f, 0x73, 0x74, 0x67, 0x70, 0x75, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0xba, 0xa6, 0x49, 0x02, 0x18, 0x01, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x42, 0x08, 0xc2, 0xa6, 0x49, 0x04, 0x08, 0x01, 0x18, 0x01, 0x52, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x06, 0x70, 0x63, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x05, 0x70, 0x63, 0x69,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x06, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08,
	0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x22,
	0xf7, 0x06, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x42, 0x1b, 0x72, 0x19,
	0x28, 0x0d, 0x32, 0x12, 0x5e, 0x69, 0x6e, 0x73, 0x74, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0xba, 0xa6, 0x49, 0x02, 0x18, 0x01, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b,
	0x69, 0x6e, 0x64, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a,
	0x0d, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a,
	0x0f, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0d,
	0x76, 0x6d, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a,
	0x0c, 0x76, 0x6d, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x76, 0x6d, 0x43,
	0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x10, 0x76, 0x6d, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x76, 0x6d, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x06, 0xc2, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12,
	0x33, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x06, 0xc2, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x42, 0x08, 0xc2, 0xa6, 0x49, 0x04, 0x08, 0x01, 0x18, 0x01, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x3a,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02,
	0x08, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x0d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x55, 0x0a, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0e, 0xc2,
	0xa6, 0x49, 0x0a, 0x12, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x41,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42,
	0x06, 0xc2, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x3a, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x22, 0x86, 0x04, 0x0a, 0x10, 0x57, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x49,
	0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x28, 0xfa, 0x42, 0x1f, 0x72, 0x1d, 0x28, 0x11, 0x32, 0x16, 0x5e, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x38, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0xba, 0xa6, 0x49, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4b, 0x69, 0x6e,
	0x64, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x00, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x12, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x28, 0x28, 0xd0, 0x01, 0x01, 0xba, 0xa6, 0x49, 0x04,
	0x08, 0x01, 0x18, 0x01, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64,
	0x12, 0x46, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02,
	0x08, 0x01, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x44, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0e, 0xc2,
	0xa6, 0x49, 0x0a, 0x12, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x06, 0xba, 0xa6, 0x49, 0x02,
	0x08, 0x01, 0x22, 0xad, 0x02, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xfa, 0x42, 0x25, 0x72,
	0x23, 0x28, 0x17, 0x32, 0x1c, 0x5e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d,
	0x24, 0xd0, 0x01, 0x01, 0xba, 0xa6, 0x49, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4b, 0x69, 0x6e, 0x64, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x00, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x42, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x42, 0x08, 0xc2, 0xa6, 0x49, 0x04, 0x08, 0x01, 0x18, 0x01, 0x52, 0x08, 0x77, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x42, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0xc2, 0xa6, 0x49, 0x04, 0x08, 0x01, 0x18, 0x01,
	0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xba, 0xa6, 0x49, 0x02,
	0x08, 0x01, 0x2a, 0xbe, 0x01, 0x0a, 0x09, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x16, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x48, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x48,
	0x4f, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x4f, 0x4e, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1a, 0x0a,
	0x16, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56,
	0x49, 0x53, 0x49, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x4f, 0x53,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x54, 0x52, 0x55, 0x53, 0x54, 0x45,
	0x44, 0x10, 0x06, 0x2a, 0x9e, 0x03, 0x0a, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42,
	0x4f, 0x4f, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x48, 0x4f, 0x53, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x20, 0x0a, 0x1c, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x48,
	0x4f, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12,
	0x18, 0x0a, 0x14, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x48, 0x4f, 0x53,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x1f, 0x0a, 0x1b, 0x48, 0x4f, 0x53, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x48, 0x4f, 0x53,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x0c, 0x12, 0x1b, 0x0a, 0x17, 0x48, 0x4f, 0x53, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x0d, 0x2a, 0x69, 0x0a, 0x0a, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4f,
	0x57, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x03, 0x2a,
	0xf6, 0x01, 0x0a, 0x17, 0x42, 0x61, 0x72, 0x65, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x29, 0x0a, 0x25, 0x42,
	0x41, 0x52, 0x45, 0x4d, 0x45, 0x54, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c,
	0x4c, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x41, 0x52, 0x45, 0x4d, 0x45,
	0x54, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x41,
	0x52, 0x45, 0x4d, 0x45, 0x54, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c,
	0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x49, 0x50, 0x4d, 0x49, 0x10, 0x02, 0x12, 0x22,
	0x0a, 0x1e, 0x42, 0x41, 0x52, 0x45, 0x4d, 0x45, 0x54, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x56, 0x50, 0x52, 0x4f,
	0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x41, 0x52, 0x45, 0x4d, 0x45, 0x54, 0x41, 0x4c, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x50, 0x44, 0x55, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x41, 0x52, 0x45, 0x4d, 0x45, 0x54,
	0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x46, 0x44, 0x4f, 0x10, 0x05, 0x2a, 0x9d, 0x01, 0x0a, 0x12, 0x48, 0x6f, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x24, 0x0a, 0x20, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x48, 0x4f, 0x53, 0x54, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x03, 0x2a, 0x95, 0x01, 0x0a, 0x19, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x28, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02,
	0x2a, 0xbb, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x55, 0x4e,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x2a, 0x5c,
	0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1d,
	0x0a, 0x19, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x56,
	0x4d, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x2a, 0xd1, 0x02, 0x0a,
	0x0e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1f, 0x0a,
	0x1b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x20,
	0x0a, 0x1c, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03,
	0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x12,
	0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x09, 0x12, 0x21, 0x0a,
	0x1d, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0a,
	0x2a, 0xa2, 0x01, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17,
	0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x57, 0x4f, 0x52,
	0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41,
	0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f,
	0x4e, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x60, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41,
	0x44, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44,
	0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x44, 0x48, 0x43, 0x50, 0x10, 0x02, 0x2a, 0x61, 0x0a, 0x12, 0x57, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x24, 0x0a,
	0x20, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x5f,
	0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x4c, 0x55, 0x53,
	0x54, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x42, 0x7b, 0x5a, 0x79, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2d, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x6f, 0x6e, 0x65, 0x2d, 0x69,
	0x6e, 0x74, 0x65, 0x6c, 0x2d, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x6d, 0x61, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x2d, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_compute_v1_compute_proto_rawDescOnce sync.Once
	file_compute_v1_compute_proto_rawDescData = file_compute_v1_compute_proto_rawDesc
)

func file_compute_v1_compute_proto_rawDescGZIP() []byte {
	file_compute_v1_compute_proto_rawDescOnce.Do(func() {
		file_compute_v1_compute_proto_rawDescData = protoimpl.X.CompressGZIP(file_compute_v1_compute_proto_rawDescData)
	})
	return file_compute_v1_compute_proto_rawDescData
}

var file_compute_v1_compute_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_compute_v1_compute_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_compute_v1_compute_proto_goTypes = []interface{}{
	(HostState)(0),                      // 0: compute.v1.HostState
	(HostStatus)(0),                     // 1: compute.v1.HostStatus
	(PowerState)(0),                     // 2: compute.v1.PowerState
	(BaremetalControllerKind)(0),        // 3: compute.v1.BaremetalControllerKind
	(HostComponentState)(0),             // 4: compute.v1.HostComponentState
	(NetworkInterfaceLinkState)(0),      // 5: compute.v1.NetworkInterfaceLinkState
	(InstanceState)(0),                  // 6: compute.v1.InstanceState
	(InstanceKind)(0),                   // 7: compute.v1.InstanceKind
	(InstanceStatus)(0),                 // 8: compute.v1.InstanceStatus
	(WorkloadState)(0),                  // 9: compute.v1.WorkloadState
	(WorkloadKind)(0),                   // 10: compute.v1.WorkloadKind
	(WorkloadMemberKind)(0),             // 11: compute.v1.WorkloadMemberKind
	(*HostResource)(nil),                // 12: compute.v1.HostResource
	(*HoststorageResource)(nil),         // 13: compute.v1.HoststorageResource
	(*HostnicResource)(nil),             // 14: compute.v1.HostnicResource
	(*HostusbResource)(nil),             // 15: compute.v1.HostusbResource
	(*HostgpuResource)(nil),             // 16: compute.v1.HostgpuResource
	(*InstanceResource)(nil),            // 17: compute.v1.InstanceResource
	(*WorkloadResource)(nil),            // 18: compute.v1.WorkloadResource
	(*WorkloadMember)(nil),              // 19: compute.v1.WorkloadMember
	(*v1.SiteResource)(nil),             // 20: location.v1.SiteResource
	(*v11.ProviderResource)(nil),        // 21: provider.v1.ProviderResource
	(*v12.ProjectResource)(nil),         // 22: tenant.v1.ProjectResource
	(*v12.UserResource)(nil),            // 23: tenant.v1.UserResource
	(*v13.OperatingSystemResource)(nil), // 24: os.v1.OperatingSystemResource
}
var file_compute_v1_compute_proto_depIdxs = []int32{
	0,  // 0: compute.v1.HostResource.desired_state:type_name -> compute.v1.HostState
	0,  // 1: compute.v1.HostResource.current_state:type_name -> compute.v1.HostState
	1,  // 2: compute.v1.HostResource.host_status:type_name -> compute.v1.HostStatus
	20, // 3: compute.v1.HostResource.site:type_name -> location.v1.SiteResource
	21, // 4: compute.v1.HostResource.provider:type_name -> provider.v1.ProviderResource
	22, // 5: compute.v1.HostResource.project:type_name -> tenant.v1.ProjectResource
	23, // 6: compute.v1.HostResource.user:type_name -> tenant.v1.UserResource
	3,  // 7: compute.v1.HostResource.bmc_kind:type_name -> compute.v1.BaremetalControllerKind
	2,  // 8: compute.v1.HostResource.desired_power_state:type_name -> compute.v1.PowerState
	2,  // 9: compute.v1.HostResource.current_power_state:type_name -> compute.v1.PowerState
	13, // 10: compute.v1.HostResource.host_storages:type_name -> compute.v1.HoststorageResource
	14, // 11: compute.v1.HostResource.host_nics:type_name -> compute.v1.HostnicResource
	15, // 12: compute.v1.HostResource.host_usbs:type_name -> compute.v1.HostusbResource
	16, // 13: compute.v1.HostResource.host_gpus:type_name -> compute.v1.HostgpuResource
	17, // 14: compute.v1.HostResource.instance:type_name -> compute.v1.InstanceResource
	20, // 15: compute.v1.HoststorageResource.site:type_name -> location.v1.SiteResource
	21, // 16: compute.v1.HoststorageResource.provider:type_name -> provider.v1.ProviderResource
	22, // 17: compute.v1.HoststorageResource.project:type_name -> tenant.v1.ProjectResource
	12, // 18: compute.v1.HoststorageResource.host:type_name -> compute.v1.HostResource
	20, // 19: compute.v1.HostnicResource.site:type_name -> location.v1.SiteResource
	21, // 20: compute.v1.HostnicResource.provider:type_name -> provider.v1.ProviderResource
	22, // 21: compute.v1.HostnicResource.project:type_name -> tenant.v1.ProjectResource
	12, // 22: compute.v1.HostnicResource.host:type_name -> compute.v1.HostResource
	5,  // 23: compute.v1.HostnicResource.link_state:type_name -> compute.v1.NetworkInterfaceLinkState
	12, // 24: compute.v1.HostusbResource.host:type_name -> compute.v1.HostResource
	12, // 25: compute.v1.HostgpuResource.host:type_name -> compute.v1.HostResource
	7,  // 26: compute.v1.InstanceResource.kind:type_name -> compute.v1.InstanceKind
	6,  // 27: compute.v1.InstanceResource.desired_state:type_name -> compute.v1.InstanceState
	6,  // 28: compute.v1.InstanceResource.current_state:type_name -> compute.v1.InstanceState
	12, // 29: compute.v1.InstanceResource.host:type_name -> compute.v1.HostResource
	23, // 30: compute.v1.InstanceResource.user:type_name -> tenant.v1.UserResource
	24, // 31: compute.v1.InstanceResource.os:type_name -> os.v1.OperatingSystemResource
	8,  // 32: compute.v1.InstanceResource.status:type_name -> compute.v1.InstanceStatus
	19, // 33: compute.v1.InstanceResource.workload_members:type_name -> compute.v1.WorkloadMember
	21, // 34: compute.v1.InstanceResource.provider:type_name -> provider.v1.ProviderResource
	10, // 35: compute.v1.WorkloadResource.kind:type_name -> compute.v1.WorkloadKind
	9,  // 36: compute.v1.WorkloadResource.desired_state:type_name -> compute.v1.WorkloadState
	9,  // 37: compute.v1.WorkloadResource.current_state:type_name -> compute.v1.WorkloadState
	19, // 38: compute.v1.WorkloadResource.members:type_name -> compute.v1.WorkloadMember
	11, // 39: compute.v1.WorkloadMember.kind:type_name -> compute.v1.WorkloadMemberKind
	18, // 40: compute.v1.WorkloadMember.workload:type_name -> compute.v1.WorkloadResource
	17, // 41: compute.v1.WorkloadMember.instance:type_name -> compute.v1.InstanceResource
	42, // [42:42] is the sub-list for method output_type
	42, // [42:42] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_compute_v1_compute_proto_init() }
func file_compute_v1_compute_proto_init() {
	if File_compute_v1_compute_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_compute_v1_compute_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_v1_compute_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HoststorageResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_v1_compute_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostnicResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_v1_compute_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostusbResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_v1_compute_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostgpuResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_v1_compute_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_v1_compute_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkloadResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_v1_compute_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkloadMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_compute_v1_compute_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_compute_v1_compute_proto_goTypes,
		DependencyIndexes: file_compute_v1_compute_proto_depIdxs,
		EnumInfos:         file_compute_v1_compute_proto_enumTypes,
		MessageInfos:      file_compute_v1_compute_proto_msgTypes,
	}.Build()
	File_compute_v1_compute_proto = out.File
	file_compute_v1_compute_proto_rawDesc = nil
	file_compute_v1_compute_proto_goTypes = nil
	file_compute_v1_compute_proto_depIdxs = nil
}
