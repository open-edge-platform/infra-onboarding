// SPDX-FileCopyrightText: (C) 2023 Intel Corporation
// SPDX-License-Identifier: LicenseRef-Intel

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: telemetry/v1/telemetry.proto

package telemetryv1

import (
	_ "entgo.io/contrib/entproto/cmd/protoc-gen-ent/options/ent"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	v11 "github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/pkg/api/compute/v1"
	v1 "github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/pkg/api/location/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SeverityLevel int32

const (
	SeverityLevel_SEVERITY_LEVEL_UNSPECIFIED SeverityLevel = 0
	SeverityLevel_SEVERITY_LEVEL_CRITICAL    SeverityLevel = 1
	SeverityLevel_SEVERITY_LEVEL_ERROR       SeverityLevel = 2
	SeverityLevel_SEVERITY_LEVEL_WARN        SeverityLevel = 3
	SeverityLevel_SEVERITY_LEVEL_INFO        SeverityLevel = 4
	SeverityLevel_SEVERITY_LEVEL_DEBUG       SeverityLevel = 5
)

// Enum value maps for SeverityLevel.
var (
	SeverityLevel_name = map[int32]string{
		0: "SEVERITY_LEVEL_UNSPECIFIED",
		1: "SEVERITY_LEVEL_CRITICAL",
		2: "SEVERITY_LEVEL_ERROR",
		3: "SEVERITY_LEVEL_WARN",
		4: "SEVERITY_LEVEL_INFO",
		5: "SEVERITY_LEVEL_DEBUG",
	}
	SeverityLevel_value = map[string]int32{
		"SEVERITY_LEVEL_UNSPECIFIED": 0,
		"SEVERITY_LEVEL_CRITICAL":    1,
		"SEVERITY_LEVEL_ERROR":       2,
		"SEVERITY_LEVEL_WARN":        3,
		"SEVERITY_LEVEL_INFO":        4,
		"SEVERITY_LEVEL_DEBUG":       5,
	}
)

func (x SeverityLevel) Enum() *SeverityLevel {
	p := new(SeverityLevel)
	*p = x
	return p
}

func (x SeverityLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SeverityLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetry_v1_telemetry_proto_enumTypes[0].Descriptor()
}

func (SeverityLevel) Type() protoreflect.EnumType {
	return &file_telemetry_v1_telemetry_proto_enumTypes[0]
}

func (x SeverityLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SeverityLevel.Descriptor instead.
func (SeverityLevel) EnumDescriptor() ([]byte, []int) {
	return file_telemetry_v1_telemetry_proto_rawDescGZIP(), []int{0}
}

type TelemetryResourceKind int32

const (
	TelemetryResourceKind_TELEMETRY_RESOURCE_KIND_UNSPECIFIED TelemetryResourceKind = 0
	TelemetryResourceKind_TELEMETRY_RESOURCE_KIND_METRICS     TelemetryResourceKind = 1
	TelemetryResourceKind_TELEMETRY_RESOURCE_KIND_LOGS        TelemetryResourceKind = 2
)

// Enum value maps for TelemetryResourceKind.
var (
	TelemetryResourceKind_name = map[int32]string{
		0: "TELEMETRY_RESOURCE_KIND_UNSPECIFIED",
		1: "TELEMETRY_RESOURCE_KIND_METRICS",
		2: "TELEMETRY_RESOURCE_KIND_LOGS",
	}
	TelemetryResourceKind_value = map[string]int32{
		"TELEMETRY_RESOURCE_KIND_UNSPECIFIED": 0,
		"TELEMETRY_RESOURCE_KIND_METRICS":     1,
		"TELEMETRY_RESOURCE_KIND_LOGS":        2,
	}
)

func (x TelemetryResourceKind) Enum() *TelemetryResourceKind {
	p := new(TelemetryResourceKind)
	*p = x
	return p
}

func (x TelemetryResourceKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TelemetryResourceKind) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetry_v1_telemetry_proto_enumTypes[1].Descriptor()
}

func (TelemetryResourceKind) Type() protoreflect.EnumType {
	return &file_telemetry_v1_telemetry_proto_enumTypes[1]
}

func (x TelemetryResourceKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TelemetryResourceKind.Descriptor instead.
func (TelemetryResourceKind) EnumDescriptor() ([]byte, []int) {
	return file_telemetry_v1_telemetry_proto_rawDescGZIP(), []int{1}
}

type CollectorKind int32

const (
	CollectorKind_COLLECTOR_KIND_UNSPECIFIED CollectorKind = 0
	CollectorKind_COLLECTOR_KIND_HOST        CollectorKind = 1 // telemetry data collected from bare-metal host
	CollectorKind_COLLECTOR_KIND_CLUSTER     CollectorKind = 2 // // telemetry data collected from Kubernetes cluster
)

// Enum value maps for CollectorKind.
var (
	CollectorKind_name = map[int32]string{
		0: "COLLECTOR_KIND_UNSPECIFIED",
		1: "COLLECTOR_KIND_HOST",
		2: "COLLECTOR_KIND_CLUSTER",
	}
	CollectorKind_value = map[string]int32{
		"COLLECTOR_KIND_UNSPECIFIED": 0,
		"COLLECTOR_KIND_HOST":        1,
		"COLLECTOR_KIND_CLUSTER":     2,
	}
)

func (x CollectorKind) Enum() *CollectorKind {
	p := new(CollectorKind)
	*p = x
	return p
}

func (x CollectorKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CollectorKind) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetry_v1_telemetry_proto_enumTypes[2].Descriptor()
}

func (CollectorKind) Type() protoreflect.EnumType {
	return &file_telemetry_v1_telemetry_proto_enumTypes[2]
}

func (x CollectorKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CollectorKind.Descriptor instead.
func (CollectorKind) EnumDescriptor() ([]byte, []int) {
	return file_telemetry_v1_telemetry_proto_rawDescGZIP(), []int{2}
}

// TelemetryResource defines a concrete grouping of telemetry data (metrics, logs or traces).
type TelemetryGroupResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId    string                `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"` // Resource ID of this Telemetry
	Name          string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                               // user-provided, human-readable name
	Kind          TelemetryResourceKind `protobuf:"varint,3,opt,name=kind,proto3,enum=telemetry.v1.TelemetryResourceKind" json:"kind,omitempty"`
	CollectorKind CollectorKind         `protobuf:"varint,4,opt,name=collector_kind,json=collectorKind,proto3,enum=telemetry.v1.CollectorKind" json:"collector_kind,omitempty"`
	Groups        []string              `protobuf:"bytes,40,rep,name=groups,proto3" json:"groups,omitempty"`     // list of metrics/logs/traces (depends on kind) groups to be gathered. It should always include entries of the same kind.
	Profiles      []*TelemetryProfile   `protobuf:"bytes,50,rep,name=profiles,proto3" json:"profiles,omitempty"` // back-reference to the TelemetryProfiles associated to this TelemetryGroup. Read only.
}

func (x *TelemetryGroupResource) Reset() {
	*x = TelemetryGroupResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_telemetry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryGroupResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryGroupResource) ProtoMessage() {}

func (x *TelemetryGroupResource) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_telemetry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryGroupResource.ProtoReflect.Descriptor instead.
func (*TelemetryGroupResource) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_telemetry_proto_rawDescGZIP(), []int{0}
}

func (x *TelemetryGroupResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *TelemetryGroupResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TelemetryGroupResource) GetKind() TelemetryResourceKind {
	if x != nil {
		return x.Kind
	}
	return TelemetryResourceKind_TELEMETRY_RESOURCE_KIND_UNSPECIFIED
}

func (x *TelemetryGroupResource) GetCollectorKind() CollectorKind {
	if x != nil {
		return x.CollectorKind
	}
	return CollectorKind_COLLECTOR_KIND_UNSPECIFIED
}

func (x *TelemetryGroupResource) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *TelemetryGroupResource) GetProfiles() []*TelemetryProfile {
	if x != nil {
		return x.Profiles
	}
	return nil
}

type TelemetryProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"` // resource ID, generated by inventory on Create
	// mutually exclusive
	//
	// Types that are assignable to Relation:
	//
	//	*TelemetryProfile_Region
	//	*TelemetryProfile_Site
	//	*TelemetryProfile_Instance
	Relation        isTelemetryProfile_Relation `protobuf_oneof:"relation"`
	Kind            TelemetryResourceKind       `protobuf:"varint,20,opt,name=kind,proto3,enum=telemetry.v1.TelemetryResourceKind" json:"kind,omitempty"`
	MetricsInterval uint32                      `protobuf:"varint,30,opt,name=metrics_interval,json=metricsInterval,proto3" json:"metrics_interval,omitempty"`            // metrics interval in seconds, must be set for kind METRICS only
	LogLevel        SeverityLevel               `protobuf:"varint,31,opt,name=log_level,json=logLevel,proto3,enum=telemetry.v1.SeverityLevel" json:"log_level,omitempty"` // log level, must be set for kind LOGS only
	Group           *TelemetryGroupResource     `protobuf:"bytes,32,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *TelemetryProfile) Reset() {
	*x = TelemetryProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_v1_telemetry_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryProfile) ProtoMessage() {}

func (x *TelemetryProfile) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_v1_telemetry_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryProfile.ProtoReflect.Descriptor instead.
func (*TelemetryProfile) Descriptor() ([]byte, []int) {
	return file_telemetry_v1_telemetry_proto_rawDescGZIP(), []int{1}
}

func (x *TelemetryProfile) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (m *TelemetryProfile) GetRelation() isTelemetryProfile_Relation {
	if m != nil {
		return m.Relation
	}
	return nil
}

func (x *TelemetryProfile) GetRegion() *v1.RegionResource {
	if x, ok := x.GetRelation().(*TelemetryProfile_Region); ok {
		return x.Region
	}
	return nil
}

func (x *TelemetryProfile) GetSite() *v1.SiteResource {
	if x, ok := x.GetRelation().(*TelemetryProfile_Site); ok {
		return x.Site
	}
	return nil
}

func (x *TelemetryProfile) GetInstance() *v11.InstanceResource {
	if x, ok := x.GetRelation().(*TelemetryProfile_Instance); ok {
		return x.Instance
	}
	return nil
}

func (x *TelemetryProfile) GetKind() TelemetryResourceKind {
	if x != nil {
		return x.Kind
	}
	return TelemetryResourceKind_TELEMETRY_RESOURCE_KIND_UNSPECIFIED
}

func (x *TelemetryProfile) GetMetricsInterval() uint32 {
	if x != nil {
		return x.MetricsInterval
	}
	return 0
}

func (x *TelemetryProfile) GetLogLevel() SeverityLevel {
	if x != nil {
		return x.LogLevel
	}
	return SeverityLevel_SEVERITY_LEVEL_UNSPECIFIED
}

func (x *TelemetryProfile) GetGroup() *TelemetryGroupResource {
	if x != nil {
		return x.Group
	}
	return nil
}

type isTelemetryProfile_Relation interface {
	isTelemetryProfile_Relation()
}

type TelemetryProfile_Region struct {
	Region *v1.RegionResource `protobuf:"bytes,10,opt,name=region,proto3,oneof"`
}

type TelemetryProfile_Site struct {
	Site *v1.SiteResource `protobuf:"bytes,11,opt,name=site,proto3,oneof"`
}

type TelemetryProfile_Instance struct {
	Instance *v11.InstanceResource `protobuf:"bytes,12,opt,name=instance,proto3,oneof"`
}

func (*TelemetryProfile_Region) isTelemetryProfile_Relation() {}

func (*TelemetryProfile_Site) isTelemetryProfile_Relation() {}

func (*TelemetryProfile_Instance) isTelemetryProfile_Relation() {}

var File_telemetry_v1_telemetry_proto protoreflect.FileDescriptor

var file_telemetry_v1_telemetry_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x18, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x03, 0x0a, 0x16,
	0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xfa, 0x42, 0x25,
	0x72, 0x23, 0x28, 0x17, 0x32, 0x1c, 0x5e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38,
	0x7d, 0x24, 0xd0, 0x01, 0x01, 0xba, 0xa6, 0x49, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x00, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x00, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x4a, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08,
	0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x31, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x19, 0xfa, 0x42, 0x10, 0x92, 0x01, 0x0d, 0x22, 0x0b, 0x72, 0x09, 0x32, 0x07, 0x5e, 0x5b,
	0x5e, 0x7c, 0x5d, 0x2a, 0x24, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x00, 0x52, 0x06, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x47, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x32, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x0b, 0xc2, 0xa6, 0x49, 0x07, 0x12, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x3a, 0x06, 0xba, 0xa6,
	0x49, 0x02, 0x08, 0x01, 0x22, 0xba, 0x04, 0x0a, 0x10, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x51, 0x0a, 0x0b, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30,
	0xfa, 0x42, 0x27, 0x72, 0x25, 0x28, 0x19, 0x32, 0x1e, 0x5e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0xba, 0xa6, 0x49, 0x02, 0x18, 0x01,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x06, 0xc2, 0xa6, 0x49, 0x02, 0x08,
	0x01, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x73,
	0x69, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x06, 0xc2, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x48, 0x00, 0x52, 0x04,
	0x73, 0x69, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x06, 0xc2, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x48, 0x00, 0x52, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x06, 0xba, 0xa6, 0x49,
	0x02, 0x08, 0x00, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x10, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0f, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x20, 0x00, 0x40, 0x01, 0xba, 0xa6,
	0x49, 0x02, 0x08, 0x01, 0x52, 0x0f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x40, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x08, 0x6c,
	0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x44, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0xc2, 0xa6,
	0x49, 0x04, 0x08, 0x01, 0x18, 0x01, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x3a, 0x06, 0xba,
	0xa6, 0x49, 0x02, 0x08, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2a, 0xb2, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x57, 0x41, 0x52,
	0x4e, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x44,
	0x45, 0x42, 0x55, 0x47, 0x10, 0x05, 0x2a, 0x87, 0x01, 0x0a, 0x15, 0x54, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x27, 0x0a, 0x23, 0x54, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x45, 0x4c,
	0x45, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x10, 0x01, 0x12, 0x20,
	0x0a, 0x1c, 0x54, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x53, 0x10, 0x02,
	0x2a, 0x64, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f,
	0x4c, 0x4c, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x4c, 0x55,
	0x53, 0x54, 0x45, 0x52, 0x10, 0x02, 0x42, 0x7f, 0x5a, 0x7d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x6f, 0x6e, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x6c,
	0x2d, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x6d, 0x61, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x2d, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_telemetry_v1_telemetry_proto_rawDescOnce sync.Once
	file_telemetry_v1_telemetry_proto_rawDescData = file_telemetry_v1_telemetry_proto_rawDesc
)

func file_telemetry_v1_telemetry_proto_rawDescGZIP() []byte {
	file_telemetry_v1_telemetry_proto_rawDescOnce.Do(func() {
		file_telemetry_v1_telemetry_proto_rawDescData = protoimpl.X.CompressGZIP(file_telemetry_v1_telemetry_proto_rawDescData)
	})
	return file_telemetry_v1_telemetry_proto_rawDescData
}

var file_telemetry_v1_telemetry_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_telemetry_v1_telemetry_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_telemetry_v1_telemetry_proto_goTypes = []interface{}{
	(SeverityLevel)(0),             // 0: telemetry.v1.SeverityLevel
	(TelemetryResourceKind)(0),     // 1: telemetry.v1.TelemetryResourceKind
	(CollectorKind)(0),             // 2: telemetry.v1.CollectorKind
	(*TelemetryGroupResource)(nil), // 3: telemetry.v1.TelemetryGroupResource
	(*TelemetryProfile)(nil),       // 4: telemetry.v1.TelemetryProfile
	(*v1.RegionResource)(nil),      // 5: location.v1.RegionResource
	(*v1.SiteResource)(nil),        // 6: location.v1.SiteResource
	(*v11.InstanceResource)(nil),   // 7: compute.v1.InstanceResource
}
var file_telemetry_v1_telemetry_proto_depIdxs = []int32{
	1, // 0: telemetry.v1.TelemetryGroupResource.kind:type_name -> telemetry.v1.TelemetryResourceKind
	2, // 1: telemetry.v1.TelemetryGroupResource.collector_kind:type_name -> telemetry.v1.CollectorKind
	4, // 2: telemetry.v1.TelemetryGroupResource.profiles:type_name -> telemetry.v1.TelemetryProfile
	5, // 3: telemetry.v1.TelemetryProfile.region:type_name -> location.v1.RegionResource
	6, // 4: telemetry.v1.TelemetryProfile.site:type_name -> location.v1.SiteResource
	7, // 5: telemetry.v1.TelemetryProfile.instance:type_name -> compute.v1.InstanceResource
	1, // 6: telemetry.v1.TelemetryProfile.kind:type_name -> telemetry.v1.TelemetryResourceKind
	0, // 7: telemetry.v1.TelemetryProfile.log_level:type_name -> telemetry.v1.SeverityLevel
	3, // 8: telemetry.v1.TelemetryProfile.group:type_name -> telemetry.v1.TelemetryGroupResource
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_telemetry_v1_telemetry_proto_init() }
func file_telemetry_v1_telemetry_proto_init() {
	if File_telemetry_v1_telemetry_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_telemetry_v1_telemetry_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryGroupResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_v1_telemetry_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_telemetry_v1_telemetry_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*TelemetryProfile_Region)(nil),
		(*TelemetryProfile_Site)(nil),
		(*TelemetryProfile_Instance)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_telemetry_v1_telemetry_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_telemetry_v1_telemetry_proto_goTypes,
		DependencyIndexes: file_telemetry_v1_telemetry_proto_depIdxs,
		EnumInfos:         file_telemetry_v1_telemetry_proto_enumTypes,
		MessageInfos:      file_telemetry_v1_telemetry_proto_msgTypes,
	}.Build()
	File_telemetry_v1_telemetry_proto = out.File
	file_telemetry_v1_telemetry_proto_rawDesc = nil
	file_telemetry_v1_telemetry_proto_goTypes = nil
	file_telemetry_v1_telemetry_proto_depIdxs = nil
}
