// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: telemetry/v1/telemetry.proto

package telemetryv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TelemetryGroupResource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TelemetryGroupResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TelemetryGroupResource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TelemetryGroupResourceMultiError, or nil if none found.
func (m *TelemetryGroupResource) ValidateAll() error {
	return m.validate(true)
}

func (m *TelemetryGroupResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResourceId() != "" {

		if len(m.GetResourceId()) > 23 {
			err := TelemetryGroupResourceValidationError{
				field:  "ResourceId",
				reason: "value length must be at most 23 bytes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_TelemetryGroupResource_ResourceId_Pattern.MatchString(m.GetResourceId()) {
			err := TelemetryGroupResourceValidationError{
				field:  "ResourceId",
				reason: "value does not match regex pattern \"^telemetrygroup-[0-9a-f]{8}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for Name

	// no validation rules for Kind

	// no validation rules for CollectorKind

	for idx, item := range m.GetGroups() {
		_, _ = idx, item

		if !_TelemetryGroupResource_Groups_Pattern.MatchString(item) {
			err := TelemetryGroupResourceValidationError{
				field:  fmt.Sprintf("Groups[%v]", idx),
				reason: "value does not match regex pattern \"^[^|]*$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	for idx, item := range m.GetProfiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TelemetryGroupResourceValidationError{
						field:  fmt.Sprintf("Profiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TelemetryGroupResourceValidationError{
						field:  fmt.Sprintf("Profiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TelemetryGroupResourceValidationError{
					field:  fmt.Sprintf("Profiles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TelemetryGroupResourceMultiError(errors)
	}

	return nil
}

// TelemetryGroupResourceMultiError is an error wrapping multiple validation
// errors returned by TelemetryGroupResource.ValidateAll() if the designated
// constraints aren't met.
type TelemetryGroupResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TelemetryGroupResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TelemetryGroupResourceMultiError) AllErrors() []error { return m }

// TelemetryGroupResourceValidationError is the validation error returned by
// TelemetryGroupResource.Validate if the designated constraints aren't met.
type TelemetryGroupResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TelemetryGroupResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TelemetryGroupResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TelemetryGroupResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TelemetryGroupResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TelemetryGroupResourceValidationError) ErrorName() string {
	return "TelemetryGroupResourceValidationError"
}

// Error satisfies the builtin error interface
func (e TelemetryGroupResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTelemetryGroupResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TelemetryGroupResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TelemetryGroupResourceValidationError{}

var _TelemetryGroupResource_ResourceId_Pattern = regexp.MustCompile("^telemetrygroup-[0-9a-f]{8}$")

var _TelemetryGroupResource_Groups_Pattern = regexp.MustCompile("^[^|]*$")

// Validate checks the field values on TelemetryProfile with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TelemetryProfile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TelemetryProfile with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TelemetryProfileMultiError, or nil if none found.
func (m *TelemetryProfile) ValidateAll() error {
	return m.validate(true)
}

func (m *TelemetryProfile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResourceId() != "" {

		if len(m.GetResourceId()) > 25 {
			err := TelemetryProfileValidationError{
				field:  "ResourceId",
				reason: "value length must be at most 25 bytes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_TelemetryProfile_ResourceId_Pattern.MatchString(m.GetResourceId()) {
			err := TelemetryProfileValidationError{
				field:  "ResourceId",
				reason: "value does not match regex pattern \"^telemetryprofile-[0-9a-f]{8}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for Kind

	if m.GetMetricsInterval() != 0 {

		if m.GetMetricsInterval() <= 0 {
			err := TelemetryProfileValidationError{
				field:  "MetricsInterval",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for LogLevel

	if all {
		switch v := interface{}(m.GetGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TelemetryProfileValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TelemetryProfileValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TelemetryProfileValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Relation.(type) {
	case *TelemetryProfile_Region:
		if v == nil {
			err := TelemetryProfileValidationError{
				field:  "Relation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRegion()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TelemetryProfileValidationError{
						field:  "Region",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TelemetryProfileValidationError{
						field:  "Region",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRegion()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TelemetryProfileValidationError{
					field:  "Region",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TelemetryProfile_Site:
		if v == nil {
			err := TelemetryProfileValidationError{
				field:  "Relation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSite()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TelemetryProfileValidationError{
						field:  "Site",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TelemetryProfileValidationError{
						field:  "Site",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSite()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TelemetryProfileValidationError{
					field:  "Site",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TelemetryProfile_Instance:
		if v == nil {
			err := TelemetryProfileValidationError{
				field:  "Relation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetInstance()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TelemetryProfileValidationError{
						field:  "Instance",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TelemetryProfileValidationError{
						field:  "Instance",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInstance()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TelemetryProfileValidationError{
					field:  "Instance",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return TelemetryProfileMultiError(errors)
	}

	return nil
}

// TelemetryProfileMultiError is an error wrapping multiple validation errors
// returned by TelemetryProfile.ValidateAll() if the designated constraints
// aren't met.
type TelemetryProfileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TelemetryProfileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TelemetryProfileMultiError) AllErrors() []error { return m }

// TelemetryProfileValidationError is the validation error returned by
// TelemetryProfile.Validate if the designated constraints aren't met.
type TelemetryProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TelemetryProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TelemetryProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TelemetryProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TelemetryProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TelemetryProfileValidationError) ErrorName() string { return "TelemetryProfileValidationError" }

// Error satisfies the builtin error interface
func (e TelemetryProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTelemetryProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TelemetryProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TelemetryProfileValidationError{}

var _TelemetryProfile_ResourceId_Pattern = regexp.MustCompile("^telemetryprofile-[0-9a-f]{8}$")
