// SPDX-FileCopyrightText: (C) 2022 Intel Corporation
// SPDX-License-Identifier: LicenseRef-Intel

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: network/v1/network.proto

package networkv1

import (
	_ "entgo.io/contrib/entproto/cmd/protoc-gen-ent/options/ent"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	v1 "github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/pkg/api/compute/v1"
	v11 "github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/pkg/api/location/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NetlinkState int32

const (
	NetlinkState_NETLINK_STATE_UNSPECIFIED NetlinkState = 0
	NetlinkState_NETLINK_STATE_DELETED     NetlinkState = 1
	NetlinkState_NETLINK_STATE_ONLINE      NetlinkState = 2
	NetlinkState_NETLINK_STATE_OFFLINE     NetlinkState = 3
	NetlinkState_NETLINK_STATE_ERROR       NetlinkState = 4
)

// Enum value maps for NetlinkState.
var (
	NetlinkState_name = map[int32]string{
		0: "NETLINK_STATE_UNSPECIFIED",
		1: "NETLINK_STATE_DELETED",
		2: "NETLINK_STATE_ONLINE",
		3: "NETLINK_STATE_OFFLINE",
		4: "NETLINK_STATE_ERROR",
	}
	NetlinkState_value = map[string]int32{
		"NETLINK_STATE_UNSPECIFIED": 0,
		"NETLINK_STATE_DELETED":     1,
		"NETLINK_STATE_ONLINE":      2,
		"NETLINK_STATE_OFFLINE":     3,
		"NETLINK_STATE_ERROR":       4,
	}
)

func (x NetlinkState) Enum() *NetlinkState {
	p := new(NetlinkState)
	*p = x
	return p
}

func (x NetlinkState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetlinkState) Descriptor() protoreflect.EnumDescriptor {
	return file_network_v1_network_proto_enumTypes[0].Descriptor()
}

func (NetlinkState) Type() protoreflect.EnumType {
	return &file_network_v1_network_proto_enumTypes[0]
}

func (x NetlinkState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetlinkState.Descriptor instead.
func (NetlinkState) EnumDescriptor() ([]byte, []int) {
	return file_network_v1_network_proto_rawDescGZIP(), []int{0}
}

type IPAddressState int32

const (
	IPAddressState_IP_ADDRESS_STATE_UNSPECIFIED IPAddressState = 0
	IPAddressState_IP_ADDRESS_STATE_ERROR       IPAddressState = 1
	IPAddressState_IP_ADDRESS_STATE_ASSIGNED    IPAddressState = 2
	IPAddressState_IP_ADDRESS_STATE_CONFIGURED  IPAddressState = 3
	IPAddressState_IP_ADDRESS_STATE_RELEASED    IPAddressState = 4
	IPAddressState_IP_ADDRESS_STATE_DELETED     IPAddressState = 5
)

// Enum value maps for IPAddressState.
var (
	IPAddressState_name = map[int32]string{
		0: "IP_ADDRESS_STATE_UNSPECIFIED",
		1: "IP_ADDRESS_STATE_ERROR",
		2: "IP_ADDRESS_STATE_ASSIGNED",
		3: "IP_ADDRESS_STATE_CONFIGURED",
		4: "IP_ADDRESS_STATE_RELEASED",
		5: "IP_ADDRESS_STATE_DELETED",
	}
	IPAddressState_value = map[string]int32{
		"IP_ADDRESS_STATE_UNSPECIFIED": 0,
		"IP_ADDRESS_STATE_ERROR":       1,
		"IP_ADDRESS_STATE_ASSIGNED":    2,
		"IP_ADDRESS_STATE_CONFIGURED":  3,
		"IP_ADDRESS_STATE_RELEASED":    4,
		"IP_ADDRESS_STATE_DELETED":     5,
	}
)

func (x IPAddressState) Enum() *IPAddressState {
	p := new(IPAddressState)
	*p = x
	return p
}

func (x IPAddressState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPAddressState) Descriptor() protoreflect.EnumDescriptor {
	return file_network_v1_network_proto_enumTypes[1].Descriptor()
}

func (IPAddressState) Type() protoreflect.EnumType {
	return &file_network_v1_network_proto_enumTypes[1]
}

func (x IPAddressState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPAddressState.Descriptor instead.
func (IPAddressState) EnumDescriptor() ([]byte, []int) {
	return file_network_v1_network_proto_rawDescGZIP(), []int{1}
}

type IPAddressStatus int32

const (
	IPAddressStatus_IP_ADDRESS_STATUS_UNSPECIFIED         IPAddressStatus = 0
	IPAddressStatus_IP_ADDRESS_STATUS_ASSIGNMENT_ERROR    IPAddressStatus = 1
	IPAddressStatus_IP_ADDRESS_STATUS_ASSIGNED            IPAddressStatus = 2
	IPAddressStatus_IP_ADDRESS_STATUS_CONFIGURATION_ERROR IPAddressStatus = 3
	IPAddressStatus_IP_ADDRESS_STATUS_CONFIGURED          IPAddressStatus = 4
	IPAddressStatus_IP_ADDRESS_STATUS_RELEASED            IPAddressStatus = 5
	IPAddressStatus_IP_ADDRESS_STATUS_ERROR               IPAddressStatus = 6
)

// Enum value maps for IPAddressStatus.
var (
	IPAddressStatus_name = map[int32]string{
		0: "IP_ADDRESS_STATUS_UNSPECIFIED",
		1: "IP_ADDRESS_STATUS_ASSIGNMENT_ERROR",
		2: "IP_ADDRESS_STATUS_ASSIGNED",
		3: "IP_ADDRESS_STATUS_CONFIGURATION_ERROR",
		4: "IP_ADDRESS_STATUS_CONFIGURED",
		5: "IP_ADDRESS_STATUS_RELEASED",
		6: "IP_ADDRESS_STATUS_ERROR",
	}
	IPAddressStatus_value = map[string]int32{
		"IP_ADDRESS_STATUS_UNSPECIFIED":         0,
		"IP_ADDRESS_STATUS_ASSIGNMENT_ERROR":    1,
		"IP_ADDRESS_STATUS_ASSIGNED":            2,
		"IP_ADDRESS_STATUS_CONFIGURATION_ERROR": 3,
		"IP_ADDRESS_STATUS_CONFIGURED":          4,
		"IP_ADDRESS_STATUS_RELEASED":            5,
		"IP_ADDRESS_STATUS_ERROR":               6,
	}
)

func (x IPAddressStatus) Enum() *IPAddressStatus {
	p := new(IPAddressStatus)
	*p = x
	return p
}

func (x IPAddressStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPAddressStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_network_v1_network_proto_enumTypes[2].Descriptor()
}

func (IPAddressStatus) Type() protoreflect.EnumType {
	return &file_network_v1_network_proto_enumTypes[2]
}

func (x IPAddressStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPAddressStatus.Descriptor instead.
func (IPAddressStatus) EnumDescriptor() ([]byte, []int) {
	return file_network_v1_network_proto_rawDescGZIP(), []int{2}
}

type IPAddressConfigMethod int32

const (
	IPAddressConfigMethod_IP_ADDRESS_CONFIG_METHOD_UNSPECIFIED IPAddressConfigMethod = 0
	IPAddressConfigMethod_IP_ADDRESS_CONFIG_METHOD_STATIC      IPAddressConfigMethod = 1
	IPAddressConfigMethod_IP_ADDRESS_CONFIG_METHOD_DYNAMIC     IPAddressConfigMethod = 2
)

// Enum value maps for IPAddressConfigMethod.
var (
	IPAddressConfigMethod_name = map[int32]string{
		0: "IP_ADDRESS_CONFIG_METHOD_UNSPECIFIED",
		1: "IP_ADDRESS_CONFIG_METHOD_STATIC",
		2: "IP_ADDRESS_CONFIG_METHOD_DYNAMIC",
	}
	IPAddressConfigMethod_value = map[string]int32{
		"IP_ADDRESS_CONFIG_METHOD_UNSPECIFIED": 0,
		"IP_ADDRESS_CONFIG_METHOD_STATIC":      1,
		"IP_ADDRESS_CONFIG_METHOD_DYNAMIC":     2,
	}
)

func (x IPAddressConfigMethod) Enum() *IPAddressConfigMethod {
	p := new(IPAddressConfigMethod)
	*p = x
	return p
}

func (x IPAddressConfigMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPAddressConfigMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_network_v1_network_proto_enumTypes[3].Descriptor()
}

func (IPAddressConfigMethod) Type() protoreflect.EnumType {
	return &file_network_v1_network_proto_enumTypes[3]
}

func (x IPAddressConfigMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPAddressConfigMethod.Descriptor instead.
func (IPAddressConfigMethod) EnumDescriptor() ([]byte, []int) {
	return file_network_v1_network_proto_rawDescGZIP(), []int{3}
}

type EndpointResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId  string           `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"` // resource ID, generated by inventory on Create
	Kind        string           `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`                               // Kind of resource. Frequently tied to Provider
	Description string           `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Host        *v1.HostResource `protobuf:"bytes,12,opt,name=host,proto3" json:"host,omitempty"` // Host this Endpoint belongs to
}

func (x *EndpointResource) Reset() {
	*x = EndpointResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_v1_network_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointResource) ProtoMessage() {}

func (x *EndpointResource) ProtoReflect() protoreflect.Message {
	mi := &file_network_v1_network_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointResource.ProtoReflect.Descriptor instead.
func (*EndpointResource) Descriptor() ([]byte, []int) {
	return file_network_v1_network_proto_rawDescGZIP(), []int{0}
}

func (x *EndpointResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *EndpointResource) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *EndpointResource) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EndpointResource) GetHost() *v1.HostResource {
	if x != nil {
		return x.Host
	}
	return nil
}

type NetlinkResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId     string            `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"` // resource ID, generated by inventory on Create
	Kind           string            `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`                               // Kind of resource. Frequently tied to Provider
	Description    string            `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	DesiredState   NetlinkState      `protobuf:"varint,4,opt,name=desired_state,json=desiredState,proto3,enum=network.v1.NetlinkState" json:"desired_state,omitempty"`
	CurrentState   NetlinkState      `protobuf:"varint,5,opt,name=current_state,json=currentState,proto3,enum=network.v1.NetlinkState" json:"current_state,omitempty"`
	ProviderStatus string            `protobuf:"bytes,6,opt,name=provider_status,json=providerStatus,proto3" json:"provider_status,omitempty"`
	Src            *EndpointResource `protobuf:"bytes,16,opt,name=src,proto3" json:"src,omitempty"`
	Dst            *EndpointResource `protobuf:"bytes,17,opt,name=dst,proto3" json:"dst,omitempty"`
}

func (x *NetlinkResource) Reset() {
	*x = NetlinkResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_v1_network_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetlinkResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetlinkResource) ProtoMessage() {}

func (x *NetlinkResource) ProtoReflect() protoreflect.Message {
	mi := &file_network_v1_network_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetlinkResource.ProtoReflect.Descriptor instead.
func (*NetlinkResource) Descriptor() ([]byte, []int) {
	return file_network_v1_network_proto_rawDescGZIP(), []int{1}
}

func (x *NetlinkResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *NetlinkResource) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *NetlinkResource) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NetlinkResource) GetDesiredState() NetlinkState {
	if x != nil {
		return x.DesiredState
	}
	return NetlinkState_NETLINK_STATE_UNSPECIFIED
}

func (x *NetlinkResource) GetCurrentState() NetlinkState {
	if x != nil {
		return x.CurrentState
	}
	return NetlinkState_NETLINK_STATE_UNSPECIFIED
}

func (x *NetlinkResource) GetProviderStatus() string {
	if x != nil {
		return x.ProviderStatus
	}
	return ""
}

func (x *NetlinkResource) GetSrc() *EndpointResource {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *NetlinkResource) GetDst() *EndpointResource {
	if x != nil {
		return x.Dst
	}
	return nil
}

// NetworkSegment represents a logical Layer 1 (L1) of the network and a VLAN (i.e., broadcast domain)
// ADR: https://github.com/intel-innersource/documentation.edge.one-edge.maestro/blob/main/content/docs/iaas/resources/network/segment.md
type NetworkSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId  string            `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"` // resource ID, generated by inventory on Create
	Description string            `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`                 // human readable description
	VlanId      int32             `protobuf:"varint,3,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	Site        *v11.SiteResource `protobuf:"bytes,4,opt,name=site,proto3" json:"site,omitempty"` // Site this NetworkSegment is located at, it can't be null
}

func (x *NetworkSegment) Reset() {
	*x = NetworkSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_v1_network_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkSegment) ProtoMessage() {}

func (x *NetworkSegment) ProtoReflect() protoreflect.Message {
	mi := &file_network_v1_network_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkSegment.ProtoReflect.Descriptor instead.
func (*NetworkSegment) Descriptor() ([]byte, []int) {
	return file_network_v1_network_proto_rawDescGZIP(), []int{2}
}

func (x *NetworkSegment) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *NetworkSegment) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NetworkSegment) GetVlanId() int32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *NetworkSegment) GetSite() *v11.SiteResource {
	if x != nil {
		return x.Site
	}
	return nil
}

type IPAddressResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource ID, generated by Inventory on Create
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// An IP Address using CIDR notation (e.g., 192.168.1.12/24). Empty to allow the allocation in future
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// Set to optional to allow the discovery
	DesiredState IPAddressState  `protobuf:"varint,5,opt,name=desired_state,json=desiredState,proto3,enum=network.v1.IPAddressState" json:"desired_state,omitempty"`
	CurrentState IPAddressState  `protobuf:"varint,6,opt,name=current_state,json=currentState,proto3,enum=network.v1.IPAddressState" json:"current_state,omitempty"`
	Status       IPAddressStatus `protobuf:"varint,7,opt,name=status,proto3,enum=network.v1.IPAddressStatus" json:"status,omitempty"`
	// User-friendly status to provide details about the resource state
	StatusDetail string `protobuf:"bytes,8,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`
	// With user-assisted config we may need to use UNSPECIFIED for discovery
	ConfigMethod IPAddressConfigMethod `protobuf:"varint,9,opt,name=config_method,json=configMethod,proto3,enum=network.v1.IPAddressConfigMethod" json:"config_method,omitempty"`
	Nic          *v1.HostnicResource   `protobuf:"bytes,15,opt,name=nic,proto3" json:"nic,omitempty"` // Nic this IPAddress is assigned to
}

func (x *IPAddressResource) Reset() {
	*x = IPAddressResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_v1_network_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPAddressResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPAddressResource) ProtoMessage() {}

func (x *IPAddressResource) ProtoReflect() protoreflect.Message {
	mi := &file_network_v1_network_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPAddressResource.ProtoReflect.Descriptor instead.
func (*IPAddressResource) Descriptor() ([]byte, []int) {
	return file_network_v1_network_proto_rawDescGZIP(), []int{3}
}

func (x *IPAddressResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *IPAddressResource) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *IPAddressResource) GetDesiredState() IPAddressState {
	if x != nil {
		return x.DesiredState
	}
	return IPAddressState_IP_ADDRESS_STATE_UNSPECIFIED
}

func (x *IPAddressResource) GetCurrentState() IPAddressState {
	if x != nil {
		return x.CurrentState
	}
	return IPAddressState_IP_ADDRESS_STATE_UNSPECIFIED
}

func (x *IPAddressResource) GetStatus() IPAddressStatus {
	if x != nil {
		return x.Status
	}
	return IPAddressStatus_IP_ADDRESS_STATUS_UNSPECIFIED
}

func (x *IPAddressResource) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *IPAddressResource) GetConfigMethod() IPAddressConfigMethod {
	if x != nil {
		return x.ConfigMethod
	}
	return IPAddressConfigMethod_IP_ADDRESS_CONFIG_METHOD_UNSPECIFIED
}

func (x *IPAddressResource) GetNic() *v1.HostnicResource {
	if x != nil {
		return x.Nic
	}
	return nil
}

var File_network_v1_network_proto protoreflect.FileDescriptor

var file_network_v1_network_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x1a, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe1, 0x01, 0x0a, 0x10, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x28, 0xfa, 0x42, 0x1f, 0x72, 0x1d, 0x28, 0x11, 0x32, 0x16, 0x5e, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24,
	0xd0, 0x01, 0x01, 0xba, 0xa6, 0x49, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x28, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x42, 0x06, 0xc2, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x3a, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x22, 0xd0, 0x03, 0x0a, 0x0f, 0x4e, 0x65,
	0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x48, 0x0a,
	0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x27, 0xfa, 0x42, 0x1e, 0x72, 0x1c, 0x28, 0x10, 0x32, 0x15, 0x5e, 0x6e, 0x65,
	0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38,
	0x7d, 0x24, 0xd0, 0x01, 0x01, 0xba, 0xa6, 0x49, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a,
	0x0d, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x65, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x65, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x06, 0xba,
	0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6,
	0x49, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42,
	0x06, 0xc2, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x36, 0x0a, 0x03,
	0x64, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x06, 0xc2, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52,
	0x03, 0x64, 0x73, 0x74, 0x3a, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x22, 0xf1, 0x01, 0x0a,
	0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x47, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x28, 0x0f, 0x32, 0x14, 0x5e,
	0x6e, 0x65, 0x74, 0x73, 0x65, 0x67, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x38, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0xba, 0xa6, 0x49, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x12, 0xfa, 0x42, 0x09, 0x1a, 0x07, 0x10, 0xff, 0x1f, 0x28, 0x00, 0x38,
	0x01, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12,
	0x37, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0xc2, 0xa6, 0x49, 0x04, 0x08, 0x01,
	0x18, 0x01, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x3a, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01,
	0x22, 0x8b, 0x04, 0x0a, 0x11, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xfa, 0x42, 0x1d,
	0x72, 0x1b, 0x28, 0x0f, 0x32, 0x14, 0x5e, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x2d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0xba, 0xa6, 0x49,
	0x02, 0x18, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x47, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x06, 0xba,
	0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2b, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52,
	0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x4e, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x37, 0x0a,
	0x03, 0x6e, 0x69, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x69, 0x63, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0xc2, 0xa6, 0x49, 0x04, 0x08, 0x01, 0x18,
	0x01, 0x52, 0x03, 0x6e, 0x69, 0x63, 0x3a, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x2a, 0x96,
	0x01, 0x0a, 0x0c, 0x4e, 0x65, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1d, 0x0a, 0x19, 0x4e, 0x45, 0x54, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x15, 0x4e, 0x45, 0x54, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x45, 0x54,
	0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e,
	0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x45, 0x54, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x17,
	0x0a, 0x13, 0x4e, 0x45, 0x54, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x2a, 0xcb, 0x01, 0x0a, 0x0e, 0x49, 0x50, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x50,
	0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16,
	0x49, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x50, 0x5f, 0x41,
	0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x53, 0x53,
	0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x50, 0x5f, 0x41, 0x44,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x50, 0x5f, 0x41,
	0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x4c,
	0x45, 0x41, 0x53, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x50, 0x5f, 0x41, 0x44,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x05, 0x2a, 0x86, 0x02, 0x0a, 0x0f, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x50, 0x5f,
	0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22,
	0x49, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45,
	0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45,
	0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12,
	0x20, 0x0a, 0x1c, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x44, 0x10,
	0x05, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x2a, 0x8c,
	0x01, 0x0a, 0x15, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x28, 0x0a, 0x24, 0x49, 0x50, 0x5f, 0x41,
	0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x45,
	0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x50, 0x5f, 0x41, 0x44,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x10, 0x02, 0x42, 0x7b, 0x5a,
	0x79, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x6c, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x6f, 0x6e,
	0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2d, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x6d, 0x61, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x2d, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x76, 0x31,
	0x3b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_network_v1_network_proto_rawDescOnce sync.Once
	file_network_v1_network_proto_rawDescData = file_network_v1_network_proto_rawDesc
)

func file_network_v1_network_proto_rawDescGZIP() []byte {
	file_network_v1_network_proto_rawDescOnce.Do(func() {
		file_network_v1_network_proto_rawDescData = protoimpl.X.CompressGZIP(file_network_v1_network_proto_rawDescData)
	})
	return file_network_v1_network_proto_rawDescData
}

var file_network_v1_network_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_network_v1_network_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_network_v1_network_proto_goTypes = []interface{}{
	(NetlinkState)(0),          // 0: network.v1.NetlinkState
	(IPAddressState)(0),        // 1: network.v1.IPAddressState
	(IPAddressStatus)(0),       // 2: network.v1.IPAddressStatus
	(IPAddressConfigMethod)(0), // 3: network.v1.IPAddressConfigMethod
	(*EndpointResource)(nil),   // 4: network.v1.EndpointResource
	(*NetlinkResource)(nil),    // 5: network.v1.NetlinkResource
	(*NetworkSegment)(nil),     // 6: network.v1.NetworkSegment
	(*IPAddressResource)(nil),  // 7: network.v1.IPAddressResource
	(*v1.HostResource)(nil),    // 8: compute.v1.HostResource
	(*v11.SiteResource)(nil),   // 9: location.v1.SiteResource
	(*v1.HostnicResource)(nil), // 10: compute.v1.HostnicResource
}
var file_network_v1_network_proto_depIdxs = []int32{
	8,  // 0: network.v1.EndpointResource.host:type_name -> compute.v1.HostResource
	0,  // 1: network.v1.NetlinkResource.desired_state:type_name -> network.v1.NetlinkState
	0,  // 2: network.v1.NetlinkResource.current_state:type_name -> network.v1.NetlinkState
	4,  // 3: network.v1.NetlinkResource.src:type_name -> network.v1.EndpointResource
	4,  // 4: network.v1.NetlinkResource.dst:type_name -> network.v1.EndpointResource
	9,  // 5: network.v1.NetworkSegment.site:type_name -> location.v1.SiteResource
	1,  // 6: network.v1.IPAddressResource.desired_state:type_name -> network.v1.IPAddressState
	1,  // 7: network.v1.IPAddressResource.current_state:type_name -> network.v1.IPAddressState
	2,  // 8: network.v1.IPAddressResource.status:type_name -> network.v1.IPAddressStatus
	3,  // 9: network.v1.IPAddressResource.config_method:type_name -> network.v1.IPAddressConfigMethod
	10, // 10: network.v1.IPAddressResource.nic:type_name -> compute.v1.HostnicResource
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_network_v1_network_proto_init() }
func file_network_v1_network_proto_init() {
	if File_network_v1_network_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_network_v1_network_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndpointResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_v1_network_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetlinkResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_v1_network_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_v1_network_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPAddressResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_network_v1_network_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_network_v1_network_proto_goTypes,
		DependencyIndexes: file_network_v1_network_proto_depIdxs,
		EnumInfos:         file_network_v1_network_proto_enumTypes,
		MessageInfos:      file_network_v1_network_proto_msgTypes,
	}.Build()
	File_network_v1_network_proto = out.File
	file_network_v1_network_proto_rawDesc = nil
	file_network_v1_network_proto_goTypes = nil
	file_network_v1_network_proto_depIdxs = nil
}
