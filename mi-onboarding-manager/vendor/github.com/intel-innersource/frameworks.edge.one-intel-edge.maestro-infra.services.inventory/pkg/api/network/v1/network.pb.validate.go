// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: network/v1/network.proto

package networkv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EndpointResource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EndpointResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EndpointResource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EndpointResourceMultiError, or nil if none found.
func (m *EndpointResource) ValidateAll() error {
	return m.validate(true)
}

func (m *EndpointResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResourceId() != "" {

		if len(m.GetResourceId()) > 17 {
			err := EndpointResourceValidationError{
				field:  "ResourceId",
				reason: "value length must be at most 17 bytes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_EndpointResource_ResourceId_Pattern.MatchString(m.GetResourceId()) {
			err := EndpointResourceValidationError{
				field:  "ResourceId",
				reason: "value does not match regex pattern \"^endpoint-[0-9a-f]{8}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for Kind

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetHost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EndpointResourceValidationError{
					field:  "Host",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EndpointResourceValidationError{
					field:  "Host",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EndpointResourceValidationError{
				field:  "Host",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EndpointResourceMultiError(errors)
	}

	return nil
}

// EndpointResourceMultiError is an error wrapping multiple validation errors
// returned by EndpointResource.ValidateAll() if the designated constraints
// aren't met.
type EndpointResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EndpointResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EndpointResourceMultiError) AllErrors() []error { return m }

// EndpointResourceValidationError is the validation error returned by
// EndpointResource.Validate if the designated constraints aren't met.
type EndpointResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndpointResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndpointResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndpointResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndpointResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndpointResourceValidationError) ErrorName() string { return "EndpointResourceValidationError" }

// Error satisfies the builtin error interface
func (e EndpointResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndpointResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndpointResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndpointResourceValidationError{}

var _EndpointResource_ResourceId_Pattern = regexp.MustCompile("^endpoint-[0-9a-f]{8}$")

// Validate checks the field values on NetlinkResource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NetlinkResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NetlinkResource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NetlinkResourceMultiError, or nil if none found.
func (m *NetlinkResource) ValidateAll() error {
	return m.validate(true)
}

func (m *NetlinkResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResourceId() != "" {

		if len(m.GetResourceId()) > 16 {
			err := NetlinkResourceValidationError{
				field:  "ResourceId",
				reason: "value length must be at most 16 bytes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_NetlinkResource_ResourceId_Pattern.MatchString(m.GetResourceId()) {
			err := NetlinkResourceValidationError{
				field:  "ResourceId",
				reason: "value does not match regex pattern \"^netlink-[0-9a-f]{8}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for Kind

	// no validation rules for Name

	// no validation rules for DesiredState

	// no validation rules for CurrentState

	// no validation rules for ProviderStatus

	if all {
		switch v := interface{}(m.GetSrc()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NetlinkResourceValidationError{
					field:  "Src",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NetlinkResourceValidationError{
					field:  "Src",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSrc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NetlinkResourceValidationError{
				field:  "Src",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDst()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NetlinkResourceValidationError{
					field:  "Dst",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NetlinkResourceValidationError{
					field:  "Dst",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDst()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NetlinkResourceValidationError{
				field:  "Dst",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NetlinkResourceMultiError(errors)
	}

	return nil
}

// NetlinkResourceMultiError is an error wrapping multiple validation errors
// returned by NetlinkResource.ValidateAll() if the designated constraints
// aren't met.
type NetlinkResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetlinkResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetlinkResourceMultiError) AllErrors() []error { return m }

// NetlinkResourceValidationError is the validation error returned by
// NetlinkResource.Validate if the designated constraints aren't met.
type NetlinkResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetlinkResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetlinkResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NetlinkResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetlinkResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetlinkResourceValidationError) ErrorName() string { return "NetlinkResourceValidationError" }

// Error satisfies the builtin error interface
func (e NetlinkResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetlinkResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetlinkResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetlinkResourceValidationError{}

var _NetlinkResource_ResourceId_Pattern = regexp.MustCompile("^netlink-[0-9a-f]{8}$")

// Validate checks the field values on NetworkSegment with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NetworkSegment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NetworkSegment with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NetworkSegmentMultiError,
// or nil if none found.
func (m *NetworkSegment) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkSegment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResourceId() != "" {

		if len(m.GetResourceId()) > 15 {
			err := NetworkSegmentValidationError{
				field:  "ResourceId",
				reason: "value length must be at most 15 bytes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_NetworkSegment_ResourceId_Pattern.MatchString(m.GetResourceId()) {
			err := NetworkSegmentValidationError{
				field:  "ResourceId",
				reason: "value does not match regex pattern \"^netseg-[0-9a-f]{8}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for Name

	if val := m.GetVlanId(); val < 0 || val >= 4095 {
		err := NetworkSegmentValidationError{
			field:  "VlanId",
			reason: "value must be inside range [0, 4095)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _NetworkSegment_VlanId_NotInLookup[m.GetVlanId()]; ok {
		err := NetworkSegmentValidationError{
			field:  "VlanId",
			reason: "value must not be in list [1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSite()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NetworkSegmentValidationError{
					field:  "Site",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NetworkSegmentValidationError{
					field:  "Site",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSite()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NetworkSegmentValidationError{
				field:  "Site",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NetworkSegmentMultiError(errors)
	}

	return nil
}

// NetworkSegmentMultiError is an error wrapping multiple validation errors
// returned by NetworkSegment.ValidateAll() if the designated constraints
// aren't met.
type NetworkSegmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkSegmentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkSegmentMultiError) AllErrors() []error { return m }

// NetworkSegmentValidationError is the validation error returned by
// NetworkSegment.Validate if the designated constraints aren't met.
type NetworkSegmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkSegmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkSegmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NetworkSegmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkSegmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkSegmentValidationError) ErrorName() string { return "NetworkSegmentValidationError" }

// Error satisfies the builtin error interface
func (e NetworkSegmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkSegment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkSegmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkSegmentValidationError{}

var _NetworkSegment_ResourceId_Pattern = regexp.MustCompile("^netseg-[0-9a-f]{8}$")

var _NetworkSegment_VlanId_NotInLookup = map[int32]struct{}{
	1: {},
}

// Validate checks the field values on IPAddressResource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IPAddressResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IPAddressResource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IPAddressResourceMultiError, or nil if none found.
func (m *IPAddressResource) ValidateAll() error {
	return m.validate(true)
}

func (m *IPAddressResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResourceId() != "" {

		if len(m.GetResourceId()) > 15 {
			err := IPAddressResourceValidationError{
				field:  "ResourceId",
				reason: "value length must be at most 15 bytes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_IPAddressResource_ResourceId_Pattern.MatchString(m.GetResourceId()) {
			err := IPAddressResourceValidationError{
				field:  "ResourceId",
				reason: "value does not match regex pattern \"^ipaddr-[0-9a-f]{8}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for Address

	// no validation rules for DesiredState

	// no validation rules for CurrentState

	// no validation rules for Status

	// no validation rules for StatusDetail

	// no validation rules for ConfigMethod

	if all {
		switch v := interface{}(m.GetNic()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IPAddressResourceValidationError{
					field:  "Nic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IPAddressResourceValidationError{
					field:  "Nic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNic()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IPAddressResourceValidationError{
				field:  "Nic",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IPAddressResourceMultiError(errors)
	}

	return nil
}

// IPAddressResourceMultiError is an error wrapping multiple validation errors
// returned by IPAddressResource.ValidateAll() if the designated constraints
// aren't met.
type IPAddressResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IPAddressResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IPAddressResourceMultiError) AllErrors() []error { return m }

// IPAddressResourceValidationError is the validation error returned by
// IPAddressResource.Validate if the designated constraints aren't met.
type IPAddressResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IPAddressResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IPAddressResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IPAddressResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IPAddressResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IPAddressResourceValidationError) ErrorName() string {
	return "IPAddressResourceValidationError"
}

// Error satisfies the builtin error interface
func (e IPAddressResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIPAddressResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IPAddressResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IPAddressResourceValidationError{}

var _IPAddressResource_ResourceId_Pattern = regexp.MustCompile("^ipaddr-[0-9a-f]{8}$")
