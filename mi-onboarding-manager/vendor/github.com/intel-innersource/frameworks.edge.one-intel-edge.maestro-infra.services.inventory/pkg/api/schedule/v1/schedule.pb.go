// SPDX-FileCopyrightText: (C) 2023 Intel Corporation
// SPDX-License-Identifier: LicenseRef-Intel

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: schedule/v1/schedule.proto

package schedulev1

import (
	_ "entgo.io/contrib/entproto/cmd/protoc-gen-ent/options/ent"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	v11 "github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/pkg/api/compute/v1"
	v1 "github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/pkg/api/location/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ScheduleStatus int32

const (
	ScheduleStatus_SCHEDULE_STATUS_UNSPECIFIED     ScheduleStatus = 0
	ScheduleStatus_SCHEDULE_STATUS_MAINTENANCE     ScheduleStatus = 1 // generic maintenance
	ScheduleStatus_SCHEDULE_STATUS_SHIPPING        ScheduleStatus = 2 // being shipped/in transit
	ScheduleStatus_SCHEDULE_STATUS_OS_UPDATE       ScheduleStatus = 3 // for performing OS updates
	ScheduleStatus_SCHEDULE_STATUS_FIRMWARE_UPDATE ScheduleStatus = 4 // for peforming firmware updates
	ScheduleStatus_SCHEDULE_STATUS_CLUSTER_UPDATE  ScheduleStatus = 5 // for peforming cluster updates
)

// Enum value maps for ScheduleStatus.
var (
	ScheduleStatus_name = map[int32]string{
		0: "SCHEDULE_STATUS_UNSPECIFIED",
		1: "SCHEDULE_STATUS_MAINTENANCE",
		2: "SCHEDULE_STATUS_SHIPPING",
		3: "SCHEDULE_STATUS_OS_UPDATE",
		4: "SCHEDULE_STATUS_FIRMWARE_UPDATE",
		5: "SCHEDULE_STATUS_CLUSTER_UPDATE",
	}
	ScheduleStatus_value = map[string]int32{
		"SCHEDULE_STATUS_UNSPECIFIED":     0,
		"SCHEDULE_STATUS_MAINTENANCE":     1,
		"SCHEDULE_STATUS_SHIPPING":        2,
		"SCHEDULE_STATUS_OS_UPDATE":       3,
		"SCHEDULE_STATUS_FIRMWARE_UPDATE": 4,
		"SCHEDULE_STATUS_CLUSTER_UPDATE":  5,
	}
)

func (x ScheduleStatus) Enum() *ScheduleStatus {
	p := new(ScheduleStatus)
	*p = x
	return p
}

func (x ScheduleStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScheduleStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_schedule_v1_schedule_proto_enumTypes[0].Descriptor()
}

func (ScheduleStatus) Type() protoreflect.EnumType {
	return &file_schedule_v1_schedule_proto_enumTypes[0]
}

func (x ScheduleStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScheduleStatus.Descriptor instead.
func (ScheduleStatus) EnumDescriptor() ([]byte, []int) {
	return file_schedule_v1_schedule_proto_rawDescGZIP(), []int{0}
}

type SingleScheduleResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId     string         `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`                                              // Resource ID of this SingleSchedule
	ScheduleStatus ScheduleStatus `protobuf:"varint,2,opt,name=schedule_status,json=scheduleStatus,proto3,enum=schedule.v1.ScheduleStatus" json:"schedule_status,omitempty"` // status of one-time-schedule
	Name           string         `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                                            // user-provided, human-readable name of one-time-schedule
	// These three relations are mutually exclusive
	TargetSite     *v1.SiteResource      `protobuf:"bytes,4,opt,name=target_site,json=targetSite,proto3" json:"target_site,omitempty"`             // Resource ID of Site this applies to
	TargetHost     *v11.HostResource     `protobuf:"bytes,5,opt,name=target_host,json=targetHost,proto3" json:"target_host,omitempty"`             // Resource ID of Host this applies to
	TargetWorkload *v11.WorkloadResource `protobuf:"bytes,6,opt,name=target_workload,json=targetWorkload,proto3" json:"target_workload,omitempty"` // Resource ID of Workload this applies to
	StartSeconds   uint64                `protobuf:"varint,9,opt,name=start_seconds,json=startSeconds,proto3" json:"start_seconds,omitempty"`      // start of one-time schedule
	EndSeconds     uint64                `protobuf:"varint,10,opt,name=end_seconds,json=endSeconds,proto3" json:"end_seconds,omitempty"`           // end of one-time schedule
}

func (x *SingleScheduleResource) Reset() {
	*x = SingleScheduleResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schedule_v1_schedule_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleScheduleResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleScheduleResource) ProtoMessage() {}

func (x *SingleScheduleResource) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_v1_schedule_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleScheduleResource.ProtoReflect.Descriptor instead.
func (*SingleScheduleResource) Descriptor() ([]byte, []int) {
	return file_schedule_v1_schedule_proto_rawDescGZIP(), []int{0}
}

func (x *SingleScheduleResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *SingleScheduleResource) GetScheduleStatus() ScheduleStatus {
	if x != nil {
		return x.ScheduleStatus
	}
	return ScheduleStatus_SCHEDULE_STATUS_UNSPECIFIED
}

func (x *SingleScheduleResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SingleScheduleResource) GetTargetSite() *v1.SiteResource {
	if x != nil {
		return x.TargetSite
	}
	return nil
}

func (x *SingleScheduleResource) GetTargetHost() *v11.HostResource {
	if x != nil {
		return x.TargetHost
	}
	return nil
}

func (x *SingleScheduleResource) GetTargetWorkload() *v11.WorkloadResource {
	if x != nil {
		return x.TargetWorkload
	}
	return nil
}

func (x *SingleScheduleResource) GetStartSeconds() uint64 {
	if x != nil {
		return x.StartSeconds
	}
	return 0
}

func (x *SingleScheduleResource) GetEndSeconds() uint64 {
	if x != nil {
		return x.EndSeconds
	}
	return 0
}

type RepeatedScheduleResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId     string         `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"` // Resource ID of this RepeatedSchedule
	ScheduleStatus ScheduleStatus `protobuf:"varint,2,opt,name=schedule_status,json=scheduleStatus,proto3,enum=schedule.v1.ScheduleStatus" json:"schedule_status,omitempty"`
	Name           string         `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"` // user-provided, human-readable name of repeated schedule
	// These three relations are mutually exclusive
	TargetSite      *v1.SiteResource      `protobuf:"bytes,4,opt,name=target_site,json=targetSite,proto3" json:"target_site,omitempty"`                 // Resource ID of Site this applies to
	TargetHost      *v11.HostResource     `protobuf:"bytes,5,opt,name=target_host,json=targetHost,proto3" json:"target_host,omitempty"`                 // Resource ID of Host this applies to
	TargetWorkload  *v11.WorkloadResource `protobuf:"bytes,20,opt,name=target_workload,json=targetWorkload,proto3" json:"target_workload,omitempty"`    // Resource ID of Workload this applies to
	DurationSeconds uint32                `protobuf:"varint,6,opt,name=duration_seconds,json=durationSeconds,proto3" json:"duration_seconds,omitempty"` // duration, in seconds
	CronMinutes     string                `protobuf:"bytes,9,opt,name=cron_minutes,json=cronMinutes,proto3" json:"cron_minutes,omitempty"`              // cron style minutes (0-59), it can be empty only when used in a Filter
	CronHours       string                `protobuf:"bytes,10,opt,name=cron_hours,json=cronHours,proto3" json:"cron_hours,omitempty"`                   // cron style hours (0-23), it can be empty only when used in a Filter
	CronDayMonth    string                `protobuf:"bytes,11,opt,name=cron_day_month,json=cronDayMonth,proto3" json:"cron_day_month,omitempty"`        // cron style day of month (1-31), it can be empty only when used in a Filter
	CronMonth       string                `protobuf:"bytes,12,opt,name=cron_month,json=cronMonth,proto3" json:"cron_month,omitempty"`                   // cron style month (1-12), it can be empty only when used in a Filter
	CronDayWeek     string                `protobuf:"bytes,13,opt,name=cron_day_week,json=cronDayWeek,proto3" json:"cron_day_week,omitempty"`           // cron style day of week (0-6), it can be empty only when used in a Filter
}

func (x *RepeatedScheduleResource) Reset() {
	*x = RepeatedScheduleResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schedule_v1_schedule_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedScheduleResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedScheduleResource) ProtoMessage() {}

func (x *RepeatedScheduleResource) ProtoReflect() protoreflect.Message {
	mi := &file_schedule_v1_schedule_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedScheduleResource.ProtoReflect.Descriptor instead.
func (*RepeatedScheduleResource) Descriptor() ([]byte, []int) {
	return file_schedule_v1_schedule_proto_rawDescGZIP(), []int{1}
}

func (x *RepeatedScheduleResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *RepeatedScheduleResource) GetScheduleStatus() ScheduleStatus {
	if x != nil {
		return x.ScheduleStatus
	}
	return ScheduleStatus_SCHEDULE_STATUS_UNSPECIFIED
}

func (x *RepeatedScheduleResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RepeatedScheduleResource) GetTargetSite() *v1.SiteResource {
	if x != nil {
		return x.TargetSite
	}
	return nil
}

func (x *RepeatedScheduleResource) GetTargetHost() *v11.HostResource {
	if x != nil {
		return x.TargetHost
	}
	return nil
}

func (x *RepeatedScheduleResource) GetTargetWorkload() *v11.WorkloadResource {
	if x != nil {
		return x.TargetWorkload
	}
	return nil
}

func (x *RepeatedScheduleResource) GetDurationSeconds() uint32 {
	if x != nil {
		return x.DurationSeconds
	}
	return 0
}

func (x *RepeatedScheduleResource) GetCronMinutes() string {
	if x != nil {
		return x.CronMinutes
	}
	return ""
}

func (x *RepeatedScheduleResource) GetCronHours() string {
	if x != nil {
		return x.CronHours
	}
	return ""
}

func (x *RepeatedScheduleResource) GetCronDayMonth() string {
	if x != nil {
		return x.CronDayMonth
	}
	return ""
}

func (x *RepeatedScheduleResource) GetCronMonth() string {
	if x != nil {
		return x.CronMonth
	}
	return ""
}

func (x *RepeatedScheduleResource) GetCronDayWeek() string {
	if x != nil {
		return x.CronDayWeek
	}
	return ""
}

var File_schedule_v1_schedule_proto protoreflect.FileDescriptor

var file_schedule_v1_schedule_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfb, 0x03, 0x0a, 0x16, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xfa, 0x42, 0x21, 0x72, 0x1f, 0x28,
	0x13, 0x32, 0x18, 0x5e, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x63, 0x68, 0x65, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0xd0, 0x01, 0x01, 0xba, 0xa6,
	0x49, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x4c, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0e,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6,
	0x49, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x06, 0xc2, 0xa6, 0x49, 0x02,
	0x08, 0x01, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x12, 0x41,
	0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x06, 0xc2,
	0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x6f, 0x73,
	0x74, 0x12, 0x4d, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x06, 0xc2, 0xa6, 0x49, 0x02, 0x08, 0x01,
	0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02,
	0x08, 0x01, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x3a, 0x06,
	0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x22, 0xcc, 0x07, 0x0a, 0x18, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xfa, 0x42, 0x23, 0x72, 0x21, 0x28,
	0x15, 0x32, 0x1a, 0x5e, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x73, 0x63, 0x68, 0x65,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0xd0, 0x01, 0x01,
	0xba, 0xa6, 0x49, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01,
	0x52, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0b,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x06, 0xc2, 0xa6,
	0x49, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65,
	0x12, 0x41, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42,
	0x06, 0xc2, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48,
	0x6f, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x06, 0xc2, 0xa6, 0x49, 0x02,
	0x08, 0x01, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x3e, 0x0a, 0x10, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0xfa, 0x42,
	0x0a, 0x2a, 0x08, 0x18, 0x80, 0xa3, 0x05, 0x28, 0x01, 0x40, 0x01, 0xba, 0xa6, 0x49, 0x02, 0x08,
	0x01, 0x52, 0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x63, 0x0a, 0x0c, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0xfa, 0x42, 0x3d, 0x72, 0x3b, 0x32,
	0x36, 0x5e, 0x28, 0x5b, 0x2a, 0x5d, 0x7c, 0x28, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x28, 0x5b,
	0x31, 0x2d, 0x35, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x29, 0x28, 0x28, 0x2c, 0x28, 0x5b,
	0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x28, 0x5b, 0x31, 0x2d, 0x35, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d,
	0x29, 0x29, 0x29, 0x2a, 0x29, 0x29, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x0b, 0x63, 0x72, 0x6f, 0x6e,
	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x0a, 0x63, 0x72, 0x6f, 0x6e, 0x5f,
	0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x42, 0xfa, 0x42, 0x3f,
	0x72, 0x3d, 0x32, 0x38, 0x5e, 0x28, 0x5b, 0x2a, 0x5d, 0x7c, 0x28, 0x5b, 0x30, 0x2d, 0x39, 0x5d,
	0x7c, 0x31, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x32, 0x5b, 0x30, 0x2d, 0x33, 0x5d, 0x29, 0x28,
	0x28, 0x2c, 0x28, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x31, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c,
	0x32, 0x5b, 0x30, 0x2d, 0x33, 0x5d, 0x29, 0x29, 0x2a, 0x29, 0x29, 0x24, 0xd0, 0x01, 0x01, 0x52,
	0x09, 0x63, 0x72, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x70, 0x0a, 0x0e, 0x63, 0x72,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x4a, 0xfa, 0x42, 0x47, 0x72, 0x45, 0x32, 0x40, 0x5e, 0x28, 0x5b, 0x2a, 0x5d,
	0x7c, 0x28, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x7c, 0x28, 0x5b, 0x31, 0x32, 0x5d, 0x5b, 0x30, 0x2d,
	0x39, 0x5d, 0x29, 0x7c, 0x33, 0x5b, 0x30, 0x31, 0x5d, 0x29, 0x28, 0x28, 0x2c, 0x28, 0x5b, 0x31,
	0x2d, 0x39, 0x5d, 0x7c, 0x28, 0x5b, 0x31, 0x32, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x7c,
	0x33, 0x5b, 0x30, 0x31, 0x5d, 0x29, 0x29, 0x2a, 0x29, 0x29, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x0c,
	0x63, 0x72, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x53, 0x0a, 0x0a,
	0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x34, 0xfa, 0x42, 0x31, 0x72, 0x2f, 0x32, 0x2a, 0x5e, 0x28, 0x5b, 0x2a, 0x5d, 0x7c, 0x28,
	0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x7c, 0x31, 0x5b, 0x30, 0x31, 0x32, 0x5d, 0x29, 0x28, 0x28, 0x2c,
	0x28, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x7c, 0x31, 0x5b, 0x30, 0x31, 0x32, 0x5d, 0x29, 0x29, 0x2a,
	0x29, 0x29, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x09, 0x63, 0x72, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x12, 0x4a, 0x0a, 0x0d, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x77, 0x65,
	0x65, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xfa, 0x42, 0x23, 0x72, 0x21, 0x32,
	0x1c, 0x5e, 0x28, 0x5b, 0x2a, 0x5d, 0x7c, 0x28, 0x5b, 0x30, 0x2d, 0x36, 0x5d, 0x29, 0x28, 0x28,
	0x2c, 0x28, 0x5b, 0x30, 0x2d, 0x36, 0x5d, 0x29, 0x29, 0x2a, 0x29, 0x29, 0x24, 0xd0, 0x01, 0x01,
	0x52, 0x0b, 0x63, 0x72, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x57, 0x65, 0x65, 0x6b, 0x3a, 0x06, 0xba,
	0xa6, 0x49, 0x02, 0x08, 0x01, 0x2a, 0xd8, 0x01, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x43, 0x48, 0x45,
	0x44, 0x55, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x43, 0x48,
	0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x41, 0x49,
	0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x43,
	0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x48,
	0x49, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x43, 0x48, 0x45,
	0x44, 0x55, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x53, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x43, 0x48, 0x45, 0x44,
	0x55, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x49, 0x52, 0x4d, 0x57,
	0x41, 0x52, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x05,
	0x42, 0x7d, 0x5a, 0x7b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x6c, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x6f, 0x6e, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2d, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x6d, 0x61, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x2d, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_schedule_v1_schedule_proto_rawDescOnce sync.Once
	file_schedule_v1_schedule_proto_rawDescData = file_schedule_v1_schedule_proto_rawDesc
)

func file_schedule_v1_schedule_proto_rawDescGZIP() []byte {
	file_schedule_v1_schedule_proto_rawDescOnce.Do(func() {
		file_schedule_v1_schedule_proto_rawDescData = protoimpl.X.CompressGZIP(file_schedule_v1_schedule_proto_rawDescData)
	})
	return file_schedule_v1_schedule_proto_rawDescData
}

var file_schedule_v1_schedule_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_schedule_v1_schedule_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_schedule_v1_schedule_proto_goTypes = []interface{}{
	(ScheduleStatus)(0),              // 0: schedule.v1.ScheduleStatus
	(*SingleScheduleResource)(nil),   // 1: schedule.v1.SingleScheduleResource
	(*RepeatedScheduleResource)(nil), // 2: schedule.v1.RepeatedScheduleResource
	(*v1.SiteResource)(nil),          // 3: location.v1.SiteResource
	(*v11.HostResource)(nil),         // 4: compute.v1.HostResource
	(*v11.WorkloadResource)(nil),     // 5: compute.v1.WorkloadResource
}
var file_schedule_v1_schedule_proto_depIdxs = []int32{
	0, // 0: schedule.v1.SingleScheduleResource.schedule_status:type_name -> schedule.v1.ScheduleStatus
	3, // 1: schedule.v1.SingleScheduleResource.target_site:type_name -> location.v1.SiteResource
	4, // 2: schedule.v1.SingleScheduleResource.target_host:type_name -> compute.v1.HostResource
	5, // 3: schedule.v1.SingleScheduleResource.target_workload:type_name -> compute.v1.WorkloadResource
	0, // 4: schedule.v1.RepeatedScheduleResource.schedule_status:type_name -> schedule.v1.ScheduleStatus
	3, // 5: schedule.v1.RepeatedScheduleResource.target_site:type_name -> location.v1.SiteResource
	4, // 6: schedule.v1.RepeatedScheduleResource.target_host:type_name -> compute.v1.HostResource
	5, // 7: schedule.v1.RepeatedScheduleResource.target_workload:type_name -> compute.v1.WorkloadResource
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_schedule_v1_schedule_proto_init() }
func file_schedule_v1_schedule_proto_init() {
	if File_schedule_v1_schedule_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_schedule_v1_schedule_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleScheduleResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schedule_v1_schedule_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedScheduleResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_schedule_v1_schedule_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_schedule_v1_schedule_proto_goTypes,
		DependencyIndexes: file_schedule_v1_schedule_proto_depIdxs,
		EnumInfos:         file_schedule_v1_schedule_proto_enumTypes,
		MessageInfos:      file_schedule_v1_schedule_proto_msgTypes,
	}.Build()
	File_schedule_v1_schedule_proto = out.File
	file_schedule_v1_schedule_proto_rawDesc = nil
	file_schedule_v1_schedule_proto_goTypes = nil
	file_schedule_v1_schedule_proto_depIdxs = nil
}
