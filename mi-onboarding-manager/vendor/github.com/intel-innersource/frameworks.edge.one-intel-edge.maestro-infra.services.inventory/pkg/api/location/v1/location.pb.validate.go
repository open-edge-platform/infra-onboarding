// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: location/v1/location.proto

package locationv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RegionResource with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RegionResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegionResource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RegionResourceMultiError,
// or nil if none found.
func (m *RegionResource) ValidateAll() error {
	return m.validate(true)
}

func (m *RegionResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResourceId() != "" {

		if len(m.GetResourceId()) > 15 {
			err := RegionResourceValidationError{
				field:  "ResourceId",
				reason: "value length must be at most 15 bytes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_RegionResource_ResourceId_Pattern.MatchString(m.GetResourceId()) {
			err := RegionResourceValidationError{
				field:  "ResourceId",
				reason: "value does not match regex pattern \"^region-[0-9a-f]{8}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for Name

	// no validation rules for RegionKind

	if all {
		switch v := interface{}(m.GetParentRegion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegionResourceValidationError{
					field:  "ParentRegion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegionResourceValidationError{
					field:  "ParentRegion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParentRegion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegionResourceValidationError{
				field:  "ParentRegion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RegionResourceValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RegionResourceValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RegionResourceValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Metadata

	if len(errors) > 0 {
		return RegionResourceMultiError(errors)
	}

	return nil
}

// RegionResourceMultiError is an error wrapping multiple validation errors
// returned by RegionResource.ValidateAll() if the designated constraints
// aren't met.
type RegionResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegionResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegionResourceMultiError) AllErrors() []error { return m }

// RegionResourceValidationError is the validation error returned by
// RegionResource.Validate if the designated constraints aren't met.
type RegionResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegionResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegionResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegionResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegionResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegionResourceValidationError) ErrorName() string { return "RegionResourceValidationError" }

// Error satisfies the builtin error interface
func (e RegionResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegionResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegionResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegionResourceValidationError{}

var _RegionResource_ResourceId_Pattern = regexp.MustCompile("^region-[0-9a-f]{8}$")

// Validate checks the field values on SiteResource with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SiteResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SiteResource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SiteResourceMultiError, or
// nil if none found.
func (m *SiteResource) ValidateAll() error {
	return m.validate(true)
}

func (m *SiteResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResourceId() != "" {

		if len(m.GetResourceId()) > 13 {
			err := SiteResourceValidationError{
				field:  "ResourceId",
				reason: "value length must be at most 13 bytes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_SiteResource_ResourceId_Pattern.MatchString(m.GetResourceId()) {
			err := SiteResourceValidationError{
				field:  "ResourceId",
				reason: "value does not match regex pattern \"^site-[0-9a-f]{8}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetRegion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SiteResourceValidationError{
					field:  "Region",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SiteResourceValidationError{
					field:  "Region",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SiteResourceValidationError{
				field:  "Region",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOu()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SiteResourceValidationError{
					field:  "Ou",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SiteResourceValidationError{
					field:  "Ou",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOu()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SiteResourceValidationError{
				field:  "Ou",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Address

	if val := m.GetSiteLat(); val < -900000000 || val > 900000000 {
		err := SiteResourceValidationError{
			field:  "SiteLat",
			reason: "value must be inside range [-900000000, 900000000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetSiteLng(); val < -1800000000 || val > 1800000000 {
		err := SiteResourceValidationError{
			field:  "SiteLng",
			reason: "value must be inside range [-1800000000, 1800000000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetDnsServers() {
		_, _ = idx, item

		if ip := net.ParseIP(item); ip == nil {
			err := SiteResourceValidationError{
				field:  fmt.Sprintf("DnsServers[%v]", idx),
				reason: "value must be a valid IP address",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for MetricsEndpoint

	if _, err := url.Parse(m.GetHttpProxy()); err != nil {
		err = SiteResourceValidationError{
			field:  "HttpProxy",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, err := url.Parse(m.GetHttpsProxy()); err != nil {
		err = SiteResourceValidationError{
			field:  "HttpsProxy",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, err := url.Parse(m.GetFtpProxy()); err != nil {
		err = SiteResourceValidationError{
			field:  "FtpProxy",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for NoProxy

	// no validation rules for Metadata

	if len(errors) > 0 {
		return SiteResourceMultiError(errors)
	}

	return nil
}

// SiteResourceMultiError is an error wrapping multiple validation errors
// returned by SiteResource.ValidateAll() if the designated constraints aren't met.
type SiteResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SiteResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SiteResourceMultiError) AllErrors() []error { return m }

// SiteResourceValidationError is the validation error returned by
// SiteResource.Validate if the designated constraints aren't met.
type SiteResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SiteResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SiteResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SiteResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SiteResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SiteResourceValidationError) ErrorName() string { return "SiteResourceValidationError" }

// Error satisfies the builtin error interface
func (e SiteResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSiteResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SiteResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SiteResourceValidationError{}

var _SiteResource_ResourceId_Pattern = regexp.MustCompile("^site-[0-9a-f]{8}$")
