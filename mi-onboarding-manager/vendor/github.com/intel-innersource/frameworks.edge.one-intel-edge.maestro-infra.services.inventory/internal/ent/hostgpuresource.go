// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hostgpuresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hostresource"
)

// HostgpuResource is the model entity for the HostgpuResource schema.
type HostgpuResource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ResourceID holds the value of the "resource_id" field.
	ResourceID string `json:"resource_id,omitempty"`
	// PciID holds the value of the "pci_id" field.
	PciID string `json:"pci_id,omitempty"`
	// Product holds the value of the "product" field.
	Product string `json:"product,omitempty"`
	// Vendor holds the value of the "vendor" field.
	Vendor string `json:"vendor,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// DeviceName holds the value of the "device_name" field.
	DeviceName string `json:"device_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HostgpuResourceQuery when eager-loading is set.
	Edges                 HostgpuResourceEdges `json:"edges"`
	hostgpu_resource_host *int
	selectValues          sql.SelectValues
}

// HostgpuResourceEdges holds the relations/edges for other nodes in the graph.
type HostgpuResourceEdges struct {
	// Host holds the value of the host edge.
	Host *HostResource `json:"host,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// HostOrErr returns the Host value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HostgpuResourceEdges) HostOrErr() (*HostResource, error) {
	if e.loadedTypes[0] {
		if e.Host == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: hostresource.Label}
		}
		return e.Host, nil
	}
	return nil, &NotLoadedError{edge: "host"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HostgpuResource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hostgpuresource.FieldID:
			values[i] = new(sql.NullInt64)
		case hostgpuresource.FieldResourceID, hostgpuresource.FieldPciID, hostgpuresource.FieldProduct, hostgpuresource.FieldVendor, hostgpuresource.FieldDescription, hostgpuresource.FieldDeviceName:
			values[i] = new(sql.NullString)
		case hostgpuresource.ForeignKeys[0]: // hostgpu_resource_host
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HostgpuResource fields.
func (hr *HostgpuResource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hostgpuresource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			hr.ID = int(value.Int64)
		case hostgpuresource.FieldResourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				hr.ResourceID = value.String
			}
		case hostgpuresource.FieldPciID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pci_id", values[i])
			} else if value.Valid {
				hr.PciID = value.String
			}
		case hostgpuresource.FieldProduct:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product", values[i])
			} else if value.Valid {
				hr.Product = value.String
			}
		case hostgpuresource.FieldVendor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vendor", values[i])
			} else if value.Valid {
				hr.Vendor = value.String
			}
		case hostgpuresource.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				hr.Description = value.String
			}
		case hostgpuresource.FieldDeviceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_name", values[i])
			} else if value.Valid {
				hr.DeviceName = value.String
			}
		case hostgpuresource.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field hostgpu_resource_host", value)
			} else if value.Valid {
				hr.hostgpu_resource_host = new(int)
				*hr.hostgpu_resource_host = int(value.Int64)
			}
		default:
			hr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HostgpuResource.
// This includes values selected through modifiers, order, etc.
func (hr *HostgpuResource) Value(name string) (ent.Value, error) {
	return hr.selectValues.Get(name)
}

// QueryHost queries the "host" edge of the HostgpuResource entity.
func (hr *HostgpuResource) QueryHost() *HostResourceQuery {
	return NewHostgpuResourceClient(hr.config).QueryHost(hr)
}

// Update returns a builder for updating this HostgpuResource.
// Note that you need to call HostgpuResource.Unwrap() before calling this method if this HostgpuResource
// was returned from a transaction, and the transaction was committed or rolled back.
func (hr *HostgpuResource) Update() *HostgpuResourceUpdateOne {
	return NewHostgpuResourceClient(hr.config).UpdateOne(hr)
}

// Unwrap unwraps the HostgpuResource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hr *HostgpuResource) Unwrap() *HostgpuResource {
	_tx, ok := hr.config.driver.(*txDriver)
	if !ok {
		panic("ent: HostgpuResource is not a transactional entity")
	}
	hr.config.driver = _tx.drv
	return hr
}

// String implements the fmt.Stringer.
func (hr *HostgpuResource) String() string {
	var builder strings.Builder
	builder.WriteString("HostgpuResource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hr.ID))
	builder.WriteString("resource_id=")
	builder.WriteString(hr.ResourceID)
	builder.WriteString(", ")
	builder.WriteString("pci_id=")
	builder.WriteString(hr.PciID)
	builder.WriteString(", ")
	builder.WriteString("product=")
	builder.WriteString(hr.Product)
	builder.WriteString(", ")
	builder.WriteString("vendor=")
	builder.WriteString(hr.Vendor)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(hr.Description)
	builder.WriteString(", ")
	builder.WriteString("device_name=")
	builder.WriteString(hr.DeviceName)
	builder.WriteByte(')')
	return builder.String()
}

// HostgpuResources is a parsable slice of HostgpuResource.
type HostgpuResources []*HostgpuResource
