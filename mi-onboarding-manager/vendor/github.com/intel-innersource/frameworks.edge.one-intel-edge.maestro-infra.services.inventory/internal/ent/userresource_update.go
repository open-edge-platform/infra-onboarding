// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/userresource"
)

// UserResourceUpdate is the builder for updating UserResource entities.
type UserResourceUpdate struct {
	config
	hooks    []Hook
	mutation *UserResourceMutation
}

// Where appends a list predicates to the UserResourceUpdate builder.
func (uru *UserResourceUpdate) Where(ps ...predicate.UserResource) *UserResourceUpdate {
	uru.mutation.Where(ps...)
	return uru
}

// SetResourceID sets the "resource_id" field.
func (uru *UserResourceUpdate) SetResourceID(s string) *UserResourceUpdate {
	uru.mutation.SetResourceID(s)
	return uru
}

// SetKind sets the "kind" field.
func (uru *UserResourceUpdate) SetKind(s string) *UserResourceUpdate {
	uru.mutation.SetKind(s)
	return uru
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (uru *UserResourceUpdate) SetNillableKind(s *string) *UserResourceUpdate {
	if s != nil {
		uru.SetKind(*s)
	}
	return uru
}

// ClearKind clears the value of the "kind" field.
func (uru *UserResourceUpdate) ClearKind() *UserResourceUpdate {
	uru.mutation.ClearKind()
	return uru
}

// SetName sets the "name" field.
func (uru *UserResourceUpdate) SetName(s string) *UserResourceUpdate {
	uru.mutation.SetName(s)
	return uru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uru *UserResourceUpdate) SetNillableName(s *string) *UserResourceUpdate {
	if s != nil {
		uru.SetName(*s)
	}
	return uru
}

// ClearName clears the value of the "name" field.
func (uru *UserResourceUpdate) ClearName() *UserResourceUpdate {
	uru.mutation.ClearName()
	return uru
}

// SetUsername sets the "username" field.
func (uru *UserResourceUpdate) SetUsername(s string) *UserResourceUpdate {
	uru.mutation.SetUsername(s)
	return uru
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uru *UserResourceUpdate) SetNillableUsername(s *string) *UserResourceUpdate {
	if s != nil {
		uru.SetUsername(*s)
	}
	return uru
}

// ClearUsername clears the value of the "username" field.
func (uru *UserResourceUpdate) ClearUsername() *UserResourceUpdate {
	uru.mutation.ClearUsername()
	return uru
}

// SetSSHPubkey sets the "ssh_pubkey" field.
func (uru *UserResourceUpdate) SetSSHPubkey(s string) *UserResourceUpdate {
	uru.mutation.SetSSHPubkey(s)
	return uru
}

// SetNillableSSHPubkey sets the "ssh_pubkey" field if the given value is not nil.
func (uru *UserResourceUpdate) SetNillableSSHPubkey(s *string) *UserResourceUpdate {
	if s != nil {
		uru.SetSSHPubkey(*s)
	}
	return uru
}

// ClearSSHPubkey clears the value of the "ssh_pubkey" field.
func (uru *UserResourceUpdate) ClearSSHPubkey() *UserResourceUpdate {
	uru.mutation.ClearSSHPubkey()
	return uru
}

// Mutation returns the UserResourceMutation object of the builder.
func (uru *UserResourceUpdate) Mutation() *UserResourceMutation {
	return uru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uru *UserResourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, UserResourceMutation](ctx, uru.sqlSave, uru.mutation, uru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uru *UserResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := uru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uru *UserResourceUpdate) Exec(ctx context.Context) error {
	_, err := uru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uru *UserResourceUpdate) ExecX(ctx context.Context) {
	if err := uru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uru *UserResourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userresource.Table, userresource.Columns, sqlgraph.NewFieldSpec(userresource.FieldID, field.TypeInt))
	if ps := uru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uru.mutation.ResourceID(); ok {
		_spec.SetField(userresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := uru.mutation.Kind(); ok {
		_spec.SetField(userresource.FieldKind, field.TypeString, value)
	}
	if uru.mutation.KindCleared() {
		_spec.ClearField(userresource.FieldKind, field.TypeString)
	}
	if value, ok := uru.mutation.Name(); ok {
		_spec.SetField(userresource.FieldName, field.TypeString, value)
	}
	if uru.mutation.NameCleared() {
		_spec.ClearField(userresource.FieldName, field.TypeString)
	}
	if value, ok := uru.mutation.Username(); ok {
		_spec.SetField(userresource.FieldUsername, field.TypeString, value)
	}
	if uru.mutation.UsernameCleared() {
		_spec.ClearField(userresource.FieldUsername, field.TypeString)
	}
	if value, ok := uru.mutation.SSHPubkey(); ok {
		_spec.SetField(userresource.FieldSSHPubkey, field.TypeString, value)
	}
	if uru.mutation.SSHPubkeyCleared() {
		_spec.ClearField(userresource.FieldSSHPubkey, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uru.mutation.done = true
	return n, nil
}

// UserResourceUpdateOne is the builder for updating a single UserResource entity.
type UserResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserResourceMutation
}

// SetResourceID sets the "resource_id" field.
func (uruo *UserResourceUpdateOne) SetResourceID(s string) *UserResourceUpdateOne {
	uruo.mutation.SetResourceID(s)
	return uruo
}

// SetKind sets the "kind" field.
func (uruo *UserResourceUpdateOne) SetKind(s string) *UserResourceUpdateOne {
	uruo.mutation.SetKind(s)
	return uruo
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (uruo *UserResourceUpdateOne) SetNillableKind(s *string) *UserResourceUpdateOne {
	if s != nil {
		uruo.SetKind(*s)
	}
	return uruo
}

// ClearKind clears the value of the "kind" field.
func (uruo *UserResourceUpdateOne) ClearKind() *UserResourceUpdateOne {
	uruo.mutation.ClearKind()
	return uruo
}

// SetName sets the "name" field.
func (uruo *UserResourceUpdateOne) SetName(s string) *UserResourceUpdateOne {
	uruo.mutation.SetName(s)
	return uruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uruo *UserResourceUpdateOne) SetNillableName(s *string) *UserResourceUpdateOne {
	if s != nil {
		uruo.SetName(*s)
	}
	return uruo
}

// ClearName clears the value of the "name" field.
func (uruo *UserResourceUpdateOne) ClearName() *UserResourceUpdateOne {
	uruo.mutation.ClearName()
	return uruo
}

// SetUsername sets the "username" field.
func (uruo *UserResourceUpdateOne) SetUsername(s string) *UserResourceUpdateOne {
	uruo.mutation.SetUsername(s)
	return uruo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uruo *UserResourceUpdateOne) SetNillableUsername(s *string) *UserResourceUpdateOne {
	if s != nil {
		uruo.SetUsername(*s)
	}
	return uruo
}

// ClearUsername clears the value of the "username" field.
func (uruo *UserResourceUpdateOne) ClearUsername() *UserResourceUpdateOne {
	uruo.mutation.ClearUsername()
	return uruo
}

// SetSSHPubkey sets the "ssh_pubkey" field.
func (uruo *UserResourceUpdateOne) SetSSHPubkey(s string) *UserResourceUpdateOne {
	uruo.mutation.SetSSHPubkey(s)
	return uruo
}

// SetNillableSSHPubkey sets the "ssh_pubkey" field if the given value is not nil.
func (uruo *UserResourceUpdateOne) SetNillableSSHPubkey(s *string) *UserResourceUpdateOne {
	if s != nil {
		uruo.SetSSHPubkey(*s)
	}
	return uruo
}

// ClearSSHPubkey clears the value of the "ssh_pubkey" field.
func (uruo *UserResourceUpdateOne) ClearSSHPubkey() *UserResourceUpdateOne {
	uruo.mutation.ClearSSHPubkey()
	return uruo
}

// Mutation returns the UserResourceMutation object of the builder.
func (uruo *UserResourceUpdateOne) Mutation() *UserResourceMutation {
	return uruo.mutation
}

// Where appends a list predicates to the UserResourceUpdate builder.
func (uruo *UserResourceUpdateOne) Where(ps ...predicate.UserResource) *UserResourceUpdateOne {
	uruo.mutation.Where(ps...)
	return uruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uruo *UserResourceUpdateOne) Select(field string, fields ...string) *UserResourceUpdateOne {
	uruo.fields = append([]string{field}, fields...)
	return uruo
}

// Save executes the query and returns the updated UserResource entity.
func (uruo *UserResourceUpdateOne) Save(ctx context.Context) (*UserResource, error) {
	return withHooks[*UserResource, UserResourceMutation](ctx, uruo.sqlSave, uruo.mutation, uruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uruo *UserResourceUpdateOne) SaveX(ctx context.Context) *UserResource {
	node, err := uruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uruo *UserResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := uruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uruo *UserResourceUpdateOne) ExecX(ctx context.Context) {
	if err := uruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uruo *UserResourceUpdateOne) sqlSave(ctx context.Context) (_node *UserResource, err error) {
	_spec := sqlgraph.NewUpdateSpec(userresource.Table, userresource.Columns, sqlgraph.NewFieldSpec(userresource.FieldID, field.TypeInt))
	id, ok := uruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userresource.FieldID)
		for _, f := range fields {
			if !userresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uruo.mutation.ResourceID(); ok {
		_spec.SetField(userresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := uruo.mutation.Kind(); ok {
		_spec.SetField(userresource.FieldKind, field.TypeString, value)
	}
	if uruo.mutation.KindCleared() {
		_spec.ClearField(userresource.FieldKind, field.TypeString)
	}
	if value, ok := uruo.mutation.Name(); ok {
		_spec.SetField(userresource.FieldName, field.TypeString, value)
	}
	if uruo.mutation.NameCleared() {
		_spec.ClearField(userresource.FieldName, field.TypeString)
	}
	if value, ok := uruo.mutation.Username(); ok {
		_spec.SetField(userresource.FieldUsername, field.TypeString, value)
	}
	if uruo.mutation.UsernameCleared() {
		_spec.ClearField(userresource.FieldUsername, field.TypeString)
	}
	if value, ok := uruo.mutation.SSHPubkey(); ok {
		_spec.SetField(userresource.FieldSSHPubkey, field.TypeString, value)
	}
	if uruo.mutation.SSHPubkeyCleared() {
		_spec.ClearField(userresource.FieldSSHPubkey, field.TypeString)
	}
	_node = &UserResource{config: uruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uruo.mutation.done = true
	return _node, nil
}
