// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hostusbresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
)

// HostusbResourceDelete is the builder for deleting a HostusbResource entity.
type HostusbResourceDelete struct {
	config
	hooks    []Hook
	mutation *HostusbResourceMutation
}

// Where appends a list predicates to the HostusbResourceDelete builder.
func (hrd *HostusbResourceDelete) Where(ps ...predicate.HostusbResource) *HostusbResourceDelete {
	hrd.mutation.Where(ps...)
	return hrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (hrd *HostusbResourceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, HostusbResourceMutation](ctx, hrd.sqlExec, hrd.mutation, hrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (hrd *HostusbResourceDelete) ExecX(ctx context.Context) int {
	n, err := hrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (hrd *HostusbResourceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(hostusbresource.Table, sqlgraph.NewFieldSpec(hostusbresource.FieldID, field.TypeInt))
	if ps := hrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, hrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	hrd.mutation.done = true
	return affected, err
}

// HostusbResourceDeleteOne is the builder for deleting a single HostusbResource entity.
type HostusbResourceDeleteOne struct {
	hrd *HostusbResourceDelete
}

// Where appends a list predicates to the HostusbResourceDelete builder.
func (hrdo *HostusbResourceDeleteOne) Where(ps ...predicate.HostusbResource) *HostusbResourceDeleteOne {
	hrdo.hrd.mutation.Where(ps...)
	return hrdo
}

// Exec executes the deletion query.
func (hrdo *HostusbResourceDeleteOne) Exec(ctx context.Context) error {
	n, err := hrdo.hrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{hostusbresource.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (hrdo *HostusbResourceDeleteOne) ExecX(ctx context.Context) {
	if err := hrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
