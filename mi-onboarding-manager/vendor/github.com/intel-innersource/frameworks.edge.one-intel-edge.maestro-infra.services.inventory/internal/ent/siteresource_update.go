// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/ouresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/regionresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/siteresource"
)

// SiteResourceUpdate is the builder for updating SiteResource entities.
type SiteResourceUpdate struct {
	config
	hooks    []Hook
	mutation *SiteResourceMutation
}

// Where appends a list predicates to the SiteResourceUpdate builder.
func (sru *SiteResourceUpdate) Where(ps ...predicate.SiteResource) *SiteResourceUpdate {
	sru.mutation.Where(ps...)
	return sru
}

// SetResourceID sets the "resource_id" field.
func (sru *SiteResourceUpdate) SetResourceID(s string) *SiteResourceUpdate {
	sru.mutation.SetResourceID(s)
	return sru
}

// SetName sets the "name" field.
func (sru *SiteResourceUpdate) SetName(s string) *SiteResourceUpdate {
	sru.mutation.SetName(s)
	return sru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sru *SiteResourceUpdate) SetNillableName(s *string) *SiteResourceUpdate {
	if s != nil {
		sru.SetName(*s)
	}
	return sru
}

// ClearName clears the value of the "name" field.
func (sru *SiteResourceUpdate) ClearName() *SiteResourceUpdate {
	sru.mutation.ClearName()
	return sru
}

// SetAddress sets the "address" field.
func (sru *SiteResourceUpdate) SetAddress(s string) *SiteResourceUpdate {
	sru.mutation.SetAddress(s)
	return sru
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (sru *SiteResourceUpdate) SetNillableAddress(s *string) *SiteResourceUpdate {
	if s != nil {
		sru.SetAddress(*s)
	}
	return sru
}

// ClearAddress clears the value of the "address" field.
func (sru *SiteResourceUpdate) ClearAddress() *SiteResourceUpdate {
	sru.mutation.ClearAddress()
	return sru
}

// SetSiteLat sets the "site_lat" field.
func (sru *SiteResourceUpdate) SetSiteLat(i int32) *SiteResourceUpdate {
	sru.mutation.ResetSiteLat()
	sru.mutation.SetSiteLat(i)
	return sru
}

// SetNillableSiteLat sets the "site_lat" field if the given value is not nil.
func (sru *SiteResourceUpdate) SetNillableSiteLat(i *int32) *SiteResourceUpdate {
	if i != nil {
		sru.SetSiteLat(*i)
	}
	return sru
}

// AddSiteLat adds i to the "site_lat" field.
func (sru *SiteResourceUpdate) AddSiteLat(i int32) *SiteResourceUpdate {
	sru.mutation.AddSiteLat(i)
	return sru
}

// ClearSiteLat clears the value of the "site_lat" field.
func (sru *SiteResourceUpdate) ClearSiteLat() *SiteResourceUpdate {
	sru.mutation.ClearSiteLat()
	return sru
}

// SetSiteLng sets the "site_lng" field.
func (sru *SiteResourceUpdate) SetSiteLng(i int32) *SiteResourceUpdate {
	sru.mutation.ResetSiteLng()
	sru.mutation.SetSiteLng(i)
	return sru
}

// SetNillableSiteLng sets the "site_lng" field if the given value is not nil.
func (sru *SiteResourceUpdate) SetNillableSiteLng(i *int32) *SiteResourceUpdate {
	if i != nil {
		sru.SetSiteLng(*i)
	}
	return sru
}

// AddSiteLng adds i to the "site_lng" field.
func (sru *SiteResourceUpdate) AddSiteLng(i int32) *SiteResourceUpdate {
	sru.mutation.AddSiteLng(i)
	return sru
}

// ClearSiteLng clears the value of the "site_lng" field.
func (sru *SiteResourceUpdate) ClearSiteLng() *SiteResourceUpdate {
	sru.mutation.ClearSiteLng()
	return sru
}

// SetDNSServers sets the "dns_servers" field.
func (sru *SiteResourceUpdate) SetDNSServers(s string) *SiteResourceUpdate {
	sru.mutation.SetDNSServers(s)
	return sru
}

// SetNillableDNSServers sets the "dns_servers" field if the given value is not nil.
func (sru *SiteResourceUpdate) SetNillableDNSServers(s *string) *SiteResourceUpdate {
	if s != nil {
		sru.SetDNSServers(*s)
	}
	return sru
}

// ClearDNSServers clears the value of the "dns_servers" field.
func (sru *SiteResourceUpdate) ClearDNSServers() *SiteResourceUpdate {
	sru.mutation.ClearDNSServers()
	return sru
}

// SetDockerRegistries sets the "docker_registries" field.
func (sru *SiteResourceUpdate) SetDockerRegistries(s string) *SiteResourceUpdate {
	sru.mutation.SetDockerRegistries(s)
	return sru
}

// SetNillableDockerRegistries sets the "docker_registries" field if the given value is not nil.
func (sru *SiteResourceUpdate) SetNillableDockerRegistries(s *string) *SiteResourceUpdate {
	if s != nil {
		sru.SetDockerRegistries(*s)
	}
	return sru
}

// ClearDockerRegistries clears the value of the "docker_registries" field.
func (sru *SiteResourceUpdate) ClearDockerRegistries() *SiteResourceUpdate {
	sru.mutation.ClearDockerRegistries()
	return sru
}

// SetMetricsEndpoint sets the "metrics_endpoint" field.
func (sru *SiteResourceUpdate) SetMetricsEndpoint(s string) *SiteResourceUpdate {
	sru.mutation.SetMetricsEndpoint(s)
	return sru
}

// SetNillableMetricsEndpoint sets the "metrics_endpoint" field if the given value is not nil.
func (sru *SiteResourceUpdate) SetNillableMetricsEndpoint(s *string) *SiteResourceUpdate {
	if s != nil {
		sru.SetMetricsEndpoint(*s)
	}
	return sru
}

// ClearMetricsEndpoint clears the value of the "metrics_endpoint" field.
func (sru *SiteResourceUpdate) ClearMetricsEndpoint() *SiteResourceUpdate {
	sru.mutation.ClearMetricsEndpoint()
	return sru
}

// SetHTTPProxy sets the "http_proxy" field.
func (sru *SiteResourceUpdate) SetHTTPProxy(s string) *SiteResourceUpdate {
	sru.mutation.SetHTTPProxy(s)
	return sru
}

// SetNillableHTTPProxy sets the "http_proxy" field if the given value is not nil.
func (sru *SiteResourceUpdate) SetNillableHTTPProxy(s *string) *SiteResourceUpdate {
	if s != nil {
		sru.SetHTTPProxy(*s)
	}
	return sru
}

// ClearHTTPProxy clears the value of the "http_proxy" field.
func (sru *SiteResourceUpdate) ClearHTTPProxy() *SiteResourceUpdate {
	sru.mutation.ClearHTTPProxy()
	return sru
}

// SetHTTPSProxy sets the "https_proxy" field.
func (sru *SiteResourceUpdate) SetHTTPSProxy(s string) *SiteResourceUpdate {
	sru.mutation.SetHTTPSProxy(s)
	return sru
}

// SetNillableHTTPSProxy sets the "https_proxy" field if the given value is not nil.
func (sru *SiteResourceUpdate) SetNillableHTTPSProxy(s *string) *SiteResourceUpdate {
	if s != nil {
		sru.SetHTTPSProxy(*s)
	}
	return sru
}

// ClearHTTPSProxy clears the value of the "https_proxy" field.
func (sru *SiteResourceUpdate) ClearHTTPSProxy() *SiteResourceUpdate {
	sru.mutation.ClearHTTPSProxy()
	return sru
}

// SetFtpProxy sets the "ftp_proxy" field.
func (sru *SiteResourceUpdate) SetFtpProxy(s string) *SiteResourceUpdate {
	sru.mutation.SetFtpProxy(s)
	return sru
}

// SetNillableFtpProxy sets the "ftp_proxy" field if the given value is not nil.
func (sru *SiteResourceUpdate) SetNillableFtpProxy(s *string) *SiteResourceUpdate {
	if s != nil {
		sru.SetFtpProxy(*s)
	}
	return sru
}

// ClearFtpProxy clears the value of the "ftp_proxy" field.
func (sru *SiteResourceUpdate) ClearFtpProxy() *SiteResourceUpdate {
	sru.mutation.ClearFtpProxy()
	return sru
}

// SetNoProxy sets the "no_proxy" field.
func (sru *SiteResourceUpdate) SetNoProxy(s string) *SiteResourceUpdate {
	sru.mutation.SetNoProxy(s)
	return sru
}

// SetNillableNoProxy sets the "no_proxy" field if the given value is not nil.
func (sru *SiteResourceUpdate) SetNillableNoProxy(s *string) *SiteResourceUpdate {
	if s != nil {
		sru.SetNoProxy(*s)
	}
	return sru
}

// ClearNoProxy clears the value of the "no_proxy" field.
func (sru *SiteResourceUpdate) ClearNoProxy() *SiteResourceUpdate {
	sru.mutation.ClearNoProxy()
	return sru
}

// SetMetadata sets the "metadata" field.
func (sru *SiteResourceUpdate) SetMetadata(s string) *SiteResourceUpdate {
	sru.mutation.SetMetadata(s)
	return sru
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (sru *SiteResourceUpdate) SetNillableMetadata(s *string) *SiteResourceUpdate {
	if s != nil {
		sru.SetMetadata(*s)
	}
	return sru
}

// ClearMetadata clears the value of the "metadata" field.
func (sru *SiteResourceUpdate) ClearMetadata() *SiteResourceUpdate {
	sru.mutation.ClearMetadata()
	return sru
}

// SetRegionID sets the "region" edge to the RegionResource entity by ID.
func (sru *SiteResourceUpdate) SetRegionID(id int) *SiteResourceUpdate {
	sru.mutation.SetRegionID(id)
	return sru
}

// SetNillableRegionID sets the "region" edge to the RegionResource entity by ID if the given value is not nil.
func (sru *SiteResourceUpdate) SetNillableRegionID(id *int) *SiteResourceUpdate {
	if id != nil {
		sru = sru.SetRegionID(*id)
	}
	return sru
}

// SetRegion sets the "region" edge to the RegionResource entity.
func (sru *SiteResourceUpdate) SetRegion(r *RegionResource) *SiteResourceUpdate {
	return sru.SetRegionID(r.ID)
}

// SetOuID sets the "ou" edge to the OuResource entity by ID.
func (sru *SiteResourceUpdate) SetOuID(id int) *SiteResourceUpdate {
	sru.mutation.SetOuID(id)
	return sru
}

// SetNillableOuID sets the "ou" edge to the OuResource entity by ID if the given value is not nil.
func (sru *SiteResourceUpdate) SetNillableOuID(id *int) *SiteResourceUpdate {
	if id != nil {
		sru = sru.SetOuID(*id)
	}
	return sru
}

// SetOu sets the "ou" edge to the OuResource entity.
func (sru *SiteResourceUpdate) SetOu(o *OuResource) *SiteResourceUpdate {
	return sru.SetOuID(o.ID)
}

// Mutation returns the SiteResourceMutation object of the builder.
func (sru *SiteResourceUpdate) Mutation() *SiteResourceMutation {
	return sru.mutation
}

// ClearRegion clears the "region" edge to the RegionResource entity.
func (sru *SiteResourceUpdate) ClearRegion() *SiteResourceUpdate {
	sru.mutation.ClearRegion()
	return sru
}

// ClearOu clears the "ou" edge to the OuResource entity.
func (sru *SiteResourceUpdate) ClearOu() *SiteResourceUpdate {
	sru.mutation.ClearOu()
	return sru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sru *SiteResourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, SiteResourceMutation](ctx, sru.sqlSave, sru.mutation, sru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sru *SiteResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := sru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sru *SiteResourceUpdate) Exec(ctx context.Context) error {
	_, err := sru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sru *SiteResourceUpdate) ExecX(ctx context.Context) {
	if err := sru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sru *SiteResourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(siteresource.Table, siteresource.Columns, sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt))
	if ps := sru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sru.mutation.ResourceID(); ok {
		_spec.SetField(siteresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := sru.mutation.Name(); ok {
		_spec.SetField(siteresource.FieldName, field.TypeString, value)
	}
	if sru.mutation.NameCleared() {
		_spec.ClearField(siteresource.FieldName, field.TypeString)
	}
	if value, ok := sru.mutation.Address(); ok {
		_spec.SetField(siteresource.FieldAddress, field.TypeString, value)
	}
	if sru.mutation.AddressCleared() {
		_spec.ClearField(siteresource.FieldAddress, field.TypeString)
	}
	if value, ok := sru.mutation.SiteLat(); ok {
		_spec.SetField(siteresource.FieldSiteLat, field.TypeInt32, value)
	}
	if value, ok := sru.mutation.AddedSiteLat(); ok {
		_spec.AddField(siteresource.FieldSiteLat, field.TypeInt32, value)
	}
	if sru.mutation.SiteLatCleared() {
		_spec.ClearField(siteresource.FieldSiteLat, field.TypeInt32)
	}
	if value, ok := sru.mutation.SiteLng(); ok {
		_spec.SetField(siteresource.FieldSiteLng, field.TypeInt32, value)
	}
	if value, ok := sru.mutation.AddedSiteLng(); ok {
		_spec.AddField(siteresource.FieldSiteLng, field.TypeInt32, value)
	}
	if sru.mutation.SiteLngCleared() {
		_spec.ClearField(siteresource.FieldSiteLng, field.TypeInt32)
	}
	if value, ok := sru.mutation.DNSServers(); ok {
		_spec.SetField(siteresource.FieldDNSServers, field.TypeString, value)
	}
	if sru.mutation.DNSServersCleared() {
		_spec.ClearField(siteresource.FieldDNSServers, field.TypeString)
	}
	if value, ok := sru.mutation.DockerRegistries(); ok {
		_spec.SetField(siteresource.FieldDockerRegistries, field.TypeString, value)
	}
	if sru.mutation.DockerRegistriesCleared() {
		_spec.ClearField(siteresource.FieldDockerRegistries, field.TypeString)
	}
	if value, ok := sru.mutation.MetricsEndpoint(); ok {
		_spec.SetField(siteresource.FieldMetricsEndpoint, field.TypeString, value)
	}
	if sru.mutation.MetricsEndpointCleared() {
		_spec.ClearField(siteresource.FieldMetricsEndpoint, field.TypeString)
	}
	if value, ok := sru.mutation.HTTPProxy(); ok {
		_spec.SetField(siteresource.FieldHTTPProxy, field.TypeString, value)
	}
	if sru.mutation.HTTPProxyCleared() {
		_spec.ClearField(siteresource.FieldHTTPProxy, field.TypeString)
	}
	if value, ok := sru.mutation.HTTPSProxy(); ok {
		_spec.SetField(siteresource.FieldHTTPSProxy, field.TypeString, value)
	}
	if sru.mutation.HTTPSProxyCleared() {
		_spec.ClearField(siteresource.FieldHTTPSProxy, field.TypeString)
	}
	if value, ok := sru.mutation.FtpProxy(); ok {
		_spec.SetField(siteresource.FieldFtpProxy, field.TypeString, value)
	}
	if sru.mutation.FtpProxyCleared() {
		_spec.ClearField(siteresource.FieldFtpProxy, field.TypeString)
	}
	if value, ok := sru.mutation.NoProxy(); ok {
		_spec.SetField(siteresource.FieldNoProxy, field.TypeString, value)
	}
	if sru.mutation.NoProxyCleared() {
		_spec.ClearField(siteresource.FieldNoProxy, field.TypeString)
	}
	if value, ok := sru.mutation.Metadata(); ok {
		_spec.SetField(siteresource.FieldMetadata, field.TypeString, value)
	}
	if sru.mutation.MetadataCleared() {
		_spec.ClearField(siteresource.FieldMetadata, field.TypeString)
	}
	if sru.mutation.RegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   siteresource.RegionTable,
			Columns: []string{siteresource.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.RegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   siteresource.RegionTable,
			Columns: []string{siteresource.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sru.mutation.OuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   siteresource.OuTable,
			Columns: []string{siteresource.OuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ouresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.OuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   siteresource.OuTable,
			Columns: []string{siteresource.OuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ouresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{siteresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sru.mutation.done = true
	return n, nil
}

// SiteResourceUpdateOne is the builder for updating a single SiteResource entity.
type SiteResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SiteResourceMutation
}

// SetResourceID sets the "resource_id" field.
func (sruo *SiteResourceUpdateOne) SetResourceID(s string) *SiteResourceUpdateOne {
	sruo.mutation.SetResourceID(s)
	return sruo
}

// SetName sets the "name" field.
func (sruo *SiteResourceUpdateOne) SetName(s string) *SiteResourceUpdateOne {
	sruo.mutation.SetName(s)
	return sruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sruo *SiteResourceUpdateOne) SetNillableName(s *string) *SiteResourceUpdateOne {
	if s != nil {
		sruo.SetName(*s)
	}
	return sruo
}

// ClearName clears the value of the "name" field.
func (sruo *SiteResourceUpdateOne) ClearName() *SiteResourceUpdateOne {
	sruo.mutation.ClearName()
	return sruo
}

// SetAddress sets the "address" field.
func (sruo *SiteResourceUpdateOne) SetAddress(s string) *SiteResourceUpdateOne {
	sruo.mutation.SetAddress(s)
	return sruo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (sruo *SiteResourceUpdateOne) SetNillableAddress(s *string) *SiteResourceUpdateOne {
	if s != nil {
		sruo.SetAddress(*s)
	}
	return sruo
}

// ClearAddress clears the value of the "address" field.
func (sruo *SiteResourceUpdateOne) ClearAddress() *SiteResourceUpdateOne {
	sruo.mutation.ClearAddress()
	return sruo
}

// SetSiteLat sets the "site_lat" field.
func (sruo *SiteResourceUpdateOne) SetSiteLat(i int32) *SiteResourceUpdateOne {
	sruo.mutation.ResetSiteLat()
	sruo.mutation.SetSiteLat(i)
	return sruo
}

// SetNillableSiteLat sets the "site_lat" field if the given value is not nil.
func (sruo *SiteResourceUpdateOne) SetNillableSiteLat(i *int32) *SiteResourceUpdateOne {
	if i != nil {
		sruo.SetSiteLat(*i)
	}
	return sruo
}

// AddSiteLat adds i to the "site_lat" field.
func (sruo *SiteResourceUpdateOne) AddSiteLat(i int32) *SiteResourceUpdateOne {
	sruo.mutation.AddSiteLat(i)
	return sruo
}

// ClearSiteLat clears the value of the "site_lat" field.
func (sruo *SiteResourceUpdateOne) ClearSiteLat() *SiteResourceUpdateOne {
	sruo.mutation.ClearSiteLat()
	return sruo
}

// SetSiteLng sets the "site_lng" field.
func (sruo *SiteResourceUpdateOne) SetSiteLng(i int32) *SiteResourceUpdateOne {
	sruo.mutation.ResetSiteLng()
	sruo.mutation.SetSiteLng(i)
	return sruo
}

// SetNillableSiteLng sets the "site_lng" field if the given value is not nil.
func (sruo *SiteResourceUpdateOne) SetNillableSiteLng(i *int32) *SiteResourceUpdateOne {
	if i != nil {
		sruo.SetSiteLng(*i)
	}
	return sruo
}

// AddSiteLng adds i to the "site_lng" field.
func (sruo *SiteResourceUpdateOne) AddSiteLng(i int32) *SiteResourceUpdateOne {
	sruo.mutation.AddSiteLng(i)
	return sruo
}

// ClearSiteLng clears the value of the "site_lng" field.
func (sruo *SiteResourceUpdateOne) ClearSiteLng() *SiteResourceUpdateOne {
	sruo.mutation.ClearSiteLng()
	return sruo
}

// SetDNSServers sets the "dns_servers" field.
func (sruo *SiteResourceUpdateOne) SetDNSServers(s string) *SiteResourceUpdateOne {
	sruo.mutation.SetDNSServers(s)
	return sruo
}

// SetNillableDNSServers sets the "dns_servers" field if the given value is not nil.
func (sruo *SiteResourceUpdateOne) SetNillableDNSServers(s *string) *SiteResourceUpdateOne {
	if s != nil {
		sruo.SetDNSServers(*s)
	}
	return sruo
}

// ClearDNSServers clears the value of the "dns_servers" field.
func (sruo *SiteResourceUpdateOne) ClearDNSServers() *SiteResourceUpdateOne {
	sruo.mutation.ClearDNSServers()
	return sruo
}

// SetDockerRegistries sets the "docker_registries" field.
func (sruo *SiteResourceUpdateOne) SetDockerRegistries(s string) *SiteResourceUpdateOne {
	sruo.mutation.SetDockerRegistries(s)
	return sruo
}

// SetNillableDockerRegistries sets the "docker_registries" field if the given value is not nil.
func (sruo *SiteResourceUpdateOne) SetNillableDockerRegistries(s *string) *SiteResourceUpdateOne {
	if s != nil {
		sruo.SetDockerRegistries(*s)
	}
	return sruo
}

// ClearDockerRegistries clears the value of the "docker_registries" field.
func (sruo *SiteResourceUpdateOne) ClearDockerRegistries() *SiteResourceUpdateOne {
	sruo.mutation.ClearDockerRegistries()
	return sruo
}

// SetMetricsEndpoint sets the "metrics_endpoint" field.
func (sruo *SiteResourceUpdateOne) SetMetricsEndpoint(s string) *SiteResourceUpdateOne {
	sruo.mutation.SetMetricsEndpoint(s)
	return sruo
}

// SetNillableMetricsEndpoint sets the "metrics_endpoint" field if the given value is not nil.
func (sruo *SiteResourceUpdateOne) SetNillableMetricsEndpoint(s *string) *SiteResourceUpdateOne {
	if s != nil {
		sruo.SetMetricsEndpoint(*s)
	}
	return sruo
}

// ClearMetricsEndpoint clears the value of the "metrics_endpoint" field.
func (sruo *SiteResourceUpdateOne) ClearMetricsEndpoint() *SiteResourceUpdateOne {
	sruo.mutation.ClearMetricsEndpoint()
	return sruo
}

// SetHTTPProxy sets the "http_proxy" field.
func (sruo *SiteResourceUpdateOne) SetHTTPProxy(s string) *SiteResourceUpdateOne {
	sruo.mutation.SetHTTPProxy(s)
	return sruo
}

// SetNillableHTTPProxy sets the "http_proxy" field if the given value is not nil.
func (sruo *SiteResourceUpdateOne) SetNillableHTTPProxy(s *string) *SiteResourceUpdateOne {
	if s != nil {
		sruo.SetHTTPProxy(*s)
	}
	return sruo
}

// ClearHTTPProxy clears the value of the "http_proxy" field.
func (sruo *SiteResourceUpdateOne) ClearHTTPProxy() *SiteResourceUpdateOne {
	sruo.mutation.ClearHTTPProxy()
	return sruo
}

// SetHTTPSProxy sets the "https_proxy" field.
func (sruo *SiteResourceUpdateOne) SetHTTPSProxy(s string) *SiteResourceUpdateOne {
	sruo.mutation.SetHTTPSProxy(s)
	return sruo
}

// SetNillableHTTPSProxy sets the "https_proxy" field if the given value is not nil.
func (sruo *SiteResourceUpdateOne) SetNillableHTTPSProxy(s *string) *SiteResourceUpdateOne {
	if s != nil {
		sruo.SetHTTPSProxy(*s)
	}
	return sruo
}

// ClearHTTPSProxy clears the value of the "https_proxy" field.
func (sruo *SiteResourceUpdateOne) ClearHTTPSProxy() *SiteResourceUpdateOne {
	sruo.mutation.ClearHTTPSProxy()
	return sruo
}

// SetFtpProxy sets the "ftp_proxy" field.
func (sruo *SiteResourceUpdateOne) SetFtpProxy(s string) *SiteResourceUpdateOne {
	sruo.mutation.SetFtpProxy(s)
	return sruo
}

// SetNillableFtpProxy sets the "ftp_proxy" field if the given value is not nil.
func (sruo *SiteResourceUpdateOne) SetNillableFtpProxy(s *string) *SiteResourceUpdateOne {
	if s != nil {
		sruo.SetFtpProxy(*s)
	}
	return sruo
}

// ClearFtpProxy clears the value of the "ftp_proxy" field.
func (sruo *SiteResourceUpdateOne) ClearFtpProxy() *SiteResourceUpdateOne {
	sruo.mutation.ClearFtpProxy()
	return sruo
}

// SetNoProxy sets the "no_proxy" field.
func (sruo *SiteResourceUpdateOne) SetNoProxy(s string) *SiteResourceUpdateOne {
	sruo.mutation.SetNoProxy(s)
	return sruo
}

// SetNillableNoProxy sets the "no_proxy" field if the given value is not nil.
func (sruo *SiteResourceUpdateOne) SetNillableNoProxy(s *string) *SiteResourceUpdateOne {
	if s != nil {
		sruo.SetNoProxy(*s)
	}
	return sruo
}

// ClearNoProxy clears the value of the "no_proxy" field.
func (sruo *SiteResourceUpdateOne) ClearNoProxy() *SiteResourceUpdateOne {
	sruo.mutation.ClearNoProxy()
	return sruo
}

// SetMetadata sets the "metadata" field.
func (sruo *SiteResourceUpdateOne) SetMetadata(s string) *SiteResourceUpdateOne {
	sruo.mutation.SetMetadata(s)
	return sruo
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (sruo *SiteResourceUpdateOne) SetNillableMetadata(s *string) *SiteResourceUpdateOne {
	if s != nil {
		sruo.SetMetadata(*s)
	}
	return sruo
}

// ClearMetadata clears the value of the "metadata" field.
func (sruo *SiteResourceUpdateOne) ClearMetadata() *SiteResourceUpdateOne {
	sruo.mutation.ClearMetadata()
	return sruo
}

// SetRegionID sets the "region" edge to the RegionResource entity by ID.
func (sruo *SiteResourceUpdateOne) SetRegionID(id int) *SiteResourceUpdateOne {
	sruo.mutation.SetRegionID(id)
	return sruo
}

// SetNillableRegionID sets the "region" edge to the RegionResource entity by ID if the given value is not nil.
func (sruo *SiteResourceUpdateOne) SetNillableRegionID(id *int) *SiteResourceUpdateOne {
	if id != nil {
		sruo = sruo.SetRegionID(*id)
	}
	return sruo
}

// SetRegion sets the "region" edge to the RegionResource entity.
func (sruo *SiteResourceUpdateOne) SetRegion(r *RegionResource) *SiteResourceUpdateOne {
	return sruo.SetRegionID(r.ID)
}

// SetOuID sets the "ou" edge to the OuResource entity by ID.
func (sruo *SiteResourceUpdateOne) SetOuID(id int) *SiteResourceUpdateOne {
	sruo.mutation.SetOuID(id)
	return sruo
}

// SetNillableOuID sets the "ou" edge to the OuResource entity by ID if the given value is not nil.
func (sruo *SiteResourceUpdateOne) SetNillableOuID(id *int) *SiteResourceUpdateOne {
	if id != nil {
		sruo = sruo.SetOuID(*id)
	}
	return sruo
}

// SetOu sets the "ou" edge to the OuResource entity.
func (sruo *SiteResourceUpdateOne) SetOu(o *OuResource) *SiteResourceUpdateOne {
	return sruo.SetOuID(o.ID)
}

// Mutation returns the SiteResourceMutation object of the builder.
func (sruo *SiteResourceUpdateOne) Mutation() *SiteResourceMutation {
	return sruo.mutation
}

// ClearRegion clears the "region" edge to the RegionResource entity.
func (sruo *SiteResourceUpdateOne) ClearRegion() *SiteResourceUpdateOne {
	sruo.mutation.ClearRegion()
	return sruo
}

// ClearOu clears the "ou" edge to the OuResource entity.
func (sruo *SiteResourceUpdateOne) ClearOu() *SiteResourceUpdateOne {
	sruo.mutation.ClearOu()
	return sruo
}

// Where appends a list predicates to the SiteResourceUpdate builder.
func (sruo *SiteResourceUpdateOne) Where(ps ...predicate.SiteResource) *SiteResourceUpdateOne {
	sruo.mutation.Where(ps...)
	return sruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sruo *SiteResourceUpdateOne) Select(field string, fields ...string) *SiteResourceUpdateOne {
	sruo.fields = append([]string{field}, fields...)
	return sruo
}

// Save executes the query and returns the updated SiteResource entity.
func (sruo *SiteResourceUpdateOne) Save(ctx context.Context) (*SiteResource, error) {
	return withHooks[*SiteResource, SiteResourceMutation](ctx, sruo.sqlSave, sruo.mutation, sruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sruo *SiteResourceUpdateOne) SaveX(ctx context.Context) *SiteResource {
	node, err := sruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sruo *SiteResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := sruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sruo *SiteResourceUpdateOne) ExecX(ctx context.Context) {
	if err := sruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sruo *SiteResourceUpdateOne) sqlSave(ctx context.Context) (_node *SiteResource, err error) {
	_spec := sqlgraph.NewUpdateSpec(siteresource.Table, siteresource.Columns, sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt))
	id, ok := sruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SiteResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, siteresource.FieldID)
		for _, f := range fields {
			if !siteresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != siteresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sruo.mutation.ResourceID(); ok {
		_spec.SetField(siteresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := sruo.mutation.Name(); ok {
		_spec.SetField(siteresource.FieldName, field.TypeString, value)
	}
	if sruo.mutation.NameCleared() {
		_spec.ClearField(siteresource.FieldName, field.TypeString)
	}
	if value, ok := sruo.mutation.Address(); ok {
		_spec.SetField(siteresource.FieldAddress, field.TypeString, value)
	}
	if sruo.mutation.AddressCleared() {
		_spec.ClearField(siteresource.FieldAddress, field.TypeString)
	}
	if value, ok := sruo.mutation.SiteLat(); ok {
		_spec.SetField(siteresource.FieldSiteLat, field.TypeInt32, value)
	}
	if value, ok := sruo.mutation.AddedSiteLat(); ok {
		_spec.AddField(siteresource.FieldSiteLat, field.TypeInt32, value)
	}
	if sruo.mutation.SiteLatCleared() {
		_spec.ClearField(siteresource.FieldSiteLat, field.TypeInt32)
	}
	if value, ok := sruo.mutation.SiteLng(); ok {
		_spec.SetField(siteresource.FieldSiteLng, field.TypeInt32, value)
	}
	if value, ok := sruo.mutation.AddedSiteLng(); ok {
		_spec.AddField(siteresource.FieldSiteLng, field.TypeInt32, value)
	}
	if sruo.mutation.SiteLngCleared() {
		_spec.ClearField(siteresource.FieldSiteLng, field.TypeInt32)
	}
	if value, ok := sruo.mutation.DNSServers(); ok {
		_spec.SetField(siteresource.FieldDNSServers, field.TypeString, value)
	}
	if sruo.mutation.DNSServersCleared() {
		_spec.ClearField(siteresource.FieldDNSServers, field.TypeString)
	}
	if value, ok := sruo.mutation.DockerRegistries(); ok {
		_spec.SetField(siteresource.FieldDockerRegistries, field.TypeString, value)
	}
	if sruo.mutation.DockerRegistriesCleared() {
		_spec.ClearField(siteresource.FieldDockerRegistries, field.TypeString)
	}
	if value, ok := sruo.mutation.MetricsEndpoint(); ok {
		_spec.SetField(siteresource.FieldMetricsEndpoint, field.TypeString, value)
	}
	if sruo.mutation.MetricsEndpointCleared() {
		_spec.ClearField(siteresource.FieldMetricsEndpoint, field.TypeString)
	}
	if value, ok := sruo.mutation.HTTPProxy(); ok {
		_spec.SetField(siteresource.FieldHTTPProxy, field.TypeString, value)
	}
	if sruo.mutation.HTTPProxyCleared() {
		_spec.ClearField(siteresource.FieldHTTPProxy, field.TypeString)
	}
	if value, ok := sruo.mutation.HTTPSProxy(); ok {
		_spec.SetField(siteresource.FieldHTTPSProxy, field.TypeString, value)
	}
	if sruo.mutation.HTTPSProxyCleared() {
		_spec.ClearField(siteresource.FieldHTTPSProxy, field.TypeString)
	}
	if value, ok := sruo.mutation.FtpProxy(); ok {
		_spec.SetField(siteresource.FieldFtpProxy, field.TypeString, value)
	}
	if sruo.mutation.FtpProxyCleared() {
		_spec.ClearField(siteresource.FieldFtpProxy, field.TypeString)
	}
	if value, ok := sruo.mutation.NoProxy(); ok {
		_spec.SetField(siteresource.FieldNoProxy, field.TypeString, value)
	}
	if sruo.mutation.NoProxyCleared() {
		_spec.ClearField(siteresource.FieldNoProxy, field.TypeString)
	}
	if value, ok := sruo.mutation.Metadata(); ok {
		_spec.SetField(siteresource.FieldMetadata, field.TypeString, value)
	}
	if sruo.mutation.MetadataCleared() {
		_spec.ClearField(siteresource.FieldMetadata, field.TypeString)
	}
	if sruo.mutation.RegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   siteresource.RegionTable,
			Columns: []string{siteresource.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.RegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   siteresource.RegionTable,
			Columns: []string{siteresource.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sruo.mutation.OuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   siteresource.OuTable,
			Columns: []string{siteresource.OuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ouresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.OuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   siteresource.OuTable,
			Columns: []string{siteresource.OuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ouresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SiteResource{config: sruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{siteresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sruo.mutation.done = true
	return _node, nil
}
