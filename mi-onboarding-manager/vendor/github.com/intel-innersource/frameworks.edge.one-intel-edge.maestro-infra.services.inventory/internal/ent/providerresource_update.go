// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/providerresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/siteresource"
)

// ProviderResourceUpdate is the builder for updating ProviderResource entities.
type ProviderResourceUpdate struct {
	config
	hooks    []Hook
	mutation *ProviderResourceMutation
}

// Where appends a list predicates to the ProviderResourceUpdate builder.
func (pru *ProviderResourceUpdate) Where(ps ...predicate.ProviderResource) *ProviderResourceUpdate {
	pru.mutation.Where(ps...)
	return pru
}

// SetResourceID sets the "resource_id" field.
func (pru *ProviderResourceUpdate) SetResourceID(s string) *ProviderResourceUpdate {
	pru.mutation.SetResourceID(s)
	return pru
}

// SetKind sets the "kind" field.
func (pru *ProviderResourceUpdate) SetKind(pr providerresource.Kind) *ProviderResourceUpdate {
	pru.mutation.SetKind(pr)
	return pru
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (pru *ProviderResourceUpdate) SetNillableKind(pr *providerresource.Kind) *ProviderResourceUpdate {
	if pr != nil {
		pru.SetKind(*pr)
	}
	return pru
}

// ClearKind clears the value of the "kind" field.
func (pru *ProviderResourceUpdate) ClearKind() *ProviderResourceUpdate {
	pru.mutation.ClearKind()
	return pru
}

// SetDescription sets the "description" field.
func (pru *ProviderResourceUpdate) SetDescription(s string) *ProviderResourceUpdate {
	pru.mutation.SetDescription(s)
	return pru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pru *ProviderResourceUpdate) SetNillableDescription(s *string) *ProviderResourceUpdate {
	if s != nil {
		pru.SetDescription(*s)
	}
	return pru
}

// ClearDescription clears the value of the "description" field.
func (pru *ProviderResourceUpdate) ClearDescription() *ProviderResourceUpdate {
	pru.mutation.ClearDescription()
	return pru
}

// SetDesiredState sets the "desired_state" field.
func (pru *ProviderResourceUpdate) SetDesiredState(ps providerresource.DesiredState) *ProviderResourceUpdate {
	pru.mutation.SetDesiredState(ps)
	return pru
}

// SetCurrentState sets the "current_state" field.
func (pru *ProviderResourceUpdate) SetCurrentState(ps providerresource.CurrentState) *ProviderResourceUpdate {
	pru.mutation.SetCurrentState(ps)
	return pru
}

// SetNillableCurrentState sets the "current_state" field if the given value is not nil.
func (pru *ProviderResourceUpdate) SetNillableCurrentState(ps *providerresource.CurrentState) *ProviderResourceUpdate {
	if ps != nil {
		pru.SetCurrentState(*ps)
	}
	return pru
}

// ClearCurrentState clears the value of the "current_state" field.
func (pru *ProviderResourceUpdate) ClearCurrentState() *ProviderResourceUpdate {
	pru.mutation.ClearCurrentState()
	return pru
}

// SetEndpoint sets the "endpoint" field.
func (pru *ProviderResourceUpdate) SetEndpoint(s string) *ProviderResourceUpdate {
	pru.mutation.SetEndpoint(s)
	return pru
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (pru *ProviderResourceUpdate) SetNillableEndpoint(s *string) *ProviderResourceUpdate {
	if s != nil {
		pru.SetEndpoint(*s)
	}
	return pru
}

// ClearEndpoint clears the value of the "endpoint" field.
func (pru *ProviderResourceUpdate) ClearEndpoint() *ProviderResourceUpdate {
	pru.mutation.ClearEndpoint()
	return pru
}

// SetToken sets the "token" field.
func (pru *ProviderResourceUpdate) SetToken(s string) *ProviderResourceUpdate {
	pru.mutation.SetToken(s)
	return pru
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (pru *ProviderResourceUpdate) SetNillableToken(s *string) *ProviderResourceUpdate {
	if s != nil {
		pru.SetToken(*s)
	}
	return pru
}

// ClearToken clears the value of the "token" field.
func (pru *ProviderResourceUpdate) ClearToken() *ProviderResourceUpdate {
	pru.mutation.ClearToken()
	return pru
}

// SetSiteID sets the "site" edge to the SiteResource entity by ID.
func (pru *ProviderResourceUpdate) SetSiteID(id int) *ProviderResourceUpdate {
	pru.mutation.SetSiteID(id)
	return pru
}

// SetNillableSiteID sets the "site" edge to the SiteResource entity by ID if the given value is not nil.
func (pru *ProviderResourceUpdate) SetNillableSiteID(id *int) *ProviderResourceUpdate {
	if id != nil {
		pru = pru.SetSiteID(*id)
	}
	return pru
}

// SetSite sets the "site" edge to the SiteResource entity.
func (pru *ProviderResourceUpdate) SetSite(s *SiteResource) *ProviderResourceUpdate {
	return pru.SetSiteID(s.ID)
}

// Mutation returns the ProviderResourceMutation object of the builder.
func (pru *ProviderResourceUpdate) Mutation() *ProviderResourceMutation {
	return pru.mutation
}

// ClearSite clears the "site" edge to the SiteResource entity.
func (pru *ProviderResourceUpdate) ClearSite() *ProviderResourceUpdate {
	pru.mutation.ClearSite()
	return pru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pru *ProviderResourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ProviderResourceMutation](ctx, pru.sqlSave, pru.mutation, pru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pru *ProviderResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := pru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pru *ProviderResourceUpdate) Exec(ctx context.Context) error {
	_, err := pru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pru *ProviderResourceUpdate) ExecX(ctx context.Context) {
	if err := pru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pru *ProviderResourceUpdate) check() error {
	if v, ok := pru.mutation.Kind(); ok {
		if err := providerresource.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "ProviderResource.kind": %w`, err)}
		}
	}
	if v, ok := pru.mutation.DesiredState(); ok {
		if err := providerresource.DesiredStateValidator(v); err != nil {
			return &ValidationError{Name: "desired_state", err: fmt.Errorf(`ent: validator failed for field "ProviderResource.desired_state": %w`, err)}
		}
	}
	if v, ok := pru.mutation.CurrentState(); ok {
		if err := providerresource.CurrentStateValidator(v); err != nil {
			return &ValidationError{Name: "current_state", err: fmt.Errorf(`ent: validator failed for field "ProviderResource.current_state": %w`, err)}
		}
	}
	return nil
}

func (pru *ProviderResourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(providerresource.Table, providerresource.Columns, sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt))
	if ps := pru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pru.mutation.ResourceID(); ok {
		_spec.SetField(providerresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := pru.mutation.Kind(); ok {
		_spec.SetField(providerresource.FieldKind, field.TypeEnum, value)
	}
	if pru.mutation.KindCleared() {
		_spec.ClearField(providerresource.FieldKind, field.TypeEnum)
	}
	if value, ok := pru.mutation.Description(); ok {
		_spec.SetField(providerresource.FieldDescription, field.TypeString, value)
	}
	if pru.mutation.DescriptionCleared() {
		_spec.ClearField(providerresource.FieldDescription, field.TypeString)
	}
	if value, ok := pru.mutation.DesiredState(); ok {
		_spec.SetField(providerresource.FieldDesiredState, field.TypeEnum, value)
	}
	if value, ok := pru.mutation.CurrentState(); ok {
		_spec.SetField(providerresource.FieldCurrentState, field.TypeEnum, value)
	}
	if pru.mutation.CurrentStateCleared() {
		_spec.ClearField(providerresource.FieldCurrentState, field.TypeEnum)
	}
	if value, ok := pru.mutation.Endpoint(); ok {
		_spec.SetField(providerresource.FieldEndpoint, field.TypeString, value)
	}
	if pru.mutation.EndpointCleared() {
		_spec.ClearField(providerresource.FieldEndpoint, field.TypeString)
	}
	if value, ok := pru.mutation.Token(); ok {
		_spec.SetField(providerresource.FieldToken, field.TypeString, value)
	}
	if pru.mutation.TokenCleared() {
		_spec.ClearField(providerresource.FieldToken, field.TypeString)
	}
	if pru.mutation.SiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   providerresource.SiteTable,
			Columns: []string{providerresource.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.SiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   providerresource.SiteTable,
			Columns: []string{providerresource.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{providerresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pru.mutation.done = true
	return n, nil
}

// ProviderResourceUpdateOne is the builder for updating a single ProviderResource entity.
type ProviderResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProviderResourceMutation
}

// SetResourceID sets the "resource_id" field.
func (pruo *ProviderResourceUpdateOne) SetResourceID(s string) *ProviderResourceUpdateOne {
	pruo.mutation.SetResourceID(s)
	return pruo
}

// SetKind sets the "kind" field.
func (pruo *ProviderResourceUpdateOne) SetKind(pr providerresource.Kind) *ProviderResourceUpdateOne {
	pruo.mutation.SetKind(pr)
	return pruo
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (pruo *ProviderResourceUpdateOne) SetNillableKind(pr *providerresource.Kind) *ProviderResourceUpdateOne {
	if pr != nil {
		pruo.SetKind(*pr)
	}
	return pruo
}

// ClearKind clears the value of the "kind" field.
func (pruo *ProviderResourceUpdateOne) ClearKind() *ProviderResourceUpdateOne {
	pruo.mutation.ClearKind()
	return pruo
}

// SetDescription sets the "description" field.
func (pruo *ProviderResourceUpdateOne) SetDescription(s string) *ProviderResourceUpdateOne {
	pruo.mutation.SetDescription(s)
	return pruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pruo *ProviderResourceUpdateOne) SetNillableDescription(s *string) *ProviderResourceUpdateOne {
	if s != nil {
		pruo.SetDescription(*s)
	}
	return pruo
}

// ClearDescription clears the value of the "description" field.
func (pruo *ProviderResourceUpdateOne) ClearDescription() *ProviderResourceUpdateOne {
	pruo.mutation.ClearDescription()
	return pruo
}

// SetDesiredState sets the "desired_state" field.
func (pruo *ProviderResourceUpdateOne) SetDesiredState(ps providerresource.DesiredState) *ProviderResourceUpdateOne {
	pruo.mutation.SetDesiredState(ps)
	return pruo
}

// SetCurrentState sets the "current_state" field.
func (pruo *ProviderResourceUpdateOne) SetCurrentState(ps providerresource.CurrentState) *ProviderResourceUpdateOne {
	pruo.mutation.SetCurrentState(ps)
	return pruo
}

// SetNillableCurrentState sets the "current_state" field if the given value is not nil.
func (pruo *ProviderResourceUpdateOne) SetNillableCurrentState(ps *providerresource.CurrentState) *ProviderResourceUpdateOne {
	if ps != nil {
		pruo.SetCurrentState(*ps)
	}
	return pruo
}

// ClearCurrentState clears the value of the "current_state" field.
func (pruo *ProviderResourceUpdateOne) ClearCurrentState() *ProviderResourceUpdateOne {
	pruo.mutation.ClearCurrentState()
	return pruo
}

// SetEndpoint sets the "endpoint" field.
func (pruo *ProviderResourceUpdateOne) SetEndpoint(s string) *ProviderResourceUpdateOne {
	pruo.mutation.SetEndpoint(s)
	return pruo
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (pruo *ProviderResourceUpdateOne) SetNillableEndpoint(s *string) *ProviderResourceUpdateOne {
	if s != nil {
		pruo.SetEndpoint(*s)
	}
	return pruo
}

// ClearEndpoint clears the value of the "endpoint" field.
func (pruo *ProviderResourceUpdateOne) ClearEndpoint() *ProviderResourceUpdateOne {
	pruo.mutation.ClearEndpoint()
	return pruo
}

// SetToken sets the "token" field.
func (pruo *ProviderResourceUpdateOne) SetToken(s string) *ProviderResourceUpdateOne {
	pruo.mutation.SetToken(s)
	return pruo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (pruo *ProviderResourceUpdateOne) SetNillableToken(s *string) *ProviderResourceUpdateOne {
	if s != nil {
		pruo.SetToken(*s)
	}
	return pruo
}

// ClearToken clears the value of the "token" field.
func (pruo *ProviderResourceUpdateOne) ClearToken() *ProviderResourceUpdateOne {
	pruo.mutation.ClearToken()
	return pruo
}

// SetSiteID sets the "site" edge to the SiteResource entity by ID.
func (pruo *ProviderResourceUpdateOne) SetSiteID(id int) *ProviderResourceUpdateOne {
	pruo.mutation.SetSiteID(id)
	return pruo
}

// SetNillableSiteID sets the "site" edge to the SiteResource entity by ID if the given value is not nil.
func (pruo *ProviderResourceUpdateOne) SetNillableSiteID(id *int) *ProviderResourceUpdateOne {
	if id != nil {
		pruo = pruo.SetSiteID(*id)
	}
	return pruo
}

// SetSite sets the "site" edge to the SiteResource entity.
func (pruo *ProviderResourceUpdateOne) SetSite(s *SiteResource) *ProviderResourceUpdateOne {
	return pruo.SetSiteID(s.ID)
}

// Mutation returns the ProviderResourceMutation object of the builder.
func (pruo *ProviderResourceUpdateOne) Mutation() *ProviderResourceMutation {
	return pruo.mutation
}

// ClearSite clears the "site" edge to the SiteResource entity.
func (pruo *ProviderResourceUpdateOne) ClearSite() *ProviderResourceUpdateOne {
	pruo.mutation.ClearSite()
	return pruo
}

// Where appends a list predicates to the ProviderResourceUpdate builder.
func (pruo *ProviderResourceUpdateOne) Where(ps ...predicate.ProviderResource) *ProviderResourceUpdateOne {
	pruo.mutation.Where(ps...)
	return pruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pruo *ProviderResourceUpdateOne) Select(field string, fields ...string) *ProviderResourceUpdateOne {
	pruo.fields = append([]string{field}, fields...)
	return pruo
}

// Save executes the query and returns the updated ProviderResource entity.
func (pruo *ProviderResourceUpdateOne) Save(ctx context.Context) (*ProviderResource, error) {
	return withHooks[*ProviderResource, ProviderResourceMutation](ctx, pruo.sqlSave, pruo.mutation, pruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pruo *ProviderResourceUpdateOne) SaveX(ctx context.Context) *ProviderResource {
	node, err := pruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pruo *ProviderResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := pruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pruo *ProviderResourceUpdateOne) ExecX(ctx context.Context) {
	if err := pruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pruo *ProviderResourceUpdateOne) check() error {
	if v, ok := pruo.mutation.Kind(); ok {
		if err := providerresource.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "ProviderResource.kind": %w`, err)}
		}
	}
	if v, ok := pruo.mutation.DesiredState(); ok {
		if err := providerresource.DesiredStateValidator(v); err != nil {
			return &ValidationError{Name: "desired_state", err: fmt.Errorf(`ent: validator failed for field "ProviderResource.desired_state": %w`, err)}
		}
	}
	if v, ok := pruo.mutation.CurrentState(); ok {
		if err := providerresource.CurrentStateValidator(v); err != nil {
			return &ValidationError{Name: "current_state", err: fmt.Errorf(`ent: validator failed for field "ProviderResource.current_state": %w`, err)}
		}
	}
	return nil
}

func (pruo *ProviderResourceUpdateOne) sqlSave(ctx context.Context) (_node *ProviderResource, err error) {
	if err := pruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(providerresource.Table, providerresource.Columns, sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt))
	id, ok := pruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProviderResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, providerresource.FieldID)
		for _, f := range fields {
			if !providerresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != providerresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pruo.mutation.ResourceID(); ok {
		_spec.SetField(providerresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := pruo.mutation.Kind(); ok {
		_spec.SetField(providerresource.FieldKind, field.TypeEnum, value)
	}
	if pruo.mutation.KindCleared() {
		_spec.ClearField(providerresource.FieldKind, field.TypeEnum)
	}
	if value, ok := pruo.mutation.Description(); ok {
		_spec.SetField(providerresource.FieldDescription, field.TypeString, value)
	}
	if pruo.mutation.DescriptionCleared() {
		_spec.ClearField(providerresource.FieldDescription, field.TypeString)
	}
	if value, ok := pruo.mutation.DesiredState(); ok {
		_spec.SetField(providerresource.FieldDesiredState, field.TypeEnum, value)
	}
	if value, ok := pruo.mutation.CurrentState(); ok {
		_spec.SetField(providerresource.FieldCurrentState, field.TypeEnum, value)
	}
	if pruo.mutation.CurrentStateCleared() {
		_spec.ClearField(providerresource.FieldCurrentState, field.TypeEnum)
	}
	if value, ok := pruo.mutation.Endpoint(); ok {
		_spec.SetField(providerresource.FieldEndpoint, field.TypeString, value)
	}
	if pruo.mutation.EndpointCleared() {
		_spec.ClearField(providerresource.FieldEndpoint, field.TypeString)
	}
	if value, ok := pruo.mutation.Token(); ok {
		_spec.SetField(providerresource.FieldToken, field.TypeString, value)
	}
	if pruo.mutation.TokenCleared() {
		_spec.ClearField(providerresource.FieldToken, field.TypeString)
	}
	if pruo.mutation.SiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   providerresource.SiteTable,
			Columns: []string{providerresource.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.SiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   providerresource.SiteTable,
			Columns: []string{providerresource.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProviderResource{config: pruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{providerresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pruo.mutation.done = true
	return _node, nil
}
