// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hostnicresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/ipaddressresource"
)

// IPAddressResourceCreate is the builder for creating a IPAddressResource entity.
type IPAddressResourceCreate struct {
	config
	mutation *IPAddressResourceMutation
	hooks    []Hook
}

// SetResourceID sets the "resource_id" field.
func (iarc *IPAddressResourceCreate) SetResourceID(s string) *IPAddressResourceCreate {
	iarc.mutation.SetResourceID(s)
	return iarc
}

// SetAddress sets the "address" field.
func (iarc *IPAddressResourceCreate) SetAddress(s string) *IPAddressResourceCreate {
	iarc.mutation.SetAddress(s)
	return iarc
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (iarc *IPAddressResourceCreate) SetNillableAddress(s *string) *IPAddressResourceCreate {
	if s != nil {
		iarc.SetAddress(*s)
	}
	return iarc
}

// SetDesiredState sets the "desired_state" field.
func (iarc *IPAddressResourceCreate) SetDesiredState(is ipaddressresource.DesiredState) *IPAddressResourceCreate {
	iarc.mutation.SetDesiredState(is)
	return iarc
}

// SetNillableDesiredState sets the "desired_state" field if the given value is not nil.
func (iarc *IPAddressResourceCreate) SetNillableDesiredState(is *ipaddressresource.DesiredState) *IPAddressResourceCreate {
	if is != nil {
		iarc.SetDesiredState(*is)
	}
	return iarc
}

// SetCurrentState sets the "current_state" field.
func (iarc *IPAddressResourceCreate) SetCurrentState(is ipaddressresource.CurrentState) *IPAddressResourceCreate {
	iarc.mutation.SetCurrentState(is)
	return iarc
}

// SetNillableCurrentState sets the "current_state" field if the given value is not nil.
func (iarc *IPAddressResourceCreate) SetNillableCurrentState(is *ipaddressresource.CurrentState) *IPAddressResourceCreate {
	if is != nil {
		iarc.SetCurrentState(*is)
	}
	return iarc
}

// SetStatus sets the "status" field.
func (iarc *IPAddressResourceCreate) SetStatus(i ipaddressresource.Status) *IPAddressResourceCreate {
	iarc.mutation.SetStatus(i)
	return iarc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iarc *IPAddressResourceCreate) SetNillableStatus(i *ipaddressresource.Status) *IPAddressResourceCreate {
	if i != nil {
		iarc.SetStatus(*i)
	}
	return iarc
}

// SetStatusDetail sets the "status_detail" field.
func (iarc *IPAddressResourceCreate) SetStatusDetail(s string) *IPAddressResourceCreate {
	iarc.mutation.SetStatusDetail(s)
	return iarc
}

// SetNillableStatusDetail sets the "status_detail" field if the given value is not nil.
func (iarc *IPAddressResourceCreate) SetNillableStatusDetail(s *string) *IPAddressResourceCreate {
	if s != nil {
		iarc.SetStatusDetail(*s)
	}
	return iarc
}

// SetConfigMethod sets the "config_method" field.
func (iarc *IPAddressResourceCreate) SetConfigMethod(im ipaddressresource.ConfigMethod) *IPAddressResourceCreate {
	iarc.mutation.SetConfigMethod(im)
	return iarc
}

// SetNillableConfigMethod sets the "config_method" field if the given value is not nil.
func (iarc *IPAddressResourceCreate) SetNillableConfigMethod(im *ipaddressresource.ConfigMethod) *IPAddressResourceCreate {
	if im != nil {
		iarc.SetConfigMethod(*im)
	}
	return iarc
}

// SetNicID sets the "nic" edge to the HostnicResource entity by ID.
func (iarc *IPAddressResourceCreate) SetNicID(id int) *IPAddressResourceCreate {
	iarc.mutation.SetNicID(id)
	return iarc
}

// SetNic sets the "nic" edge to the HostnicResource entity.
func (iarc *IPAddressResourceCreate) SetNic(h *HostnicResource) *IPAddressResourceCreate {
	return iarc.SetNicID(h.ID)
}

// Mutation returns the IPAddressResourceMutation object of the builder.
func (iarc *IPAddressResourceCreate) Mutation() *IPAddressResourceMutation {
	return iarc.mutation
}

// Save creates the IPAddressResource in the database.
func (iarc *IPAddressResourceCreate) Save(ctx context.Context) (*IPAddressResource, error) {
	return withHooks[*IPAddressResource, IPAddressResourceMutation](ctx, iarc.sqlSave, iarc.mutation, iarc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (iarc *IPAddressResourceCreate) SaveX(ctx context.Context) *IPAddressResource {
	v, err := iarc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iarc *IPAddressResourceCreate) Exec(ctx context.Context) error {
	_, err := iarc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iarc *IPAddressResourceCreate) ExecX(ctx context.Context) {
	if err := iarc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iarc *IPAddressResourceCreate) check() error {
	if _, ok := iarc.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource_id", err: errors.New(`ent: missing required field "IPAddressResource.resource_id"`)}
	}
	if v, ok := iarc.mutation.DesiredState(); ok {
		if err := ipaddressresource.DesiredStateValidator(v); err != nil {
			return &ValidationError{Name: "desired_state", err: fmt.Errorf(`ent: validator failed for field "IPAddressResource.desired_state": %w`, err)}
		}
	}
	if v, ok := iarc.mutation.CurrentState(); ok {
		if err := ipaddressresource.CurrentStateValidator(v); err != nil {
			return &ValidationError{Name: "current_state", err: fmt.Errorf(`ent: validator failed for field "IPAddressResource.current_state": %w`, err)}
		}
	}
	if v, ok := iarc.mutation.Status(); ok {
		if err := ipaddressresource.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "IPAddressResource.status": %w`, err)}
		}
	}
	if v, ok := iarc.mutation.ConfigMethod(); ok {
		if err := ipaddressresource.ConfigMethodValidator(v); err != nil {
			return &ValidationError{Name: "config_method", err: fmt.Errorf(`ent: validator failed for field "IPAddressResource.config_method": %w`, err)}
		}
	}
	if _, ok := iarc.mutation.NicID(); !ok {
		return &ValidationError{Name: "nic", err: errors.New(`ent: missing required edge "IPAddressResource.nic"`)}
	}
	return nil
}

func (iarc *IPAddressResourceCreate) sqlSave(ctx context.Context) (*IPAddressResource, error) {
	if err := iarc.check(); err != nil {
		return nil, err
	}
	_node, _spec := iarc.createSpec()
	if err := sqlgraph.CreateNode(ctx, iarc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	iarc.mutation.id = &_node.ID
	iarc.mutation.done = true
	return _node, nil
}

func (iarc *IPAddressResourceCreate) createSpec() (*IPAddressResource, *sqlgraph.CreateSpec) {
	var (
		_node = &IPAddressResource{config: iarc.config}
		_spec = sqlgraph.NewCreateSpec(ipaddressresource.Table, sqlgraph.NewFieldSpec(ipaddressresource.FieldID, field.TypeInt))
	)
	if value, ok := iarc.mutation.ResourceID(); ok {
		_spec.SetField(ipaddressresource.FieldResourceID, field.TypeString, value)
		_node.ResourceID = value
	}
	if value, ok := iarc.mutation.Address(); ok {
		_spec.SetField(ipaddressresource.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := iarc.mutation.DesiredState(); ok {
		_spec.SetField(ipaddressresource.FieldDesiredState, field.TypeEnum, value)
		_node.DesiredState = value
	}
	if value, ok := iarc.mutation.CurrentState(); ok {
		_spec.SetField(ipaddressresource.FieldCurrentState, field.TypeEnum, value)
		_node.CurrentState = value
	}
	if value, ok := iarc.mutation.Status(); ok {
		_spec.SetField(ipaddressresource.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := iarc.mutation.StatusDetail(); ok {
		_spec.SetField(ipaddressresource.FieldStatusDetail, field.TypeString, value)
		_node.StatusDetail = value
	}
	if value, ok := iarc.mutation.ConfigMethod(); ok {
		_spec.SetField(ipaddressresource.FieldConfigMethod, field.TypeEnum, value)
		_node.ConfigMethod = value
	}
	if nodes := iarc.mutation.NicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ipaddressresource.NicTable,
			Columns: []string{ipaddressresource.NicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostnicresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ip_address_resource_nic = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// IPAddressResourceCreateBulk is the builder for creating many IPAddressResource entities in bulk.
type IPAddressResourceCreateBulk struct {
	config
	builders []*IPAddressResourceCreate
}

// Save creates the IPAddressResource entities in the database.
func (iarcb *IPAddressResourceCreateBulk) Save(ctx context.Context) ([]*IPAddressResource, error) {
	specs := make([]*sqlgraph.CreateSpec, len(iarcb.builders))
	nodes := make([]*IPAddressResource, len(iarcb.builders))
	mutators := make([]Mutator, len(iarcb.builders))
	for i := range iarcb.builders {
		func(i int, root context.Context) {
			builder := iarcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IPAddressResourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iarcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iarcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iarcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iarcb *IPAddressResourceCreateBulk) SaveX(ctx context.Context) []*IPAddressResource {
	v, err := iarcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iarcb *IPAddressResourceCreateBulk) Exec(ctx context.Context) error {
	_, err := iarcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iarcb *IPAddressResourceCreateBulk) ExecX(ctx context.Context) {
	if err := iarcb.Exec(ctx); err != nil {
		panic(err)
	}
}
