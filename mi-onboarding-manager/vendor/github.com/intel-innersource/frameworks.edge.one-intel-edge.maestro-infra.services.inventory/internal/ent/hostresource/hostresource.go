// Code generated by ent, DO NOT EDIT.

package hostresource

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the hostresource type in the database.
	Label = "host_resource"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldResourceID holds the string denoting the resource_id field in the database.
	FieldResourceID = "resource_id"
	// FieldKind holds the string denoting the kind field in the database.
	FieldKind = "kind"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDesiredState holds the string denoting the desired_state field in the database.
	FieldDesiredState = "desired_state"
	// FieldCurrentState holds the string denoting the current_state field in the database.
	FieldCurrentState = "current_state"
	// FieldProviderStatus holds the string denoting the provider_status field in the database.
	FieldProviderStatus = "provider_status"
	// FieldHostStatus holds the string denoting the host_status field in the database.
	FieldHostStatus = "host_status"
	// FieldProviderStatusDetail holds the string denoting the provider_status_detail field in the database.
	FieldProviderStatusDetail = "provider_status_detail"
	// FieldNote holds the string denoting the note field in the database.
	FieldNote = "note"
	// FieldHardwareKind holds the string denoting the hardware_kind field in the database.
	FieldHardwareKind = "hardware_kind"
	// FieldSerialNumber holds the string denoting the serial_number field in the database.
	FieldSerialNumber = "serial_number"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldMemoryBytes holds the string denoting the memory_bytes field in the database.
	FieldMemoryBytes = "memory_bytes"
	// FieldCPUModel holds the string denoting the cpu_model field in the database.
	FieldCPUModel = "cpu_model"
	// FieldCPUSockets holds the string denoting the cpu_sockets field in the database.
	FieldCPUSockets = "cpu_sockets"
	// FieldCPUCores holds the string denoting the cpu_cores field in the database.
	FieldCPUCores = "cpu_cores"
	// FieldCPUCapabilities holds the string denoting the cpu_capabilities field in the database.
	FieldCPUCapabilities = "cpu_capabilities"
	// FieldCPUArchitecture holds the string denoting the cpu_architecture field in the database.
	FieldCPUArchitecture = "cpu_architecture"
	// FieldCPUThreads holds the string denoting the cpu_threads field in the database.
	FieldCPUThreads = "cpu_threads"
	// FieldMgmtIP holds the string denoting the mgmt_ip field in the database.
	FieldMgmtIP = "mgmt_ip"
	// FieldBmcKind holds the string denoting the bmc_kind field in the database.
	FieldBmcKind = "bmc_kind"
	// FieldBmcIP holds the string denoting the bmc_ip field in the database.
	FieldBmcIP = "bmc_ip"
	// FieldBmcUsername holds the string denoting the bmc_username field in the database.
	FieldBmcUsername = "bmc_username"
	// FieldBmcPassword holds the string denoting the bmc_password field in the database.
	FieldBmcPassword = "bmc_password"
	// FieldPxeMAC holds the string denoting the pxe_mac field in the database.
	FieldPxeMAC = "pxe_mac"
	// FieldHostname holds the string denoting the hostname field in the database.
	FieldHostname = "hostname"
	// FieldProductName holds the string denoting the product_name field in the database.
	FieldProductName = "product_name"
	// FieldBiosVersion holds the string denoting the bios_version field in the database.
	FieldBiosVersion = "bios_version"
	// FieldBiosReleaseDate holds the string denoting the bios_release_date field in the database.
	FieldBiosReleaseDate = "bios_release_date"
	// FieldBiosVendor holds the string denoting the bios_vendor field in the database.
	FieldBiosVendor = "bios_vendor"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldDesiredPowerState holds the string denoting the desired_power_state field in the database.
	FieldDesiredPowerState = "desired_power_state"
	// FieldCurrentPowerState holds the string denoting the current_power_state field in the database.
	FieldCurrentPowerState = "current_power_state"
	// EdgeSite holds the string denoting the site edge name in mutations.
	EdgeSite = "site"
	// EdgeProvider holds the string denoting the provider edge name in mutations.
	EdgeProvider = "provider"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeHostStorages holds the string denoting the host_storages edge name in mutations.
	EdgeHostStorages = "host_storages"
	// EdgeHostNics holds the string denoting the host_nics edge name in mutations.
	EdgeHostNics = "host_nics"
	// EdgeHostUsbs holds the string denoting the host_usbs edge name in mutations.
	EdgeHostUsbs = "host_usbs"
	// EdgeHostGpus holds the string denoting the host_gpus edge name in mutations.
	EdgeHostGpus = "host_gpus"
	// EdgeInstance holds the string denoting the instance edge name in mutations.
	EdgeInstance = "instance"
	// Table holds the table name of the hostresource in the database.
	Table = "host_resources"
	// SiteTable is the table that holds the site relation/edge.
	SiteTable = "host_resources"
	// SiteInverseTable is the table name for the SiteResource entity.
	// It exists in this package in order to avoid circular dependency with the "siteresource" package.
	SiteInverseTable = "site_resources"
	// SiteColumn is the table column denoting the site relation/edge.
	SiteColumn = "host_resource_site"
	// ProviderTable is the table that holds the provider relation/edge.
	ProviderTable = "host_resources"
	// ProviderInverseTable is the table name for the ProviderResource entity.
	// It exists in this package in order to avoid circular dependency with the "providerresource" package.
	ProviderInverseTable = "provider_resources"
	// ProviderColumn is the table column denoting the provider relation/edge.
	ProviderColumn = "host_resource_provider"
	// ProjectTable is the table that holds the project relation/edge.
	ProjectTable = "host_resources"
	// ProjectInverseTable is the table name for the ProjectResource entity.
	// It exists in this package in order to avoid circular dependency with the "projectresource" package.
	ProjectInverseTable = "project_resources"
	// ProjectColumn is the table column denoting the project relation/edge.
	ProjectColumn = "host_resource_project"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "host_resources"
	// UserInverseTable is the table name for the UserResource entity.
	// It exists in this package in order to avoid circular dependency with the "userresource" package.
	UserInverseTable = "user_resources"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "host_resource_user"
	// HostStoragesTable is the table that holds the host_storages relation/edge.
	HostStoragesTable = "hoststorage_resources"
	// HostStoragesInverseTable is the table name for the HoststorageResource entity.
	// It exists in this package in order to avoid circular dependency with the "hoststorageresource" package.
	HostStoragesInverseTable = "hoststorage_resources"
	// HostStoragesColumn is the table column denoting the host_storages relation/edge.
	HostStoragesColumn = "hoststorage_resource_host"
	// HostNicsTable is the table that holds the host_nics relation/edge.
	HostNicsTable = "hostnic_resources"
	// HostNicsInverseTable is the table name for the HostnicResource entity.
	// It exists in this package in order to avoid circular dependency with the "hostnicresource" package.
	HostNicsInverseTable = "hostnic_resources"
	// HostNicsColumn is the table column denoting the host_nics relation/edge.
	HostNicsColumn = "hostnic_resource_host"
	// HostUsbsTable is the table that holds the host_usbs relation/edge.
	HostUsbsTable = "hostusb_resources"
	// HostUsbsInverseTable is the table name for the HostusbResource entity.
	// It exists in this package in order to avoid circular dependency with the "hostusbresource" package.
	HostUsbsInverseTable = "hostusb_resources"
	// HostUsbsColumn is the table column denoting the host_usbs relation/edge.
	HostUsbsColumn = "hostusb_resource_host"
	// HostGpusTable is the table that holds the host_gpus relation/edge.
	HostGpusTable = "hostgpu_resources"
	// HostGpusInverseTable is the table name for the HostgpuResource entity.
	// It exists in this package in order to avoid circular dependency with the "hostgpuresource" package.
	HostGpusInverseTable = "hostgpu_resources"
	// HostGpusColumn is the table column denoting the host_gpus relation/edge.
	HostGpusColumn = "hostgpu_resource_host"
	// InstanceTable is the table that holds the instance relation/edge.
	InstanceTable = "host_resources"
	// InstanceInverseTable is the table name for the InstanceResource entity.
	// It exists in this package in order to avoid circular dependency with the "instanceresource" package.
	InstanceInverseTable = "instance_resources"
	// InstanceColumn is the table column denoting the instance relation/edge.
	InstanceColumn = "instance_resource_host"
)

// Columns holds all SQL columns for hostresource fields.
var Columns = []string{
	FieldID,
	FieldResourceID,
	FieldKind,
	FieldName,
	FieldDesiredState,
	FieldCurrentState,
	FieldProviderStatus,
	FieldHostStatus,
	FieldProviderStatusDetail,
	FieldNote,
	FieldHardwareKind,
	FieldSerialNumber,
	FieldUUID,
	FieldMemoryBytes,
	FieldCPUModel,
	FieldCPUSockets,
	FieldCPUCores,
	FieldCPUCapabilities,
	FieldCPUArchitecture,
	FieldCPUThreads,
	FieldMgmtIP,
	FieldBmcKind,
	FieldBmcIP,
	FieldBmcUsername,
	FieldBmcPassword,
	FieldPxeMAC,
	FieldHostname,
	FieldProductName,
	FieldBiosVersion,
	FieldBiosReleaseDate,
	FieldBiosVendor,
	FieldMetadata,
	FieldDesiredPowerState,
	FieldCurrentPowerState,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "host_resources"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"host_resource_site",
	"host_resource_provider",
	"host_resource_project",
	"host_resource_user",
	"instance_resource_host",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// DesiredState defines the type for the "desired_state" enum field.
type DesiredState string

// DesiredState values.
const (
	DesiredStateHOST_STATE_UNSPECIFIED DesiredState = "HOST_STATE_UNSPECIFIED"
	DesiredStateHOST_STATE_ERROR       DesiredState = "HOST_STATE_ERROR"
	DesiredStateHOST_STATE_DELETING    DesiredState = "HOST_STATE_DELETING"
	DesiredStateHOST_STATE_DELETED     DesiredState = "HOST_STATE_DELETED"
	DesiredStateHOST_STATE_ONBOARDED   DesiredState = "HOST_STATE_ONBOARDED"
	DesiredStateHOST_STATE_PROVISIONED DesiredState = "HOST_STATE_PROVISIONED"
	DesiredStateHOST_STATE_UNTRUSTED   DesiredState = "HOST_STATE_UNTRUSTED"
)

func (ds DesiredState) String() string {
	return string(ds)
}

// DesiredStateValidator is a validator for the "desired_state" field enum values. It is called by the builders before save.
func DesiredStateValidator(ds DesiredState) error {
	switch ds {
	case DesiredStateHOST_STATE_UNSPECIFIED, DesiredStateHOST_STATE_ERROR, DesiredStateHOST_STATE_DELETING, DesiredStateHOST_STATE_DELETED, DesiredStateHOST_STATE_ONBOARDED, DesiredStateHOST_STATE_PROVISIONED, DesiredStateHOST_STATE_UNTRUSTED:
		return nil
	default:
		return fmt.Errorf("hostresource: invalid enum value for desired_state field: %q", ds)
	}
}

// CurrentState defines the type for the "current_state" enum field.
type CurrentState string

// CurrentState values.
const (
	CurrentStateHOST_STATE_UNSPECIFIED CurrentState = "HOST_STATE_UNSPECIFIED"
	CurrentStateHOST_STATE_ERROR       CurrentState = "HOST_STATE_ERROR"
	CurrentStateHOST_STATE_DELETING    CurrentState = "HOST_STATE_DELETING"
	CurrentStateHOST_STATE_DELETED     CurrentState = "HOST_STATE_DELETED"
	CurrentStateHOST_STATE_ONBOARDED   CurrentState = "HOST_STATE_ONBOARDED"
	CurrentStateHOST_STATE_PROVISIONED CurrentState = "HOST_STATE_PROVISIONED"
	CurrentStateHOST_STATE_UNTRUSTED   CurrentState = "HOST_STATE_UNTRUSTED"
)

func (cs CurrentState) String() string {
	return string(cs)
}

// CurrentStateValidator is a validator for the "current_state" field enum values. It is called by the builders before save.
func CurrentStateValidator(cs CurrentState) error {
	switch cs {
	case CurrentStateHOST_STATE_UNSPECIFIED, CurrentStateHOST_STATE_ERROR, CurrentStateHOST_STATE_DELETING, CurrentStateHOST_STATE_DELETED, CurrentStateHOST_STATE_ONBOARDED, CurrentStateHOST_STATE_PROVISIONED, CurrentStateHOST_STATE_UNTRUSTED:
		return nil
	default:
		return fmt.Errorf("hostresource: invalid enum value for current_state field: %q", cs)
	}
}

// HostStatus defines the type for the "host_status" enum field.
type HostStatus string

// HostStatus values.
const (
	HostStatusHOST_STATUS_UNSPECIFIED      HostStatus = "HOST_STATUS_UNSPECIFIED"
	HostStatusHOST_STATUS_BOOTING          HostStatus = "HOST_STATUS_BOOTING"
	HostStatusHOST_STATUS_BOOT_FAILED      HostStatus = "HOST_STATUS_BOOT_FAILED"
	HostStatusHOST_STATUS_PROVISIONING     HostStatus = "HOST_STATUS_PROVISIONING"
	HostStatusHOST_STATUS_PROVISIONED      HostStatus = "HOST_STATUS_PROVISIONED"
	HostStatusHOST_STATUS_PROVISION_FAILED HostStatus = "HOST_STATUS_PROVISION_FAILED"
	HostStatusHOST_STATUS_RUNNING          HostStatus = "HOST_STATUS_RUNNING"
	HostStatusHOST_STATUS_ERROR            HostStatus = "HOST_STATUS_ERROR"
	HostStatusHOST_STATUS_REGISTERING      HostStatus = "HOST_STATUS_REGISTERING"
	HostStatusHOST_STATUS_UPDATING         HostStatus = "HOST_STATUS_UPDATING"
	HostStatusHOST_STATUS_UPDATE_FAILED    HostStatus = "HOST_STATUS_UPDATE_FAILED"
	HostStatusHOST_STATUS_CONNECTION_LOST  HostStatus = "HOST_STATUS_CONNECTION_LOST"
	HostStatusHOST_STATUS_INVALIDATING     HostStatus = "HOST_STATUS_INVALIDATING"
	HostStatusHOST_STATUS_INVALIDATED      HostStatus = "HOST_STATUS_INVALIDATED"
)

func (hs HostStatus) String() string {
	return string(hs)
}

// HostStatusValidator is a validator for the "host_status" field enum values. It is called by the builders before save.
func HostStatusValidator(hs HostStatus) error {
	switch hs {
	case HostStatusHOST_STATUS_UNSPECIFIED, HostStatusHOST_STATUS_BOOTING, HostStatusHOST_STATUS_BOOT_FAILED, HostStatusHOST_STATUS_PROVISIONING, HostStatusHOST_STATUS_PROVISIONED, HostStatusHOST_STATUS_PROVISION_FAILED, HostStatusHOST_STATUS_RUNNING, HostStatusHOST_STATUS_ERROR, HostStatusHOST_STATUS_REGISTERING, HostStatusHOST_STATUS_UPDATING, HostStatusHOST_STATUS_UPDATE_FAILED, HostStatusHOST_STATUS_CONNECTION_LOST, HostStatusHOST_STATUS_INVALIDATING, HostStatusHOST_STATUS_INVALIDATED:
		return nil
	default:
		return fmt.Errorf("hostresource: invalid enum value for host_status field: %q", hs)
	}
}

// BmcKind defines the type for the "bmc_kind" enum field.
type BmcKind string

// BmcKind values.
const (
	BmcKindBAREMETAL_CONTROLLER_KIND_UNSPECIFIED BmcKind = "BAREMETAL_CONTROLLER_KIND_UNSPECIFIED"
	BmcKindBAREMETAL_CONTROLLER_KIND_NONE        BmcKind = "BAREMETAL_CONTROLLER_KIND_NONE"
	BmcKindBAREMETAL_CONTROLLER_KIND_IPMI        BmcKind = "BAREMETAL_CONTROLLER_KIND_IPMI"
	BmcKindBAREMETAL_CONTROLLER_KIND_VPRO        BmcKind = "BAREMETAL_CONTROLLER_KIND_VPRO"
	BmcKindBAREMETAL_CONTROLLER_KIND_PDU         BmcKind = "BAREMETAL_CONTROLLER_KIND_PDU"
	BmcKindBAREMETAL_CONTROLLER_KIND_FDO         BmcKind = "BAREMETAL_CONTROLLER_KIND_FDO"
)

func (bk BmcKind) String() string {
	return string(bk)
}

// BmcKindValidator is a validator for the "bmc_kind" field enum values. It is called by the builders before save.
func BmcKindValidator(bk BmcKind) error {
	switch bk {
	case BmcKindBAREMETAL_CONTROLLER_KIND_UNSPECIFIED, BmcKindBAREMETAL_CONTROLLER_KIND_NONE, BmcKindBAREMETAL_CONTROLLER_KIND_IPMI, BmcKindBAREMETAL_CONTROLLER_KIND_VPRO, BmcKindBAREMETAL_CONTROLLER_KIND_PDU, BmcKindBAREMETAL_CONTROLLER_KIND_FDO:
		return nil
	default:
		return fmt.Errorf("hostresource: invalid enum value for bmc_kind field: %q", bk)
	}
}

// DesiredPowerState defines the type for the "desired_power_state" enum field.
type DesiredPowerState string

// DesiredPowerState values.
const (
	DesiredPowerStatePOWER_STATE_UNSPECIFIED DesiredPowerState = "POWER_STATE_UNSPECIFIED"
	DesiredPowerStatePOWER_STATE_ERROR       DesiredPowerState = "POWER_STATE_ERROR"
	DesiredPowerStatePOWER_STATE_ON          DesiredPowerState = "POWER_STATE_ON"
	DesiredPowerStatePOWER_STATE_OFF         DesiredPowerState = "POWER_STATE_OFF"
)

func (dps DesiredPowerState) String() string {
	return string(dps)
}

// DesiredPowerStateValidator is a validator for the "desired_power_state" field enum values. It is called by the builders before save.
func DesiredPowerStateValidator(dps DesiredPowerState) error {
	switch dps {
	case DesiredPowerStatePOWER_STATE_UNSPECIFIED, DesiredPowerStatePOWER_STATE_ERROR, DesiredPowerStatePOWER_STATE_ON, DesiredPowerStatePOWER_STATE_OFF:
		return nil
	default:
		return fmt.Errorf("hostresource: invalid enum value for desired_power_state field: %q", dps)
	}
}

// CurrentPowerState defines the type for the "current_power_state" enum field.
type CurrentPowerState string

// CurrentPowerState values.
const (
	CurrentPowerStatePOWER_STATE_UNSPECIFIED CurrentPowerState = "POWER_STATE_UNSPECIFIED"
	CurrentPowerStatePOWER_STATE_ERROR       CurrentPowerState = "POWER_STATE_ERROR"
	CurrentPowerStatePOWER_STATE_ON          CurrentPowerState = "POWER_STATE_ON"
	CurrentPowerStatePOWER_STATE_OFF         CurrentPowerState = "POWER_STATE_OFF"
)

func (cps CurrentPowerState) String() string {
	return string(cps)
}

// CurrentPowerStateValidator is a validator for the "current_power_state" field enum values. It is called by the builders before save.
func CurrentPowerStateValidator(cps CurrentPowerState) error {
	switch cps {
	case CurrentPowerStatePOWER_STATE_UNSPECIFIED, CurrentPowerStatePOWER_STATE_ERROR, CurrentPowerStatePOWER_STATE_ON, CurrentPowerStatePOWER_STATE_OFF:
		return nil
	default:
		return fmt.Errorf("hostresource: invalid enum value for current_power_state field: %q", cps)
	}
}

// OrderOption defines the ordering options for the HostResource queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByResourceID orders the results by the resource_id field.
func ByResourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceID, opts...).ToFunc()
}

// ByKind orders the results by the kind field.
func ByKind(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKind, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDesiredState orders the results by the desired_state field.
func ByDesiredState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesiredState, opts...).ToFunc()
}

// ByCurrentState orders the results by the current_state field.
func ByCurrentState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentState, opts...).ToFunc()
}

// ByProviderStatus orders the results by the provider_status field.
func ByProviderStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderStatus, opts...).ToFunc()
}

// ByHostStatus orders the results by the host_status field.
func ByHostStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHostStatus, opts...).ToFunc()
}

// ByProviderStatusDetail orders the results by the provider_status_detail field.
func ByProviderStatusDetail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderStatusDetail, opts...).ToFunc()
}

// ByNote orders the results by the note field.
func ByNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNote, opts...).ToFunc()
}

// ByHardwareKind orders the results by the hardware_kind field.
func ByHardwareKind(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHardwareKind, opts...).ToFunc()
}

// BySerialNumber orders the results by the serial_number field.
func BySerialNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSerialNumber, opts...).ToFunc()
}

// ByUUID orders the results by the uuid field.
func ByUUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUUID, opts...).ToFunc()
}

// ByMemoryBytes orders the results by the memory_bytes field.
func ByMemoryBytes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemoryBytes, opts...).ToFunc()
}

// ByCPUModel orders the results by the cpu_model field.
func ByCPUModel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCPUModel, opts...).ToFunc()
}

// ByCPUSockets orders the results by the cpu_sockets field.
func ByCPUSockets(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCPUSockets, opts...).ToFunc()
}

// ByCPUCores orders the results by the cpu_cores field.
func ByCPUCores(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCPUCores, opts...).ToFunc()
}

// ByCPUCapabilities orders the results by the cpu_capabilities field.
func ByCPUCapabilities(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCPUCapabilities, opts...).ToFunc()
}

// ByCPUArchitecture orders the results by the cpu_architecture field.
func ByCPUArchitecture(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCPUArchitecture, opts...).ToFunc()
}

// ByCPUThreads orders the results by the cpu_threads field.
func ByCPUThreads(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCPUThreads, opts...).ToFunc()
}

// ByMgmtIP orders the results by the mgmt_ip field.
func ByMgmtIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMgmtIP, opts...).ToFunc()
}

// ByBmcKind orders the results by the bmc_kind field.
func ByBmcKind(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBmcKind, opts...).ToFunc()
}

// ByBmcIP orders the results by the bmc_ip field.
func ByBmcIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBmcIP, opts...).ToFunc()
}

// ByBmcUsername orders the results by the bmc_username field.
func ByBmcUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBmcUsername, opts...).ToFunc()
}

// ByBmcPassword orders the results by the bmc_password field.
func ByBmcPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBmcPassword, opts...).ToFunc()
}

// ByPxeMAC orders the results by the pxe_mac field.
func ByPxeMAC(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPxeMAC, opts...).ToFunc()
}

// ByHostname orders the results by the hostname field.
func ByHostname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHostname, opts...).ToFunc()
}

// ByProductName orders the results by the product_name field.
func ByProductName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductName, opts...).ToFunc()
}

// ByBiosVersion orders the results by the bios_version field.
func ByBiosVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBiosVersion, opts...).ToFunc()
}

// ByBiosReleaseDate orders the results by the bios_release_date field.
func ByBiosReleaseDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBiosReleaseDate, opts...).ToFunc()
}

// ByBiosVendor orders the results by the bios_vendor field.
func ByBiosVendor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBiosVendor, opts...).ToFunc()
}

// ByMetadata orders the results by the metadata field.
func ByMetadata(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMetadata, opts...).ToFunc()
}

// ByDesiredPowerState orders the results by the desired_power_state field.
func ByDesiredPowerState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesiredPowerState, opts...).ToFunc()
}

// ByCurrentPowerState orders the results by the current_power_state field.
func ByCurrentPowerState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentPowerState, opts...).ToFunc()
}

// BySiteField orders the results by site field.
func BySiteField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSiteStep(), sql.OrderByField(field, opts...))
	}
}

// ByProviderField orders the results by provider field.
func ByProviderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProviderStep(), sql.OrderByField(field, opts...))
	}
}

// ByProjectField orders the results by project field.
func ByProjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByHostStoragesCount orders the results by host_storages count.
func ByHostStoragesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHostStoragesStep(), opts...)
	}
}

// ByHostStorages orders the results by host_storages terms.
func ByHostStorages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHostStoragesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHostNicsCount orders the results by host_nics count.
func ByHostNicsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHostNicsStep(), opts...)
	}
}

// ByHostNics orders the results by host_nics terms.
func ByHostNics(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHostNicsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHostUsbsCount orders the results by host_usbs count.
func ByHostUsbsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHostUsbsStep(), opts...)
	}
}

// ByHostUsbs orders the results by host_usbs terms.
func ByHostUsbs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHostUsbsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHostGpusCount orders the results by host_gpus count.
func ByHostGpusCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHostGpusStep(), opts...)
	}
}

// ByHostGpus orders the results by host_gpus terms.
func ByHostGpus(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHostGpusStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInstanceField orders the results by instance field.
func ByInstanceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInstanceStep(), sql.OrderByField(field, opts...))
	}
}
func newSiteStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SiteInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SiteTable, SiteColumn),
	)
}
func newProviderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProviderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ProviderTable, ProviderColumn),
	)
}
func newProjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ProjectTable, ProjectColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
	)
}
func newHostStoragesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HostStoragesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, HostStoragesTable, HostStoragesColumn),
	)
}
func newHostNicsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HostNicsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, HostNicsTable, HostNicsColumn),
	)
}
func newHostUsbsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HostUsbsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, HostUsbsTable, HostUsbsColumn),
	)
}
func newHostGpusStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HostGpusInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, HostGpusTable, HostGpusColumn),
	)
}
func newInstanceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InstanceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, InstanceTable, InstanceColumn),
	)
}
