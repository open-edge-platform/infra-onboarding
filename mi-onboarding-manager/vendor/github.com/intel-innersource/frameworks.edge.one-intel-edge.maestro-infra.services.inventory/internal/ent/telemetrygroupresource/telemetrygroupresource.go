// Code generated by ent, DO NOT EDIT.

package telemetrygroupresource

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the telemetrygroupresource type in the database.
	Label = "telemetry_group_resource"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldResourceID holds the string denoting the resource_id field in the database.
	FieldResourceID = "resource_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldKind holds the string denoting the kind field in the database.
	FieldKind = "kind"
	// FieldCollectorKind holds the string denoting the collector_kind field in the database.
	FieldCollectorKind = "collector_kind"
	// FieldGroups holds the string denoting the groups field in the database.
	FieldGroups = "groups"
	// EdgeProfiles holds the string denoting the profiles edge name in mutations.
	EdgeProfiles = "profiles"
	// Table holds the table name of the telemetrygroupresource in the database.
	Table = "telemetry_group_resources"
	// ProfilesTable is the table that holds the profiles relation/edge.
	ProfilesTable = "telemetry_profiles"
	// ProfilesInverseTable is the table name for the TelemetryProfile entity.
	// It exists in this package in order to avoid circular dependency with the "telemetryprofile" package.
	ProfilesInverseTable = "telemetry_profiles"
	// ProfilesColumn is the table column denoting the profiles relation/edge.
	ProfilesColumn = "telemetry_profile_group"
)

// Columns holds all SQL columns for telemetrygroupresource fields.
var Columns = []string{
	FieldID,
	FieldResourceID,
	FieldName,
	FieldKind,
	FieldCollectorKind,
	FieldGroups,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Kind defines the type for the "kind" enum field.
type Kind string

// Kind values.
const (
	KindTELEMETRY_RESOURCE_KIND_UNSPECIFIED Kind = "TELEMETRY_RESOURCE_KIND_UNSPECIFIED"
	KindTELEMETRY_RESOURCE_KIND_METRICS     Kind = "TELEMETRY_RESOURCE_KIND_METRICS"
	KindTELEMETRY_RESOURCE_KIND_LOGS        Kind = "TELEMETRY_RESOURCE_KIND_LOGS"
)

func (k Kind) String() string {
	return string(k)
}

// KindValidator is a validator for the "kind" field enum values. It is called by the builders before save.
func KindValidator(k Kind) error {
	switch k {
	case KindTELEMETRY_RESOURCE_KIND_UNSPECIFIED, KindTELEMETRY_RESOURCE_KIND_METRICS, KindTELEMETRY_RESOURCE_KIND_LOGS:
		return nil
	default:
		return fmt.Errorf("telemetrygroupresource: invalid enum value for kind field: %q", k)
	}
}

// CollectorKind defines the type for the "collector_kind" enum field.
type CollectorKind string

// CollectorKind values.
const (
	CollectorKindCOLLECTOR_KIND_UNSPECIFIED CollectorKind = "COLLECTOR_KIND_UNSPECIFIED"
	CollectorKindCOLLECTOR_KIND_HOST        CollectorKind = "COLLECTOR_KIND_HOST"
	CollectorKindCOLLECTOR_KIND_CLUSTER     CollectorKind = "COLLECTOR_KIND_CLUSTER"
)

func (ck CollectorKind) String() string {
	return string(ck)
}

// CollectorKindValidator is a validator for the "collector_kind" field enum values. It is called by the builders before save.
func CollectorKindValidator(ck CollectorKind) error {
	switch ck {
	case CollectorKindCOLLECTOR_KIND_UNSPECIFIED, CollectorKindCOLLECTOR_KIND_HOST, CollectorKindCOLLECTOR_KIND_CLUSTER:
		return nil
	default:
		return fmt.Errorf("telemetrygroupresource: invalid enum value for collector_kind field: %q", ck)
	}
}

// OrderOption defines the ordering options for the TelemetryGroupResource queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByResourceID orders the results by the resource_id field.
func ByResourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByKind orders the results by the kind field.
func ByKind(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKind, opts...).ToFunc()
}

// ByCollectorKind orders the results by the collector_kind field.
func ByCollectorKind(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCollectorKind, opts...).ToFunc()
}

// ByGroups orders the results by the groups field.
func ByGroups(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGroups, opts...).ToFunc()
}

// ByProfilesCount orders the results by profiles count.
func ByProfilesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProfilesStep(), opts...)
	}
}

// ByProfiles orders the results by profiles terms.
func ByProfiles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProfilesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProfilesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProfilesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ProfilesTable, ProfilesColumn),
	)
}
