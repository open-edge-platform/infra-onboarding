// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/networksegment"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/siteresource"
)

// NetworkSegmentQuery is the builder for querying NetworkSegment entities.
type NetworkSegmentQuery struct {
	config
	ctx        *QueryContext
	order      []networksegment.OrderOption
	inters     []Interceptor
	predicates []predicate.NetworkSegment
	withSite   *SiteResourceQuery
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the NetworkSegmentQuery builder.
func (nsq *NetworkSegmentQuery) Where(ps ...predicate.NetworkSegment) *NetworkSegmentQuery {
	nsq.predicates = append(nsq.predicates, ps...)
	return nsq
}

// Limit the number of records to be returned by this query.
func (nsq *NetworkSegmentQuery) Limit(limit int) *NetworkSegmentQuery {
	nsq.ctx.Limit = &limit
	return nsq
}

// Offset to start from.
func (nsq *NetworkSegmentQuery) Offset(offset int) *NetworkSegmentQuery {
	nsq.ctx.Offset = &offset
	return nsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (nsq *NetworkSegmentQuery) Unique(unique bool) *NetworkSegmentQuery {
	nsq.ctx.Unique = &unique
	return nsq
}

// Order specifies how the records should be ordered.
func (nsq *NetworkSegmentQuery) Order(o ...networksegment.OrderOption) *NetworkSegmentQuery {
	nsq.order = append(nsq.order, o...)
	return nsq
}

// QuerySite chains the current query on the "site" edge.
func (nsq *NetworkSegmentQuery) QuerySite() *SiteResourceQuery {
	query := (&SiteResourceClient{config: nsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := nsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := nsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(networksegment.Table, networksegment.FieldID, selector),
			sqlgraph.To(siteresource.Table, siteresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, networksegment.SiteTable, networksegment.SiteColumn),
		)
		fromU = sqlgraph.SetNeighbors(nsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first NetworkSegment entity from the query.
// Returns a *NotFoundError when no NetworkSegment was found.
func (nsq *NetworkSegmentQuery) First(ctx context.Context) (*NetworkSegment, error) {
	nodes, err := nsq.Limit(1).All(setContextOp(ctx, nsq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{networksegment.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (nsq *NetworkSegmentQuery) FirstX(ctx context.Context) *NetworkSegment {
	node, err := nsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first NetworkSegment ID from the query.
// Returns a *NotFoundError when no NetworkSegment ID was found.
func (nsq *NetworkSegmentQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = nsq.Limit(1).IDs(setContextOp(ctx, nsq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{networksegment.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (nsq *NetworkSegmentQuery) FirstIDX(ctx context.Context) int {
	id, err := nsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single NetworkSegment entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one NetworkSegment entity is found.
// Returns a *NotFoundError when no NetworkSegment entities are found.
func (nsq *NetworkSegmentQuery) Only(ctx context.Context) (*NetworkSegment, error) {
	nodes, err := nsq.Limit(2).All(setContextOp(ctx, nsq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{networksegment.Label}
	default:
		return nil, &NotSingularError{networksegment.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (nsq *NetworkSegmentQuery) OnlyX(ctx context.Context) *NetworkSegment {
	node, err := nsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only NetworkSegment ID in the query.
// Returns a *NotSingularError when more than one NetworkSegment ID is found.
// Returns a *NotFoundError when no entities are found.
func (nsq *NetworkSegmentQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = nsq.Limit(2).IDs(setContextOp(ctx, nsq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{networksegment.Label}
	default:
		err = &NotSingularError{networksegment.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (nsq *NetworkSegmentQuery) OnlyIDX(ctx context.Context) int {
	id, err := nsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of NetworkSegments.
func (nsq *NetworkSegmentQuery) All(ctx context.Context) ([]*NetworkSegment, error) {
	ctx = setContextOp(ctx, nsq.ctx, "All")
	if err := nsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*NetworkSegment, *NetworkSegmentQuery]()
	return withInterceptors[[]*NetworkSegment](ctx, nsq, qr, nsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (nsq *NetworkSegmentQuery) AllX(ctx context.Context) []*NetworkSegment {
	nodes, err := nsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of NetworkSegment IDs.
func (nsq *NetworkSegmentQuery) IDs(ctx context.Context) (ids []int, err error) {
	if nsq.ctx.Unique == nil && nsq.path != nil {
		nsq.Unique(true)
	}
	ctx = setContextOp(ctx, nsq.ctx, "IDs")
	if err = nsq.Select(networksegment.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (nsq *NetworkSegmentQuery) IDsX(ctx context.Context) []int {
	ids, err := nsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (nsq *NetworkSegmentQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, nsq.ctx, "Count")
	if err := nsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, nsq, querierCount[*NetworkSegmentQuery](), nsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (nsq *NetworkSegmentQuery) CountX(ctx context.Context) int {
	count, err := nsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (nsq *NetworkSegmentQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, nsq.ctx, "Exist")
	switch _, err := nsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (nsq *NetworkSegmentQuery) ExistX(ctx context.Context) bool {
	exist, err := nsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the NetworkSegmentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (nsq *NetworkSegmentQuery) Clone() *NetworkSegmentQuery {
	if nsq == nil {
		return nil
	}
	return &NetworkSegmentQuery{
		config:     nsq.config,
		ctx:        nsq.ctx.Clone(),
		order:      append([]networksegment.OrderOption{}, nsq.order...),
		inters:     append([]Interceptor{}, nsq.inters...),
		predicates: append([]predicate.NetworkSegment{}, nsq.predicates...),
		withSite:   nsq.withSite.Clone(),
		// clone intermediate query.
		sql:  nsq.sql.Clone(),
		path: nsq.path,
	}
}

// WithSite tells the query-builder to eager-load the nodes that are connected to
// the "site" edge. The optional arguments are used to configure the query builder of the edge.
func (nsq *NetworkSegmentQuery) WithSite(opts ...func(*SiteResourceQuery)) *NetworkSegmentQuery {
	query := (&SiteResourceClient{config: nsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	nsq.withSite = query
	return nsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ResourceID string `json:"resource_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.NetworkSegment.Query().
//		GroupBy(networksegment.FieldResourceID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (nsq *NetworkSegmentQuery) GroupBy(field string, fields ...string) *NetworkSegmentGroupBy {
	nsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &NetworkSegmentGroupBy{build: nsq}
	grbuild.flds = &nsq.ctx.Fields
	grbuild.label = networksegment.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ResourceID string `json:"resource_id,omitempty"`
//	}
//
//	client.NetworkSegment.Query().
//		Select(networksegment.FieldResourceID).
//		Scan(ctx, &v)
func (nsq *NetworkSegmentQuery) Select(fields ...string) *NetworkSegmentSelect {
	nsq.ctx.Fields = append(nsq.ctx.Fields, fields...)
	sbuild := &NetworkSegmentSelect{NetworkSegmentQuery: nsq}
	sbuild.label = networksegment.Label
	sbuild.flds, sbuild.scan = &nsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a NetworkSegmentSelect configured with the given aggregations.
func (nsq *NetworkSegmentQuery) Aggregate(fns ...AggregateFunc) *NetworkSegmentSelect {
	return nsq.Select().Aggregate(fns...)
}

func (nsq *NetworkSegmentQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range nsq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, nsq); err != nil {
				return err
			}
		}
	}
	for _, f := range nsq.ctx.Fields {
		if !networksegment.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if nsq.path != nil {
		prev, err := nsq.path(ctx)
		if err != nil {
			return err
		}
		nsq.sql = prev
	}
	return nil
}

func (nsq *NetworkSegmentQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*NetworkSegment, error) {
	var (
		nodes       = []*NetworkSegment{}
		withFKs     = nsq.withFKs
		_spec       = nsq.querySpec()
		loadedTypes = [1]bool{
			nsq.withSite != nil,
		}
	)
	if nsq.withSite != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, networksegment.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*NetworkSegment).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &NetworkSegment{config: nsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, nsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := nsq.withSite; query != nil {
		if err := nsq.loadSite(ctx, query, nodes, nil,
			func(n *NetworkSegment, e *SiteResource) { n.Edges.Site = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (nsq *NetworkSegmentQuery) loadSite(ctx context.Context, query *SiteResourceQuery, nodes []*NetworkSegment, init func(*NetworkSegment), assign func(*NetworkSegment, *SiteResource)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*NetworkSegment)
	for i := range nodes {
		if nodes[i].network_segment_site == nil {
			continue
		}
		fk := *nodes[i].network_segment_site
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(siteresource.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "network_segment_site" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (nsq *NetworkSegmentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := nsq.querySpec()
	_spec.Node.Columns = nsq.ctx.Fields
	if len(nsq.ctx.Fields) > 0 {
		_spec.Unique = nsq.ctx.Unique != nil && *nsq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, nsq.driver, _spec)
}

func (nsq *NetworkSegmentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(networksegment.Table, networksegment.Columns, sqlgraph.NewFieldSpec(networksegment.FieldID, field.TypeInt))
	_spec.From = nsq.sql
	if unique := nsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if nsq.path != nil {
		_spec.Unique = true
	}
	if fields := nsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, networksegment.FieldID)
		for i := range fields {
			if fields[i] != networksegment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := nsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := nsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := nsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := nsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (nsq *NetworkSegmentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(nsq.driver.Dialect())
	t1 := builder.Table(networksegment.Table)
	columns := nsq.ctx.Fields
	if len(columns) == 0 {
		columns = networksegment.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if nsq.sql != nil {
		selector = nsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if nsq.ctx.Unique != nil && *nsq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range nsq.predicates {
		p(selector)
	}
	for _, p := range nsq.order {
		p(selector)
	}
	if offset := nsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := nsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// NetworkSegmentGroupBy is the group-by builder for NetworkSegment entities.
type NetworkSegmentGroupBy struct {
	selector
	build *NetworkSegmentQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (nsgb *NetworkSegmentGroupBy) Aggregate(fns ...AggregateFunc) *NetworkSegmentGroupBy {
	nsgb.fns = append(nsgb.fns, fns...)
	return nsgb
}

// Scan applies the selector query and scans the result into the given value.
func (nsgb *NetworkSegmentGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, nsgb.build.ctx, "GroupBy")
	if err := nsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*NetworkSegmentQuery, *NetworkSegmentGroupBy](ctx, nsgb.build, nsgb, nsgb.build.inters, v)
}

func (nsgb *NetworkSegmentGroupBy) sqlScan(ctx context.Context, root *NetworkSegmentQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(nsgb.fns))
	for _, fn := range nsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*nsgb.flds)+len(nsgb.fns))
		for _, f := range *nsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*nsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := nsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// NetworkSegmentSelect is the builder for selecting fields of NetworkSegment entities.
type NetworkSegmentSelect struct {
	*NetworkSegmentQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (nss *NetworkSegmentSelect) Aggregate(fns ...AggregateFunc) *NetworkSegmentSelect {
	nss.fns = append(nss.fns, fns...)
	return nss
}

// Scan applies the selector query and scans the result into the given value.
func (nss *NetworkSegmentSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, nss.ctx, "Select")
	if err := nss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*NetworkSegmentQuery, *NetworkSegmentSelect](ctx, nss.NetworkSegmentQuery, nss, nss.inters, v)
}

func (nss *NetworkSegmentSelect) sqlScan(ctx context.Context, root *NetworkSegmentQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(nss.fns))
	for _, fn := range nss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*nss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := nss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
