// Code generated by ent, DO NOT EDIT.

package networksegment

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldLTE(FieldID, id))
}

// ResourceID applies equality check predicate on the "resource_id" field. It's identical to ResourceIDEQ.
func ResourceID(v string) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldEQ(FieldResourceID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldEQ(FieldName, v))
}

// VlanID applies equality check predicate on the "vlan_id" field. It's identical to VlanIDEQ.
func VlanID(v int32) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldEQ(FieldVlanID, v))
}

// ResourceIDEQ applies the EQ predicate on the "resource_id" field.
func ResourceIDEQ(v string) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldEQ(FieldResourceID, v))
}

// ResourceIDNEQ applies the NEQ predicate on the "resource_id" field.
func ResourceIDNEQ(v string) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldNEQ(FieldResourceID, v))
}

// ResourceIDIn applies the In predicate on the "resource_id" field.
func ResourceIDIn(vs ...string) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldIn(FieldResourceID, vs...))
}

// ResourceIDNotIn applies the NotIn predicate on the "resource_id" field.
func ResourceIDNotIn(vs ...string) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldNotIn(FieldResourceID, vs...))
}

// ResourceIDGT applies the GT predicate on the "resource_id" field.
func ResourceIDGT(v string) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldGT(FieldResourceID, v))
}

// ResourceIDGTE applies the GTE predicate on the "resource_id" field.
func ResourceIDGTE(v string) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldGTE(FieldResourceID, v))
}

// ResourceIDLT applies the LT predicate on the "resource_id" field.
func ResourceIDLT(v string) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldLT(FieldResourceID, v))
}

// ResourceIDLTE applies the LTE predicate on the "resource_id" field.
func ResourceIDLTE(v string) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldLTE(FieldResourceID, v))
}

// ResourceIDContains applies the Contains predicate on the "resource_id" field.
func ResourceIDContains(v string) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldContains(FieldResourceID, v))
}

// ResourceIDHasPrefix applies the HasPrefix predicate on the "resource_id" field.
func ResourceIDHasPrefix(v string) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldHasPrefix(FieldResourceID, v))
}

// ResourceIDHasSuffix applies the HasSuffix predicate on the "resource_id" field.
func ResourceIDHasSuffix(v string) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldHasSuffix(FieldResourceID, v))
}

// ResourceIDEqualFold applies the EqualFold predicate on the "resource_id" field.
func ResourceIDEqualFold(v string) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldEqualFold(FieldResourceID, v))
}

// ResourceIDContainsFold applies the ContainsFold predicate on the "resource_id" field.
func ResourceIDContainsFold(v string) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldContainsFold(FieldResourceID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldContainsFold(FieldName, v))
}

// VlanIDEQ applies the EQ predicate on the "vlan_id" field.
func VlanIDEQ(v int32) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldEQ(FieldVlanID, v))
}

// VlanIDNEQ applies the NEQ predicate on the "vlan_id" field.
func VlanIDNEQ(v int32) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldNEQ(FieldVlanID, v))
}

// VlanIDIn applies the In predicate on the "vlan_id" field.
func VlanIDIn(vs ...int32) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldIn(FieldVlanID, vs...))
}

// VlanIDNotIn applies the NotIn predicate on the "vlan_id" field.
func VlanIDNotIn(vs ...int32) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldNotIn(FieldVlanID, vs...))
}

// VlanIDGT applies the GT predicate on the "vlan_id" field.
func VlanIDGT(v int32) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldGT(FieldVlanID, v))
}

// VlanIDGTE applies the GTE predicate on the "vlan_id" field.
func VlanIDGTE(v int32) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldGTE(FieldVlanID, v))
}

// VlanIDLT applies the LT predicate on the "vlan_id" field.
func VlanIDLT(v int32) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldLT(FieldVlanID, v))
}

// VlanIDLTE applies the LTE predicate on the "vlan_id" field.
func VlanIDLTE(v int32) predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldLTE(FieldVlanID, v))
}

// VlanIDIsNil applies the IsNil predicate on the "vlan_id" field.
func VlanIDIsNil() predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldIsNull(FieldVlanID))
}

// VlanIDNotNil applies the NotNil predicate on the "vlan_id" field.
func VlanIDNotNil() predicate.NetworkSegment {
	return predicate.NetworkSegment(sql.FieldNotNull(FieldVlanID))
}

// HasSite applies the HasEdge predicate on the "site" edge.
func HasSite() predicate.NetworkSegment {
	return predicate.NetworkSegment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SiteTable, SiteColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSiteWith applies the HasEdge predicate on the "site" edge with a given conditions (other predicates).
func HasSiteWith(preds ...predicate.SiteResource) predicate.NetworkSegment {
	return predicate.NetworkSegment(func(s *sql.Selector) {
		step := newSiteStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NetworkSegment) predicate.NetworkSegment {
	return predicate.NetworkSegment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NetworkSegment) predicate.NetworkSegment {
	return predicate.NetworkSegment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NetworkSegment) predicate.NetworkSegment {
	return predicate.NetworkSegment(func(s *sql.Selector) {
		p(s.Not())
	})
}
