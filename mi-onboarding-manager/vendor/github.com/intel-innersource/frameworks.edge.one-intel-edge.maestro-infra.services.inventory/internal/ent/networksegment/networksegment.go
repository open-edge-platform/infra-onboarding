// Code generated by ent, DO NOT EDIT.

package networksegment

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the networksegment type in the database.
	Label = "network_segment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldResourceID holds the string denoting the resource_id field in the database.
	FieldResourceID = "resource_id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldVlanID holds the string denoting the vlan_id field in the database.
	FieldVlanID = "vlan_id"
	// EdgeSite holds the string denoting the site edge name in mutations.
	EdgeSite = "site"
	// Table holds the table name of the networksegment in the database.
	Table = "network_segments"
	// SiteTable is the table that holds the site relation/edge.
	SiteTable = "network_segments"
	// SiteInverseTable is the table name for the SiteResource entity.
	// It exists in this package in order to avoid circular dependency with the "siteresource" package.
	SiteInverseTable = "site_resources"
	// SiteColumn is the table column denoting the site relation/edge.
	SiteColumn = "network_segment_site"
)

// Columns holds all SQL columns for networksegment fields.
var Columns = []string{
	FieldID,
	FieldResourceID,
	FieldDescription,
	FieldVlanID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "network_segments"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"network_segment_site",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the NetworkSegment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByResourceID orders the results by the resource_id field.
func ByResourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceID, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByVlanID orders the results by the vlan_id field.
func ByVlanID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVlanID, opts...).ToFunc()
}

// BySiteField orders the results by site field.
func BySiteField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSiteStep(), sql.OrderByField(field, opts...))
	}
}
func newSiteStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SiteInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SiteTable, SiteColumn),
	)
}
