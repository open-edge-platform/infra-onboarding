// Code generated by ent, DO NOT EDIT.

package hostgpuresource

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the hostgpuresource type in the database.
	Label = "hostgpu_resource"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldResourceID holds the string denoting the resource_id field in the database.
	FieldResourceID = "resource_id"
	// FieldPciID holds the string denoting the pci_id field in the database.
	FieldPciID = "pci_id"
	// FieldProduct holds the string denoting the product field in the database.
	FieldProduct = "product"
	// FieldVendor holds the string denoting the vendor field in the database.
	FieldVendor = "vendor"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldDeviceName holds the string denoting the device_name field in the database.
	FieldDeviceName = "device_name"
	// EdgeHost holds the string denoting the host edge name in mutations.
	EdgeHost = "host"
	// Table holds the table name of the hostgpuresource in the database.
	Table = "hostgpu_resources"
	// HostTable is the table that holds the host relation/edge.
	HostTable = "hostgpu_resources"
	// HostInverseTable is the table name for the HostResource entity.
	// It exists in this package in order to avoid circular dependency with the "hostresource" package.
	HostInverseTable = "host_resources"
	// HostColumn is the table column denoting the host relation/edge.
	HostColumn = "hostgpu_resource_host"
)

// Columns holds all SQL columns for hostgpuresource fields.
var Columns = []string{
	FieldID,
	FieldResourceID,
	FieldPciID,
	FieldProduct,
	FieldVendor,
	FieldDescription,
	FieldDeviceName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "hostgpu_resources"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"hostgpu_resource_host",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the HostgpuResource queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByResourceID orders the results by the resource_id field.
func ByResourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceID, opts...).ToFunc()
}

// ByPciID orders the results by the pci_id field.
func ByPciID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPciID, opts...).ToFunc()
}

// ByProduct orders the results by the product field.
func ByProduct(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProduct, opts...).ToFunc()
}

// ByVendor orders the results by the vendor field.
func ByVendor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVendor, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByDeviceName orders the results by the device_name field.
func ByDeviceName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceName, opts...).ToFunc()
}

// ByHostField orders the results by host field.
func ByHostField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHostStep(), sql.OrderByField(field, opts...))
	}
}
func newHostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HostInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, HostTable, HostColumn),
	)
}
