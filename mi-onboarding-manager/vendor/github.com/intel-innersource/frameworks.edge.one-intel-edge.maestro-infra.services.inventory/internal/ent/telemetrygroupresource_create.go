// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/telemetrygroupresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/telemetryprofile"
)

// TelemetryGroupResourceCreate is the builder for creating a TelemetryGroupResource entity.
type TelemetryGroupResourceCreate struct {
	config
	mutation *TelemetryGroupResourceMutation
	hooks    []Hook
}

// SetResourceID sets the "resource_id" field.
func (tgrc *TelemetryGroupResourceCreate) SetResourceID(s string) *TelemetryGroupResourceCreate {
	tgrc.mutation.SetResourceID(s)
	return tgrc
}

// SetName sets the "name" field.
func (tgrc *TelemetryGroupResourceCreate) SetName(s string) *TelemetryGroupResourceCreate {
	tgrc.mutation.SetName(s)
	return tgrc
}

// SetKind sets the "kind" field.
func (tgrc *TelemetryGroupResourceCreate) SetKind(t telemetrygroupresource.Kind) *TelemetryGroupResourceCreate {
	tgrc.mutation.SetKind(t)
	return tgrc
}

// SetCollectorKind sets the "collector_kind" field.
func (tgrc *TelemetryGroupResourceCreate) SetCollectorKind(tk telemetrygroupresource.CollectorKind) *TelemetryGroupResourceCreate {
	tgrc.mutation.SetCollectorKind(tk)
	return tgrc
}

// SetGroups sets the "groups" field.
func (tgrc *TelemetryGroupResourceCreate) SetGroups(s string) *TelemetryGroupResourceCreate {
	tgrc.mutation.SetGroups(s)
	return tgrc
}

// AddProfileIDs adds the "profiles" edge to the TelemetryProfile entity by IDs.
func (tgrc *TelemetryGroupResourceCreate) AddProfileIDs(ids ...int) *TelemetryGroupResourceCreate {
	tgrc.mutation.AddProfileIDs(ids...)
	return tgrc
}

// AddProfiles adds the "profiles" edges to the TelemetryProfile entity.
func (tgrc *TelemetryGroupResourceCreate) AddProfiles(t ...*TelemetryProfile) *TelemetryGroupResourceCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tgrc.AddProfileIDs(ids...)
}

// Mutation returns the TelemetryGroupResourceMutation object of the builder.
func (tgrc *TelemetryGroupResourceCreate) Mutation() *TelemetryGroupResourceMutation {
	return tgrc.mutation
}

// Save creates the TelemetryGroupResource in the database.
func (tgrc *TelemetryGroupResourceCreate) Save(ctx context.Context) (*TelemetryGroupResource, error) {
	return withHooks[*TelemetryGroupResource, TelemetryGroupResourceMutation](ctx, tgrc.sqlSave, tgrc.mutation, tgrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tgrc *TelemetryGroupResourceCreate) SaveX(ctx context.Context) *TelemetryGroupResource {
	v, err := tgrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tgrc *TelemetryGroupResourceCreate) Exec(ctx context.Context) error {
	_, err := tgrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tgrc *TelemetryGroupResourceCreate) ExecX(ctx context.Context) {
	if err := tgrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tgrc *TelemetryGroupResourceCreate) check() error {
	if _, ok := tgrc.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource_id", err: errors.New(`ent: missing required field "TelemetryGroupResource.resource_id"`)}
	}
	if _, ok := tgrc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "TelemetryGroupResource.name"`)}
	}
	if _, ok := tgrc.mutation.Kind(); !ok {
		return &ValidationError{Name: "kind", err: errors.New(`ent: missing required field "TelemetryGroupResource.kind"`)}
	}
	if v, ok := tgrc.mutation.Kind(); ok {
		if err := telemetrygroupresource.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "TelemetryGroupResource.kind": %w`, err)}
		}
	}
	if _, ok := tgrc.mutation.CollectorKind(); !ok {
		return &ValidationError{Name: "collector_kind", err: errors.New(`ent: missing required field "TelemetryGroupResource.collector_kind"`)}
	}
	if v, ok := tgrc.mutation.CollectorKind(); ok {
		if err := telemetrygroupresource.CollectorKindValidator(v); err != nil {
			return &ValidationError{Name: "collector_kind", err: fmt.Errorf(`ent: validator failed for field "TelemetryGroupResource.collector_kind": %w`, err)}
		}
	}
	if _, ok := tgrc.mutation.Groups(); !ok {
		return &ValidationError{Name: "groups", err: errors.New(`ent: missing required field "TelemetryGroupResource.groups"`)}
	}
	return nil
}

func (tgrc *TelemetryGroupResourceCreate) sqlSave(ctx context.Context) (*TelemetryGroupResource, error) {
	if err := tgrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tgrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tgrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tgrc.mutation.id = &_node.ID
	tgrc.mutation.done = true
	return _node, nil
}

func (tgrc *TelemetryGroupResourceCreate) createSpec() (*TelemetryGroupResource, *sqlgraph.CreateSpec) {
	var (
		_node = &TelemetryGroupResource{config: tgrc.config}
		_spec = sqlgraph.NewCreateSpec(telemetrygroupresource.Table, sqlgraph.NewFieldSpec(telemetrygroupresource.FieldID, field.TypeInt))
	)
	if value, ok := tgrc.mutation.ResourceID(); ok {
		_spec.SetField(telemetrygroupresource.FieldResourceID, field.TypeString, value)
		_node.ResourceID = value
	}
	if value, ok := tgrc.mutation.Name(); ok {
		_spec.SetField(telemetrygroupresource.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tgrc.mutation.Kind(); ok {
		_spec.SetField(telemetrygroupresource.FieldKind, field.TypeEnum, value)
		_node.Kind = value
	}
	if value, ok := tgrc.mutation.CollectorKind(); ok {
		_spec.SetField(telemetrygroupresource.FieldCollectorKind, field.TypeEnum, value)
		_node.CollectorKind = value
	}
	if value, ok := tgrc.mutation.Groups(); ok {
		_spec.SetField(telemetrygroupresource.FieldGroups, field.TypeString, value)
		_node.Groups = value
	}
	if nodes := tgrc.mutation.ProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   telemetrygroupresource.ProfilesTable,
			Columns: []string{telemetrygroupresource.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(telemetryprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TelemetryGroupResourceCreateBulk is the builder for creating many TelemetryGroupResource entities in bulk.
type TelemetryGroupResourceCreateBulk struct {
	config
	builders []*TelemetryGroupResourceCreate
}

// Save creates the TelemetryGroupResource entities in the database.
func (tgrcb *TelemetryGroupResourceCreateBulk) Save(ctx context.Context) ([]*TelemetryGroupResource, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tgrcb.builders))
	nodes := make([]*TelemetryGroupResource, len(tgrcb.builders))
	mutators := make([]Mutator, len(tgrcb.builders))
	for i := range tgrcb.builders {
		func(i int, root context.Context) {
			builder := tgrcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TelemetryGroupResourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tgrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tgrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tgrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tgrcb *TelemetryGroupResourceCreateBulk) SaveX(ctx context.Context) []*TelemetryGroupResource {
	v, err := tgrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tgrcb *TelemetryGroupResourceCreateBulk) Exec(ctx context.Context) error {
	_, err := tgrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tgrcb *TelemetryGroupResourceCreateBulk) ExecX(ctx context.Context) {
	if err := tgrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
