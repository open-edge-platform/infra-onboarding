// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/networksegment"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/siteresource"
)

// NetworkSegment is the model entity for the NetworkSegment schema.
type NetworkSegment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ResourceID holds the value of the "resource_id" field.
	ResourceID string `json:"resource_id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// VlanID holds the value of the "vlan_id" field.
	VlanID int32 `json:"vlan_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NetworkSegmentQuery when eager-loading is set.
	Edges                NetworkSegmentEdges `json:"edges"`
	network_segment_site *int
	selectValues         sql.SelectValues
}

// NetworkSegmentEdges holds the relations/edges for other nodes in the graph.
type NetworkSegmentEdges struct {
	// Site holds the value of the site edge.
	Site *SiteResource `json:"site,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SiteOrErr returns the Site value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NetworkSegmentEdges) SiteOrErr() (*SiteResource, error) {
	if e.loadedTypes[0] {
		if e.Site == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: siteresource.Label}
		}
		return e.Site, nil
	}
	return nil, &NotLoadedError{edge: "site"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NetworkSegment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case networksegment.FieldID, networksegment.FieldVlanID:
			values[i] = new(sql.NullInt64)
		case networksegment.FieldResourceID, networksegment.FieldDescription:
			values[i] = new(sql.NullString)
		case networksegment.ForeignKeys[0]: // network_segment_site
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NetworkSegment fields.
func (ns *NetworkSegment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case networksegment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ns.ID = int(value.Int64)
		case networksegment.FieldResourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				ns.ResourceID = value.String
			}
		case networksegment.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ns.Description = value.String
			}
		case networksegment.FieldVlanID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field vlan_id", values[i])
			} else if value.Valid {
				ns.VlanID = int32(value.Int64)
			}
		case networksegment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field network_segment_site", value)
			} else if value.Valid {
				ns.network_segment_site = new(int)
				*ns.network_segment_site = int(value.Int64)
			}
		default:
			ns.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the NetworkSegment.
// This includes values selected through modifiers, order, etc.
func (ns *NetworkSegment) Value(name string) (ent.Value, error) {
	return ns.selectValues.Get(name)
}

// QuerySite queries the "site" edge of the NetworkSegment entity.
func (ns *NetworkSegment) QuerySite() *SiteResourceQuery {
	return NewNetworkSegmentClient(ns.config).QuerySite(ns)
}

// Update returns a builder for updating this NetworkSegment.
// Note that you need to call NetworkSegment.Unwrap() before calling this method if this NetworkSegment
// was returned from a transaction, and the transaction was committed or rolled back.
func (ns *NetworkSegment) Update() *NetworkSegmentUpdateOne {
	return NewNetworkSegmentClient(ns.config).UpdateOne(ns)
}

// Unwrap unwraps the NetworkSegment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ns *NetworkSegment) Unwrap() *NetworkSegment {
	_tx, ok := ns.config.driver.(*txDriver)
	if !ok {
		panic("ent: NetworkSegment is not a transactional entity")
	}
	ns.config.driver = _tx.drv
	return ns
}

// String implements the fmt.Stringer.
func (ns *NetworkSegment) String() string {
	var builder strings.Builder
	builder.WriteString("NetworkSegment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ns.ID))
	builder.WriteString("resource_id=")
	builder.WriteString(ns.ResourceID)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ns.Description)
	builder.WriteString(", ")
	builder.WriteString("vlan_id=")
	builder.WriteString(fmt.Sprintf("%v", ns.VlanID))
	builder.WriteByte(')')
	return builder.String()
}

// NetworkSegments is a parsable slice of NetworkSegment.
type NetworkSegments []*NetworkSegment
