// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/endpointresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hostresource"
)

// EndpointResourceCreate is the builder for creating a EndpointResource entity.
type EndpointResourceCreate struct {
	config
	mutation *EndpointResourceMutation
	hooks    []Hook
}

// SetResourceID sets the "resource_id" field.
func (erc *EndpointResourceCreate) SetResourceID(s string) *EndpointResourceCreate {
	erc.mutation.SetResourceID(s)
	return erc
}

// SetKind sets the "kind" field.
func (erc *EndpointResourceCreate) SetKind(s string) *EndpointResourceCreate {
	erc.mutation.SetKind(s)
	return erc
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (erc *EndpointResourceCreate) SetNillableKind(s *string) *EndpointResourceCreate {
	if s != nil {
		erc.SetKind(*s)
	}
	return erc
}

// SetName sets the "name" field.
func (erc *EndpointResourceCreate) SetName(s string) *EndpointResourceCreate {
	erc.mutation.SetName(s)
	return erc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (erc *EndpointResourceCreate) SetNillableName(s *string) *EndpointResourceCreate {
	if s != nil {
		erc.SetName(*s)
	}
	return erc
}

// SetHostID sets the "host" edge to the HostResource entity by ID.
func (erc *EndpointResourceCreate) SetHostID(id int) *EndpointResourceCreate {
	erc.mutation.SetHostID(id)
	return erc
}

// SetNillableHostID sets the "host" edge to the HostResource entity by ID if the given value is not nil.
func (erc *EndpointResourceCreate) SetNillableHostID(id *int) *EndpointResourceCreate {
	if id != nil {
		erc = erc.SetHostID(*id)
	}
	return erc
}

// SetHost sets the "host" edge to the HostResource entity.
func (erc *EndpointResourceCreate) SetHost(h *HostResource) *EndpointResourceCreate {
	return erc.SetHostID(h.ID)
}

// Mutation returns the EndpointResourceMutation object of the builder.
func (erc *EndpointResourceCreate) Mutation() *EndpointResourceMutation {
	return erc.mutation
}

// Save creates the EndpointResource in the database.
func (erc *EndpointResourceCreate) Save(ctx context.Context) (*EndpointResource, error) {
	return withHooks[*EndpointResource, EndpointResourceMutation](ctx, erc.sqlSave, erc.mutation, erc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (erc *EndpointResourceCreate) SaveX(ctx context.Context) *EndpointResource {
	v, err := erc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (erc *EndpointResourceCreate) Exec(ctx context.Context) error {
	_, err := erc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (erc *EndpointResourceCreate) ExecX(ctx context.Context) {
	if err := erc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (erc *EndpointResourceCreate) check() error {
	if _, ok := erc.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource_id", err: errors.New(`ent: missing required field "EndpointResource.resource_id"`)}
	}
	return nil
}

func (erc *EndpointResourceCreate) sqlSave(ctx context.Context) (*EndpointResource, error) {
	if err := erc.check(); err != nil {
		return nil, err
	}
	_node, _spec := erc.createSpec()
	if err := sqlgraph.CreateNode(ctx, erc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	erc.mutation.id = &_node.ID
	erc.mutation.done = true
	return _node, nil
}

func (erc *EndpointResourceCreate) createSpec() (*EndpointResource, *sqlgraph.CreateSpec) {
	var (
		_node = &EndpointResource{config: erc.config}
		_spec = sqlgraph.NewCreateSpec(endpointresource.Table, sqlgraph.NewFieldSpec(endpointresource.FieldID, field.TypeInt))
	)
	if value, ok := erc.mutation.ResourceID(); ok {
		_spec.SetField(endpointresource.FieldResourceID, field.TypeString, value)
		_node.ResourceID = value
	}
	if value, ok := erc.mutation.Kind(); ok {
		_spec.SetField(endpointresource.FieldKind, field.TypeString, value)
		_node.Kind = value
	}
	if value, ok := erc.mutation.Name(); ok {
		_spec.SetField(endpointresource.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := erc.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   endpointresource.HostTable,
			Columns: []string{endpointresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.endpoint_resource_host = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EndpointResourceCreateBulk is the builder for creating many EndpointResource entities in bulk.
type EndpointResourceCreateBulk struct {
	config
	builders []*EndpointResourceCreate
}

// Save creates the EndpointResource entities in the database.
func (ercb *EndpointResourceCreateBulk) Save(ctx context.Context) ([]*EndpointResource, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ercb.builders))
	nodes := make([]*EndpointResource, len(ercb.builders))
	mutators := make([]Mutator, len(ercb.builders))
	for i := range ercb.builders {
		func(i int, root context.Context) {
			builder := ercb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EndpointResourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ercb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ercb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ercb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ercb *EndpointResourceCreateBulk) SaveX(ctx context.Context) []*EndpointResource {
	v, err := ercb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ercb *EndpointResourceCreateBulk) Exec(ctx context.Context) error {
	_, err := ercb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ercb *EndpointResourceCreateBulk) ExecX(ctx context.Context) {
	if err := ercb.Exec(ctx); err != nil {
		panic(err)
	}
}
