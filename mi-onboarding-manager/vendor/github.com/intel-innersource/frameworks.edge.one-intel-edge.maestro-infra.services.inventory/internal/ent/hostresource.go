// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hostresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/instanceresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/projectresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/providerresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/siteresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/userresource"
)

// HostResource is the model entity for the HostResource schema.
type HostResource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ResourceID holds the value of the "resource_id" field.
	ResourceID string `json:"resource_id,omitempty"`
	// Kind holds the value of the "kind" field.
	Kind string `json:"kind,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// DesiredState holds the value of the "desired_state" field.
	DesiredState hostresource.DesiredState `json:"desired_state,omitempty"`
	// CurrentState holds the value of the "current_state" field.
	CurrentState hostresource.CurrentState `json:"current_state,omitempty"`
	// ProviderStatus holds the value of the "provider_status" field.
	ProviderStatus string `json:"provider_status,omitempty"`
	// HostStatus holds the value of the "host_status" field.
	HostStatus hostresource.HostStatus `json:"host_status,omitempty"`
	// ProviderStatusDetail holds the value of the "provider_status_detail" field.
	ProviderStatusDetail string `json:"provider_status_detail,omitempty"`
	// Note holds the value of the "note" field.
	Note string `json:"note,omitempty"`
	// ConsumerID holds the value of the "consumer_id" field.
	ConsumerID string `json:"consumer_id,omitempty"`
	// HardwareKind holds the value of the "hardware_kind" field.
	HardwareKind string `json:"hardware_kind,omitempty"`
	// SerialNumber holds the value of the "serial_number" field.
	SerialNumber string `json:"serial_number,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid,omitempty"`
	// MemoryBytes holds the value of the "memory_bytes" field.
	MemoryBytes uint64 `json:"memory_bytes,omitempty"`
	// CPUModel holds the value of the "cpu_model" field.
	CPUModel string `json:"cpu_model,omitempty"`
	// CPUSockets holds the value of the "cpu_sockets" field.
	CPUSockets uint32 `json:"cpu_sockets,omitempty"`
	// CPUCores holds the value of the "cpu_cores" field.
	CPUCores uint32 `json:"cpu_cores,omitempty"`
	// CPUCapabilities holds the value of the "cpu_capabilities" field.
	CPUCapabilities string `json:"cpu_capabilities,omitempty"`
	// CPUArchitecture holds the value of the "cpu_architecture" field.
	CPUArchitecture string `json:"cpu_architecture,omitempty"`
	// CPUThreads holds the value of the "cpu_threads" field.
	CPUThreads uint32 `json:"cpu_threads,omitempty"`
	// GpuPciID holds the value of the "gpu_pci_id" field.
	GpuPciID string `json:"gpu_pci_id,omitempty"`
	// GpuProduct holds the value of the "gpu_product" field.
	GpuProduct string `json:"gpu_product,omitempty"`
	// GpuVendor holds the value of the "gpu_vendor" field.
	GpuVendor string `json:"gpu_vendor,omitempty"`
	// MgmtIP holds the value of the "mgmt_ip" field.
	MgmtIP string `json:"mgmt_ip,omitempty"`
	// BmcKind holds the value of the "bmc_kind" field.
	BmcKind hostresource.BmcKind `json:"bmc_kind,omitempty"`
	// BmcIP holds the value of the "bmc_ip" field.
	BmcIP string `json:"bmc_ip,omitempty"`
	// BmcUsername holds the value of the "bmc_username" field.
	BmcUsername string `json:"bmc_username,omitempty"`
	// BmcPassword holds the value of the "bmc_password" field.
	BmcPassword string `json:"bmc_password,omitempty"`
	// PxeMAC holds the value of the "pxe_mac" field.
	PxeMAC string `json:"pxe_mac,omitempty"`
	// Hostname holds the value of the "hostname" field.
	Hostname string `json:"hostname,omitempty"`
	// ProductName holds the value of the "product_name" field.
	ProductName string `json:"product_name,omitempty"`
	// BiosVersion holds the value of the "bios_version" field.
	BiosVersion string `json:"bios_version,omitempty"`
	// BiosReleaseDate holds the value of the "bios_release_date" field.
	BiosReleaseDate string `json:"bios_release_date,omitempty"`
	// BiosVendor holds the value of the "bios_vendor" field.
	BiosVendor string `json:"bios_vendor,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata string `json:"metadata,omitempty"`
	// DesiredPowerState holds the value of the "desired_power_state" field.
	DesiredPowerState hostresource.DesiredPowerState `json:"desired_power_state,omitempty"`
	// CurrentPowerState holds the value of the "current_power_state" field.
	CurrentPowerState hostresource.CurrentPowerState `json:"current_power_state,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HostResourceQuery when eager-loading is set.
	Edges                  HostResourceEdges `json:"edges"`
	host_resource_site     *int
	host_resource_provider *int
	host_resource_project  *int
	host_resource_user     *int
	instance_resource_host *int
	selectValues           sql.SelectValues
}

// HostResourceEdges holds the relations/edges for other nodes in the graph.
type HostResourceEdges struct {
	// Site holds the value of the site edge.
	Site *SiteResource `json:"site,omitempty"`
	// Provider holds the value of the provider edge.
	Provider *ProviderResource `json:"provider,omitempty"`
	// Project holds the value of the project edge.
	Project *ProjectResource `json:"project,omitempty"`
	// User holds the value of the user edge.
	User *UserResource `json:"user,omitempty"`
	// HostStorages holds the value of the host_storages edge.
	HostStorages []*HoststorageResource `json:"host_storages,omitempty"`
	// HostNics holds the value of the host_nics edge.
	HostNics []*HostnicResource `json:"host_nics,omitempty"`
	// HostUsbs holds the value of the host_usbs edge.
	HostUsbs []*HostusbResource `json:"host_usbs,omitempty"`
	// Instance holds the value of the instance edge.
	Instance *InstanceResource `json:"instance,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// SiteOrErr returns the Site value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HostResourceEdges) SiteOrErr() (*SiteResource, error) {
	if e.loadedTypes[0] {
		if e.Site == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: siteresource.Label}
		}
		return e.Site, nil
	}
	return nil, &NotLoadedError{edge: "site"}
}

// ProviderOrErr returns the Provider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HostResourceEdges) ProviderOrErr() (*ProviderResource, error) {
	if e.loadedTypes[1] {
		if e.Provider == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: providerresource.Label}
		}
		return e.Provider, nil
	}
	return nil, &NotLoadedError{edge: "provider"}
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HostResourceEdges) ProjectOrErr() (*ProjectResource, error) {
	if e.loadedTypes[2] {
		if e.Project == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: projectresource.Label}
		}
		return e.Project, nil
	}
	return nil, &NotLoadedError{edge: "project"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HostResourceEdges) UserOrErr() (*UserResource, error) {
	if e.loadedTypes[3] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: userresource.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// HostStoragesOrErr returns the HostStorages value or an error if the edge
// was not loaded in eager-loading.
func (e HostResourceEdges) HostStoragesOrErr() ([]*HoststorageResource, error) {
	if e.loadedTypes[4] {
		return e.HostStorages, nil
	}
	return nil, &NotLoadedError{edge: "host_storages"}
}

// HostNicsOrErr returns the HostNics value or an error if the edge
// was not loaded in eager-loading.
func (e HostResourceEdges) HostNicsOrErr() ([]*HostnicResource, error) {
	if e.loadedTypes[5] {
		return e.HostNics, nil
	}
	return nil, &NotLoadedError{edge: "host_nics"}
}

// HostUsbsOrErr returns the HostUsbs value or an error if the edge
// was not loaded in eager-loading.
func (e HostResourceEdges) HostUsbsOrErr() ([]*HostusbResource, error) {
	if e.loadedTypes[6] {
		return e.HostUsbs, nil
	}
	return nil, &NotLoadedError{edge: "host_usbs"}
}

// InstanceOrErr returns the Instance value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HostResourceEdges) InstanceOrErr() (*InstanceResource, error) {
	if e.loadedTypes[7] {
		if e.Instance == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: instanceresource.Label}
		}
		return e.Instance, nil
	}
	return nil, &NotLoadedError{edge: "instance"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HostResource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hostresource.FieldID, hostresource.FieldMemoryBytes, hostresource.FieldCPUSockets, hostresource.FieldCPUCores, hostresource.FieldCPUThreads:
			values[i] = new(sql.NullInt64)
		case hostresource.FieldResourceID, hostresource.FieldKind, hostresource.FieldDescription, hostresource.FieldDesiredState, hostresource.FieldCurrentState, hostresource.FieldProviderStatus, hostresource.FieldHostStatus, hostresource.FieldProviderStatusDetail, hostresource.FieldNote, hostresource.FieldConsumerID, hostresource.FieldHardwareKind, hostresource.FieldSerialNumber, hostresource.FieldUUID, hostresource.FieldCPUModel, hostresource.FieldCPUCapabilities, hostresource.FieldCPUArchitecture, hostresource.FieldGpuPciID, hostresource.FieldGpuProduct, hostresource.FieldGpuVendor, hostresource.FieldMgmtIP, hostresource.FieldBmcKind, hostresource.FieldBmcIP, hostresource.FieldBmcUsername, hostresource.FieldBmcPassword, hostresource.FieldPxeMAC, hostresource.FieldHostname, hostresource.FieldProductName, hostresource.FieldBiosVersion, hostresource.FieldBiosReleaseDate, hostresource.FieldBiosVendor, hostresource.FieldMetadata, hostresource.FieldDesiredPowerState, hostresource.FieldCurrentPowerState:
			values[i] = new(sql.NullString)
		case hostresource.ForeignKeys[0]: // host_resource_site
			values[i] = new(sql.NullInt64)
		case hostresource.ForeignKeys[1]: // host_resource_provider
			values[i] = new(sql.NullInt64)
		case hostresource.ForeignKeys[2]: // host_resource_project
			values[i] = new(sql.NullInt64)
		case hostresource.ForeignKeys[3]: // host_resource_user
			values[i] = new(sql.NullInt64)
		case hostresource.ForeignKeys[4]: // instance_resource_host
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HostResource fields.
func (hr *HostResource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hostresource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			hr.ID = int(value.Int64)
		case hostresource.FieldResourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				hr.ResourceID = value.String
			}
		case hostresource.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				hr.Kind = value.String
			}
		case hostresource.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				hr.Description = value.String
			}
		case hostresource.FieldDesiredState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desired_state", values[i])
			} else if value.Valid {
				hr.DesiredState = hostresource.DesiredState(value.String)
			}
		case hostresource.FieldCurrentState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field current_state", values[i])
			} else if value.Valid {
				hr.CurrentState = hostresource.CurrentState(value.String)
			}
		case hostresource.FieldProviderStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_status", values[i])
			} else if value.Valid {
				hr.ProviderStatus = value.String
			}
		case hostresource.FieldHostStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field host_status", values[i])
			} else if value.Valid {
				hr.HostStatus = hostresource.HostStatus(value.String)
			}
		case hostresource.FieldProviderStatusDetail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_status_detail", values[i])
			} else if value.Valid {
				hr.ProviderStatusDetail = value.String
			}
		case hostresource.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field note", values[i])
			} else if value.Valid {
				hr.Note = value.String
			}
		case hostresource.FieldConsumerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field consumer_id", values[i])
			} else if value.Valid {
				hr.ConsumerID = value.String
			}
		case hostresource.FieldHardwareKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hardware_kind", values[i])
			} else if value.Valid {
				hr.HardwareKind = value.String
			}
		case hostresource.FieldSerialNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field serial_number", values[i])
			} else if value.Valid {
				hr.SerialNumber = value.String
			}
		case hostresource.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				hr.UUID = value.String
			}
		case hostresource.FieldMemoryBytes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field memory_bytes", values[i])
			} else if value.Valid {
				hr.MemoryBytes = uint64(value.Int64)
			}
		case hostresource.FieldCPUModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cpu_model", values[i])
			} else if value.Valid {
				hr.CPUModel = value.String
			}
		case hostresource.FieldCPUSockets:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cpu_sockets", values[i])
			} else if value.Valid {
				hr.CPUSockets = uint32(value.Int64)
			}
		case hostresource.FieldCPUCores:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cpu_cores", values[i])
			} else if value.Valid {
				hr.CPUCores = uint32(value.Int64)
			}
		case hostresource.FieldCPUCapabilities:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cpu_capabilities", values[i])
			} else if value.Valid {
				hr.CPUCapabilities = value.String
			}
		case hostresource.FieldCPUArchitecture:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cpu_architecture", values[i])
			} else if value.Valid {
				hr.CPUArchitecture = value.String
			}
		case hostresource.FieldCPUThreads:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cpu_threads", values[i])
			} else if value.Valid {
				hr.CPUThreads = uint32(value.Int64)
			}
		case hostresource.FieldGpuPciID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gpu_pci_id", values[i])
			} else if value.Valid {
				hr.GpuPciID = value.String
			}
		case hostresource.FieldGpuProduct:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gpu_product", values[i])
			} else if value.Valid {
				hr.GpuProduct = value.String
			}
		case hostresource.FieldGpuVendor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gpu_vendor", values[i])
			} else if value.Valid {
				hr.GpuVendor = value.String
			}
		case hostresource.FieldMgmtIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mgmt_ip", values[i])
			} else if value.Valid {
				hr.MgmtIP = value.String
			}
		case hostresource.FieldBmcKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bmc_kind", values[i])
			} else if value.Valid {
				hr.BmcKind = hostresource.BmcKind(value.String)
			}
		case hostresource.FieldBmcIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bmc_ip", values[i])
			} else if value.Valid {
				hr.BmcIP = value.String
			}
		case hostresource.FieldBmcUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bmc_username", values[i])
			} else if value.Valid {
				hr.BmcUsername = value.String
			}
		case hostresource.FieldBmcPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bmc_password", values[i])
			} else if value.Valid {
				hr.BmcPassword = value.String
			}
		case hostresource.FieldPxeMAC:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pxe_mac", values[i])
			} else if value.Valid {
				hr.PxeMAC = value.String
			}
		case hostresource.FieldHostname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hostname", values[i])
			} else if value.Valid {
				hr.Hostname = value.String
			}
		case hostresource.FieldProductName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_name", values[i])
			} else if value.Valid {
				hr.ProductName = value.String
			}
		case hostresource.FieldBiosVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bios_version", values[i])
			} else if value.Valid {
				hr.BiosVersion = value.String
			}
		case hostresource.FieldBiosReleaseDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bios_release_date", values[i])
			} else if value.Valid {
				hr.BiosReleaseDate = value.String
			}
		case hostresource.FieldBiosVendor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bios_vendor", values[i])
			} else if value.Valid {
				hr.BiosVendor = value.String
			}
		case hostresource.FieldMetadata:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value.Valid {
				hr.Metadata = value.String
			}
		case hostresource.FieldDesiredPowerState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desired_power_state", values[i])
			} else if value.Valid {
				hr.DesiredPowerState = hostresource.DesiredPowerState(value.String)
			}
		case hostresource.FieldCurrentPowerState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field current_power_state", values[i])
			} else if value.Valid {
				hr.CurrentPowerState = hostresource.CurrentPowerState(value.String)
			}
		case hostresource.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field host_resource_site", value)
			} else if value.Valid {
				hr.host_resource_site = new(int)
				*hr.host_resource_site = int(value.Int64)
			}
		case hostresource.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field host_resource_provider", value)
			} else if value.Valid {
				hr.host_resource_provider = new(int)
				*hr.host_resource_provider = int(value.Int64)
			}
		case hostresource.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field host_resource_project", value)
			} else if value.Valid {
				hr.host_resource_project = new(int)
				*hr.host_resource_project = int(value.Int64)
			}
		case hostresource.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field host_resource_user", value)
			} else if value.Valid {
				hr.host_resource_user = new(int)
				*hr.host_resource_user = int(value.Int64)
			}
		case hostresource.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field instance_resource_host", value)
			} else if value.Valid {
				hr.instance_resource_host = new(int)
				*hr.instance_resource_host = int(value.Int64)
			}
		default:
			hr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HostResource.
// This includes values selected through modifiers, order, etc.
func (hr *HostResource) Value(name string) (ent.Value, error) {
	return hr.selectValues.Get(name)
}

// QuerySite queries the "site" edge of the HostResource entity.
func (hr *HostResource) QuerySite() *SiteResourceQuery {
	return NewHostResourceClient(hr.config).QuerySite(hr)
}

// QueryProvider queries the "provider" edge of the HostResource entity.
func (hr *HostResource) QueryProvider() *ProviderResourceQuery {
	return NewHostResourceClient(hr.config).QueryProvider(hr)
}

// QueryProject queries the "project" edge of the HostResource entity.
func (hr *HostResource) QueryProject() *ProjectResourceQuery {
	return NewHostResourceClient(hr.config).QueryProject(hr)
}

// QueryUser queries the "user" edge of the HostResource entity.
func (hr *HostResource) QueryUser() *UserResourceQuery {
	return NewHostResourceClient(hr.config).QueryUser(hr)
}

// QueryHostStorages queries the "host_storages" edge of the HostResource entity.
func (hr *HostResource) QueryHostStorages() *HoststorageResourceQuery {
	return NewHostResourceClient(hr.config).QueryHostStorages(hr)
}

// QueryHostNics queries the "host_nics" edge of the HostResource entity.
func (hr *HostResource) QueryHostNics() *HostnicResourceQuery {
	return NewHostResourceClient(hr.config).QueryHostNics(hr)
}

// QueryHostUsbs queries the "host_usbs" edge of the HostResource entity.
func (hr *HostResource) QueryHostUsbs() *HostusbResourceQuery {
	return NewHostResourceClient(hr.config).QueryHostUsbs(hr)
}

// QueryInstance queries the "instance" edge of the HostResource entity.
func (hr *HostResource) QueryInstance() *InstanceResourceQuery {
	return NewHostResourceClient(hr.config).QueryInstance(hr)
}

// Update returns a builder for updating this HostResource.
// Note that you need to call HostResource.Unwrap() before calling this method if this HostResource
// was returned from a transaction, and the transaction was committed or rolled back.
func (hr *HostResource) Update() *HostResourceUpdateOne {
	return NewHostResourceClient(hr.config).UpdateOne(hr)
}

// Unwrap unwraps the HostResource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hr *HostResource) Unwrap() *HostResource {
	_tx, ok := hr.config.driver.(*txDriver)
	if !ok {
		panic("ent: HostResource is not a transactional entity")
	}
	hr.config.driver = _tx.drv
	return hr
}

// String implements the fmt.Stringer.
func (hr *HostResource) String() string {
	var builder strings.Builder
	builder.WriteString("HostResource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hr.ID))
	builder.WriteString("resource_id=")
	builder.WriteString(hr.ResourceID)
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(hr.Kind)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(hr.Description)
	builder.WriteString(", ")
	builder.WriteString("desired_state=")
	builder.WriteString(fmt.Sprintf("%v", hr.DesiredState))
	builder.WriteString(", ")
	builder.WriteString("current_state=")
	builder.WriteString(fmt.Sprintf("%v", hr.CurrentState))
	builder.WriteString(", ")
	builder.WriteString("provider_status=")
	builder.WriteString(hr.ProviderStatus)
	builder.WriteString(", ")
	builder.WriteString("host_status=")
	builder.WriteString(fmt.Sprintf("%v", hr.HostStatus))
	builder.WriteString(", ")
	builder.WriteString("provider_status_detail=")
	builder.WriteString(hr.ProviderStatusDetail)
	builder.WriteString(", ")
	builder.WriteString("note=")
	builder.WriteString(hr.Note)
	builder.WriteString(", ")
	builder.WriteString("consumer_id=")
	builder.WriteString(hr.ConsumerID)
	builder.WriteString(", ")
	builder.WriteString("hardware_kind=")
	builder.WriteString(hr.HardwareKind)
	builder.WriteString(", ")
	builder.WriteString("serial_number=")
	builder.WriteString(hr.SerialNumber)
	builder.WriteString(", ")
	builder.WriteString("uuid=")
	builder.WriteString(hr.UUID)
	builder.WriteString(", ")
	builder.WriteString("memory_bytes=")
	builder.WriteString(fmt.Sprintf("%v", hr.MemoryBytes))
	builder.WriteString(", ")
	builder.WriteString("cpu_model=")
	builder.WriteString(hr.CPUModel)
	builder.WriteString(", ")
	builder.WriteString("cpu_sockets=")
	builder.WriteString(fmt.Sprintf("%v", hr.CPUSockets))
	builder.WriteString(", ")
	builder.WriteString("cpu_cores=")
	builder.WriteString(fmt.Sprintf("%v", hr.CPUCores))
	builder.WriteString(", ")
	builder.WriteString("cpu_capabilities=")
	builder.WriteString(hr.CPUCapabilities)
	builder.WriteString(", ")
	builder.WriteString("cpu_architecture=")
	builder.WriteString(hr.CPUArchitecture)
	builder.WriteString(", ")
	builder.WriteString("cpu_threads=")
	builder.WriteString(fmt.Sprintf("%v", hr.CPUThreads))
	builder.WriteString(", ")
	builder.WriteString("gpu_pci_id=")
	builder.WriteString(hr.GpuPciID)
	builder.WriteString(", ")
	builder.WriteString("gpu_product=")
	builder.WriteString(hr.GpuProduct)
	builder.WriteString(", ")
	builder.WriteString("gpu_vendor=")
	builder.WriteString(hr.GpuVendor)
	builder.WriteString(", ")
	builder.WriteString("mgmt_ip=")
	builder.WriteString(hr.MgmtIP)
	builder.WriteString(", ")
	builder.WriteString("bmc_kind=")
	builder.WriteString(fmt.Sprintf("%v", hr.BmcKind))
	builder.WriteString(", ")
	builder.WriteString("bmc_ip=")
	builder.WriteString(hr.BmcIP)
	builder.WriteString(", ")
	builder.WriteString("bmc_username=")
	builder.WriteString(hr.BmcUsername)
	builder.WriteString(", ")
	builder.WriteString("bmc_password=")
	builder.WriteString(hr.BmcPassword)
	builder.WriteString(", ")
	builder.WriteString("pxe_mac=")
	builder.WriteString(hr.PxeMAC)
	builder.WriteString(", ")
	builder.WriteString("hostname=")
	builder.WriteString(hr.Hostname)
	builder.WriteString(", ")
	builder.WriteString("product_name=")
	builder.WriteString(hr.ProductName)
	builder.WriteString(", ")
	builder.WriteString("bios_version=")
	builder.WriteString(hr.BiosVersion)
	builder.WriteString(", ")
	builder.WriteString("bios_release_date=")
	builder.WriteString(hr.BiosReleaseDate)
	builder.WriteString(", ")
	builder.WriteString("bios_vendor=")
	builder.WriteString(hr.BiosVendor)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(hr.Metadata)
	builder.WriteString(", ")
	builder.WriteString("desired_power_state=")
	builder.WriteString(fmt.Sprintf("%v", hr.DesiredPowerState))
	builder.WriteString(", ")
	builder.WriteString("current_power_state=")
	builder.WriteString(fmt.Sprintf("%v", hr.CurrentPowerState))
	builder.WriteByte(')')
	return builder.String()
}

// HostResources is a parsable slice of HostResource.
type HostResources []*HostResource
