// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hostresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hoststorageresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/projectresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/providerresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/siteresource"
)

// HoststorageResource is the model entity for the HoststorageResource schema.
type HoststorageResource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ResourceID holds the value of the "resource_id" field.
	ResourceID string `json:"resource_id,omitempty"`
	// Kind holds the value of the "kind" field.
	Kind string `json:"kind,omitempty"`
	// ProviderStatus holds the value of the "provider_status" field.
	ProviderStatus string `json:"provider_status,omitempty"`
	// Wwid holds the value of the "wwid" field.
	Wwid string `json:"wwid,omitempty"`
	// Serial holds the value of the "serial" field.
	Serial string `json:"serial,omitempty"`
	// Vendor holds the value of the "vendor" field.
	Vendor string `json:"vendor,omitempty"`
	// Model holds the value of the "model" field.
	Model string `json:"model,omitempty"`
	// CapacityBytes holds the value of the "capacity_bytes" field.
	CapacityBytes uint64 `json:"capacity_bytes,omitempty"`
	// DeviceName holds the value of the "device_name" field.
	DeviceName string `json:"device_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HoststorageResourceQuery when eager-loading is set.
	Edges                         HoststorageResourceEdges `json:"edges"`
	hoststorage_resource_site     *int
	hoststorage_resource_provider *int
	hoststorage_resource_project  *int
	hoststorage_resource_host     *int
	selectValues                  sql.SelectValues
}

// HoststorageResourceEdges holds the relations/edges for other nodes in the graph.
type HoststorageResourceEdges struct {
	// Site holds the value of the site edge.
	Site *SiteResource `json:"site,omitempty"`
	// Provider holds the value of the provider edge.
	Provider *ProviderResource `json:"provider,omitempty"`
	// Project holds the value of the project edge.
	Project *ProjectResource `json:"project,omitempty"`
	// Host holds the value of the host edge.
	Host *HostResource `json:"host,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// SiteOrErr returns the Site value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HoststorageResourceEdges) SiteOrErr() (*SiteResource, error) {
	if e.loadedTypes[0] {
		if e.Site == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: siteresource.Label}
		}
		return e.Site, nil
	}
	return nil, &NotLoadedError{edge: "site"}
}

// ProviderOrErr returns the Provider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HoststorageResourceEdges) ProviderOrErr() (*ProviderResource, error) {
	if e.loadedTypes[1] {
		if e.Provider == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: providerresource.Label}
		}
		return e.Provider, nil
	}
	return nil, &NotLoadedError{edge: "provider"}
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HoststorageResourceEdges) ProjectOrErr() (*ProjectResource, error) {
	if e.loadedTypes[2] {
		if e.Project == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: projectresource.Label}
		}
		return e.Project, nil
	}
	return nil, &NotLoadedError{edge: "project"}
}

// HostOrErr returns the Host value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HoststorageResourceEdges) HostOrErr() (*HostResource, error) {
	if e.loadedTypes[3] {
		if e.Host == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: hostresource.Label}
		}
		return e.Host, nil
	}
	return nil, &NotLoadedError{edge: "host"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HoststorageResource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hoststorageresource.FieldID, hoststorageresource.FieldCapacityBytes:
			values[i] = new(sql.NullInt64)
		case hoststorageresource.FieldResourceID, hoststorageresource.FieldKind, hoststorageresource.FieldProviderStatus, hoststorageresource.FieldWwid, hoststorageresource.FieldSerial, hoststorageresource.FieldVendor, hoststorageresource.FieldModel, hoststorageresource.FieldDeviceName:
			values[i] = new(sql.NullString)
		case hoststorageresource.ForeignKeys[0]: // hoststorage_resource_site
			values[i] = new(sql.NullInt64)
		case hoststorageresource.ForeignKeys[1]: // hoststorage_resource_provider
			values[i] = new(sql.NullInt64)
		case hoststorageresource.ForeignKeys[2]: // hoststorage_resource_project
			values[i] = new(sql.NullInt64)
		case hoststorageresource.ForeignKeys[3]: // hoststorage_resource_host
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HoststorageResource fields.
func (hr *HoststorageResource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hoststorageresource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			hr.ID = int(value.Int64)
		case hoststorageresource.FieldResourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				hr.ResourceID = value.String
			}
		case hoststorageresource.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				hr.Kind = value.String
			}
		case hoststorageresource.FieldProviderStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_status", values[i])
			} else if value.Valid {
				hr.ProviderStatus = value.String
			}
		case hoststorageresource.FieldWwid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wwid", values[i])
			} else if value.Valid {
				hr.Wwid = value.String
			}
		case hoststorageresource.FieldSerial:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field serial", values[i])
			} else if value.Valid {
				hr.Serial = value.String
			}
		case hoststorageresource.FieldVendor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vendor", values[i])
			} else if value.Valid {
				hr.Vendor = value.String
			}
		case hoststorageresource.FieldModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				hr.Model = value.String
			}
		case hoststorageresource.FieldCapacityBytes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field capacity_bytes", values[i])
			} else if value.Valid {
				hr.CapacityBytes = uint64(value.Int64)
			}
		case hoststorageresource.FieldDeviceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_name", values[i])
			} else if value.Valid {
				hr.DeviceName = value.String
			}
		case hoststorageresource.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field hoststorage_resource_site", value)
			} else if value.Valid {
				hr.hoststorage_resource_site = new(int)
				*hr.hoststorage_resource_site = int(value.Int64)
			}
		case hoststorageresource.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field hoststorage_resource_provider", value)
			} else if value.Valid {
				hr.hoststorage_resource_provider = new(int)
				*hr.hoststorage_resource_provider = int(value.Int64)
			}
		case hoststorageresource.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field hoststorage_resource_project", value)
			} else if value.Valid {
				hr.hoststorage_resource_project = new(int)
				*hr.hoststorage_resource_project = int(value.Int64)
			}
		case hoststorageresource.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field hoststorage_resource_host", value)
			} else if value.Valid {
				hr.hoststorage_resource_host = new(int)
				*hr.hoststorage_resource_host = int(value.Int64)
			}
		default:
			hr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HoststorageResource.
// This includes values selected through modifiers, order, etc.
func (hr *HoststorageResource) Value(name string) (ent.Value, error) {
	return hr.selectValues.Get(name)
}

// QuerySite queries the "site" edge of the HoststorageResource entity.
func (hr *HoststorageResource) QuerySite() *SiteResourceQuery {
	return NewHoststorageResourceClient(hr.config).QuerySite(hr)
}

// QueryProvider queries the "provider" edge of the HoststorageResource entity.
func (hr *HoststorageResource) QueryProvider() *ProviderResourceQuery {
	return NewHoststorageResourceClient(hr.config).QueryProvider(hr)
}

// QueryProject queries the "project" edge of the HoststorageResource entity.
func (hr *HoststorageResource) QueryProject() *ProjectResourceQuery {
	return NewHoststorageResourceClient(hr.config).QueryProject(hr)
}

// QueryHost queries the "host" edge of the HoststorageResource entity.
func (hr *HoststorageResource) QueryHost() *HostResourceQuery {
	return NewHoststorageResourceClient(hr.config).QueryHost(hr)
}

// Update returns a builder for updating this HoststorageResource.
// Note that you need to call HoststorageResource.Unwrap() before calling this method if this HoststorageResource
// was returned from a transaction, and the transaction was committed or rolled back.
func (hr *HoststorageResource) Update() *HoststorageResourceUpdateOne {
	return NewHoststorageResourceClient(hr.config).UpdateOne(hr)
}

// Unwrap unwraps the HoststorageResource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hr *HoststorageResource) Unwrap() *HoststorageResource {
	_tx, ok := hr.config.driver.(*txDriver)
	if !ok {
		panic("ent: HoststorageResource is not a transactional entity")
	}
	hr.config.driver = _tx.drv
	return hr
}

// String implements the fmt.Stringer.
func (hr *HoststorageResource) String() string {
	var builder strings.Builder
	builder.WriteString("HoststorageResource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hr.ID))
	builder.WriteString("resource_id=")
	builder.WriteString(hr.ResourceID)
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(hr.Kind)
	builder.WriteString(", ")
	builder.WriteString("provider_status=")
	builder.WriteString(hr.ProviderStatus)
	builder.WriteString(", ")
	builder.WriteString("wwid=")
	builder.WriteString(hr.Wwid)
	builder.WriteString(", ")
	builder.WriteString("serial=")
	builder.WriteString(hr.Serial)
	builder.WriteString(", ")
	builder.WriteString("vendor=")
	builder.WriteString(hr.Vendor)
	builder.WriteString(", ")
	builder.WriteString("model=")
	builder.WriteString(hr.Model)
	builder.WriteString(", ")
	builder.WriteString("capacity_bytes=")
	builder.WriteString(fmt.Sprintf("%v", hr.CapacityBytes))
	builder.WriteString(", ")
	builder.WriteString("device_name=")
	builder.WriteString(hr.DeviceName)
	builder.WriteByte(')')
	return builder.String()
}

// HoststorageResources is a parsable slice of HoststorageResource.
type HoststorageResources []*HoststorageResource
