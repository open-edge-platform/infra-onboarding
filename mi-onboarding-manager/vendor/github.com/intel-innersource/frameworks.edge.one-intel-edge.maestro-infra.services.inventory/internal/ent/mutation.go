// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/endpointresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hostnicresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hostresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hoststorageresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hostusbresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/instanceresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/ipaddressresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/netlinkresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/networksegment"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/operatingsystemresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/ouresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/projectresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/providerresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/regionresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/repeatedscheduleresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/singlescheduleresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/siteresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/userresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/workloadmember"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/workloadresource"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeEndpointResource         = "EndpointResource"
	TypeHostResource             = "HostResource"
	TypeHostnicResource          = "HostnicResource"
	TypeHoststorageResource      = "HoststorageResource"
	TypeHostusbResource          = "HostusbResource"
	TypeIPAddressResource        = "IPAddressResource"
	TypeInstanceResource         = "InstanceResource"
	TypeNetlinkResource          = "NetlinkResource"
	TypeNetworkSegment           = "NetworkSegment"
	TypeOperatingSystemResource  = "OperatingSystemResource"
	TypeOuResource               = "OuResource"
	TypeProjectResource          = "ProjectResource"
	TypeProviderResource         = "ProviderResource"
	TypeRegionResource           = "RegionResource"
	TypeRepeatedScheduleResource = "RepeatedScheduleResource"
	TypeSingleScheduleResource   = "SingleScheduleResource"
	TypeSiteResource             = "SiteResource"
	TypeUserResource             = "UserResource"
	TypeWorkloadMember           = "WorkloadMember"
	TypeWorkloadResource         = "WorkloadResource"
)

// EndpointResourceMutation represents an operation that mutates the EndpointResource nodes in the graph.
type EndpointResourceMutation struct {
	config
	op            Op
	typ           string
	id            *int
	resource_id   *string
	kind          *string
	description   *string
	clearedFields map[string]struct{}
	host          *int
	clearedhost   bool
	done          bool
	oldValue      func(context.Context) (*EndpointResource, error)
	predicates    []predicate.EndpointResource
}

var _ ent.Mutation = (*EndpointResourceMutation)(nil)

// endpointresourceOption allows management of the mutation configuration using functional options.
type endpointresourceOption func(*EndpointResourceMutation)

// newEndpointResourceMutation creates new mutation for the EndpointResource entity.
func newEndpointResourceMutation(c config, op Op, opts ...endpointresourceOption) *EndpointResourceMutation {
	m := &EndpointResourceMutation{
		config:        c,
		op:            op,
		typ:           TypeEndpointResource,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEndpointResourceID sets the ID field of the mutation.
func withEndpointResourceID(id int) endpointresourceOption {
	return func(m *EndpointResourceMutation) {
		var (
			err   error
			once  sync.Once
			value *EndpointResource
		)
		m.oldValue = func(ctx context.Context) (*EndpointResource, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EndpointResource.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEndpointResource sets the old EndpointResource of the mutation.
func withEndpointResource(node *EndpointResource) endpointresourceOption {
	return func(m *EndpointResourceMutation) {
		m.oldValue = func(context.Context) (*EndpointResource, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EndpointResourceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EndpointResourceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EndpointResourceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EndpointResourceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EndpointResource.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetResourceID sets the "resource_id" field.
func (m *EndpointResourceMutation) SetResourceID(s string) {
	m.resource_id = &s
}

// ResourceID returns the value of the "resource_id" field in the mutation.
func (m *EndpointResourceMutation) ResourceID() (r string, exists bool) {
	v := m.resource_id
	if v == nil {
		return
	}
	return *v, true
}

// OldResourceID returns the old "resource_id" field's value of the EndpointResource entity.
// If the EndpointResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EndpointResourceMutation) OldResourceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResourceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResourceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResourceID: %w", err)
	}
	return oldValue.ResourceID, nil
}

// ResetResourceID resets all changes to the "resource_id" field.
func (m *EndpointResourceMutation) ResetResourceID() {
	m.resource_id = nil
}

// SetKind sets the "kind" field.
func (m *EndpointResourceMutation) SetKind(s string) {
	m.kind = &s
}

// Kind returns the value of the "kind" field in the mutation.
func (m *EndpointResourceMutation) Kind() (r string, exists bool) {
	v := m.kind
	if v == nil {
		return
	}
	return *v, true
}

// OldKind returns the old "kind" field's value of the EndpointResource entity.
// If the EndpointResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EndpointResourceMutation) OldKind(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKind is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKind requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKind: %w", err)
	}
	return oldValue.Kind, nil
}

// ClearKind clears the value of the "kind" field.
func (m *EndpointResourceMutation) ClearKind() {
	m.kind = nil
	m.clearedFields[endpointresource.FieldKind] = struct{}{}
}

// KindCleared returns if the "kind" field was cleared in this mutation.
func (m *EndpointResourceMutation) KindCleared() bool {
	_, ok := m.clearedFields[endpointresource.FieldKind]
	return ok
}

// ResetKind resets all changes to the "kind" field.
func (m *EndpointResourceMutation) ResetKind() {
	m.kind = nil
	delete(m.clearedFields, endpointresource.FieldKind)
}

// SetDescription sets the "description" field.
func (m *EndpointResourceMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *EndpointResourceMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the EndpointResource entity.
// If the EndpointResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EndpointResourceMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *EndpointResourceMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[endpointresource.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *EndpointResourceMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[endpointresource.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *EndpointResourceMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, endpointresource.FieldDescription)
}

// SetHostID sets the "host" edge to the HostResource entity by id.
func (m *EndpointResourceMutation) SetHostID(id int) {
	m.host = &id
}

// ClearHost clears the "host" edge to the HostResource entity.
func (m *EndpointResourceMutation) ClearHost() {
	m.clearedhost = true
}

// HostCleared reports if the "host" edge to the HostResource entity was cleared.
func (m *EndpointResourceMutation) HostCleared() bool {
	return m.clearedhost
}

// HostID returns the "host" edge ID in the mutation.
func (m *EndpointResourceMutation) HostID() (id int, exists bool) {
	if m.host != nil {
		return *m.host, true
	}
	return
}

// HostIDs returns the "host" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// HostID instead. It exists only for internal usage by the builders.
func (m *EndpointResourceMutation) HostIDs() (ids []int) {
	if id := m.host; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetHost resets all changes to the "host" edge.
func (m *EndpointResourceMutation) ResetHost() {
	m.host = nil
	m.clearedhost = false
}

// Where appends a list predicates to the EndpointResourceMutation builder.
func (m *EndpointResourceMutation) Where(ps ...predicate.EndpointResource) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EndpointResourceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EndpointResourceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.EndpointResource, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EndpointResourceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EndpointResourceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (EndpointResource).
func (m *EndpointResourceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EndpointResourceMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.resource_id != nil {
		fields = append(fields, endpointresource.FieldResourceID)
	}
	if m.kind != nil {
		fields = append(fields, endpointresource.FieldKind)
	}
	if m.description != nil {
		fields = append(fields, endpointresource.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EndpointResourceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case endpointresource.FieldResourceID:
		return m.ResourceID()
	case endpointresource.FieldKind:
		return m.Kind()
	case endpointresource.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EndpointResourceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case endpointresource.FieldResourceID:
		return m.OldResourceID(ctx)
	case endpointresource.FieldKind:
		return m.OldKind(ctx)
	case endpointresource.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown EndpointResource field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EndpointResourceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case endpointresource.FieldResourceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResourceID(v)
		return nil
	case endpointresource.FieldKind:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKind(v)
		return nil
	case endpointresource.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown EndpointResource field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EndpointResourceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EndpointResourceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EndpointResourceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown EndpointResource numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EndpointResourceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(endpointresource.FieldKind) {
		fields = append(fields, endpointresource.FieldKind)
	}
	if m.FieldCleared(endpointresource.FieldDescription) {
		fields = append(fields, endpointresource.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EndpointResourceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EndpointResourceMutation) ClearField(name string) error {
	switch name {
	case endpointresource.FieldKind:
		m.ClearKind()
		return nil
	case endpointresource.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown EndpointResource nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EndpointResourceMutation) ResetField(name string) error {
	switch name {
	case endpointresource.FieldResourceID:
		m.ResetResourceID()
		return nil
	case endpointresource.FieldKind:
		m.ResetKind()
		return nil
	case endpointresource.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown EndpointResource field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EndpointResourceMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.host != nil {
		edges = append(edges, endpointresource.EdgeHost)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EndpointResourceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case endpointresource.EdgeHost:
		if id := m.host; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EndpointResourceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EndpointResourceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EndpointResourceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedhost {
		edges = append(edges, endpointresource.EdgeHost)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EndpointResourceMutation) EdgeCleared(name string) bool {
	switch name {
	case endpointresource.EdgeHost:
		return m.clearedhost
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EndpointResourceMutation) ClearEdge(name string) error {
	switch name {
	case endpointresource.EdgeHost:
		m.ClearHost()
		return nil
	}
	return fmt.Errorf("unknown EndpointResource unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EndpointResourceMutation) ResetEdge(name string) error {
	switch name {
	case endpointresource.EdgeHost:
		m.ResetHost()
		return nil
	}
	return fmt.Errorf("unknown EndpointResource edge %s", name)
}

// HostResourceMutation represents an operation that mutates the HostResource nodes in the graph.
type HostResourceMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	resource_id            *string
	kind                   *string
	description            *string
	desired_state          *hostresource.DesiredState
	current_state          *hostresource.CurrentState
	provider_status        *string
	host_status            *hostresource.HostStatus
	provider_status_detail *string
	note                   *string
	consumer_id            *string
	hardware_kind          *string
	serial_number          *string
	uuid                   *string
	memory_bytes           *uint64
	addmemory_bytes        *int64
	cpu_model              *string
	cpu_sockets            *uint32
	addcpu_sockets         *int32
	cpu_cores              *uint32
	addcpu_cores           *int32
	cpu_capabilities       *string
	cpu_architecture       *string
	cpu_threads            *uint32
	addcpu_threads         *int32
	gpu_pci_id             *string
	gpu_product            *string
	gpu_vendor             *string
	mgmt_ip                *string
	bmc_kind               *hostresource.BmcKind
	bmc_ip                 *string
	bmc_username           *string
	bmc_password           *string
	pxe_mac                *string
	hostname               *string
	product_name           *string
	bios_version           *string
	bios_release_date      *string
	bios_vendor            *string
	metadata               *string
	desired_power_state    *hostresource.DesiredPowerState
	current_power_state    *hostresource.CurrentPowerState
	clearedFields          map[string]struct{}
	site                   *int
	clearedsite            bool
	provider               *int
	clearedprovider        bool
	project                *int
	clearedproject         bool
	user                   *int
	cleareduser            bool
	host_storages          map[int]struct{}
	removedhost_storages   map[int]struct{}
	clearedhost_storages   bool
	host_nics              map[int]struct{}
	removedhost_nics       map[int]struct{}
	clearedhost_nics       bool
	host_usbs              map[int]struct{}
	removedhost_usbs       map[int]struct{}
	clearedhost_usbs       bool
	instance               *int
	clearedinstance        bool
	done                   bool
	oldValue               func(context.Context) (*HostResource, error)
	predicates             []predicate.HostResource
}

var _ ent.Mutation = (*HostResourceMutation)(nil)

// hostresourceOption allows management of the mutation configuration using functional options.
type hostresourceOption func(*HostResourceMutation)

// newHostResourceMutation creates new mutation for the HostResource entity.
func newHostResourceMutation(c config, op Op, opts ...hostresourceOption) *HostResourceMutation {
	m := &HostResourceMutation{
		config:        c,
		op:            op,
		typ:           TypeHostResource,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHostResourceID sets the ID field of the mutation.
func withHostResourceID(id int) hostresourceOption {
	return func(m *HostResourceMutation) {
		var (
			err   error
			once  sync.Once
			value *HostResource
		)
		m.oldValue = func(ctx context.Context) (*HostResource, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().HostResource.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHostResource sets the old HostResource of the mutation.
func withHostResource(node *HostResource) hostresourceOption {
	return func(m *HostResourceMutation) {
		m.oldValue = func(context.Context) (*HostResource, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HostResourceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HostResourceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HostResourceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HostResourceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().HostResource.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetResourceID sets the "resource_id" field.
func (m *HostResourceMutation) SetResourceID(s string) {
	m.resource_id = &s
}

// ResourceID returns the value of the "resource_id" field in the mutation.
func (m *HostResourceMutation) ResourceID() (r string, exists bool) {
	v := m.resource_id
	if v == nil {
		return
	}
	return *v, true
}

// OldResourceID returns the old "resource_id" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldResourceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResourceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResourceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResourceID: %w", err)
	}
	return oldValue.ResourceID, nil
}

// ResetResourceID resets all changes to the "resource_id" field.
func (m *HostResourceMutation) ResetResourceID() {
	m.resource_id = nil
}

// SetKind sets the "kind" field.
func (m *HostResourceMutation) SetKind(s string) {
	m.kind = &s
}

// Kind returns the value of the "kind" field in the mutation.
func (m *HostResourceMutation) Kind() (r string, exists bool) {
	v := m.kind
	if v == nil {
		return
	}
	return *v, true
}

// OldKind returns the old "kind" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldKind(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKind is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKind requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKind: %w", err)
	}
	return oldValue.Kind, nil
}

// ClearKind clears the value of the "kind" field.
func (m *HostResourceMutation) ClearKind() {
	m.kind = nil
	m.clearedFields[hostresource.FieldKind] = struct{}{}
}

// KindCleared returns if the "kind" field was cleared in this mutation.
func (m *HostResourceMutation) KindCleared() bool {
	_, ok := m.clearedFields[hostresource.FieldKind]
	return ok
}

// ResetKind resets all changes to the "kind" field.
func (m *HostResourceMutation) ResetKind() {
	m.kind = nil
	delete(m.clearedFields, hostresource.FieldKind)
}

// SetDescription sets the "description" field.
func (m *HostResourceMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *HostResourceMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *HostResourceMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[hostresource.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *HostResourceMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[hostresource.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *HostResourceMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, hostresource.FieldDescription)
}

// SetDesiredState sets the "desired_state" field.
func (m *HostResourceMutation) SetDesiredState(hs hostresource.DesiredState) {
	m.desired_state = &hs
}

// DesiredState returns the value of the "desired_state" field in the mutation.
func (m *HostResourceMutation) DesiredState() (r hostresource.DesiredState, exists bool) {
	v := m.desired_state
	if v == nil {
		return
	}
	return *v, true
}

// OldDesiredState returns the old "desired_state" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldDesiredState(ctx context.Context) (v hostresource.DesiredState, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesiredState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesiredState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesiredState: %w", err)
	}
	return oldValue.DesiredState, nil
}

// ClearDesiredState clears the value of the "desired_state" field.
func (m *HostResourceMutation) ClearDesiredState() {
	m.desired_state = nil
	m.clearedFields[hostresource.FieldDesiredState] = struct{}{}
}

// DesiredStateCleared returns if the "desired_state" field was cleared in this mutation.
func (m *HostResourceMutation) DesiredStateCleared() bool {
	_, ok := m.clearedFields[hostresource.FieldDesiredState]
	return ok
}

// ResetDesiredState resets all changes to the "desired_state" field.
func (m *HostResourceMutation) ResetDesiredState() {
	m.desired_state = nil
	delete(m.clearedFields, hostresource.FieldDesiredState)
}

// SetCurrentState sets the "current_state" field.
func (m *HostResourceMutation) SetCurrentState(hs hostresource.CurrentState) {
	m.current_state = &hs
}

// CurrentState returns the value of the "current_state" field in the mutation.
func (m *HostResourceMutation) CurrentState() (r hostresource.CurrentState, exists bool) {
	v := m.current_state
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrentState returns the old "current_state" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldCurrentState(ctx context.Context) (v hostresource.CurrentState, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrentState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrentState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrentState: %w", err)
	}
	return oldValue.CurrentState, nil
}

// ClearCurrentState clears the value of the "current_state" field.
func (m *HostResourceMutation) ClearCurrentState() {
	m.current_state = nil
	m.clearedFields[hostresource.FieldCurrentState] = struct{}{}
}

// CurrentStateCleared returns if the "current_state" field was cleared in this mutation.
func (m *HostResourceMutation) CurrentStateCleared() bool {
	_, ok := m.clearedFields[hostresource.FieldCurrentState]
	return ok
}

// ResetCurrentState resets all changes to the "current_state" field.
func (m *HostResourceMutation) ResetCurrentState() {
	m.current_state = nil
	delete(m.clearedFields, hostresource.FieldCurrentState)
}

// SetProviderStatus sets the "provider_status" field.
func (m *HostResourceMutation) SetProviderStatus(s string) {
	m.provider_status = &s
}

// ProviderStatus returns the value of the "provider_status" field in the mutation.
func (m *HostResourceMutation) ProviderStatus() (r string, exists bool) {
	v := m.provider_status
	if v == nil {
		return
	}
	return *v, true
}

// OldProviderStatus returns the old "provider_status" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldProviderStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProviderStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProviderStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProviderStatus: %w", err)
	}
	return oldValue.ProviderStatus, nil
}

// ClearProviderStatus clears the value of the "provider_status" field.
func (m *HostResourceMutation) ClearProviderStatus() {
	m.provider_status = nil
	m.clearedFields[hostresource.FieldProviderStatus] = struct{}{}
}

// ProviderStatusCleared returns if the "provider_status" field was cleared in this mutation.
func (m *HostResourceMutation) ProviderStatusCleared() bool {
	_, ok := m.clearedFields[hostresource.FieldProviderStatus]
	return ok
}

// ResetProviderStatus resets all changes to the "provider_status" field.
func (m *HostResourceMutation) ResetProviderStatus() {
	m.provider_status = nil
	delete(m.clearedFields, hostresource.FieldProviderStatus)
}

// SetHostStatus sets the "host_status" field.
func (m *HostResourceMutation) SetHostStatus(hs hostresource.HostStatus) {
	m.host_status = &hs
}

// HostStatus returns the value of the "host_status" field in the mutation.
func (m *HostResourceMutation) HostStatus() (r hostresource.HostStatus, exists bool) {
	v := m.host_status
	if v == nil {
		return
	}
	return *v, true
}

// OldHostStatus returns the old "host_status" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldHostStatus(ctx context.Context) (v hostresource.HostStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHostStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHostStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHostStatus: %w", err)
	}
	return oldValue.HostStatus, nil
}

// ClearHostStatus clears the value of the "host_status" field.
func (m *HostResourceMutation) ClearHostStatus() {
	m.host_status = nil
	m.clearedFields[hostresource.FieldHostStatus] = struct{}{}
}

// HostStatusCleared returns if the "host_status" field was cleared in this mutation.
func (m *HostResourceMutation) HostStatusCleared() bool {
	_, ok := m.clearedFields[hostresource.FieldHostStatus]
	return ok
}

// ResetHostStatus resets all changes to the "host_status" field.
func (m *HostResourceMutation) ResetHostStatus() {
	m.host_status = nil
	delete(m.clearedFields, hostresource.FieldHostStatus)
}

// SetProviderStatusDetail sets the "provider_status_detail" field.
func (m *HostResourceMutation) SetProviderStatusDetail(s string) {
	m.provider_status_detail = &s
}

// ProviderStatusDetail returns the value of the "provider_status_detail" field in the mutation.
func (m *HostResourceMutation) ProviderStatusDetail() (r string, exists bool) {
	v := m.provider_status_detail
	if v == nil {
		return
	}
	return *v, true
}

// OldProviderStatusDetail returns the old "provider_status_detail" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldProviderStatusDetail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProviderStatusDetail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProviderStatusDetail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProviderStatusDetail: %w", err)
	}
	return oldValue.ProviderStatusDetail, nil
}

// ClearProviderStatusDetail clears the value of the "provider_status_detail" field.
func (m *HostResourceMutation) ClearProviderStatusDetail() {
	m.provider_status_detail = nil
	m.clearedFields[hostresource.FieldProviderStatusDetail] = struct{}{}
}

// ProviderStatusDetailCleared returns if the "provider_status_detail" field was cleared in this mutation.
func (m *HostResourceMutation) ProviderStatusDetailCleared() bool {
	_, ok := m.clearedFields[hostresource.FieldProviderStatusDetail]
	return ok
}

// ResetProviderStatusDetail resets all changes to the "provider_status_detail" field.
func (m *HostResourceMutation) ResetProviderStatusDetail() {
	m.provider_status_detail = nil
	delete(m.clearedFields, hostresource.FieldProviderStatusDetail)
}

// SetNote sets the "note" field.
func (m *HostResourceMutation) SetNote(s string) {
	m.note = &s
}

// Note returns the value of the "note" field in the mutation.
func (m *HostResourceMutation) Note() (r string, exists bool) {
	v := m.note
	if v == nil {
		return
	}
	return *v, true
}

// OldNote returns the old "note" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldNote(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNote is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNote requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNote: %w", err)
	}
	return oldValue.Note, nil
}

// ClearNote clears the value of the "note" field.
func (m *HostResourceMutation) ClearNote() {
	m.note = nil
	m.clearedFields[hostresource.FieldNote] = struct{}{}
}

// NoteCleared returns if the "note" field was cleared in this mutation.
func (m *HostResourceMutation) NoteCleared() bool {
	_, ok := m.clearedFields[hostresource.FieldNote]
	return ok
}

// ResetNote resets all changes to the "note" field.
func (m *HostResourceMutation) ResetNote() {
	m.note = nil
	delete(m.clearedFields, hostresource.FieldNote)
}

// SetConsumerID sets the "consumer_id" field.
func (m *HostResourceMutation) SetConsumerID(s string) {
	m.consumer_id = &s
}

// ConsumerID returns the value of the "consumer_id" field in the mutation.
func (m *HostResourceMutation) ConsumerID() (r string, exists bool) {
	v := m.consumer_id
	if v == nil {
		return
	}
	return *v, true
}

// OldConsumerID returns the old "consumer_id" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldConsumerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConsumerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConsumerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConsumerID: %w", err)
	}
	return oldValue.ConsumerID, nil
}

// ClearConsumerID clears the value of the "consumer_id" field.
func (m *HostResourceMutation) ClearConsumerID() {
	m.consumer_id = nil
	m.clearedFields[hostresource.FieldConsumerID] = struct{}{}
}

// ConsumerIDCleared returns if the "consumer_id" field was cleared in this mutation.
func (m *HostResourceMutation) ConsumerIDCleared() bool {
	_, ok := m.clearedFields[hostresource.FieldConsumerID]
	return ok
}

// ResetConsumerID resets all changes to the "consumer_id" field.
func (m *HostResourceMutation) ResetConsumerID() {
	m.consumer_id = nil
	delete(m.clearedFields, hostresource.FieldConsumerID)
}

// SetHardwareKind sets the "hardware_kind" field.
func (m *HostResourceMutation) SetHardwareKind(s string) {
	m.hardware_kind = &s
}

// HardwareKind returns the value of the "hardware_kind" field in the mutation.
func (m *HostResourceMutation) HardwareKind() (r string, exists bool) {
	v := m.hardware_kind
	if v == nil {
		return
	}
	return *v, true
}

// OldHardwareKind returns the old "hardware_kind" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldHardwareKind(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHardwareKind is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHardwareKind requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHardwareKind: %w", err)
	}
	return oldValue.HardwareKind, nil
}

// ClearHardwareKind clears the value of the "hardware_kind" field.
func (m *HostResourceMutation) ClearHardwareKind() {
	m.hardware_kind = nil
	m.clearedFields[hostresource.FieldHardwareKind] = struct{}{}
}

// HardwareKindCleared returns if the "hardware_kind" field was cleared in this mutation.
func (m *HostResourceMutation) HardwareKindCleared() bool {
	_, ok := m.clearedFields[hostresource.FieldHardwareKind]
	return ok
}

// ResetHardwareKind resets all changes to the "hardware_kind" field.
func (m *HostResourceMutation) ResetHardwareKind() {
	m.hardware_kind = nil
	delete(m.clearedFields, hostresource.FieldHardwareKind)
}

// SetSerialNumber sets the "serial_number" field.
func (m *HostResourceMutation) SetSerialNumber(s string) {
	m.serial_number = &s
}

// SerialNumber returns the value of the "serial_number" field in the mutation.
func (m *HostResourceMutation) SerialNumber() (r string, exists bool) {
	v := m.serial_number
	if v == nil {
		return
	}
	return *v, true
}

// OldSerialNumber returns the old "serial_number" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldSerialNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSerialNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSerialNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSerialNumber: %w", err)
	}
	return oldValue.SerialNumber, nil
}

// ClearSerialNumber clears the value of the "serial_number" field.
func (m *HostResourceMutation) ClearSerialNumber() {
	m.serial_number = nil
	m.clearedFields[hostresource.FieldSerialNumber] = struct{}{}
}

// SerialNumberCleared returns if the "serial_number" field was cleared in this mutation.
func (m *HostResourceMutation) SerialNumberCleared() bool {
	_, ok := m.clearedFields[hostresource.FieldSerialNumber]
	return ok
}

// ResetSerialNumber resets all changes to the "serial_number" field.
func (m *HostResourceMutation) ResetSerialNumber() {
	m.serial_number = nil
	delete(m.clearedFields, hostresource.FieldSerialNumber)
}

// SetUUID sets the "uuid" field.
func (m *HostResourceMutation) SetUUID(s string) {
	m.uuid = &s
}

// UUID returns the value of the "uuid" field in the mutation.
func (m *HostResourceMutation) UUID() (r string, exists bool) {
	v := m.uuid
	if v == nil {
		return
	}
	return *v, true
}

// OldUUID returns the old "uuid" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldUUID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUUID: %w", err)
	}
	return oldValue.UUID, nil
}

// ClearUUID clears the value of the "uuid" field.
func (m *HostResourceMutation) ClearUUID() {
	m.uuid = nil
	m.clearedFields[hostresource.FieldUUID] = struct{}{}
}

// UUIDCleared returns if the "uuid" field was cleared in this mutation.
func (m *HostResourceMutation) UUIDCleared() bool {
	_, ok := m.clearedFields[hostresource.FieldUUID]
	return ok
}

// ResetUUID resets all changes to the "uuid" field.
func (m *HostResourceMutation) ResetUUID() {
	m.uuid = nil
	delete(m.clearedFields, hostresource.FieldUUID)
}

// SetMemoryBytes sets the "memory_bytes" field.
func (m *HostResourceMutation) SetMemoryBytes(u uint64) {
	m.memory_bytes = &u
	m.addmemory_bytes = nil
}

// MemoryBytes returns the value of the "memory_bytes" field in the mutation.
func (m *HostResourceMutation) MemoryBytes() (r uint64, exists bool) {
	v := m.memory_bytes
	if v == nil {
		return
	}
	return *v, true
}

// OldMemoryBytes returns the old "memory_bytes" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldMemoryBytes(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemoryBytes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemoryBytes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemoryBytes: %w", err)
	}
	return oldValue.MemoryBytes, nil
}

// AddMemoryBytes adds u to the "memory_bytes" field.
func (m *HostResourceMutation) AddMemoryBytes(u int64) {
	if m.addmemory_bytes != nil {
		*m.addmemory_bytes += u
	} else {
		m.addmemory_bytes = &u
	}
}

// AddedMemoryBytes returns the value that was added to the "memory_bytes" field in this mutation.
func (m *HostResourceMutation) AddedMemoryBytes() (r int64, exists bool) {
	v := m.addmemory_bytes
	if v == nil {
		return
	}
	return *v, true
}

// ClearMemoryBytes clears the value of the "memory_bytes" field.
func (m *HostResourceMutation) ClearMemoryBytes() {
	m.memory_bytes = nil
	m.addmemory_bytes = nil
	m.clearedFields[hostresource.FieldMemoryBytes] = struct{}{}
}

// MemoryBytesCleared returns if the "memory_bytes" field was cleared in this mutation.
func (m *HostResourceMutation) MemoryBytesCleared() bool {
	_, ok := m.clearedFields[hostresource.FieldMemoryBytes]
	return ok
}

// ResetMemoryBytes resets all changes to the "memory_bytes" field.
func (m *HostResourceMutation) ResetMemoryBytes() {
	m.memory_bytes = nil
	m.addmemory_bytes = nil
	delete(m.clearedFields, hostresource.FieldMemoryBytes)
}

// SetCPUModel sets the "cpu_model" field.
func (m *HostResourceMutation) SetCPUModel(s string) {
	m.cpu_model = &s
}

// CPUModel returns the value of the "cpu_model" field in the mutation.
func (m *HostResourceMutation) CPUModel() (r string, exists bool) {
	v := m.cpu_model
	if v == nil {
		return
	}
	return *v, true
}

// OldCPUModel returns the old "cpu_model" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldCPUModel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCPUModel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCPUModel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCPUModel: %w", err)
	}
	return oldValue.CPUModel, nil
}

// ClearCPUModel clears the value of the "cpu_model" field.
func (m *HostResourceMutation) ClearCPUModel() {
	m.cpu_model = nil
	m.clearedFields[hostresource.FieldCPUModel] = struct{}{}
}

// CPUModelCleared returns if the "cpu_model" field was cleared in this mutation.
func (m *HostResourceMutation) CPUModelCleared() bool {
	_, ok := m.clearedFields[hostresource.FieldCPUModel]
	return ok
}

// ResetCPUModel resets all changes to the "cpu_model" field.
func (m *HostResourceMutation) ResetCPUModel() {
	m.cpu_model = nil
	delete(m.clearedFields, hostresource.FieldCPUModel)
}

// SetCPUSockets sets the "cpu_sockets" field.
func (m *HostResourceMutation) SetCPUSockets(u uint32) {
	m.cpu_sockets = &u
	m.addcpu_sockets = nil
}

// CPUSockets returns the value of the "cpu_sockets" field in the mutation.
func (m *HostResourceMutation) CPUSockets() (r uint32, exists bool) {
	v := m.cpu_sockets
	if v == nil {
		return
	}
	return *v, true
}

// OldCPUSockets returns the old "cpu_sockets" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldCPUSockets(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCPUSockets is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCPUSockets requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCPUSockets: %w", err)
	}
	return oldValue.CPUSockets, nil
}

// AddCPUSockets adds u to the "cpu_sockets" field.
func (m *HostResourceMutation) AddCPUSockets(u int32) {
	if m.addcpu_sockets != nil {
		*m.addcpu_sockets += u
	} else {
		m.addcpu_sockets = &u
	}
}

// AddedCPUSockets returns the value that was added to the "cpu_sockets" field in this mutation.
func (m *HostResourceMutation) AddedCPUSockets() (r int32, exists bool) {
	v := m.addcpu_sockets
	if v == nil {
		return
	}
	return *v, true
}

// ClearCPUSockets clears the value of the "cpu_sockets" field.
func (m *HostResourceMutation) ClearCPUSockets() {
	m.cpu_sockets = nil
	m.addcpu_sockets = nil
	m.clearedFields[hostresource.FieldCPUSockets] = struct{}{}
}

// CPUSocketsCleared returns if the "cpu_sockets" field was cleared in this mutation.
func (m *HostResourceMutation) CPUSocketsCleared() bool {
	_, ok := m.clearedFields[hostresource.FieldCPUSockets]
	return ok
}

// ResetCPUSockets resets all changes to the "cpu_sockets" field.
func (m *HostResourceMutation) ResetCPUSockets() {
	m.cpu_sockets = nil
	m.addcpu_sockets = nil
	delete(m.clearedFields, hostresource.FieldCPUSockets)
}

// SetCPUCores sets the "cpu_cores" field.
func (m *HostResourceMutation) SetCPUCores(u uint32) {
	m.cpu_cores = &u
	m.addcpu_cores = nil
}

// CPUCores returns the value of the "cpu_cores" field in the mutation.
func (m *HostResourceMutation) CPUCores() (r uint32, exists bool) {
	v := m.cpu_cores
	if v == nil {
		return
	}
	return *v, true
}

// OldCPUCores returns the old "cpu_cores" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldCPUCores(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCPUCores is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCPUCores requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCPUCores: %w", err)
	}
	return oldValue.CPUCores, nil
}

// AddCPUCores adds u to the "cpu_cores" field.
func (m *HostResourceMutation) AddCPUCores(u int32) {
	if m.addcpu_cores != nil {
		*m.addcpu_cores += u
	} else {
		m.addcpu_cores = &u
	}
}

// AddedCPUCores returns the value that was added to the "cpu_cores" field in this mutation.
func (m *HostResourceMutation) AddedCPUCores() (r int32, exists bool) {
	v := m.addcpu_cores
	if v == nil {
		return
	}
	return *v, true
}

// ClearCPUCores clears the value of the "cpu_cores" field.
func (m *HostResourceMutation) ClearCPUCores() {
	m.cpu_cores = nil
	m.addcpu_cores = nil
	m.clearedFields[hostresource.FieldCPUCores] = struct{}{}
}

// CPUCoresCleared returns if the "cpu_cores" field was cleared in this mutation.
func (m *HostResourceMutation) CPUCoresCleared() bool {
	_, ok := m.clearedFields[hostresource.FieldCPUCores]
	return ok
}

// ResetCPUCores resets all changes to the "cpu_cores" field.
func (m *HostResourceMutation) ResetCPUCores() {
	m.cpu_cores = nil
	m.addcpu_cores = nil
	delete(m.clearedFields, hostresource.FieldCPUCores)
}

// SetCPUCapabilities sets the "cpu_capabilities" field.
func (m *HostResourceMutation) SetCPUCapabilities(s string) {
	m.cpu_capabilities = &s
}

// CPUCapabilities returns the value of the "cpu_capabilities" field in the mutation.
func (m *HostResourceMutation) CPUCapabilities() (r string, exists bool) {
	v := m.cpu_capabilities
	if v == nil {
		return
	}
	return *v, true
}

// OldCPUCapabilities returns the old "cpu_capabilities" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldCPUCapabilities(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCPUCapabilities is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCPUCapabilities requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCPUCapabilities: %w", err)
	}
	return oldValue.CPUCapabilities, nil
}

// ClearCPUCapabilities clears the value of the "cpu_capabilities" field.
func (m *HostResourceMutation) ClearCPUCapabilities() {
	m.cpu_capabilities = nil
	m.clearedFields[hostresource.FieldCPUCapabilities] = struct{}{}
}

// CPUCapabilitiesCleared returns if the "cpu_capabilities" field was cleared in this mutation.
func (m *HostResourceMutation) CPUCapabilitiesCleared() bool {
	_, ok := m.clearedFields[hostresource.FieldCPUCapabilities]
	return ok
}

// ResetCPUCapabilities resets all changes to the "cpu_capabilities" field.
func (m *HostResourceMutation) ResetCPUCapabilities() {
	m.cpu_capabilities = nil
	delete(m.clearedFields, hostresource.FieldCPUCapabilities)
}

// SetCPUArchitecture sets the "cpu_architecture" field.
func (m *HostResourceMutation) SetCPUArchitecture(s string) {
	m.cpu_architecture = &s
}

// CPUArchitecture returns the value of the "cpu_architecture" field in the mutation.
func (m *HostResourceMutation) CPUArchitecture() (r string, exists bool) {
	v := m.cpu_architecture
	if v == nil {
		return
	}
	return *v, true
}

// OldCPUArchitecture returns the old "cpu_architecture" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldCPUArchitecture(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCPUArchitecture is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCPUArchitecture requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCPUArchitecture: %w", err)
	}
	return oldValue.CPUArchitecture, nil
}

// ClearCPUArchitecture clears the value of the "cpu_architecture" field.
func (m *HostResourceMutation) ClearCPUArchitecture() {
	m.cpu_architecture = nil
	m.clearedFields[hostresource.FieldCPUArchitecture] = struct{}{}
}

// CPUArchitectureCleared returns if the "cpu_architecture" field was cleared in this mutation.
func (m *HostResourceMutation) CPUArchitectureCleared() bool {
	_, ok := m.clearedFields[hostresource.FieldCPUArchitecture]
	return ok
}

// ResetCPUArchitecture resets all changes to the "cpu_architecture" field.
func (m *HostResourceMutation) ResetCPUArchitecture() {
	m.cpu_architecture = nil
	delete(m.clearedFields, hostresource.FieldCPUArchitecture)
}

// SetCPUThreads sets the "cpu_threads" field.
func (m *HostResourceMutation) SetCPUThreads(u uint32) {
	m.cpu_threads = &u
	m.addcpu_threads = nil
}

// CPUThreads returns the value of the "cpu_threads" field in the mutation.
func (m *HostResourceMutation) CPUThreads() (r uint32, exists bool) {
	v := m.cpu_threads
	if v == nil {
		return
	}
	return *v, true
}

// OldCPUThreads returns the old "cpu_threads" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldCPUThreads(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCPUThreads is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCPUThreads requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCPUThreads: %w", err)
	}
	return oldValue.CPUThreads, nil
}

// AddCPUThreads adds u to the "cpu_threads" field.
func (m *HostResourceMutation) AddCPUThreads(u int32) {
	if m.addcpu_threads != nil {
		*m.addcpu_threads += u
	} else {
		m.addcpu_threads = &u
	}
}

// AddedCPUThreads returns the value that was added to the "cpu_threads" field in this mutation.
func (m *HostResourceMutation) AddedCPUThreads() (r int32, exists bool) {
	v := m.addcpu_threads
	if v == nil {
		return
	}
	return *v, true
}

// ClearCPUThreads clears the value of the "cpu_threads" field.
func (m *HostResourceMutation) ClearCPUThreads() {
	m.cpu_threads = nil
	m.addcpu_threads = nil
	m.clearedFields[hostresource.FieldCPUThreads] = struct{}{}
}

// CPUThreadsCleared returns if the "cpu_threads" field was cleared in this mutation.
func (m *HostResourceMutation) CPUThreadsCleared() bool {
	_, ok := m.clearedFields[hostresource.FieldCPUThreads]
	return ok
}

// ResetCPUThreads resets all changes to the "cpu_threads" field.
func (m *HostResourceMutation) ResetCPUThreads() {
	m.cpu_threads = nil
	m.addcpu_threads = nil
	delete(m.clearedFields, hostresource.FieldCPUThreads)
}

// SetGpuPciID sets the "gpu_pci_id" field.
func (m *HostResourceMutation) SetGpuPciID(s string) {
	m.gpu_pci_id = &s
}

// GpuPciID returns the value of the "gpu_pci_id" field in the mutation.
func (m *HostResourceMutation) GpuPciID() (r string, exists bool) {
	v := m.gpu_pci_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGpuPciID returns the old "gpu_pci_id" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldGpuPciID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGpuPciID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGpuPciID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGpuPciID: %w", err)
	}
	return oldValue.GpuPciID, nil
}

// ClearGpuPciID clears the value of the "gpu_pci_id" field.
func (m *HostResourceMutation) ClearGpuPciID() {
	m.gpu_pci_id = nil
	m.clearedFields[hostresource.FieldGpuPciID] = struct{}{}
}

// GpuPciIDCleared returns if the "gpu_pci_id" field was cleared in this mutation.
func (m *HostResourceMutation) GpuPciIDCleared() bool {
	_, ok := m.clearedFields[hostresource.FieldGpuPciID]
	return ok
}

// ResetGpuPciID resets all changes to the "gpu_pci_id" field.
func (m *HostResourceMutation) ResetGpuPciID() {
	m.gpu_pci_id = nil
	delete(m.clearedFields, hostresource.FieldGpuPciID)
}

// SetGpuProduct sets the "gpu_product" field.
func (m *HostResourceMutation) SetGpuProduct(s string) {
	m.gpu_product = &s
}

// GpuProduct returns the value of the "gpu_product" field in the mutation.
func (m *HostResourceMutation) GpuProduct() (r string, exists bool) {
	v := m.gpu_product
	if v == nil {
		return
	}
	return *v, true
}

// OldGpuProduct returns the old "gpu_product" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldGpuProduct(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGpuProduct is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGpuProduct requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGpuProduct: %w", err)
	}
	return oldValue.GpuProduct, nil
}

// ClearGpuProduct clears the value of the "gpu_product" field.
func (m *HostResourceMutation) ClearGpuProduct() {
	m.gpu_product = nil
	m.clearedFields[hostresource.FieldGpuProduct] = struct{}{}
}

// GpuProductCleared returns if the "gpu_product" field was cleared in this mutation.
func (m *HostResourceMutation) GpuProductCleared() bool {
	_, ok := m.clearedFields[hostresource.FieldGpuProduct]
	return ok
}

// ResetGpuProduct resets all changes to the "gpu_product" field.
func (m *HostResourceMutation) ResetGpuProduct() {
	m.gpu_product = nil
	delete(m.clearedFields, hostresource.FieldGpuProduct)
}

// SetGpuVendor sets the "gpu_vendor" field.
func (m *HostResourceMutation) SetGpuVendor(s string) {
	m.gpu_vendor = &s
}

// GpuVendor returns the value of the "gpu_vendor" field in the mutation.
func (m *HostResourceMutation) GpuVendor() (r string, exists bool) {
	v := m.gpu_vendor
	if v == nil {
		return
	}
	return *v, true
}

// OldGpuVendor returns the old "gpu_vendor" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldGpuVendor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGpuVendor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGpuVendor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGpuVendor: %w", err)
	}
	return oldValue.GpuVendor, nil
}

// ClearGpuVendor clears the value of the "gpu_vendor" field.
func (m *HostResourceMutation) ClearGpuVendor() {
	m.gpu_vendor = nil
	m.clearedFields[hostresource.FieldGpuVendor] = struct{}{}
}

// GpuVendorCleared returns if the "gpu_vendor" field was cleared in this mutation.
func (m *HostResourceMutation) GpuVendorCleared() bool {
	_, ok := m.clearedFields[hostresource.FieldGpuVendor]
	return ok
}

// ResetGpuVendor resets all changes to the "gpu_vendor" field.
func (m *HostResourceMutation) ResetGpuVendor() {
	m.gpu_vendor = nil
	delete(m.clearedFields, hostresource.FieldGpuVendor)
}

// SetMgmtIP sets the "mgmt_ip" field.
func (m *HostResourceMutation) SetMgmtIP(s string) {
	m.mgmt_ip = &s
}

// MgmtIP returns the value of the "mgmt_ip" field in the mutation.
func (m *HostResourceMutation) MgmtIP() (r string, exists bool) {
	v := m.mgmt_ip
	if v == nil {
		return
	}
	return *v, true
}

// OldMgmtIP returns the old "mgmt_ip" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldMgmtIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMgmtIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMgmtIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMgmtIP: %w", err)
	}
	return oldValue.MgmtIP, nil
}

// ClearMgmtIP clears the value of the "mgmt_ip" field.
func (m *HostResourceMutation) ClearMgmtIP() {
	m.mgmt_ip = nil
	m.clearedFields[hostresource.FieldMgmtIP] = struct{}{}
}

// MgmtIPCleared returns if the "mgmt_ip" field was cleared in this mutation.
func (m *HostResourceMutation) MgmtIPCleared() bool {
	_, ok := m.clearedFields[hostresource.FieldMgmtIP]
	return ok
}

// ResetMgmtIP resets all changes to the "mgmt_ip" field.
func (m *HostResourceMutation) ResetMgmtIP() {
	m.mgmt_ip = nil
	delete(m.clearedFields, hostresource.FieldMgmtIP)
}

// SetBmcKind sets the "bmc_kind" field.
func (m *HostResourceMutation) SetBmcKind(hk hostresource.BmcKind) {
	m.bmc_kind = &hk
}

// BmcKind returns the value of the "bmc_kind" field in the mutation.
func (m *HostResourceMutation) BmcKind() (r hostresource.BmcKind, exists bool) {
	v := m.bmc_kind
	if v == nil {
		return
	}
	return *v, true
}

// OldBmcKind returns the old "bmc_kind" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldBmcKind(ctx context.Context) (v hostresource.BmcKind, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBmcKind is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBmcKind requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBmcKind: %w", err)
	}
	return oldValue.BmcKind, nil
}

// ClearBmcKind clears the value of the "bmc_kind" field.
func (m *HostResourceMutation) ClearBmcKind() {
	m.bmc_kind = nil
	m.clearedFields[hostresource.FieldBmcKind] = struct{}{}
}

// BmcKindCleared returns if the "bmc_kind" field was cleared in this mutation.
func (m *HostResourceMutation) BmcKindCleared() bool {
	_, ok := m.clearedFields[hostresource.FieldBmcKind]
	return ok
}

// ResetBmcKind resets all changes to the "bmc_kind" field.
func (m *HostResourceMutation) ResetBmcKind() {
	m.bmc_kind = nil
	delete(m.clearedFields, hostresource.FieldBmcKind)
}

// SetBmcIP sets the "bmc_ip" field.
func (m *HostResourceMutation) SetBmcIP(s string) {
	m.bmc_ip = &s
}

// BmcIP returns the value of the "bmc_ip" field in the mutation.
func (m *HostResourceMutation) BmcIP() (r string, exists bool) {
	v := m.bmc_ip
	if v == nil {
		return
	}
	return *v, true
}

// OldBmcIP returns the old "bmc_ip" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldBmcIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBmcIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBmcIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBmcIP: %w", err)
	}
	return oldValue.BmcIP, nil
}

// ClearBmcIP clears the value of the "bmc_ip" field.
func (m *HostResourceMutation) ClearBmcIP() {
	m.bmc_ip = nil
	m.clearedFields[hostresource.FieldBmcIP] = struct{}{}
}

// BmcIPCleared returns if the "bmc_ip" field was cleared in this mutation.
func (m *HostResourceMutation) BmcIPCleared() bool {
	_, ok := m.clearedFields[hostresource.FieldBmcIP]
	return ok
}

// ResetBmcIP resets all changes to the "bmc_ip" field.
func (m *HostResourceMutation) ResetBmcIP() {
	m.bmc_ip = nil
	delete(m.clearedFields, hostresource.FieldBmcIP)
}

// SetBmcUsername sets the "bmc_username" field.
func (m *HostResourceMutation) SetBmcUsername(s string) {
	m.bmc_username = &s
}

// BmcUsername returns the value of the "bmc_username" field in the mutation.
func (m *HostResourceMutation) BmcUsername() (r string, exists bool) {
	v := m.bmc_username
	if v == nil {
		return
	}
	return *v, true
}

// OldBmcUsername returns the old "bmc_username" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldBmcUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBmcUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBmcUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBmcUsername: %w", err)
	}
	return oldValue.BmcUsername, nil
}

// ClearBmcUsername clears the value of the "bmc_username" field.
func (m *HostResourceMutation) ClearBmcUsername() {
	m.bmc_username = nil
	m.clearedFields[hostresource.FieldBmcUsername] = struct{}{}
}

// BmcUsernameCleared returns if the "bmc_username" field was cleared in this mutation.
func (m *HostResourceMutation) BmcUsernameCleared() bool {
	_, ok := m.clearedFields[hostresource.FieldBmcUsername]
	return ok
}

// ResetBmcUsername resets all changes to the "bmc_username" field.
func (m *HostResourceMutation) ResetBmcUsername() {
	m.bmc_username = nil
	delete(m.clearedFields, hostresource.FieldBmcUsername)
}

// SetBmcPassword sets the "bmc_password" field.
func (m *HostResourceMutation) SetBmcPassword(s string) {
	m.bmc_password = &s
}

// BmcPassword returns the value of the "bmc_password" field in the mutation.
func (m *HostResourceMutation) BmcPassword() (r string, exists bool) {
	v := m.bmc_password
	if v == nil {
		return
	}
	return *v, true
}

// OldBmcPassword returns the old "bmc_password" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldBmcPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBmcPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBmcPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBmcPassword: %w", err)
	}
	return oldValue.BmcPassword, nil
}

// ClearBmcPassword clears the value of the "bmc_password" field.
func (m *HostResourceMutation) ClearBmcPassword() {
	m.bmc_password = nil
	m.clearedFields[hostresource.FieldBmcPassword] = struct{}{}
}

// BmcPasswordCleared returns if the "bmc_password" field was cleared in this mutation.
func (m *HostResourceMutation) BmcPasswordCleared() bool {
	_, ok := m.clearedFields[hostresource.FieldBmcPassword]
	return ok
}

// ResetBmcPassword resets all changes to the "bmc_password" field.
func (m *HostResourceMutation) ResetBmcPassword() {
	m.bmc_password = nil
	delete(m.clearedFields, hostresource.FieldBmcPassword)
}

// SetPxeMAC sets the "pxe_mac" field.
func (m *HostResourceMutation) SetPxeMAC(s string) {
	m.pxe_mac = &s
}

// PxeMAC returns the value of the "pxe_mac" field in the mutation.
func (m *HostResourceMutation) PxeMAC() (r string, exists bool) {
	v := m.pxe_mac
	if v == nil {
		return
	}
	return *v, true
}

// OldPxeMAC returns the old "pxe_mac" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldPxeMAC(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPxeMAC is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPxeMAC requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPxeMAC: %w", err)
	}
	return oldValue.PxeMAC, nil
}

// ClearPxeMAC clears the value of the "pxe_mac" field.
func (m *HostResourceMutation) ClearPxeMAC() {
	m.pxe_mac = nil
	m.clearedFields[hostresource.FieldPxeMAC] = struct{}{}
}

// PxeMACCleared returns if the "pxe_mac" field was cleared in this mutation.
func (m *HostResourceMutation) PxeMACCleared() bool {
	_, ok := m.clearedFields[hostresource.FieldPxeMAC]
	return ok
}

// ResetPxeMAC resets all changes to the "pxe_mac" field.
func (m *HostResourceMutation) ResetPxeMAC() {
	m.pxe_mac = nil
	delete(m.clearedFields, hostresource.FieldPxeMAC)
}

// SetHostname sets the "hostname" field.
func (m *HostResourceMutation) SetHostname(s string) {
	m.hostname = &s
}

// Hostname returns the value of the "hostname" field in the mutation.
func (m *HostResourceMutation) Hostname() (r string, exists bool) {
	v := m.hostname
	if v == nil {
		return
	}
	return *v, true
}

// OldHostname returns the old "hostname" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldHostname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHostname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHostname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHostname: %w", err)
	}
	return oldValue.Hostname, nil
}

// ClearHostname clears the value of the "hostname" field.
func (m *HostResourceMutation) ClearHostname() {
	m.hostname = nil
	m.clearedFields[hostresource.FieldHostname] = struct{}{}
}

// HostnameCleared returns if the "hostname" field was cleared in this mutation.
func (m *HostResourceMutation) HostnameCleared() bool {
	_, ok := m.clearedFields[hostresource.FieldHostname]
	return ok
}

// ResetHostname resets all changes to the "hostname" field.
func (m *HostResourceMutation) ResetHostname() {
	m.hostname = nil
	delete(m.clearedFields, hostresource.FieldHostname)
}

// SetProductName sets the "product_name" field.
func (m *HostResourceMutation) SetProductName(s string) {
	m.product_name = &s
}

// ProductName returns the value of the "product_name" field in the mutation.
func (m *HostResourceMutation) ProductName() (r string, exists bool) {
	v := m.product_name
	if v == nil {
		return
	}
	return *v, true
}

// OldProductName returns the old "product_name" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldProductName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProductName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProductName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductName: %w", err)
	}
	return oldValue.ProductName, nil
}

// ClearProductName clears the value of the "product_name" field.
func (m *HostResourceMutation) ClearProductName() {
	m.product_name = nil
	m.clearedFields[hostresource.FieldProductName] = struct{}{}
}

// ProductNameCleared returns if the "product_name" field was cleared in this mutation.
func (m *HostResourceMutation) ProductNameCleared() bool {
	_, ok := m.clearedFields[hostresource.FieldProductName]
	return ok
}

// ResetProductName resets all changes to the "product_name" field.
func (m *HostResourceMutation) ResetProductName() {
	m.product_name = nil
	delete(m.clearedFields, hostresource.FieldProductName)
}

// SetBiosVersion sets the "bios_version" field.
func (m *HostResourceMutation) SetBiosVersion(s string) {
	m.bios_version = &s
}

// BiosVersion returns the value of the "bios_version" field in the mutation.
func (m *HostResourceMutation) BiosVersion() (r string, exists bool) {
	v := m.bios_version
	if v == nil {
		return
	}
	return *v, true
}

// OldBiosVersion returns the old "bios_version" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldBiosVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBiosVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBiosVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBiosVersion: %w", err)
	}
	return oldValue.BiosVersion, nil
}

// ClearBiosVersion clears the value of the "bios_version" field.
func (m *HostResourceMutation) ClearBiosVersion() {
	m.bios_version = nil
	m.clearedFields[hostresource.FieldBiosVersion] = struct{}{}
}

// BiosVersionCleared returns if the "bios_version" field was cleared in this mutation.
func (m *HostResourceMutation) BiosVersionCleared() bool {
	_, ok := m.clearedFields[hostresource.FieldBiosVersion]
	return ok
}

// ResetBiosVersion resets all changes to the "bios_version" field.
func (m *HostResourceMutation) ResetBiosVersion() {
	m.bios_version = nil
	delete(m.clearedFields, hostresource.FieldBiosVersion)
}

// SetBiosReleaseDate sets the "bios_release_date" field.
func (m *HostResourceMutation) SetBiosReleaseDate(s string) {
	m.bios_release_date = &s
}

// BiosReleaseDate returns the value of the "bios_release_date" field in the mutation.
func (m *HostResourceMutation) BiosReleaseDate() (r string, exists bool) {
	v := m.bios_release_date
	if v == nil {
		return
	}
	return *v, true
}

// OldBiosReleaseDate returns the old "bios_release_date" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldBiosReleaseDate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBiosReleaseDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBiosReleaseDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBiosReleaseDate: %w", err)
	}
	return oldValue.BiosReleaseDate, nil
}

// ClearBiosReleaseDate clears the value of the "bios_release_date" field.
func (m *HostResourceMutation) ClearBiosReleaseDate() {
	m.bios_release_date = nil
	m.clearedFields[hostresource.FieldBiosReleaseDate] = struct{}{}
}

// BiosReleaseDateCleared returns if the "bios_release_date" field was cleared in this mutation.
func (m *HostResourceMutation) BiosReleaseDateCleared() bool {
	_, ok := m.clearedFields[hostresource.FieldBiosReleaseDate]
	return ok
}

// ResetBiosReleaseDate resets all changes to the "bios_release_date" field.
func (m *HostResourceMutation) ResetBiosReleaseDate() {
	m.bios_release_date = nil
	delete(m.clearedFields, hostresource.FieldBiosReleaseDate)
}

// SetBiosVendor sets the "bios_vendor" field.
func (m *HostResourceMutation) SetBiosVendor(s string) {
	m.bios_vendor = &s
}

// BiosVendor returns the value of the "bios_vendor" field in the mutation.
func (m *HostResourceMutation) BiosVendor() (r string, exists bool) {
	v := m.bios_vendor
	if v == nil {
		return
	}
	return *v, true
}

// OldBiosVendor returns the old "bios_vendor" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldBiosVendor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBiosVendor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBiosVendor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBiosVendor: %w", err)
	}
	return oldValue.BiosVendor, nil
}

// ClearBiosVendor clears the value of the "bios_vendor" field.
func (m *HostResourceMutation) ClearBiosVendor() {
	m.bios_vendor = nil
	m.clearedFields[hostresource.FieldBiosVendor] = struct{}{}
}

// BiosVendorCleared returns if the "bios_vendor" field was cleared in this mutation.
func (m *HostResourceMutation) BiosVendorCleared() bool {
	_, ok := m.clearedFields[hostresource.FieldBiosVendor]
	return ok
}

// ResetBiosVendor resets all changes to the "bios_vendor" field.
func (m *HostResourceMutation) ResetBiosVendor() {
	m.bios_vendor = nil
	delete(m.clearedFields, hostresource.FieldBiosVendor)
}

// SetMetadata sets the "metadata" field.
func (m *HostResourceMutation) SetMetadata(s string) {
	m.metadata = &s
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *HostResourceMutation) Metadata() (r string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldMetadata(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *HostResourceMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[hostresource.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *HostResourceMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[hostresource.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *HostResourceMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, hostresource.FieldMetadata)
}

// SetDesiredPowerState sets the "desired_power_state" field.
func (m *HostResourceMutation) SetDesiredPowerState(hps hostresource.DesiredPowerState) {
	m.desired_power_state = &hps
}

// DesiredPowerState returns the value of the "desired_power_state" field in the mutation.
func (m *HostResourceMutation) DesiredPowerState() (r hostresource.DesiredPowerState, exists bool) {
	v := m.desired_power_state
	if v == nil {
		return
	}
	return *v, true
}

// OldDesiredPowerState returns the old "desired_power_state" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldDesiredPowerState(ctx context.Context) (v hostresource.DesiredPowerState, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesiredPowerState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesiredPowerState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesiredPowerState: %w", err)
	}
	return oldValue.DesiredPowerState, nil
}

// ClearDesiredPowerState clears the value of the "desired_power_state" field.
func (m *HostResourceMutation) ClearDesiredPowerState() {
	m.desired_power_state = nil
	m.clearedFields[hostresource.FieldDesiredPowerState] = struct{}{}
}

// DesiredPowerStateCleared returns if the "desired_power_state" field was cleared in this mutation.
func (m *HostResourceMutation) DesiredPowerStateCleared() bool {
	_, ok := m.clearedFields[hostresource.FieldDesiredPowerState]
	return ok
}

// ResetDesiredPowerState resets all changes to the "desired_power_state" field.
func (m *HostResourceMutation) ResetDesiredPowerState() {
	m.desired_power_state = nil
	delete(m.clearedFields, hostresource.FieldDesiredPowerState)
}

// SetCurrentPowerState sets the "current_power_state" field.
func (m *HostResourceMutation) SetCurrentPowerState(hps hostresource.CurrentPowerState) {
	m.current_power_state = &hps
}

// CurrentPowerState returns the value of the "current_power_state" field in the mutation.
func (m *HostResourceMutation) CurrentPowerState() (r hostresource.CurrentPowerState, exists bool) {
	v := m.current_power_state
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrentPowerState returns the old "current_power_state" field's value of the HostResource entity.
// If the HostResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostResourceMutation) OldCurrentPowerState(ctx context.Context) (v hostresource.CurrentPowerState, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrentPowerState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrentPowerState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrentPowerState: %w", err)
	}
	return oldValue.CurrentPowerState, nil
}

// ClearCurrentPowerState clears the value of the "current_power_state" field.
func (m *HostResourceMutation) ClearCurrentPowerState() {
	m.current_power_state = nil
	m.clearedFields[hostresource.FieldCurrentPowerState] = struct{}{}
}

// CurrentPowerStateCleared returns if the "current_power_state" field was cleared in this mutation.
func (m *HostResourceMutation) CurrentPowerStateCleared() bool {
	_, ok := m.clearedFields[hostresource.FieldCurrentPowerState]
	return ok
}

// ResetCurrentPowerState resets all changes to the "current_power_state" field.
func (m *HostResourceMutation) ResetCurrentPowerState() {
	m.current_power_state = nil
	delete(m.clearedFields, hostresource.FieldCurrentPowerState)
}

// SetSiteID sets the "site" edge to the SiteResource entity by id.
func (m *HostResourceMutation) SetSiteID(id int) {
	m.site = &id
}

// ClearSite clears the "site" edge to the SiteResource entity.
func (m *HostResourceMutation) ClearSite() {
	m.clearedsite = true
}

// SiteCleared reports if the "site" edge to the SiteResource entity was cleared.
func (m *HostResourceMutation) SiteCleared() bool {
	return m.clearedsite
}

// SiteID returns the "site" edge ID in the mutation.
func (m *HostResourceMutation) SiteID() (id int, exists bool) {
	if m.site != nil {
		return *m.site, true
	}
	return
}

// SiteIDs returns the "site" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SiteID instead. It exists only for internal usage by the builders.
func (m *HostResourceMutation) SiteIDs() (ids []int) {
	if id := m.site; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSite resets all changes to the "site" edge.
func (m *HostResourceMutation) ResetSite() {
	m.site = nil
	m.clearedsite = false
}

// SetProviderID sets the "provider" edge to the ProviderResource entity by id.
func (m *HostResourceMutation) SetProviderID(id int) {
	m.provider = &id
}

// ClearProvider clears the "provider" edge to the ProviderResource entity.
func (m *HostResourceMutation) ClearProvider() {
	m.clearedprovider = true
}

// ProviderCleared reports if the "provider" edge to the ProviderResource entity was cleared.
func (m *HostResourceMutation) ProviderCleared() bool {
	return m.clearedprovider
}

// ProviderID returns the "provider" edge ID in the mutation.
func (m *HostResourceMutation) ProviderID() (id int, exists bool) {
	if m.provider != nil {
		return *m.provider, true
	}
	return
}

// ProviderIDs returns the "provider" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProviderID instead. It exists only for internal usage by the builders.
func (m *HostResourceMutation) ProviderIDs() (ids []int) {
	if id := m.provider; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProvider resets all changes to the "provider" edge.
func (m *HostResourceMutation) ResetProvider() {
	m.provider = nil
	m.clearedprovider = false
}

// SetProjectID sets the "project" edge to the ProjectResource entity by id.
func (m *HostResourceMutation) SetProjectID(id int) {
	m.project = &id
}

// ClearProject clears the "project" edge to the ProjectResource entity.
func (m *HostResourceMutation) ClearProject() {
	m.clearedproject = true
}

// ProjectCleared reports if the "project" edge to the ProjectResource entity was cleared.
func (m *HostResourceMutation) ProjectCleared() bool {
	return m.clearedproject
}

// ProjectID returns the "project" edge ID in the mutation.
func (m *HostResourceMutation) ProjectID() (id int, exists bool) {
	if m.project != nil {
		return *m.project, true
	}
	return
}

// ProjectIDs returns the "project" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProjectID instead. It exists only for internal usage by the builders.
func (m *HostResourceMutation) ProjectIDs() (ids []int) {
	if id := m.project; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProject resets all changes to the "project" edge.
func (m *HostResourceMutation) ResetProject() {
	m.project = nil
	m.clearedproject = false
}

// SetUserID sets the "user" edge to the UserResource entity by id.
func (m *HostResourceMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the UserResource entity.
func (m *HostResourceMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the UserResource entity was cleared.
func (m *HostResourceMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *HostResourceMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *HostResourceMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *HostResourceMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// AddHostStorageIDs adds the "host_storages" edge to the HoststorageResource entity by ids.
func (m *HostResourceMutation) AddHostStorageIDs(ids ...int) {
	if m.host_storages == nil {
		m.host_storages = make(map[int]struct{})
	}
	for i := range ids {
		m.host_storages[ids[i]] = struct{}{}
	}
}

// ClearHostStorages clears the "host_storages" edge to the HoststorageResource entity.
func (m *HostResourceMutation) ClearHostStorages() {
	m.clearedhost_storages = true
}

// HostStoragesCleared reports if the "host_storages" edge to the HoststorageResource entity was cleared.
func (m *HostResourceMutation) HostStoragesCleared() bool {
	return m.clearedhost_storages
}

// RemoveHostStorageIDs removes the "host_storages" edge to the HoststorageResource entity by IDs.
func (m *HostResourceMutation) RemoveHostStorageIDs(ids ...int) {
	if m.removedhost_storages == nil {
		m.removedhost_storages = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.host_storages, ids[i])
		m.removedhost_storages[ids[i]] = struct{}{}
	}
}

// RemovedHostStorages returns the removed IDs of the "host_storages" edge to the HoststorageResource entity.
func (m *HostResourceMutation) RemovedHostStoragesIDs() (ids []int) {
	for id := range m.removedhost_storages {
		ids = append(ids, id)
	}
	return
}

// HostStoragesIDs returns the "host_storages" edge IDs in the mutation.
func (m *HostResourceMutation) HostStoragesIDs() (ids []int) {
	for id := range m.host_storages {
		ids = append(ids, id)
	}
	return
}

// ResetHostStorages resets all changes to the "host_storages" edge.
func (m *HostResourceMutation) ResetHostStorages() {
	m.host_storages = nil
	m.clearedhost_storages = false
	m.removedhost_storages = nil
}

// AddHostNicIDs adds the "host_nics" edge to the HostnicResource entity by ids.
func (m *HostResourceMutation) AddHostNicIDs(ids ...int) {
	if m.host_nics == nil {
		m.host_nics = make(map[int]struct{})
	}
	for i := range ids {
		m.host_nics[ids[i]] = struct{}{}
	}
}

// ClearHostNics clears the "host_nics" edge to the HostnicResource entity.
func (m *HostResourceMutation) ClearHostNics() {
	m.clearedhost_nics = true
}

// HostNicsCleared reports if the "host_nics" edge to the HostnicResource entity was cleared.
func (m *HostResourceMutation) HostNicsCleared() bool {
	return m.clearedhost_nics
}

// RemoveHostNicIDs removes the "host_nics" edge to the HostnicResource entity by IDs.
func (m *HostResourceMutation) RemoveHostNicIDs(ids ...int) {
	if m.removedhost_nics == nil {
		m.removedhost_nics = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.host_nics, ids[i])
		m.removedhost_nics[ids[i]] = struct{}{}
	}
}

// RemovedHostNics returns the removed IDs of the "host_nics" edge to the HostnicResource entity.
func (m *HostResourceMutation) RemovedHostNicsIDs() (ids []int) {
	for id := range m.removedhost_nics {
		ids = append(ids, id)
	}
	return
}

// HostNicsIDs returns the "host_nics" edge IDs in the mutation.
func (m *HostResourceMutation) HostNicsIDs() (ids []int) {
	for id := range m.host_nics {
		ids = append(ids, id)
	}
	return
}

// ResetHostNics resets all changes to the "host_nics" edge.
func (m *HostResourceMutation) ResetHostNics() {
	m.host_nics = nil
	m.clearedhost_nics = false
	m.removedhost_nics = nil
}

// AddHostUsbIDs adds the "host_usbs" edge to the HostusbResource entity by ids.
func (m *HostResourceMutation) AddHostUsbIDs(ids ...int) {
	if m.host_usbs == nil {
		m.host_usbs = make(map[int]struct{})
	}
	for i := range ids {
		m.host_usbs[ids[i]] = struct{}{}
	}
}

// ClearHostUsbs clears the "host_usbs" edge to the HostusbResource entity.
func (m *HostResourceMutation) ClearHostUsbs() {
	m.clearedhost_usbs = true
}

// HostUsbsCleared reports if the "host_usbs" edge to the HostusbResource entity was cleared.
func (m *HostResourceMutation) HostUsbsCleared() bool {
	return m.clearedhost_usbs
}

// RemoveHostUsbIDs removes the "host_usbs" edge to the HostusbResource entity by IDs.
func (m *HostResourceMutation) RemoveHostUsbIDs(ids ...int) {
	if m.removedhost_usbs == nil {
		m.removedhost_usbs = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.host_usbs, ids[i])
		m.removedhost_usbs[ids[i]] = struct{}{}
	}
}

// RemovedHostUsbs returns the removed IDs of the "host_usbs" edge to the HostusbResource entity.
func (m *HostResourceMutation) RemovedHostUsbsIDs() (ids []int) {
	for id := range m.removedhost_usbs {
		ids = append(ids, id)
	}
	return
}

// HostUsbsIDs returns the "host_usbs" edge IDs in the mutation.
func (m *HostResourceMutation) HostUsbsIDs() (ids []int) {
	for id := range m.host_usbs {
		ids = append(ids, id)
	}
	return
}

// ResetHostUsbs resets all changes to the "host_usbs" edge.
func (m *HostResourceMutation) ResetHostUsbs() {
	m.host_usbs = nil
	m.clearedhost_usbs = false
	m.removedhost_usbs = nil
}

// SetInstanceID sets the "instance" edge to the InstanceResource entity by id.
func (m *HostResourceMutation) SetInstanceID(id int) {
	m.instance = &id
}

// ClearInstance clears the "instance" edge to the InstanceResource entity.
func (m *HostResourceMutation) ClearInstance() {
	m.clearedinstance = true
}

// InstanceCleared reports if the "instance" edge to the InstanceResource entity was cleared.
func (m *HostResourceMutation) InstanceCleared() bool {
	return m.clearedinstance
}

// InstanceID returns the "instance" edge ID in the mutation.
func (m *HostResourceMutation) InstanceID() (id int, exists bool) {
	if m.instance != nil {
		return *m.instance, true
	}
	return
}

// InstanceIDs returns the "instance" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// InstanceID instead. It exists only for internal usage by the builders.
func (m *HostResourceMutation) InstanceIDs() (ids []int) {
	if id := m.instance; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetInstance resets all changes to the "instance" edge.
func (m *HostResourceMutation) ResetInstance() {
	m.instance = nil
	m.clearedinstance = false
}

// Where appends a list predicates to the HostResourceMutation builder.
func (m *HostResourceMutation) Where(ps ...predicate.HostResource) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the HostResourceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *HostResourceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.HostResource, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *HostResourceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *HostResourceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (HostResource).
func (m *HostResourceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HostResourceMutation) Fields() []string {
	fields := make([]string, 0, 37)
	if m.resource_id != nil {
		fields = append(fields, hostresource.FieldResourceID)
	}
	if m.kind != nil {
		fields = append(fields, hostresource.FieldKind)
	}
	if m.description != nil {
		fields = append(fields, hostresource.FieldDescription)
	}
	if m.desired_state != nil {
		fields = append(fields, hostresource.FieldDesiredState)
	}
	if m.current_state != nil {
		fields = append(fields, hostresource.FieldCurrentState)
	}
	if m.provider_status != nil {
		fields = append(fields, hostresource.FieldProviderStatus)
	}
	if m.host_status != nil {
		fields = append(fields, hostresource.FieldHostStatus)
	}
	if m.provider_status_detail != nil {
		fields = append(fields, hostresource.FieldProviderStatusDetail)
	}
	if m.note != nil {
		fields = append(fields, hostresource.FieldNote)
	}
	if m.consumer_id != nil {
		fields = append(fields, hostresource.FieldConsumerID)
	}
	if m.hardware_kind != nil {
		fields = append(fields, hostresource.FieldHardwareKind)
	}
	if m.serial_number != nil {
		fields = append(fields, hostresource.FieldSerialNumber)
	}
	if m.uuid != nil {
		fields = append(fields, hostresource.FieldUUID)
	}
	if m.memory_bytes != nil {
		fields = append(fields, hostresource.FieldMemoryBytes)
	}
	if m.cpu_model != nil {
		fields = append(fields, hostresource.FieldCPUModel)
	}
	if m.cpu_sockets != nil {
		fields = append(fields, hostresource.FieldCPUSockets)
	}
	if m.cpu_cores != nil {
		fields = append(fields, hostresource.FieldCPUCores)
	}
	if m.cpu_capabilities != nil {
		fields = append(fields, hostresource.FieldCPUCapabilities)
	}
	if m.cpu_architecture != nil {
		fields = append(fields, hostresource.FieldCPUArchitecture)
	}
	if m.cpu_threads != nil {
		fields = append(fields, hostresource.FieldCPUThreads)
	}
	if m.gpu_pci_id != nil {
		fields = append(fields, hostresource.FieldGpuPciID)
	}
	if m.gpu_product != nil {
		fields = append(fields, hostresource.FieldGpuProduct)
	}
	if m.gpu_vendor != nil {
		fields = append(fields, hostresource.FieldGpuVendor)
	}
	if m.mgmt_ip != nil {
		fields = append(fields, hostresource.FieldMgmtIP)
	}
	if m.bmc_kind != nil {
		fields = append(fields, hostresource.FieldBmcKind)
	}
	if m.bmc_ip != nil {
		fields = append(fields, hostresource.FieldBmcIP)
	}
	if m.bmc_username != nil {
		fields = append(fields, hostresource.FieldBmcUsername)
	}
	if m.bmc_password != nil {
		fields = append(fields, hostresource.FieldBmcPassword)
	}
	if m.pxe_mac != nil {
		fields = append(fields, hostresource.FieldPxeMAC)
	}
	if m.hostname != nil {
		fields = append(fields, hostresource.FieldHostname)
	}
	if m.product_name != nil {
		fields = append(fields, hostresource.FieldProductName)
	}
	if m.bios_version != nil {
		fields = append(fields, hostresource.FieldBiosVersion)
	}
	if m.bios_release_date != nil {
		fields = append(fields, hostresource.FieldBiosReleaseDate)
	}
	if m.bios_vendor != nil {
		fields = append(fields, hostresource.FieldBiosVendor)
	}
	if m.metadata != nil {
		fields = append(fields, hostresource.FieldMetadata)
	}
	if m.desired_power_state != nil {
		fields = append(fields, hostresource.FieldDesiredPowerState)
	}
	if m.current_power_state != nil {
		fields = append(fields, hostresource.FieldCurrentPowerState)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HostResourceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case hostresource.FieldResourceID:
		return m.ResourceID()
	case hostresource.FieldKind:
		return m.Kind()
	case hostresource.FieldDescription:
		return m.Description()
	case hostresource.FieldDesiredState:
		return m.DesiredState()
	case hostresource.FieldCurrentState:
		return m.CurrentState()
	case hostresource.FieldProviderStatus:
		return m.ProviderStatus()
	case hostresource.FieldHostStatus:
		return m.HostStatus()
	case hostresource.FieldProviderStatusDetail:
		return m.ProviderStatusDetail()
	case hostresource.FieldNote:
		return m.Note()
	case hostresource.FieldConsumerID:
		return m.ConsumerID()
	case hostresource.FieldHardwareKind:
		return m.HardwareKind()
	case hostresource.FieldSerialNumber:
		return m.SerialNumber()
	case hostresource.FieldUUID:
		return m.UUID()
	case hostresource.FieldMemoryBytes:
		return m.MemoryBytes()
	case hostresource.FieldCPUModel:
		return m.CPUModel()
	case hostresource.FieldCPUSockets:
		return m.CPUSockets()
	case hostresource.FieldCPUCores:
		return m.CPUCores()
	case hostresource.FieldCPUCapabilities:
		return m.CPUCapabilities()
	case hostresource.FieldCPUArchitecture:
		return m.CPUArchitecture()
	case hostresource.FieldCPUThreads:
		return m.CPUThreads()
	case hostresource.FieldGpuPciID:
		return m.GpuPciID()
	case hostresource.FieldGpuProduct:
		return m.GpuProduct()
	case hostresource.FieldGpuVendor:
		return m.GpuVendor()
	case hostresource.FieldMgmtIP:
		return m.MgmtIP()
	case hostresource.FieldBmcKind:
		return m.BmcKind()
	case hostresource.FieldBmcIP:
		return m.BmcIP()
	case hostresource.FieldBmcUsername:
		return m.BmcUsername()
	case hostresource.FieldBmcPassword:
		return m.BmcPassword()
	case hostresource.FieldPxeMAC:
		return m.PxeMAC()
	case hostresource.FieldHostname:
		return m.Hostname()
	case hostresource.FieldProductName:
		return m.ProductName()
	case hostresource.FieldBiosVersion:
		return m.BiosVersion()
	case hostresource.FieldBiosReleaseDate:
		return m.BiosReleaseDate()
	case hostresource.FieldBiosVendor:
		return m.BiosVendor()
	case hostresource.FieldMetadata:
		return m.Metadata()
	case hostresource.FieldDesiredPowerState:
		return m.DesiredPowerState()
	case hostresource.FieldCurrentPowerState:
		return m.CurrentPowerState()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HostResourceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case hostresource.FieldResourceID:
		return m.OldResourceID(ctx)
	case hostresource.FieldKind:
		return m.OldKind(ctx)
	case hostresource.FieldDescription:
		return m.OldDescription(ctx)
	case hostresource.FieldDesiredState:
		return m.OldDesiredState(ctx)
	case hostresource.FieldCurrentState:
		return m.OldCurrentState(ctx)
	case hostresource.FieldProviderStatus:
		return m.OldProviderStatus(ctx)
	case hostresource.FieldHostStatus:
		return m.OldHostStatus(ctx)
	case hostresource.FieldProviderStatusDetail:
		return m.OldProviderStatusDetail(ctx)
	case hostresource.FieldNote:
		return m.OldNote(ctx)
	case hostresource.FieldConsumerID:
		return m.OldConsumerID(ctx)
	case hostresource.FieldHardwareKind:
		return m.OldHardwareKind(ctx)
	case hostresource.FieldSerialNumber:
		return m.OldSerialNumber(ctx)
	case hostresource.FieldUUID:
		return m.OldUUID(ctx)
	case hostresource.FieldMemoryBytes:
		return m.OldMemoryBytes(ctx)
	case hostresource.FieldCPUModel:
		return m.OldCPUModel(ctx)
	case hostresource.FieldCPUSockets:
		return m.OldCPUSockets(ctx)
	case hostresource.FieldCPUCores:
		return m.OldCPUCores(ctx)
	case hostresource.FieldCPUCapabilities:
		return m.OldCPUCapabilities(ctx)
	case hostresource.FieldCPUArchitecture:
		return m.OldCPUArchitecture(ctx)
	case hostresource.FieldCPUThreads:
		return m.OldCPUThreads(ctx)
	case hostresource.FieldGpuPciID:
		return m.OldGpuPciID(ctx)
	case hostresource.FieldGpuProduct:
		return m.OldGpuProduct(ctx)
	case hostresource.FieldGpuVendor:
		return m.OldGpuVendor(ctx)
	case hostresource.FieldMgmtIP:
		return m.OldMgmtIP(ctx)
	case hostresource.FieldBmcKind:
		return m.OldBmcKind(ctx)
	case hostresource.FieldBmcIP:
		return m.OldBmcIP(ctx)
	case hostresource.FieldBmcUsername:
		return m.OldBmcUsername(ctx)
	case hostresource.FieldBmcPassword:
		return m.OldBmcPassword(ctx)
	case hostresource.FieldPxeMAC:
		return m.OldPxeMAC(ctx)
	case hostresource.FieldHostname:
		return m.OldHostname(ctx)
	case hostresource.FieldProductName:
		return m.OldProductName(ctx)
	case hostresource.FieldBiosVersion:
		return m.OldBiosVersion(ctx)
	case hostresource.FieldBiosReleaseDate:
		return m.OldBiosReleaseDate(ctx)
	case hostresource.FieldBiosVendor:
		return m.OldBiosVendor(ctx)
	case hostresource.FieldMetadata:
		return m.OldMetadata(ctx)
	case hostresource.FieldDesiredPowerState:
		return m.OldDesiredPowerState(ctx)
	case hostresource.FieldCurrentPowerState:
		return m.OldCurrentPowerState(ctx)
	}
	return nil, fmt.Errorf("unknown HostResource field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HostResourceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case hostresource.FieldResourceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResourceID(v)
		return nil
	case hostresource.FieldKind:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKind(v)
		return nil
	case hostresource.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case hostresource.FieldDesiredState:
		v, ok := value.(hostresource.DesiredState)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesiredState(v)
		return nil
	case hostresource.FieldCurrentState:
		v, ok := value.(hostresource.CurrentState)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrentState(v)
		return nil
	case hostresource.FieldProviderStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProviderStatus(v)
		return nil
	case hostresource.FieldHostStatus:
		v, ok := value.(hostresource.HostStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHostStatus(v)
		return nil
	case hostresource.FieldProviderStatusDetail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProviderStatusDetail(v)
		return nil
	case hostresource.FieldNote:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNote(v)
		return nil
	case hostresource.FieldConsumerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConsumerID(v)
		return nil
	case hostresource.FieldHardwareKind:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHardwareKind(v)
		return nil
	case hostresource.FieldSerialNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSerialNumber(v)
		return nil
	case hostresource.FieldUUID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUUID(v)
		return nil
	case hostresource.FieldMemoryBytes:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemoryBytes(v)
		return nil
	case hostresource.FieldCPUModel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCPUModel(v)
		return nil
	case hostresource.FieldCPUSockets:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCPUSockets(v)
		return nil
	case hostresource.FieldCPUCores:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCPUCores(v)
		return nil
	case hostresource.FieldCPUCapabilities:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCPUCapabilities(v)
		return nil
	case hostresource.FieldCPUArchitecture:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCPUArchitecture(v)
		return nil
	case hostresource.FieldCPUThreads:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCPUThreads(v)
		return nil
	case hostresource.FieldGpuPciID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGpuPciID(v)
		return nil
	case hostresource.FieldGpuProduct:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGpuProduct(v)
		return nil
	case hostresource.FieldGpuVendor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGpuVendor(v)
		return nil
	case hostresource.FieldMgmtIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMgmtIP(v)
		return nil
	case hostresource.FieldBmcKind:
		v, ok := value.(hostresource.BmcKind)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBmcKind(v)
		return nil
	case hostresource.FieldBmcIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBmcIP(v)
		return nil
	case hostresource.FieldBmcUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBmcUsername(v)
		return nil
	case hostresource.FieldBmcPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBmcPassword(v)
		return nil
	case hostresource.FieldPxeMAC:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPxeMAC(v)
		return nil
	case hostresource.FieldHostname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHostname(v)
		return nil
	case hostresource.FieldProductName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductName(v)
		return nil
	case hostresource.FieldBiosVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBiosVersion(v)
		return nil
	case hostresource.FieldBiosReleaseDate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBiosReleaseDate(v)
		return nil
	case hostresource.FieldBiosVendor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBiosVendor(v)
		return nil
	case hostresource.FieldMetadata:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case hostresource.FieldDesiredPowerState:
		v, ok := value.(hostresource.DesiredPowerState)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesiredPowerState(v)
		return nil
	case hostresource.FieldCurrentPowerState:
		v, ok := value.(hostresource.CurrentPowerState)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrentPowerState(v)
		return nil
	}
	return fmt.Errorf("unknown HostResource field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HostResourceMutation) AddedFields() []string {
	var fields []string
	if m.addmemory_bytes != nil {
		fields = append(fields, hostresource.FieldMemoryBytes)
	}
	if m.addcpu_sockets != nil {
		fields = append(fields, hostresource.FieldCPUSockets)
	}
	if m.addcpu_cores != nil {
		fields = append(fields, hostresource.FieldCPUCores)
	}
	if m.addcpu_threads != nil {
		fields = append(fields, hostresource.FieldCPUThreads)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HostResourceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case hostresource.FieldMemoryBytes:
		return m.AddedMemoryBytes()
	case hostresource.FieldCPUSockets:
		return m.AddedCPUSockets()
	case hostresource.FieldCPUCores:
		return m.AddedCPUCores()
	case hostresource.FieldCPUThreads:
		return m.AddedCPUThreads()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HostResourceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case hostresource.FieldMemoryBytes:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMemoryBytes(v)
		return nil
	case hostresource.FieldCPUSockets:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCPUSockets(v)
		return nil
	case hostresource.FieldCPUCores:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCPUCores(v)
		return nil
	case hostresource.FieldCPUThreads:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCPUThreads(v)
		return nil
	}
	return fmt.Errorf("unknown HostResource numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HostResourceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(hostresource.FieldKind) {
		fields = append(fields, hostresource.FieldKind)
	}
	if m.FieldCleared(hostresource.FieldDescription) {
		fields = append(fields, hostresource.FieldDescription)
	}
	if m.FieldCleared(hostresource.FieldDesiredState) {
		fields = append(fields, hostresource.FieldDesiredState)
	}
	if m.FieldCleared(hostresource.FieldCurrentState) {
		fields = append(fields, hostresource.FieldCurrentState)
	}
	if m.FieldCleared(hostresource.FieldProviderStatus) {
		fields = append(fields, hostresource.FieldProviderStatus)
	}
	if m.FieldCleared(hostresource.FieldHostStatus) {
		fields = append(fields, hostresource.FieldHostStatus)
	}
	if m.FieldCleared(hostresource.FieldProviderStatusDetail) {
		fields = append(fields, hostresource.FieldProviderStatusDetail)
	}
	if m.FieldCleared(hostresource.FieldNote) {
		fields = append(fields, hostresource.FieldNote)
	}
	if m.FieldCleared(hostresource.FieldConsumerID) {
		fields = append(fields, hostresource.FieldConsumerID)
	}
	if m.FieldCleared(hostresource.FieldHardwareKind) {
		fields = append(fields, hostresource.FieldHardwareKind)
	}
	if m.FieldCleared(hostresource.FieldSerialNumber) {
		fields = append(fields, hostresource.FieldSerialNumber)
	}
	if m.FieldCleared(hostresource.FieldUUID) {
		fields = append(fields, hostresource.FieldUUID)
	}
	if m.FieldCleared(hostresource.FieldMemoryBytes) {
		fields = append(fields, hostresource.FieldMemoryBytes)
	}
	if m.FieldCleared(hostresource.FieldCPUModel) {
		fields = append(fields, hostresource.FieldCPUModel)
	}
	if m.FieldCleared(hostresource.FieldCPUSockets) {
		fields = append(fields, hostresource.FieldCPUSockets)
	}
	if m.FieldCleared(hostresource.FieldCPUCores) {
		fields = append(fields, hostresource.FieldCPUCores)
	}
	if m.FieldCleared(hostresource.FieldCPUCapabilities) {
		fields = append(fields, hostresource.FieldCPUCapabilities)
	}
	if m.FieldCleared(hostresource.FieldCPUArchitecture) {
		fields = append(fields, hostresource.FieldCPUArchitecture)
	}
	if m.FieldCleared(hostresource.FieldCPUThreads) {
		fields = append(fields, hostresource.FieldCPUThreads)
	}
	if m.FieldCleared(hostresource.FieldGpuPciID) {
		fields = append(fields, hostresource.FieldGpuPciID)
	}
	if m.FieldCleared(hostresource.FieldGpuProduct) {
		fields = append(fields, hostresource.FieldGpuProduct)
	}
	if m.FieldCleared(hostresource.FieldGpuVendor) {
		fields = append(fields, hostresource.FieldGpuVendor)
	}
	if m.FieldCleared(hostresource.FieldMgmtIP) {
		fields = append(fields, hostresource.FieldMgmtIP)
	}
	if m.FieldCleared(hostresource.FieldBmcKind) {
		fields = append(fields, hostresource.FieldBmcKind)
	}
	if m.FieldCleared(hostresource.FieldBmcIP) {
		fields = append(fields, hostresource.FieldBmcIP)
	}
	if m.FieldCleared(hostresource.FieldBmcUsername) {
		fields = append(fields, hostresource.FieldBmcUsername)
	}
	if m.FieldCleared(hostresource.FieldBmcPassword) {
		fields = append(fields, hostresource.FieldBmcPassword)
	}
	if m.FieldCleared(hostresource.FieldPxeMAC) {
		fields = append(fields, hostresource.FieldPxeMAC)
	}
	if m.FieldCleared(hostresource.FieldHostname) {
		fields = append(fields, hostresource.FieldHostname)
	}
	if m.FieldCleared(hostresource.FieldProductName) {
		fields = append(fields, hostresource.FieldProductName)
	}
	if m.FieldCleared(hostresource.FieldBiosVersion) {
		fields = append(fields, hostresource.FieldBiosVersion)
	}
	if m.FieldCleared(hostresource.FieldBiosReleaseDate) {
		fields = append(fields, hostresource.FieldBiosReleaseDate)
	}
	if m.FieldCleared(hostresource.FieldBiosVendor) {
		fields = append(fields, hostresource.FieldBiosVendor)
	}
	if m.FieldCleared(hostresource.FieldMetadata) {
		fields = append(fields, hostresource.FieldMetadata)
	}
	if m.FieldCleared(hostresource.FieldDesiredPowerState) {
		fields = append(fields, hostresource.FieldDesiredPowerState)
	}
	if m.FieldCleared(hostresource.FieldCurrentPowerState) {
		fields = append(fields, hostresource.FieldCurrentPowerState)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HostResourceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HostResourceMutation) ClearField(name string) error {
	switch name {
	case hostresource.FieldKind:
		m.ClearKind()
		return nil
	case hostresource.FieldDescription:
		m.ClearDescription()
		return nil
	case hostresource.FieldDesiredState:
		m.ClearDesiredState()
		return nil
	case hostresource.FieldCurrentState:
		m.ClearCurrentState()
		return nil
	case hostresource.FieldProviderStatus:
		m.ClearProviderStatus()
		return nil
	case hostresource.FieldHostStatus:
		m.ClearHostStatus()
		return nil
	case hostresource.FieldProviderStatusDetail:
		m.ClearProviderStatusDetail()
		return nil
	case hostresource.FieldNote:
		m.ClearNote()
		return nil
	case hostresource.FieldConsumerID:
		m.ClearConsumerID()
		return nil
	case hostresource.FieldHardwareKind:
		m.ClearHardwareKind()
		return nil
	case hostresource.FieldSerialNumber:
		m.ClearSerialNumber()
		return nil
	case hostresource.FieldUUID:
		m.ClearUUID()
		return nil
	case hostresource.FieldMemoryBytes:
		m.ClearMemoryBytes()
		return nil
	case hostresource.FieldCPUModel:
		m.ClearCPUModel()
		return nil
	case hostresource.FieldCPUSockets:
		m.ClearCPUSockets()
		return nil
	case hostresource.FieldCPUCores:
		m.ClearCPUCores()
		return nil
	case hostresource.FieldCPUCapabilities:
		m.ClearCPUCapabilities()
		return nil
	case hostresource.FieldCPUArchitecture:
		m.ClearCPUArchitecture()
		return nil
	case hostresource.FieldCPUThreads:
		m.ClearCPUThreads()
		return nil
	case hostresource.FieldGpuPciID:
		m.ClearGpuPciID()
		return nil
	case hostresource.FieldGpuProduct:
		m.ClearGpuProduct()
		return nil
	case hostresource.FieldGpuVendor:
		m.ClearGpuVendor()
		return nil
	case hostresource.FieldMgmtIP:
		m.ClearMgmtIP()
		return nil
	case hostresource.FieldBmcKind:
		m.ClearBmcKind()
		return nil
	case hostresource.FieldBmcIP:
		m.ClearBmcIP()
		return nil
	case hostresource.FieldBmcUsername:
		m.ClearBmcUsername()
		return nil
	case hostresource.FieldBmcPassword:
		m.ClearBmcPassword()
		return nil
	case hostresource.FieldPxeMAC:
		m.ClearPxeMAC()
		return nil
	case hostresource.FieldHostname:
		m.ClearHostname()
		return nil
	case hostresource.FieldProductName:
		m.ClearProductName()
		return nil
	case hostresource.FieldBiosVersion:
		m.ClearBiosVersion()
		return nil
	case hostresource.FieldBiosReleaseDate:
		m.ClearBiosReleaseDate()
		return nil
	case hostresource.FieldBiosVendor:
		m.ClearBiosVendor()
		return nil
	case hostresource.FieldMetadata:
		m.ClearMetadata()
		return nil
	case hostresource.FieldDesiredPowerState:
		m.ClearDesiredPowerState()
		return nil
	case hostresource.FieldCurrentPowerState:
		m.ClearCurrentPowerState()
		return nil
	}
	return fmt.Errorf("unknown HostResource nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HostResourceMutation) ResetField(name string) error {
	switch name {
	case hostresource.FieldResourceID:
		m.ResetResourceID()
		return nil
	case hostresource.FieldKind:
		m.ResetKind()
		return nil
	case hostresource.FieldDescription:
		m.ResetDescription()
		return nil
	case hostresource.FieldDesiredState:
		m.ResetDesiredState()
		return nil
	case hostresource.FieldCurrentState:
		m.ResetCurrentState()
		return nil
	case hostresource.FieldProviderStatus:
		m.ResetProviderStatus()
		return nil
	case hostresource.FieldHostStatus:
		m.ResetHostStatus()
		return nil
	case hostresource.FieldProviderStatusDetail:
		m.ResetProviderStatusDetail()
		return nil
	case hostresource.FieldNote:
		m.ResetNote()
		return nil
	case hostresource.FieldConsumerID:
		m.ResetConsumerID()
		return nil
	case hostresource.FieldHardwareKind:
		m.ResetHardwareKind()
		return nil
	case hostresource.FieldSerialNumber:
		m.ResetSerialNumber()
		return nil
	case hostresource.FieldUUID:
		m.ResetUUID()
		return nil
	case hostresource.FieldMemoryBytes:
		m.ResetMemoryBytes()
		return nil
	case hostresource.FieldCPUModel:
		m.ResetCPUModel()
		return nil
	case hostresource.FieldCPUSockets:
		m.ResetCPUSockets()
		return nil
	case hostresource.FieldCPUCores:
		m.ResetCPUCores()
		return nil
	case hostresource.FieldCPUCapabilities:
		m.ResetCPUCapabilities()
		return nil
	case hostresource.FieldCPUArchitecture:
		m.ResetCPUArchitecture()
		return nil
	case hostresource.FieldCPUThreads:
		m.ResetCPUThreads()
		return nil
	case hostresource.FieldGpuPciID:
		m.ResetGpuPciID()
		return nil
	case hostresource.FieldGpuProduct:
		m.ResetGpuProduct()
		return nil
	case hostresource.FieldGpuVendor:
		m.ResetGpuVendor()
		return nil
	case hostresource.FieldMgmtIP:
		m.ResetMgmtIP()
		return nil
	case hostresource.FieldBmcKind:
		m.ResetBmcKind()
		return nil
	case hostresource.FieldBmcIP:
		m.ResetBmcIP()
		return nil
	case hostresource.FieldBmcUsername:
		m.ResetBmcUsername()
		return nil
	case hostresource.FieldBmcPassword:
		m.ResetBmcPassword()
		return nil
	case hostresource.FieldPxeMAC:
		m.ResetPxeMAC()
		return nil
	case hostresource.FieldHostname:
		m.ResetHostname()
		return nil
	case hostresource.FieldProductName:
		m.ResetProductName()
		return nil
	case hostresource.FieldBiosVersion:
		m.ResetBiosVersion()
		return nil
	case hostresource.FieldBiosReleaseDate:
		m.ResetBiosReleaseDate()
		return nil
	case hostresource.FieldBiosVendor:
		m.ResetBiosVendor()
		return nil
	case hostresource.FieldMetadata:
		m.ResetMetadata()
		return nil
	case hostresource.FieldDesiredPowerState:
		m.ResetDesiredPowerState()
		return nil
	case hostresource.FieldCurrentPowerState:
		m.ResetCurrentPowerState()
		return nil
	}
	return fmt.Errorf("unknown HostResource field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HostResourceMutation) AddedEdges() []string {
	edges := make([]string, 0, 8)
	if m.site != nil {
		edges = append(edges, hostresource.EdgeSite)
	}
	if m.provider != nil {
		edges = append(edges, hostresource.EdgeProvider)
	}
	if m.project != nil {
		edges = append(edges, hostresource.EdgeProject)
	}
	if m.user != nil {
		edges = append(edges, hostresource.EdgeUser)
	}
	if m.host_storages != nil {
		edges = append(edges, hostresource.EdgeHostStorages)
	}
	if m.host_nics != nil {
		edges = append(edges, hostresource.EdgeHostNics)
	}
	if m.host_usbs != nil {
		edges = append(edges, hostresource.EdgeHostUsbs)
	}
	if m.instance != nil {
		edges = append(edges, hostresource.EdgeInstance)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HostResourceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case hostresource.EdgeSite:
		if id := m.site; id != nil {
			return []ent.Value{*id}
		}
	case hostresource.EdgeProvider:
		if id := m.provider; id != nil {
			return []ent.Value{*id}
		}
	case hostresource.EdgeProject:
		if id := m.project; id != nil {
			return []ent.Value{*id}
		}
	case hostresource.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case hostresource.EdgeHostStorages:
		ids := make([]ent.Value, 0, len(m.host_storages))
		for id := range m.host_storages {
			ids = append(ids, id)
		}
		return ids
	case hostresource.EdgeHostNics:
		ids := make([]ent.Value, 0, len(m.host_nics))
		for id := range m.host_nics {
			ids = append(ids, id)
		}
		return ids
	case hostresource.EdgeHostUsbs:
		ids := make([]ent.Value, 0, len(m.host_usbs))
		for id := range m.host_usbs {
			ids = append(ids, id)
		}
		return ids
	case hostresource.EdgeInstance:
		if id := m.instance; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HostResourceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 8)
	if m.removedhost_storages != nil {
		edges = append(edges, hostresource.EdgeHostStorages)
	}
	if m.removedhost_nics != nil {
		edges = append(edges, hostresource.EdgeHostNics)
	}
	if m.removedhost_usbs != nil {
		edges = append(edges, hostresource.EdgeHostUsbs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HostResourceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case hostresource.EdgeHostStorages:
		ids := make([]ent.Value, 0, len(m.removedhost_storages))
		for id := range m.removedhost_storages {
			ids = append(ids, id)
		}
		return ids
	case hostresource.EdgeHostNics:
		ids := make([]ent.Value, 0, len(m.removedhost_nics))
		for id := range m.removedhost_nics {
			ids = append(ids, id)
		}
		return ids
	case hostresource.EdgeHostUsbs:
		ids := make([]ent.Value, 0, len(m.removedhost_usbs))
		for id := range m.removedhost_usbs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HostResourceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 8)
	if m.clearedsite {
		edges = append(edges, hostresource.EdgeSite)
	}
	if m.clearedprovider {
		edges = append(edges, hostresource.EdgeProvider)
	}
	if m.clearedproject {
		edges = append(edges, hostresource.EdgeProject)
	}
	if m.cleareduser {
		edges = append(edges, hostresource.EdgeUser)
	}
	if m.clearedhost_storages {
		edges = append(edges, hostresource.EdgeHostStorages)
	}
	if m.clearedhost_nics {
		edges = append(edges, hostresource.EdgeHostNics)
	}
	if m.clearedhost_usbs {
		edges = append(edges, hostresource.EdgeHostUsbs)
	}
	if m.clearedinstance {
		edges = append(edges, hostresource.EdgeInstance)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HostResourceMutation) EdgeCleared(name string) bool {
	switch name {
	case hostresource.EdgeSite:
		return m.clearedsite
	case hostresource.EdgeProvider:
		return m.clearedprovider
	case hostresource.EdgeProject:
		return m.clearedproject
	case hostresource.EdgeUser:
		return m.cleareduser
	case hostresource.EdgeHostStorages:
		return m.clearedhost_storages
	case hostresource.EdgeHostNics:
		return m.clearedhost_nics
	case hostresource.EdgeHostUsbs:
		return m.clearedhost_usbs
	case hostresource.EdgeInstance:
		return m.clearedinstance
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HostResourceMutation) ClearEdge(name string) error {
	switch name {
	case hostresource.EdgeSite:
		m.ClearSite()
		return nil
	case hostresource.EdgeProvider:
		m.ClearProvider()
		return nil
	case hostresource.EdgeProject:
		m.ClearProject()
		return nil
	case hostresource.EdgeUser:
		m.ClearUser()
		return nil
	case hostresource.EdgeInstance:
		m.ClearInstance()
		return nil
	}
	return fmt.Errorf("unknown HostResource unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HostResourceMutation) ResetEdge(name string) error {
	switch name {
	case hostresource.EdgeSite:
		m.ResetSite()
		return nil
	case hostresource.EdgeProvider:
		m.ResetProvider()
		return nil
	case hostresource.EdgeProject:
		m.ResetProject()
		return nil
	case hostresource.EdgeUser:
		m.ResetUser()
		return nil
	case hostresource.EdgeHostStorages:
		m.ResetHostStorages()
		return nil
	case hostresource.EdgeHostNics:
		m.ResetHostNics()
		return nil
	case hostresource.EdgeHostUsbs:
		m.ResetHostUsbs()
		return nil
	case hostresource.EdgeInstance:
		m.ResetInstance()
		return nil
	}
	return fmt.Errorf("unknown HostResource edge %s", name)
}

// HostnicResourceMutation represents an operation that mutates the HostnicResource nodes in the graph.
type HostnicResourceMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	resource_id           *string
	kind                  *string
	description           *string
	desired_state         *hostnicresource.DesiredState
	current_state         *hostnicresource.CurrentState
	provider_status       *string
	name                  *string
	pci_identifier        *string
	mac_addr              *string
	sriov_enabled         *bool
	sriov_vfs_num         *uint32
	addsriov_vfs_num      *int32
	sriov_vfs_total       *uint32
	addsriov_vfs_total    *int32
	peer_name             *string
	peer_description      *string
	peer_mac              *string
	peer_mgmt_ip          *string
	peer_port             *string
	supported_link_mode   *string
	advertising_link_mode *string
	current_speed_bps     *uint64
	addcurrent_speed_bps  *int64
	current_duplex        *string
	features              *string
	mtu                   *uint32
	addmtu                *int32
	link_state            *hostnicresource.LinkState
	bmc_interface         *bool
	clearedFields         map[string]struct{}
	site                  *int
	clearedsite           bool
	provider              *int
	clearedprovider       bool
	project               *int
	clearedproject        bool
	host                  *int
	clearedhost           bool
	done                  bool
	oldValue              func(context.Context) (*HostnicResource, error)
	predicates            []predicate.HostnicResource
}

var _ ent.Mutation = (*HostnicResourceMutation)(nil)

// hostnicresourceOption allows management of the mutation configuration using functional options.
type hostnicresourceOption func(*HostnicResourceMutation)

// newHostnicResourceMutation creates new mutation for the HostnicResource entity.
func newHostnicResourceMutation(c config, op Op, opts ...hostnicresourceOption) *HostnicResourceMutation {
	m := &HostnicResourceMutation{
		config:        c,
		op:            op,
		typ:           TypeHostnicResource,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHostnicResourceID sets the ID field of the mutation.
func withHostnicResourceID(id int) hostnicresourceOption {
	return func(m *HostnicResourceMutation) {
		var (
			err   error
			once  sync.Once
			value *HostnicResource
		)
		m.oldValue = func(ctx context.Context) (*HostnicResource, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().HostnicResource.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHostnicResource sets the old HostnicResource of the mutation.
func withHostnicResource(node *HostnicResource) hostnicresourceOption {
	return func(m *HostnicResourceMutation) {
		m.oldValue = func(context.Context) (*HostnicResource, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HostnicResourceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HostnicResourceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HostnicResourceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HostnicResourceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().HostnicResource.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetResourceID sets the "resource_id" field.
func (m *HostnicResourceMutation) SetResourceID(s string) {
	m.resource_id = &s
}

// ResourceID returns the value of the "resource_id" field in the mutation.
func (m *HostnicResourceMutation) ResourceID() (r string, exists bool) {
	v := m.resource_id
	if v == nil {
		return
	}
	return *v, true
}

// OldResourceID returns the old "resource_id" field's value of the HostnicResource entity.
// If the HostnicResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostnicResourceMutation) OldResourceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResourceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResourceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResourceID: %w", err)
	}
	return oldValue.ResourceID, nil
}

// ResetResourceID resets all changes to the "resource_id" field.
func (m *HostnicResourceMutation) ResetResourceID() {
	m.resource_id = nil
}

// SetKind sets the "kind" field.
func (m *HostnicResourceMutation) SetKind(s string) {
	m.kind = &s
}

// Kind returns the value of the "kind" field in the mutation.
func (m *HostnicResourceMutation) Kind() (r string, exists bool) {
	v := m.kind
	if v == nil {
		return
	}
	return *v, true
}

// OldKind returns the old "kind" field's value of the HostnicResource entity.
// If the HostnicResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostnicResourceMutation) OldKind(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKind is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKind requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKind: %w", err)
	}
	return oldValue.Kind, nil
}

// ClearKind clears the value of the "kind" field.
func (m *HostnicResourceMutation) ClearKind() {
	m.kind = nil
	m.clearedFields[hostnicresource.FieldKind] = struct{}{}
}

// KindCleared returns if the "kind" field was cleared in this mutation.
func (m *HostnicResourceMutation) KindCleared() bool {
	_, ok := m.clearedFields[hostnicresource.FieldKind]
	return ok
}

// ResetKind resets all changes to the "kind" field.
func (m *HostnicResourceMutation) ResetKind() {
	m.kind = nil
	delete(m.clearedFields, hostnicresource.FieldKind)
}

// SetDescription sets the "description" field.
func (m *HostnicResourceMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *HostnicResourceMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the HostnicResource entity.
// If the HostnicResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostnicResourceMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *HostnicResourceMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[hostnicresource.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *HostnicResourceMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[hostnicresource.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *HostnicResourceMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, hostnicresource.FieldDescription)
}

// SetDesiredState sets the "desired_state" field.
func (m *HostnicResourceMutation) SetDesiredState(hs hostnicresource.DesiredState) {
	m.desired_state = &hs
}

// DesiredState returns the value of the "desired_state" field in the mutation.
func (m *HostnicResourceMutation) DesiredState() (r hostnicresource.DesiredState, exists bool) {
	v := m.desired_state
	if v == nil {
		return
	}
	return *v, true
}

// OldDesiredState returns the old "desired_state" field's value of the HostnicResource entity.
// If the HostnicResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostnicResourceMutation) OldDesiredState(ctx context.Context) (v hostnicresource.DesiredState, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesiredState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesiredState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesiredState: %w", err)
	}
	return oldValue.DesiredState, nil
}

// ClearDesiredState clears the value of the "desired_state" field.
func (m *HostnicResourceMutation) ClearDesiredState() {
	m.desired_state = nil
	m.clearedFields[hostnicresource.FieldDesiredState] = struct{}{}
}

// DesiredStateCleared returns if the "desired_state" field was cleared in this mutation.
func (m *HostnicResourceMutation) DesiredStateCleared() bool {
	_, ok := m.clearedFields[hostnicresource.FieldDesiredState]
	return ok
}

// ResetDesiredState resets all changes to the "desired_state" field.
func (m *HostnicResourceMutation) ResetDesiredState() {
	m.desired_state = nil
	delete(m.clearedFields, hostnicresource.FieldDesiredState)
}

// SetCurrentState sets the "current_state" field.
func (m *HostnicResourceMutation) SetCurrentState(hs hostnicresource.CurrentState) {
	m.current_state = &hs
}

// CurrentState returns the value of the "current_state" field in the mutation.
func (m *HostnicResourceMutation) CurrentState() (r hostnicresource.CurrentState, exists bool) {
	v := m.current_state
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrentState returns the old "current_state" field's value of the HostnicResource entity.
// If the HostnicResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostnicResourceMutation) OldCurrentState(ctx context.Context) (v hostnicresource.CurrentState, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrentState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrentState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrentState: %w", err)
	}
	return oldValue.CurrentState, nil
}

// ClearCurrentState clears the value of the "current_state" field.
func (m *HostnicResourceMutation) ClearCurrentState() {
	m.current_state = nil
	m.clearedFields[hostnicresource.FieldCurrentState] = struct{}{}
}

// CurrentStateCleared returns if the "current_state" field was cleared in this mutation.
func (m *HostnicResourceMutation) CurrentStateCleared() bool {
	_, ok := m.clearedFields[hostnicresource.FieldCurrentState]
	return ok
}

// ResetCurrentState resets all changes to the "current_state" field.
func (m *HostnicResourceMutation) ResetCurrentState() {
	m.current_state = nil
	delete(m.clearedFields, hostnicresource.FieldCurrentState)
}

// SetProviderStatus sets the "provider_status" field.
func (m *HostnicResourceMutation) SetProviderStatus(s string) {
	m.provider_status = &s
}

// ProviderStatus returns the value of the "provider_status" field in the mutation.
func (m *HostnicResourceMutation) ProviderStatus() (r string, exists bool) {
	v := m.provider_status
	if v == nil {
		return
	}
	return *v, true
}

// OldProviderStatus returns the old "provider_status" field's value of the HostnicResource entity.
// If the HostnicResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostnicResourceMutation) OldProviderStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProviderStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProviderStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProviderStatus: %w", err)
	}
	return oldValue.ProviderStatus, nil
}

// ClearProviderStatus clears the value of the "provider_status" field.
func (m *HostnicResourceMutation) ClearProviderStatus() {
	m.provider_status = nil
	m.clearedFields[hostnicresource.FieldProviderStatus] = struct{}{}
}

// ProviderStatusCleared returns if the "provider_status" field was cleared in this mutation.
func (m *HostnicResourceMutation) ProviderStatusCleared() bool {
	_, ok := m.clearedFields[hostnicresource.FieldProviderStatus]
	return ok
}

// ResetProviderStatus resets all changes to the "provider_status" field.
func (m *HostnicResourceMutation) ResetProviderStatus() {
	m.provider_status = nil
	delete(m.clearedFields, hostnicresource.FieldProviderStatus)
}

// SetName sets the "name" field.
func (m *HostnicResourceMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *HostnicResourceMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the HostnicResource entity.
// If the HostnicResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostnicResourceMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *HostnicResourceMutation) ClearName() {
	m.name = nil
	m.clearedFields[hostnicresource.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *HostnicResourceMutation) NameCleared() bool {
	_, ok := m.clearedFields[hostnicresource.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *HostnicResourceMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, hostnicresource.FieldName)
}

// SetPciIdentifier sets the "pci_identifier" field.
func (m *HostnicResourceMutation) SetPciIdentifier(s string) {
	m.pci_identifier = &s
}

// PciIdentifier returns the value of the "pci_identifier" field in the mutation.
func (m *HostnicResourceMutation) PciIdentifier() (r string, exists bool) {
	v := m.pci_identifier
	if v == nil {
		return
	}
	return *v, true
}

// OldPciIdentifier returns the old "pci_identifier" field's value of the HostnicResource entity.
// If the HostnicResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostnicResourceMutation) OldPciIdentifier(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPciIdentifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPciIdentifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPciIdentifier: %w", err)
	}
	return oldValue.PciIdentifier, nil
}

// ClearPciIdentifier clears the value of the "pci_identifier" field.
func (m *HostnicResourceMutation) ClearPciIdentifier() {
	m.pci_identifier = nil
	m.clearedFields[hostnicresource.FieldPciIdentifier] = struct{}{}
}

// PciIdentifierCleared returns if the "pci_identifier" field was cleared in this mutation.
func (m *HostnicResourceMutation) PciIdentifierCleared() bool {
	_, ok := m.clearedFields[hostnicresource.FieldPciIdentifier]
	return ok
}

// ResetPciIdentifier resets all changes to the "pci_identifier" field.
func (m *HostnicResourceMutation) ResetPciIdentifier() {
	m.pci_identifier = nil
	delete(m.clearedFields, hostnicresource.FieldPciIdentifier)
}

// SetMACAddr sets the "mac_addr" field.
func (m *HostnicResourceMutation) SetMACAddr(s string) {
	m.mac_addr = &s
}

// MACAddr returns the value of the "mac_addr" field in the mutation.
func (m *HostnicResourceMutation) MACAddr() (r string, exists bool) {
	v := m.mac_addr
	if v == nil {
		return
	}
	return *v, true
}

// OldMACAddr returns the old "mac_addr" field's value of the HostnicResource entity.
// If the HostnicResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostnicResourceMutation) OldMACAddr(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMACAddr is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMACAddr requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMACAddr: %w", err)
	}
	return oldValue.MACAddr, nil
}

// ClearMACAddr clears the value of the "mac_addr" field.
func (m *HostnicResourceMutation) ClearMACAddr() {
	m.mac_addr = nil
	m.clearedFields[hostnicresource.FieldMACAddr] = struct{}{}
}

// MACAddrCleared returns if the "mac_addr" field was cleared in this mutation.
func (m *HostnicResourceMutation) MACAddrCleared() bool {
	_, ok := m.clearedFields[hostnicresource.FieldMACAddr]
	return ok
}

// ResetMACAddr resets all changes to the "mac_addr" field.
func (m *HostnicResourceMutation) ResetMACAddr() {
	m.mac_addr = nil
	delete(m.clearedFields, hostnicresource.FieldMACAddr)
}

// SetSriovEnabled sets the "sriov_enabled" field.
func (m *HostnicResourceMutation) SetSriovEnabled(b bool) {
	m.sriov_enabled = &b
}

// SriovEnabled returns the value of the "sriov_enabled" field in the mutation.
func (m *HostnicResourceMutation) SriovEnabled() (r bool, exists bool) {
	v := m.sriov_enabled
	if v == nil {
		return
	}
	return *v, true
}

// OldSriovEnabled returns the old "sriov_enabled" field's value of the HostnicResource entity.
// If the HostnicResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostnicResourceMutation) OldSriovEnabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSriovEnabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSriovEnabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSriovEnabled: %w", err)
	}
	return oldValue.SriovEnabled, nil
}

// ClearSriovEnabled clears the value of the "sriov_enabled" field.
func (m *HostnicResourceMutation) ClearSriovEnabled() {
	m.sriov_enabled = nil
	m.clearedFields[hostnicresource.FieldSriovEnabled] = struct{}{}
}

// SriovEnabledCleared returns if the "sriov_enabled" field was cleared in this mutation.
func (m *HostnicResourceMutation) SriovEnabledCleared() bool {
	_, ok := m.clearedFields[hostnicresource.FieldSriovEnabled]
	return ok
}

// ResetSriovEnabled resets all changes to the "sriov_enabled" field.
func (m *HostnicResourceMutation) ResetSriovEnabled() {
	m.sriov_enabled = nil
	delete(m.clearedFields, hostnicresource.FieldSriovEnabled)
}

// SetSriovVfsNum sets the "sriov_vfs_num" field.
func (m *HostnicResourceMutation) SetSriovVfsNum(u uint32) {
	m.sriov_vfs_num = &u
	m.addsriov_vfs_num = nil
}

// SriovVfsNum returns the value of the "sriov_vfs_num" field in the mutation.
func (m *HostnicResourceMutation) SriovVfsNum() (r uint32, exists bool) {
	v := m.sriov_vfs_num
	if v == nil {
		return
	}
	return *v, true
}

// OldSriovVfsNum returns the old "sriov_vfs_num" field's value of the HostnicResource entity.
// If the HostnicResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostnicResourceMutation) OldSriovVfsNum(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSriovVfsNum is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSriovVfsNum requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSriovVfsNum: %w", err)
	}
	return oldValue.SriovVfsNum, nil
}

// AddSriovVfsNum adds u to the "sriov_vfs_num" field.
func (m *HostnicResourceMutation) AddSriovVfsNum(u int32) {
	if m.addsriov_vfs_num != nil {
		*m.addsriov_vfs_num += u
	} else {
		m.addsriov_vfs_num = &u
	}
}

// AddedSriovVfsNum returns the value that was added to the "sriov_vfs_num" field in this mutation.
func (m *HostnicResourceMutation) AddedSriovVfsNum() (r int32, exists bool) {
	v := m.addsriov_vfs_num
	if v == nil {
		return
	}
	return *v, true
}

// ClearSriovVfsNum clears the value of the "sriov_vfs_num" field.
func (m *HostnicResourceMutation) ClearSriovVfsNum() {
	m.sriov_vfs_num = nil
	m.addsriov_vfs_num = nil
	m.clearedFields[hostnicresource.FieldSriovVfsNum] = struct{}{}
}

// SriovVfsNumCleared returns if the "sriov_vfs_num" field was cleared in this mutation.
func (m *HostnicResourceMutation) SriovVfsNumCleared() bool {
	_, ok := m.clearedFields[hostnicresource.FieldSriovVfsNum]
	return ok
}

// ResetSriovVfsNum resets all changes to the "sriov_vfs_num" field.
func (m *HostnicResourceMutation) ResetSriovVfsNum() {
	m.sriov_vfs_num = nil
	m.addsriov_vfs_num = nil
	delete(m.clearedFields, hostnicresource.FieldSriovVfsNum)
}

// SetSriovVfsTotal sets the "sriov_vfs_total" field.
func (m *HostnicResourceMutation) SetSriovVfsTotal(u uint32) {
	m.sriov_vfs_total = &u
	m.addsriov_vfs_total = nil
}

// SriovVfsTotal returns the value of the "sriov_vfs_total" field in the mutation.
func (m *HostnicResourceMutation) SriovVfsTotal() (r uint32, exists bool) {
	v := m.sriov_vfs_total
	if v == nil {
		return
	}
	return *v, true
}

// OldSriovVfsTotal returns the old "sriov_vfs_total" field's value of the HostnicResource entity.
// If the HostnicResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostnicResourceMutation) OldSriovVfsTotal(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSriovVfsTotal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSriovVfsTotal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSriovVfsTotal: %w", err)
	}
	return oldValue.SriovVfsTotal, nil
}

// AddSriovVfsTotal adds u to the "sriov_vfs_total" field.
func (m *HostnicResourceMutation) AddSriovVfsTotal(u int32) {
	if m.addsriov_vfs_total != nil {
		*m.addsriov_vfs_total += u
	} else {
		m.addsriov_vfs_total = &u
	}
}

// AddedSriovVfsTotal returns the value that was added to the "sriov_vfs_total" field in this mutation.
func (m *HostnicResourceMutation) AddedSriovVfsTotal() (r int32, exists bool) {
	v := m.addsriov_vfs_total
	if v == nil {
		return
	}
	return *v, true
}

// ClearSriovVfsTotal clears the value of the "sriov_vfs_total" field.
func (m *HostnicResourceMutation) ClearSriovVfsTotal() {
	m.sriov_vfs_total = nil
	m.addsriov_vfs_total = nil
	m.clearedFields[hostnicresource.FieldSriovVfsTotal] = struct{}{}
}

// SriovVfsTotalCleared returns if the "sriov_vfs_total" field was cleared in this mutation.
func (m *HostnicResourceMutation) SriovVfsTotalCleared() bool {
	_, ok := m.clearedFields[hostnicresource.FieldSriovVfsTotal]
	return ok
}

// ResetSriovVfsTotal resets all changes to the "sriov_vfs_total" field.
func (m *HostnicResourceMutation) ResetSriovVfsTotal() {
	m.sriov_vfs_total = nil
	m.addsriov_vfs_total = nil
	delete(m.clearedFields, hostnicresource.FieldSriovVfsTotal)
}

// SetPeerName sets the "peer_name" field.
func (m *HostnicResourceMutation) SetPeerName(s string) {
	m.peer_name = &s
}

// PeerName returns the value of the "peer_name" field in the mutation.
func (m *HostnicResourceMutation) PeerName() (r string, exists bool) {
	v := m.peer_name
	if v == nil {
		return
	}
	return *v, true
}

// OldPeerName returns the old "peer_name" field's value of the HostnicResource entity.
// If the HostnicResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostnicResourceMutation) OldPeerName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPeerName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPeerName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPeerName: %w", err)
	}
	return oldValue.PeerName, nil
}

// ClearPeerName clears the value of the "peer_name" field.
func (m *HostnicResourceMutation) ClearPeerName() {
	m.peer_name = nil
	m.clearedFields[hostnicresource.FieldPeerName] = struct{}{}
}

// PeerNameCleared returns if the "peer_name" field was cleared in this mutation.
func (m *HostnicResourceMutation) PeerNameCleared() bool {
	_, ok := m.clearedFields[hostnicresource.FieldPeerName]
	return ok
}

// ResetPeerName resets all changes to the "peer_name" field.
func (m *HostnicResourceMutation) ResetPeerName() {
	m.peer_name = nil
	delete(m.clearedFields, hostnicresource.FieldPeerName)
}

// SetPeerDescription sets the "peer_description" field.
func (m *HostnicResourceMutation) SetPeerDescription(s string) {
	m.peer_description = &s
}

// PeerDescription returns the value of the "peer_description" field in the mutation.
func (m *HostnicResourceMutation) PeerDescription() (r string, exists bool) {
	v := m.peer_description
	if v == nil {
		return
	}
	return *v, true
}

// OldPeerDescription returns the old "peer_description" field's value of the HostnicResource entity.
// If the HostnicResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostnicResourceMutation) OldPeerDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPeerDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPeerDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPeerDescription: %w", err)
	}
	return oldValue.PeerDescription, nil
}

// ClearPeerDescription clears the value of the "peer_description" field.
func (m *HostnicResourceMutation) ClearPeerDescription() {
	m.peer_description = nil
	m.clearedFields[hostnicresource.FieldPeerDescription] = struct{}{}
}

// PeerDescriptionCleared returns if the "peer_description" field was cleared in this mutation.
func (m *HostnicResourceMutation) PeerDescriptionCleared() bool {
	_, ok := m.clearedFields[hostnicresource.FieldPeerDescription]
	return ok
}

// ResetPeerDescription resets all changes to the "peer_description" field.
func (m *HostnicResourceMutation) ResetPeerDescription() {
	m.peer_description = nil
	delete(m.clearedFields, hostnicresource.FieldPeerDescription)
}

// SetPeerMAC sets the "peer_mac" field.
func (m *HostnicResourceMutation) SetPeerMAC(s string) {
	m.peer_mac = &s
}

// PeerMAC returns the value of the "peer_mac" field in the mutation.
func (m *HostnicResourceMutation) PeerMAC() (r string, exists bool) {
	v := m.peer_mac
	if v == nil {
		return
	}
	return *v, true
}

// OldPeerMAC returns the old "peer_mac" field's value of the HostnicResource entity.
// If the HostnicResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostnicResourceMutation) OldPeerMAC(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPeerMAC is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPeerMAC requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPeerMAC: %w", err)
	}
	return oldValue.PeerMAC, nil
}

// ClearPeerMAC clears the value of the "peer_mac" field.
func (m *HostnicResourceMutation) ClearPeerMAC() {
	m.peer_mac = nil
	m.clearedFields[hostnicresource.FieldPeerMAC] = struct{}{}
}

// PeerMACCleared returns if the "peer_mac" field was cleared in this mutation.
func (m *HostnicResourceMutation) PeerMACCleared() bool {
	_, ok := m.clearedFields[hostnicresource.FieldPeerMAC]
	return ok
}

// ResetPeerMAC resets all changes to the "peer_mac" field.
func (m *HostnicResourceMutation) ResetPeerMAC() {
	m.peer_mac = nil
	delete(m.clearedFields, hostnicresource.FieldPeerMAC)
}

// SetPeerMgmtIP sets the "peer_mgmt_ip" field.
func (m *HostnicResourceMutation) SetPeerMgmtIP(s string) {
	m.peer_mgmt_ip = &s
}

// PeerMgmtIP returns the value of the "peer_mgmt_ip" field in the mutation.
func (m *HostnicResourceMutation) PeerMgmtIP() (r string, exists bool) {
	v := m.peer_mgmt_ip
	if v == nil {
		return
	}
	return *v, true
}

// OldPeerMgmtIP returns the old "peer_mgmt_ip" field's value of the HostnicResource entity.
// If the HostnicResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostnicResourceMutation) OldPeerMgmtIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPeerMgmtIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPeerMgmtIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPeerMgmtIP: %w", err)
	}
	return oldValue.PeerMgmtIP, nil
}

// ClearPeerMgmtIP clears the value of the "peer_mgmt_ip" field.
func (m *HostnicResourceMutation) ClearPeerMgmtIP() {
	m.peer_mgmt_ip = nil
	m.clearedFields[hostnicresource.FieldPeerMgmtIP] = struct{}{}
}

// PeerMgmtIPCleared returns if the "peer_mgmt_ip" field was cleared in this mutation.
func (m *HostnicResourceMutation) PeerMgmtIPCleared() bool {
	_, ok := m.clearedFields[hostnicresource.FieldPeerMgmtIP]
	return ok
}

// ResetPeerMgmtIP resets all changes to the "peer_mgmt_ip" field.
func (m *HostnicResourceMutation) ResetPeerMgmtIP() {
	m.peer_mgmt_ip = nil
	delete(m.clearedFields, hostnicresource.FieldPeerMgmtIP)
}

// SetPeerPort sets the "peer_port" field.
func (m *HostnicResourceMutation) SetPeerPort(s string) {
	m.peer_port = &s
}

// PeerPort returns the value of the "peer_port" field in the mutation.
func (m *HostnicResourceMutation) PeerPort() (r string, exists bool) {
	v := m.peer_port
	if v == nil {
		return
	}
	return *v, true
}

// OldPeerPort returns the old "peer_port" field's value of the HostnicResource entity.
// If the HostnicResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostnicResourceMutation) OldPeerPort(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPeerPort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPeerPort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPeerPort: %w", err)
	}
	return oldValue.PeerPort, nil
}

// ClearPeerPort clears the value of the "peer_port" field.
func (m *HostnicResourceMutation) ClearPeerPort() {
	m.peer_port = nil
	m.clearedFields[hostnicresource.FieldPeerPort] = struct{}{}
}

// PeerPortCleared returns if the "peer_port" field was cleared in this mutation.
func (m *HostnicResourceMutation) PeerPortCleared() bool {
	_, ok := m.clearedFields[hostnicresource.FieldPeerPort]
	return ok
}

// ResetPeerPort resets all changes to the "peer_port" field.
func (m *HostnicResourceMutation) ResetPeerPort() {
	m.peer_port = nil
	delete(m.clearedFields, hostnicresource.FieldPeerPort)
}

// SetSupportedLinkMode sets the "supported_link_mode" field.
func (m *HostnicResourceMutation) SetSupportedLinkMode(s string) {
	m.supported_link_mode = &s
}

// SupportedLinkMode returns the value of the "supported_link_mode" field in the mutation.
func (m *HostnicResourceMutation) SupportedLinkMode() (r string, exists bool) {
	v := m.supported_link_mode
	if v == nil {
		return
	}
	return *v, true
}

// OldSupportedLinkMode returns the old "supported_link_mode" field's value of the HostnicResource entity.
// If the HostnicResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostnicResourceMutation) OldSupportedLinkMode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSupportedLinkMode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSupportedLinkMode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSupportedLinkMode: %w", err)
	}
	return oldValue.SupportedLinkMode, nil
}

// ClearSupportedLinkMode clears the value of the "supported_link_mode" field.
func (m *HostnicResourceMutation) ClearSupportedLinkMode() {
	m.supported_link_mode = nil
	m.clearedFields[hostnicresource.FieldSupportedLinkMode] = struct{}{}
}

// SupportedLinkModeCleared returns if the "supported_link_mode" field was cleared in this mutation.
func (m *HostnicResourceMutation) SupportedLinkModeCleared() bool {
	_, ok := m.clearedFields[hostnicresource.FieldSupportedLinkMode]
	return ok
}

// ResetSupportedLinkMode resets all changes to the "supported_link_mode" field.
func (m *HostnicResourceMutation) ResetSupportedLinkMode() {
	m.supported_link_mode = nil
	delete(m.clearedFields, hostnicresource.FieldSupportedLinkMode)
}

// SetAdvertisingLinkMode sets the "advertising_link_mode" field.
func (m *HostnicResourceMutation) SetAdvertisingLinkMode(s string) {
	m.advertising_link_mode = &s
}

// AdvertisingLinkMode returns the value of the "advertising_link_mode" field in the mutation.
func (m *HostnicResourceMutation) AdvertisingLinkMode() (r string, exists bool) {
	v := m.advertising_link_mode
	if v == nil {
		return
	}
	return *v, true
}

// OldAdvertisingLinkMode returns the old "advertising_link_mode" field's value of the HostnicResource entity.
// If the HostnicResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostnicResourceMutation) OldAdvertisingLinkMode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAdvertisingLinkMode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAdvertisingLinkMode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAdvertisingLinkMode: %w", err)
	}
	return oldValue.AdvertisingLinkMode, nil
}

// ClearAdvertisingLinkMode clears the value of the "advertising_link_mode" field.
func (m *HostnicResourceMutation) ClearAdvertisingLinkMode() {
	m.advertising_link_mode = nil
	m.clearedFields[hostnicresource.FieldAdvertisingLinkMode] = struct{}{}
}

// AdvertisingLinkModeCleared returns if the "advertising_link_mode" field was cleared in this mutation.
func (m *HostnicResourceMutation) AdvertisingLinkModeCleared() bool {
	_, ok := m.clearedFields[hostnicresource.FieldAdvertisingLinkMode]
	return ok
}

// ResetAdvertisingLinkMode resets all changes to the "advertising_link_mode" field.
func (m *HostnicResourceMutation) ResetAdvertisingLinkMode() {
	m.advertising_link_mode = nil
	delete(m.clearedFields, hostnicresource.FieldAdvertisingLinkMode)
}

// SetCurrentSpeedBps sets the "current_speed_bps" field.
func (m *HostnicResourceMutation) SetCurrentSpeedBps(u uint64) {
	m.current_speed_bps = &u
	m.addcurrent_speed_bps = nil
}

// CurrentSpeedBps returns the value of the "current_speed_bps" field in the mutation.
func (m *HostnicResourceMutation) CurrentSpeedBps() (r uint64, exists bool) {
	v := m.current_speed_bps
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrentSpeedBps returns the old "current_speed_bps" field's value of the HostnicResource entity.
// If the HostnicResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostnicResourceMutation) OldCurrentSpeedBps(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrentSpeedBps is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrentSpeedBps requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrentSpeedBps: %w", err)
	}
	return oldValue.CurrentSpeedBps, nil
}

// AddCurrentSpeedBps adds u to the "current_speed_bps" field.
func (m *HostnicResourceMutation) AddCurrentSpeedBps(u int64) {
	if m.addcurrent_speed_bps != nil {
		*m.addcurrent_speed_bps += u
	} else {
		m.addcurrent_speed_bps = &u
	}
}

// AddedCurrentSpeedBps returns the value that was added to the "current_speed_bps" field in this mutation.
func (m *HostnicResourceMutation) AddedCurrentSpeedBps() (r int64, exists bool) {
	v := m.addcurrent_speed_bps
	if v == nil {
		return
	}
	return *v, true
}

// ClearCurrentSpeedBps clears the value of the "current_speed_bps" field.
func (m *HostnicResourceMutation) ClearCurrentSpeedBps() {
	m.current_speed_bps = nil
	m.addcurrent_speed_bps = nil
	m.clearedFields[hostnicresource.FieldCurrentSpeedBps] = struct{}{}
}

// CurrentSpeedBpsCleared returns if the "current_speed_bps" field was cleared in this mutation.
func (m *HostnicResourceMutation) CurrentSpeedBpsCleared() bool {
	_, ok := m.clearedFields[hostnicresource.FieldCurrentSpeedBps]
	return ok
}

// ResetCurrentSpeedBps resets all changes to the "current_speed_bps" field.
func (m *HostnicResourceMutation) ResetCurrentSpeedBps() {
	m.current_speed_bps = nil
	m.addcurrent_speed_bps = nil
	delete(m.clearedFields, hostnicresource.FieldCurrentSpeedBps)
}

// SetCurrentDuplex sets the "current_duplex" field.
func (m *HostnicResourceMutation) SetCurrentDuplex(s string) {
	m.current_duplex = &s
}

// CurrentDuplex returns the value of the "current_duplex" field in the mutation.
func (m *HostnicResourceMutation) CurrentDuplex() (r string, exists bool) {
	v := m.current_duplex
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrentDuplex returns the old "current_duplex" field's value of the HostnicResource entity.
// If the HostnicResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostnicResourceMutation) OldCurrentDuplex(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrentDuplex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrentDuplex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrentDuplex: %w", err)
	}
	return oldValue.CurrentDuplex, nil
}

// ClearCurrentDuplex clears the value of the "current_duplex" field.
func (m *HostnicResourceMutation) ClearCurrentDuplex() {
	m.current_duplex = nil
	m.clearedFields[hostnicresource.FieldCurrentDuplex] = struct{}{}
}

// CurrentDuplexCleared returns if the "current_duplex" field was cleared in this mutation.
func (m *HostnicResourceMutation) CurrentDuplexCleared() bool {
	_, ok := m.clearedFields[hostnicresource.FieldCurrentDuplex]
	return ok
}

// ResetCurrentDuplex resets all changes to the "current_duplex" field.
func (m *HostnicResourceMutation) ResetCurrentDuplex() {
	m.current_duplex = nil
	delete(m.clearedFields, hostnicresource.FieldCurrentDuplex)
}

// SetFeatures sets the "features" field.
func (m *HostnicResourceMutation) SetFeatures(s string) {
	m.features = &s
}

// Features returns the value of the "features" field in the mutation.
func (m *HostnicResourceMutation) Features() (r string, exists bool) {
	v := m.features
	if v == nil {
		return
	}
	return *v, true
}

// OldFeatures returns the old "features" field's value of the HostnicResource entity.
// If the HostnicResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostnicResourceMutation) OldFeatures(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFeatures is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFeatures requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeatures: %w", err)
	}
	return oldValue.Features, nil
}

// ClearFeatures clears the value of the "features" field.
func (m *HostnicResourceMutation) ClearFeatures() {
	m.features = nil
	m.clearedFields[hostnicresource.FieldFeatures] = struct{}{}
}

// FeaturesCleared returns if the "features" field was cleared in this mutation.
func (m *HostnicResourceMutation) FeaturesCleared() bool {
	_, ok := m.clearedFields[hostnicresource.FieldFeatures]
	return ok
}

// ResetFeatures resets all changes to the "features" field.
func (m *HostnicResourceMutation) ResetFeatures() {
	m.features = nil
	delete(m.clearedFields, hostnicresource.FieldFeatures)
}

// SetMtu sets the "mtu" field.
func (m *HostnicResourceMutation) SetMtu(u uint32) {
	m.mtu = &u
	m.addmtu = nil
}

// Mtu returns the value of the "mtu" field in the mutation.
func (m *HostnicResourceMutation) Mtu() (r uint32, exists bool) {
	v := m.mtu
	if v == nil {
		return
	}
	return *v, true
}

// OldMtu returns the old "mtu" field's value of the HostnicResource entity.
// If the HostnicResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostnicResourceMutation) OldMtu(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMtu is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMtu requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMtu: %w", err)
	}
	return oldValue.Mtu, nil
}

// AddMtu adds u to the "mtu" field.
func (m *HostnicResourceMutation) AddMtu(u int32) {
	if m.addmtu != nil {
		*m.addmtu += u
	} else {
		m.addmtu = &u
	}
}

// AddedMtu returns the value that was added to the "mtu" field in this mutation.
func (m *HostnicResourceMutation) AddedMtu() (r int32, exists bool) {
	v := m.addmtu
	if v == nil {
		return
	}
	return *v, true
}

// ClearMtu clears the value of the "mtu" field.
func (m *HostnicResourceMutation) ClearMtu() {
	m.mtu = nil
	m.addmtu = nil
	m.clearedFields[hostnicresource.FieldMtu] = struct{}{}
}

// MtuCleared returns if the "mtu" field was cleared in this mutation.
func (m *HostnicResourceMutation) MtuCleared() bool {
	_, ok := m.clearedFields[hostnicresource.FieldMtu]
	return ok
}

// ResetMtu resets all changes to the "mtu" field.
func (m *HostnicResourceMutation) ResetMtu() {
	m.mtu = nil
	m.addmtu = nil
	delete(m.clearedFields, hostnicresource.FieldMtu)
}

// SetLinkState sets the "link_state" field.
func (m *HostnicResourceMutation) SetLinkState(hs hostnicresource.LinkState) {
	m.link_state = &hs
}

// LinkState returns the value of the "link_state" field in the mutation.
func (m *HostnicResourceMutation) LinkState() (r hostnicresource.LinkState, exists bool) {
	v := m.link_state
	if v == nil {
		return
	}
	return *v, true
}

// OldLinkState returns the old "link_state" field's value of the HostnicResource entity.
// If the HostnicResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostnicResourceMutation) OldLinkState(ctx context.Context) (v hostnicresource.LinkState, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLinkState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLinkState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLinkState: %w", err)
	}
	return oldValue.LinkState, nil
}

// ClearLinkState clears the value of the "link_state" field.
func (m *HostnicResourceMutation) ClearLinkState() {
	m.link_state = nil
	m.clearedFields[hostnicresource.FieldLinkState] = struct{}{}
}

// LinkStateCleared returns if the "link_state" field was cleared in this mutation.
func (m *HostnicResourceMutation) LinkStateCleared() bool {
	_, ok := m.clearedFields[hostnicresource.FieldLinkState]
	return ok
}

// ResetLinkState resets all changes to the "link_state" field.
func (m *HostnicResourceMutation) ResetLinkState() {
	m.link_state = nil
	delete(m.clearedFields, hostnicresource.FieldLinkState)
}

// SetBmcInterface sets the "bmc_interface" field.
func (m *HostnicResourceMutation) SetBmcInterface(b bool) {
	m.bmc_interface = &b
}

// BmcInterface returns the value of the "bmc_interface" field in the mutation.
func (m *HostnicResourceMutation) BmcInterface() (r bool, exists bool) {
	v := m.bmc_interface
	if v == nil {
		return
	}
	return *v, true
}

// OldBmcInterface returns the old "bmc_interface" field's value of the HostnicResource entity.
// If the HostnicResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostnicResourceMutation) OldBmcInterface(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBmcInterface is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBmcInterface requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBmcInterface: %w", err)
	}
	return oldValue.BmcInterface, nil
}

// ClearBmcInterface clears the value of the "bmc_interface" field.
func (m *HostnicResourceMutation) ClearBmcInterface() {
	m.bmc_interface = nil
	m.clearedFields[hostnicresource.FieldBmcInterface] = struct{}{}
}

// BmcInterfaceCleared returns if the "bmc_interface" field was cleared in this mutation.
func (m *HostnicResourceMutation) BmcInterfaceCleared() bool {
	_, ok := m.clearedFields[hostnicresource.FieldBmcInterface]
	return ok
}

// ResetBmcInterface resets all changes to the "bmc_interface" field.
func (m *HostnicResourceMutation) ResetBmcInterface() {
	m.bmc_interface = nil
	delete(m.clearedFields, hostnicresource.FieldBmcInterface)
}

// SetSiteID sets the "site" edge to the SiteResource entity by id.
func (m *HostnicResourceMutation) SetSiteID(id int) {
	m.site = &id
}

// ClearSite clears the "site" edge to the SiteResource entity.
func (m *HostnicResourceMutation) ClearSite() {
	m.clearedsite = true
}

// SiteCleared reports if the "site" edge to the SiteResource entity was cleared.
func (m *HostnicResourceMutation) SiteCleared() bool {
	return m.clearedsite
}

// SiteID returns the "site" edge ID in the mutation.
func (m *HostnicResourceMutation) SiteID() (id int, exists bool) {
	if m.site != nil {
		return *m.site, true
	}
	return
}

// SiteIDs returns the "site" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SiteID instead. It exists only for internal usage by the builders.
func (m *HostnicResourceMutation) SiteIDs() (ids []int) {
	if id := m.site; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSite resets all changes to the "site" edge.
func (m *HostnicResourceMutation) ResetSite() {
	m.site = nil
	m.clearedsite = false
}

// SetProviderID sets the "provider" edge to the ProviderResource entity by id.
func (m *HostnicResourceMutation) SetProviderID(id int) {
	m.provider = &id
}

// ClearProvider clears the "provider" edge to the ProviderResource entity.
func (m *HostnicResourceMutation) ClearProvider() {
	m.clearedprovider = true
}

// ProviderCleared reports if the "provider" edge to the ProviderResource entity was cleared.
func (m *HostnicResourceMutation) ProviderCleared() bool {
	return m.clearedprovider
}

// ProviderID returns the "provider" edge ID in the mutation.
func (m *HostnicResourceMutation) ProviderID() (id int, exists bool) {
	if m.provider != nil {
		return *m.provider, true
	}
	return
}

// ProviderIDs returns the "provider" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProviderID instead. It exists only for internal usage by the builders.
func (m *HostnicResourceMutation) ProviderIDs() (ids []int) {
	if id := m.provider; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProvider resets all changes to the "provider" edge.
func (m *HostnicResourceMutation) ResetProvider() {
	m.provider = nil
	m.clearedprovider = false
}

// SetProjectID sets the "project" edge to the ProjectResource entity by id.
func (m *HostnicResourceMutation) SetProjectID(id int) {
	m.project = &id
}

// ClearProject clears the "project" edge to the ProjectResource entity.
func (m *HostnicResourceMutation) ClearProject() {
	m.clearedproject = true
}

// ProjectCleared reports if the "project" edge to the ProjectResource entity was cleared.
func (m *HostnicResourceMutation) ProjectCleared() bool {
	return m.clearedproject
}

// ProjectID returns the "project" edge ID in the mutation.
func (m *HostnicResourceMutation) ProjectID() (id int, exists bool) {
	if m.project != nil {
		return *m.project, true
	}
	return
}

// ProjectIDs returns the "project" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProjectID instead. It exists only for internal usage by the builders.
func (m *HostnicResourceMutation) ProjectIDs() (ids []int) {
	if id := m.project; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProject resets all changes to the "project" edge.
func (m *HostnicResourceMutation) ResetProject() {
	m.project = nil
	m.clearedproject = false
}

// SetHostID sets the "host" edge to the HostResource entity by id.
func (m *HostnicResourceMutation) SetHostID(id int) {
	m.host = &id
}

// ClearHost clears the "host" edge to the HostResource entity.
func (m *HostnicResourceMutation) ClearHost() {
	m.clearedhost = true
}

// HostCleared reports if the "host" edge to the HostResource entity was cleared.
func (m *HostnicResourceMutation) HostCleared() bool {
	return m.clearedhost
}

// HostID returns the "host" edge ID in the mutation.
func (m *HostnicResourceMutation) HostID() (id int, exists bool) {
	if m.host != nil {
		return *m.host, true
	}
	return
}

// HostIDs returns the "host" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// HostID instead. It exists only for internal usage by the builders.
func (m *HostnicResourceMutation) HostIDs() (ids []int) {
	if id := m.host; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetHost resets all changes to the "host" edge.
func (m *HostnicResourceMutation) ResetHost() {
	m.host = nil
	m.clearedhost = false
}

// Where appends a list predicates to the HostnicResourceMutation builder.
func (m *HostnicResourceMutation) Where(ps ...predicate.HostnicResource) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the HostnicResourceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *HostnicResourceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.HostnicResource, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *HostnicResourceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *HostnicResourceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (HostnicResource).
func (m *HostnicResourceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HostnicResourceMutation) Fields() []string {
	fields := make([]string, 0, 25)
	if m.resource_id != nil {
		fields = append(fields, hostnicresource.FieldResourceID)
	}
	if m.kind != nil {
		fields = append(fields, hostnicresource.FieldKind)
	}
	if m.description != nil {
		fields = append(fields, hostnicresource.FieldDescription)
	}
	if m.desired_state != nil {
		fields = append(fields, hostnicresource.FieldDesiredState)
	}
	if m.current_state != nil {
		fields = append(fields, hostnicresource.FieldCurrentState)
	}
	if m.provider_status != nil {
		fields = append(fields, hostnicresource.FieldProviderStatus)
	}
	if m.name != nil {
		fields = append(fields, hostnicresource.FieldName)
	}
	if m.pci_identifier != nil {
		fields = append(fields, hostnicresource.FieldPciIdentifier)
	}
	if m.mac_addr != nil {
		fields = append(fields, hostnicresource.FieldMACAddr)
	}
	if m.sriov_enabled != nil {
		fields = append(fields, hostnicresource.FieldSriovEnabled)
	}
	if m.sriov_vfs_num != nil {
		fields = append(fields, hostnicresource.FieldSriovVfsNum)
	}
	if m.sriov_vfs_total != nil {
		fields = append(fields, hostnicresource.FieldSriovVfsTotal)
	}
	if m.peer_name != nil {
		fields = append(fields, hostnicresource.FieldPeerName)
	}
	if m.peer_description != nil {
		fields = append(fields, hostnicresource.FieldPeerDescription)
	}
	if m.peer_mac != nil {
		fields = append(fields, hostnicresource.FieldPeerMAC)
	}
	if m.peer_mgmt_ip != nil {
		fields = append(fields, hostnicresource.FieldPeerMgmtIP)
	}
	if m.peer_port != nil {
		fields = append(fields, hostnicresource.FieldPeerPort)
	}
	if m.supported_link_mode != nil {
		fields = append(fields, hostnicresource.FieldSupportedLinkMode)
	}
	if m.advertising_link_mode != nil {
		fields = append(fields, hostnicresource.FieldAdvertisingLinkMode)
	}
	if m.current_speed_bps != nil {
		fields = append(fields, hostnicresource.FieldCurrentSpeedBps)
	}
	if m.current_duplex != nil {
		fields = append(fields, hostnicresource.FieldCurrentDuplex)
	}
	if m.features != nil {
		fields = append(fields, hostnicresource.FieldFeatures)
	}
	if m.mtu != nil {
		fields = append(fields, hostnicresource.FieldMtu)
	}
	if m.link_state != nil {
		fields = append(fields, hostnicresource.FieldLinkState)
	}
	if m.bmc_interface != nil {
		fields = append(fields, hostnicresource.FieldBmcInterface)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HostnicResourceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case hostnicresource.FieldResourceID:
		return m.ResourceID()
	case hostnicresource.FieldKind:
		return m.Kind()
	case hostnicresource.FieldDescription:
		return m.Description()
	case hostnicresource.FieldDesiredState:
		return m.DesiredState()
	case hostnicresource.FieldCurrentState:
		return m.CurrentState()
	case hostnicresource.FieldProviderStatus:
		return m.ProviderStatus()
	case hostnicresource.FieldName:
		return m.Name()
	case hostnicresource.FieldPciIdentifier:
		return m.PciIdentifier()
	case hostnicresource.FieldMACAddr:
		return m.MACAddr()
	case hostnicresource.FieldSriovEnabled:
		return m.SriovEnabled()
	case hostnicresource.FieldSriovVfsNum:
		return m.SriovVfsNum()
	case hostnicresource.FieldSriovVfsTotal:
		return m.SriovVfsTotal()
	case hostnicresource.FieldPeerName:
		return m.PeerName()
	case hostnicresource.FieldPeerDescription:
		return m.PeerDescription()
	case hostnicresource.FieldPeerMAC:
		return m.PeerMAC()
	case hostnicresource.FieldPeerMgmtIP:
		return m.PeerMgmtIP()
	case hostnicresource.FieldPeerPort:
		return m.PeerPort()
	case hostnicresource.FieldSupportedLinkMode:
		return m.SupportedLinkMode()
	case hostnicresource.FieldAdvertisingLinkMode:
		return m.AdvertisingLinkMode()
	case hostnicresource.FieldCurrentSpeedBps:
		return m.CurrentSpeedBps()
	case hostnicresource.FieldCurrentDuplex:
		return m.CurrentDuplex()
	case hostnicresource.FieldFeatures:
		return m.Features()
	case hostnicresource.FieldMtu:
		return m.Mtu()
	case hostnicresource.FieldLinkState:
		return m.LinkState()
	case hostnicresource.FieldBmcInterface:
		return m.BmcInterface()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HostnicResourceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case hostnicresource.FieldResourceID:
		return m.OldResourceID(ctx)
	case hostnicresource.FieldKind:
		return m.OldKind(ctx)
	case hostnicresource.FieldDescription:
		return m.OldDescription(ctx)
	case hostnicresource.FieldDesiredState:
		return m.OldDesiredState(ctx)
	case hostnicresource.FieldCurrentState:
		return m.OldCurrentState(ctx)
	case hostnicresource.FieldProviderStatus:
		return m.OldProviderStatus(ctx)
	case hostnicresource.FieldName:
		return m.OldName(ctx)
	case hostnicresource.FieldPciIdentifier:
		return m.OldPciIdentifier(ctx)
	case hostnicresource.FieldMACAddr:
		return m.OldMACAddr(ctx)
	case hostnicresource.FieldSriovEnabled:
		return m.OldSriovEnabled(ctx)
	case hostnicresource.FieldSriovVfsNum:
		return m.OldSriovVfsNum(ctx)
	case hostnicresource.FieldSriovVfsTotal:
		return m.OldSriovVfsTotal(ctx)
	case hostnicresource.FieldPeerName:
		return m.OldPeerName(ctx)
	case hostnicresource.FieldPeerDescription:
		return m.OldPeerDescription(ctx)
	case hostnicresource.FieldPeerMAC:
		return m.OldPeerMAC(ctx)
	case hostnicresource.FieldPeerMgmtIP:
		return m.OldPeerMgmtIP(ctx)
	case hostnicresource.FieldPeerPort:
		return m.OldPeerPort(ctx)
	case hostnicresource.FieldSupportedLinkMode:
		return m.OldSupportedLinkMode(ctx)
	case hostnicresource.FieldAdvertisingLinkMode:
		return m.OldAdvertisingLinkMode(ctx)
	case hostnicresource.FieldCurrentSpeedBps:
		return m.OldCurrentSpeedBps(ctx)
	case hostnicresource.FieldCurrentDuplex:
		return m.OldCurrentDuplex(ctx)
	case hostnicresource.FieldFeatures:
		return m.OldFeatures(ctx)
	case hostnicresource.FieldMtu:
		return m.OldMtu(ctx)
	case hostnicresource.FieldLinkState:
		return m.OldLinkState(ctx)
	case hostnicresource.FieldBmcInterface:
		return m.OldBmcInterface(ctx)
	}
	return nil, fmt.Errorf("unknown HostnicResource field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HostnicResourceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case hostnicresource.FieldResourceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResourceID(v)
		return nil
	case hostnicresource.FieldKind:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKind(v)
		return nil
	case hostnicresource.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case hostnicresource.FieldDesiredState:
		v, ok := value.(hostnicresource.DesiredState)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesiredState(v)
		return nil
	case hostnicresource.FieldCurrentState:
		v, ok := value.(hostnicresource.CurrentState)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrentState(v)
		return nil
	case hostnicresource.FieldProviderStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProviderStatus(v)
		return nil
	case hostnicresource.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case hostnicresource.FieldPciIdentifier:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPciIdentifier(v)
		return nil
	case hostnicresource.FieldMACAddr:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMACAddr(v)
		return nil
	case hostnicresource.FieldSriovEnabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSriovEnabled(v)
		return nil
	case hostnicresource.FieldSriovVfsNum:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSriovVfsNum(v)
		return nil
	case hostnicresource.FieldSriovVfsTotal:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSriovVfsTotal(v)
		return nil
	case hostnicresource.FieldPeerName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPeerName(v)
		return nil
	case hostnicresource.FieldPeerDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPeerDescription(v)
		return nil
	case hostnicresource.FieldPeerMAC:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPeerMAC(v)
		return nil
	case hostnicresource.FieldPeerMgmtIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPeerMgmtIP(v)
		return nil
	case hostnicresource.FieldPeerPort:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPeerPort(v)
		return nil
	case hostnicresource.FieldSupportedLinkMode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSupportedLinkMode(v)
		return nil
	case hostnicresource.FieldAdvertisingLinkMode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAdvertisingLinkMode(v)
		return nil
	case hostnicresource.FieldCurrentSpeedBps:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrentSpeedBps(v)
		return nil
	case hostnicresource.FieldCurrentDuplex:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrentDuplex(v)
		return nil
	case hostnicresource.FieldFeatures:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeatures(v)
		return nil
	case hostnicresource.FieldMtu:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMtu(v)
		return nil
	case hostnicresource.FieldLinkState:
		v, ok := value.(hostnicresource.LinkState)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLinkState(v)
		return nil
	case hostnicresource.FieldBmcInterface:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBmcInterface(v)
		return nil
	}
	return fmt.Errorf("unknown HostnicResource field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HostnicResourceMutation) AddedFields() []string {
	var fields []string
	if m.addsriov_vfs_num != nil {
		fields = append(fields, hostnicresource.FieldSriovVfsNum)
	}
	if m.addsriov_vfs_total != nil {
		fields = append(fields, hostnicresource.FieldSriovVfsTotal)
	}
	if m.addcurrent_speed_bps != nil {
		fields = append(fields, hostnicresource.FieldCurrentSpeedBps)
	}
	if m.addmtu != nil {
		fields = append(fields, hostnicresource.FieldMtu)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HostnicResourceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case hostnicresource.FieldSriovVfsNum:
		return m.AddedSriovVfsNum()
	case hostnicresource.FieldSriovVfsTotal:
		return m.AddedSriovVfsTotal()
	case hostnicresource.FieldCurrentSpeedBps:
		return m.AddedCurrentSpeedBps()
	case hostnicresource.FieldMtu:
		return m.AddedMtu()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HostnicResourceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case hostnicresource.FieldSriovVfsNum:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSriovVfsNum(v)
		return nil
	case hostnicresource.FieldSriovVfsTotal:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSriovVfsTotal(v)
		return nil
	case hostnicresource.FieldCurrentSpeedBps:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCurrentSpeedBps(v)
		return nil
	case hostnicresource.FieldMtu:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMtu(v)
		return nil
	}
	return fmt.Errorf("unknown HostnicResource numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HostnicResourceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(hostnicresource.FieldKind) {
		fields = append(fields, hostnicresource.FieldKind)
	}
	if m.FieldCleared(hostnicresource.FieldDescription) {
		fields = append(fields, hostnicresource.FieldDescription)
	}
	if m.FieldCleared(hostnicresource.FieldDesiredState) {
		fields = append(fields, hostnicresource.FieldDesiredState)
	}
	if m.FieldCleared(hostnicresource.FieldCurrentState) {
		fields = append(fields, hostnicresource.FieldCurrentState)
	}
	if m.FieldCleared(hostnicresource.FieldProviderStatus) {
		fields = append(fields, hostnicresource.FieldProviderStatus)
	}
	if m.FieldCleared(hostnicresource.FieldName) {
		fields = append(fields, hostnicresource.FieldName)
	}
	if m.FieldCleared(hostnicresource.FieldPciIdentifier) {
		fields = append(fields, hostnicresource.FieldPciIdentifier)
	}
	if m.FieldCleared(hostnicresource.FieldMACAddr) {
		fields = append(fields, hostnicresource.FieldMACAddr)
	}
	if m.FieldCleared(hostnicresource.FieldSriovEnabled) {
		fields = append(fields, hostnicresource.FieldSriovEnabled)
	}
	if m.FieldCleared(hostnicresource.FieldSriovVfsNum) {
		fields = append(fields, hostnicresource.FieldSriovVfsNum)
	}
	if m.FieldCleared(hostnicresource.FieldSriovVfsTotal) {
		fields = append(fields, hostnicresource.FieldSriovVfsTotal)
	}
	if m.FieldCleared(hostnicresource.FieldPeerName) {
		fields = append(fields, hostnicresource.FieldPeerName)
	}
	if m.FieldCleared(hostnicresource.FieldPeerDescription) {
		fields = append(fields, hostnicresource.FieldPeerDescription)
	}
	if m.FieldCleared(hostnicresource.FieldPeerMAC) {
		fields = append(fields, hostnicresource.FieldPeerMAC)
	}
	if m.FieldCleared(hostnicresource.FieldPeerMgmtIP) {
		fields = append(fields, hostnicresource.FieldPeerMgmtIP)
	}
	if m.FieldCleared(hostnicresource.FieldPeerPort) {
		fields = append(fields, hostnicresource.FieldPeerPort)
	}
	if m.FieldCleared(hostnicresource.FieldSupportedLinkMode) {
		fields = append(fields, hostnicresource.FieldSupportedLinkMode)
	}
	if m.FieldCleared(hostnicresource.FieldAdvertisingLinkMode) {
		fields = append(fields, hostnicresource.FieldAdvertisingLinkMode)
	}
	if m.FieldCleared(hostnicresource.FieldCurrentSpeedBps) {
		fields = append(fields, hostnicresource.FieldCurrentSpeedBps)
	}
	if m.FieldCleared(hostnicresource.FieldCurrentDuplex) {
		fields = append(fields, hostnicresource.FieldCurrentDuplex)
	}
	if m.FieldCleared(hostnicresource.FieldFeatures) {
		fields = append(fields, hostnicresource.FieldFeatures)
	}
	if m.FieldCleared(hostnicresource.FieldMtu) {
		fields = append(fields, hostnicresource.FieldMtu)
	}
	if m.FieldCleared(hostnicresource.FieldLinkState) {
		fields = append(fields, hostnicresource.FieldLinkState)
	}
	if m.FieldCleared(hostnicresource.FieldBmcInterface) {
		fields = append(fields, hostnicresource.FieldBmcInterface)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HostnicResourceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HostnicResourceMutation) ClearField(name string) error {
	switch name {
	case hostnicresource.FieldKind:
		m.ClearKind()
		return nil
	case hostnicresource.FieldDescription:
		m.ClearDescription()
		return nil
	case hostnicresource.FieldDesiredState:
		m.ClearDesiredState()
		return nil
	case hostnicresource.FieldCurrentState:
		m.ClearCurrentState()
		return nil
	case hostnicresource.FieldProviderStatus:
		m.ClearProviderStatus()
		return nil
	case hostnicresource.FieldName:
		m.ClearName()
		return nil
	case hostnicresource.FieldPciIdentifier:
		m.ClearPciIdentifier()
		return nil
	case hostnicresource.FieldMACAddr:
		m.ClearMACAddr()
		return nil
	case hostnicresource.FieldSriovEnabled:
		m.ClearSriovEnabled()
		return nil
	case hostnicresource.FieldSriovVfsNum:
		m.ClearSriovVfsNum()
		return nil
	case hostnicresource.FieldSriovVfsTotal:
		m.ClearSriovVfsTotal()
		return nil
	case hostnicresource.FieldPeerName:
		m.ClearPeerName()
		return nil
	case hostnicresource.FieldPeerDescription:
		m.ClearPeerDescription()
		return nil
	case hostnicresource.FieldPeerMAC:
		m.ClearPeerMAC()
		return nil
	case hostnicresource.FieldPeerMgmtIP:
		m.ClearPeerMgmtIP()
		return nil
	case hostnicresource.FieldPeerPort:
		m.ClearPeerPort()
		return nil
	case hostnicresource.FieldSupportedLinkMode:
		m.ClearSupportedLinkMode()
		return nil
	case hostnicresource.FieldAdvertisingLinkMode:
		m.ClearAdvertisingLinkMode()
		return nil
	case hostnicresource.FieldCurrentSpeedBps:
		m.ClearCurrentSpeedBps()
		return nil
	case hostnicresource.FieldCurrentDuplex:
		m.ClearCurrentDuplex()
		return nil
	case hostnicresource.FieldFeatures:
		m.ClearFeatures()
		return nil
	case hostnicresource.FieldMtu:
		m.ClearMtu()
		return nil
	case hostnicresource.FieldLinkState:
		m.ClearLinkState()
		return nil
	case hostnicresource.FieldBmcInterface:
		m.ClearBmcInterface()
		return nil
	}
	return fmt.Errorf("unknown HostnicResource nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HostnicResourceMutation) ResetField(name string) error {
	switch name {
	case hostnicresource.FieldResourceID:
		m.ResetResourceID()
		return nil
	case hostnicresource.FieldKind:
		m.ResetKind()
		return nil
	case hostnicresource.FieldDescription:
		m.ResetDescription()
		return nil
	case hostnicresource.FieldDesiredState:
		m.ResetDesiredState()
		return nil
	case hostnicresource.FieldCurrentState:
		m.ResetCurrentState()
		return nil
	case hostnicresource.FieldProviderStatus:
		m.ResetProviderStatus()
		return nil
	case hostnicresource.FieldName:
		m.ResetName()
		return nil
	case hostnicresource.FieldPciIdentifier:
		m.ResetPciIdentifier()
		return nil
	case hostnicresource.FieldMACAddr:
		m.ResetMACAddr()
		return nil
	case hostnicresource.FieldSriovEnabled:
		m.ResetSriovEnabled()
		return nil
	case hostnicresource.FieldSriovVfsNum:
		m.ResetSriovVfsNum()
		return nil
	case hostnicresource.FieldSriovVfsTotal:
		m.ResetSriovVfsTotal()
		return nil
	case hostnicresource.FieldPeerName:
		m.ResetPeerName()
		return nil
	case hostnicresource.FieldPeerDescription:
		m.ResetPeerDescription()
		return nil
	case hostnicresource.FieldPeerMAC:
		m.ResetPeerMAC()
		return nil
	case hostnicresource.FieldPeerMgmtIP:
		m.ResetPeerMgmtIP()
		return nil
	case hostnicresource.FieldPeerPort:
		m.ResetPeerPort()
		return nil
	case hostnicresource.FieldSupportedLinkMode:
		m.ResetSupportedLinkMode()
		return nil
	case hostnicresource.FieldAdvertisingLinkMode:
		m.ResetAdvertisingLinkMode()
		return nil
	case hostnicresource.FieldCurrentSpeedBps:
		m.ResetCurrentSpeedBps()
		return nil
	case hostnicresource.FieldCurrentDuplex:
		m.ResetCurrentDuplex()
		return nil
	case hostnicresource.FieldFeatures:
		m.ResetFeatures()
		return nil
	case hostnicresource.FieldMtu:
		m.ResetMtu()
		return nil
	case hostnicresource.FieldLinkState:
		m.ResetLinkState()
		return nil
	case hostnicresource.FieldBmcInterface:
		m.ResetBmcInterface()
		return nil
	}
	return fmt.Errorf("unknown HostnicResource field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HostnicResourceMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.site != nil {
		edges = append(edges, hostnicresource.EdgeSite)
	}
	if m.provider != nil {
		edges = append(edges, hostnicresource.EdgeProvider)
	}
	if m.project != nil {
		edges = append(edges, hostnicresource.EdgeProject)
	}
	if m.host != nil {
		edges = append(edges, hostnicresource.EdgeHost)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HostnicResourceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case hostnicresource.EdgeSite:
		if id := m.site; id != nil {
			return []ent.Value{*id}
		}
	case hostnicresource.EdgeProvider:
		if id := m.provider; id != nil {
			return []ent.Value{*id}
		}
	case hostnicresource.EdgeProject:
		if id := m.project; id != nil {
			return []ent.Value{*id}
		}
	case hostnicresource.EdgeHost:
		if id := m.host; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HostnicResourceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HostnicResourceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HostnicResourceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedsite {
		edges = append(edges, hostnicresource.EdgeSite)
	}
	if m.clearedprovider {
		edges = append(edges, hostnicresource.EdgeProvider)
	}
	if m.clearedproject {
		edges = append(edges, hostnicresource.EdgeProject)
	}
	if m.clearedhost {
		edges = append(edges, hostnicresource.EdgeHost)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HostnicResourceMutation) EdgeCleared(name string) bool {
	switch name {
	case hostnicresource.EdgeSite:
		return m.clearedsite
	case hostnicresource.EdgeProvider:
		return m.clearedprovider
	case hostnicresource.EdgeProject:
		return m.clearedproject
	case hostnicresource.EdgeHost:
		return m.clearedhost
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HostnicResourceMutation) ClearEdge(name string) error {
	switch name {
	case hostnicresource.EdgeSite:
		m.ClearSite()
		return nil
	case hostnicresource.EdgeProvider:
		m.ClearProvider()
		return nil
	case hostnicresource.EdgeProject:
		m.ClearProject()
		return nil
	case hostnicresource.EdgeHost:
		m.ClearHost()
		return nil
	}
	return fmt.Errorf("unknown HostnicResource unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HostnicResourceMutation) ResetEdge(name string) error {
	switch name {
	case hostnicresource.EdgeSite:
		m.ResetSite()
		return nil
	case hostnicresource.EdgeProvider:
		m.ResetProvider()
		return nil
	case hostnicresource.EdgeProject:
		m.ResetProject()
		return nil
	case hostnicresource.EdgeHost:
		m.ResetHost()
		return nil
	}
	return fmt.Errorf("unknown HostnicResource edge %s", name)
}

// HoststorageResourceMutation represents an operation that mutates the HoststorageResource nodes in the graph.
type HoststorageResourceMutation struct {
	config
	op                Op
	typ               string
	id                *int
	resource_id       *string
	kind              *string
	description       *string
	desired_state     *hoststorageresource.DesiredState
	current_state     *hoststorageresource.CurrentState
	provider_status   *string
	wwid              *string
	serial            *string
	vendor            *string
	model             *string
	capacity_bytes    *uint64
	addcapacity_bytes *int64
	name              *string
	clearedFields     map[string]struct{}
	site              *int
	clearedsite       bool
	provider          *int
	clearedprovider   bool
	project           *int
	clearedproject    bool
	host              *int
	clearedhost       bool
	done              bool
	oldValue          func(context.Context) (*HoststorageResource, error)
	predicates        []predicate.HoststorageResource
}

var _ ent.Mutation = (*HoststorageResourceMutation)(nil)

// hoststorageresourceOption allows management of the mutation configuration using functional options.
type hoststorageresourceOption func(*HoststorageResourceMutation)

// newHoststorageResourceMutation creates new mutation for the HoststorageResource entity.
func newHoststorageResourceMutation(c config, op Op, opts ...hoststorageresourceOption) *HoststorageResourceMutation {
	m := &HoststorageResourceMutation{
		config:        c,
		op:            op,
		typ:           TypeHoststorageResource,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHoststorageResourceID sets the ID field of the mutation.
func withHoststorageResourceID(id int) hoststorageresourceOption {
	return func(m *HoststorageResourceMutation) {
		var (
			err   error
			once  sync.Once
			value *HoststorageResource
		)
		m.oldValue = func(ctx context.Context) (*HoststorageResource, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().HoststorageResource.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHoststorageResource sets the old HoststorageResource of the mutation.
func withHoststorageResource(node *HoststorageResource) hoststorageresourceOption {
	return func(m *HoststorageResourceMutation) {
		m.oldValue = func(context.Context) (*HoststorageResource, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HoststorageResourceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HoststorageResourceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HoststorageResourceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HoststorageResourceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().HoststorageResource.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetResourceID sets the "resource_id" field.
func (m *HoststorageResourceMutation) SetResourceID(s string) {
	m.resource_id = &s
}

// ResourceID returns the value of the "resource_id" field in the mutation.
func (m *HoststorageResourceMutation) ResourceID() (r string, exists bool) {
	v := m.resource_id
	if v == nil {
		return
	}
	return *v, true
}

// OldResourceID returns the old "resource_id" field's value of the HoststorageResource entity.
// If the HoststorageResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HoststorageResourceMutation) OldResourceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResourceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResourceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResourceID: %w", err)
	}
	return oldValue.ResourceID, nil
}

// ResetResourceID resets all changes to the "resource_id" field.
func (m *HoststorageResourceMutation) ResetResourceID() {
	m.resource_id = nil
}

// SetKind sets the "kind" field.
func (m *HoststorageResourceMutation) SetKind(s string) {
	m.kind = &s
}

// Kind returns the value of the "kind" field in the mutation.
func (m *HoststorageResourceMutation) Kind() (r string, exists bool) {
	v := m.kind
	if v == nil {
		return
	}
	return *v, true
}

// OldKind returns the old "kind" field's value of the HoststorageResource entity.
// If the HoststorageResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HoststorageResourceMutation) OldKind(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKind is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKind requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKind: %w", err)
	}
	return oldValue.Kind, nil
}

// ClearKind clears the value of the "kind" field.
func (m *HoststorageResourceMutation) ClearKind() {
	m.kind = nil
	m.clearedFields[hoststorageresource.FieldKind] = struct{}{}
}

// KindCleared returns if the "kind" field was cleared in this mutation.
func (m *HoststorageResourceMutation) KindCleared() bool {
	_, ok := m.clearedFields[hoststorageresource.FieldKind]
	return ok
}

// ResetKind resets all changes to the "kind" field.
func (m *HoststorageResourceMutation) ResetKind() {
	m.kind = nil
	delete(m.clearedFields, hoststorageresource.FieldKind)
}

// SetDescription sets the "description" field.
func (m *HoststorageResourceMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *HoststorageResourceMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the HoststorageResource entity.
// If the HoststorageResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HoststorageResourceMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *HoststorageResourceMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[hoststorageresource.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *HoststorageResourceMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[hoststorageresource.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *HoststorageResourceMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, hoststorageresource.FieldDescription)
}

// SetDesiredState sets the "desired_state" field.
func (m *HoststorageResourceMutation) SetDesiredState(hs hoststorageresource.DesiredState) {
	m.desired_state = &hs
}

// DesiredState returns the value of the "desired_state" field in the mutation.
func (m *HoststorageResourceMutation) DesiredState() (r hoststorageresource.DesiredState, exists bool) {
	v := m.desired_state
	if v == nil {
		return
	}
	return *v, true
}

// OldDesiredState returns the old "desired_state" field's value of the HoststorageResource entity.
// If the HoststorageResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HoststorageResourceMutation) OldDesiredState(ctx context.Context) (v hoststorageresource.DesiredState, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesiredState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesiredState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesiredState: %w", err)
	}
	return oldValue.DesiredState, nil
}

// ClearDesiredState clears the value of the "desired_state" field.
func (m *HoststorageResourceMutation) ClearDesiredState() {
	m.desired_state = nil
	m.clearedFields[hoststorageresource.FieldDesiredState] = struct{}{}
}

// DesiredStateCleared returns if the "desired_state" field was cleared in this mutation.
func (m *HoststorageResourceMutation) DesiredStateCleared() bool {
	_, ok := m.clearedFields[hoststorageresource.FieldDesiredState]
	return ok
}

// ResetDesiredState resets all changes to the "desired_state" field.
func (m *HoststorageResourceMutation) ResetDesiredState() {
	m.desired_state = nil
	delete(m.clearedFields, hoststorageresource.FieldDesiredState)
}

// SetCurrentState sets the "current_state" field.
func (m *HoststorageResourceMutation) SetCurrentState(hs hoststorageresource.CurrentState) {
	m.current_state = &hs
}

// CurrentState returns the value of the "current_state" field in the mutation.
func (m *HoststorageResourceMutation) CurrentState() (r hoststorageresource.CurrentState, exists bool) {
	v := m.current_state
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrentState returns the old "current_state" field's value of the HoststorageResource entity.
// If the HoststorageResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HoststorageResourceMutation) OldCurrentState(ctx context.Context) (v hoststorageresource.CurrentState, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrentState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrentState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrentState: %w", err)
	}
	return oldValue.CurrentState, nil
}

// ClearCurrentState clears the value of the "current_state" field.
func (m *HoststorageResourceMutation) ClearCurrentState() {
	m.current_state = nil
	m.clearedFields[hoststorageresource.FieldCurrentState] = struct{}{}
}

// CurrentStateCleared returns if the "current_state" field was cleared in this mutation.
func (m *HoststorageResourceMutation) CurrentStateCleared() bool {
	_, ok := m.clearedFields[hoststorageresource.FieldCurrentState]
	return ok
}

// ResetCurrentState resets all changes to the "current_state" field.
func (m *HoststorageResourceMutation) ResetCurrentState() {
	m.current_state = nil
	delete(m.clearedFields, hoststorageresource.FieldCurrentState)
}

// SetProviderStatus sets the "provider_status" field.
func (m *HoststorageResourceMutation) SetProviderStatus(s string) {
	m.provider_status = &s
}

// ProviderStatus returns the value of the "provider_status" field in the mutation.
func (m *HoststorageResourceMutation) ProviderStatus() (r string, exists bool) {
	v := m.provider_status
	if v == nil {
		return
	}
	return *v, true
}

// OldProviderStatus returns the old "provider_status" field's value of the HoststorageResource entity.
// If the HoststorageResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HoststorageResourceMutation) OldProviderStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProviderStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProviderStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProviderStatus: %w", err)
	}
	return oldValue.ProviderStatus, nil
}

// ClearProviderStatus clears the value of the "provider_status" field.
func (m *HoststorageResourceMutation) ClearProviderStatus() {
	m.provider_status = nil
	m.clearedFields[hoststorageresource.FieldProviderStatus] = struct{}{}
}

// ProviderStatusCleared returns if the "provider_status" field was cleared in this mutation.
func (m *HoststorageResourceMutation) ProviderStatusCleared() bool {
	_, ok := m.clearedFields[hoststorageresource.FieldProviderStatus]
	return ok
}

// ResetProviderStatus resets all changes to the "provider_status" field.
func (m *HoststorageResourceMutation) ResetProviderStatus() {
	m.provider_status = nil
	delete(m.clearedFields, hoststorageresource.FieldProviderStatus)
}

// SetWwid sets the "wwid" field.
func (m *HoststorageResourceMutation) SetWwid(s string) {
	m.wwid = &s
}

// Wwid returns the value of the "wwid" field in the mutation.
func (m *HoststorageResourceMutation) Wwid() (r string, exists bool) {
	v := m.wwid
	if v == nil {
		return
	}
	return *v, true
}

// OldWwid returns the old "wwid" field's value of the HoststorageResource entity.
// If the HoststorageResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HoststorageResourceMutation) OldWwid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWwid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWwid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWwid: %w", err)
	}
	return oldValue.Wwid, nil
}

// ClearWwid clears the value of the "wwid" field.
func (m *HoststorageResourceMutation) ClearWwid() {
	m.wwid = nil
	m.clearedFields[hoststorageresource.FieldWwid] = struct{}{}
}

// WwidCleared returns if the "wwid" field was cleared in this mutation.
func (m *HoststorageResourceMutation) WwidCleared() bool {
	_, ok := m.clearedFields[hoststorageresource.FieldWwid]
	return ok
}

// ResetWwid resets all changes to the "wwid" field.
func (m *HoststorageResourceMutation) ResetWwid() {
	m.wwid = nil
	delete(m.clearedFields, hoststorageresource.FieldWwid)
}

// SetSerial sets the "serial" field.
func (m *HoststorageResourceMutation) SetSerial(s string) {
	m.serial = &s
}

// Serial returns the value of the "serial" field in the mutation.
func (m *HoststorageResourceMutation) Serial() (r string, exists bool) {
	v := m.serial
	if v == nil {
		return
	}
	return *v, true
}

// OldSerial returns the old "serial" field's value of the HoststorageResource entity.
// If the HoststorageResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HoststorageResourceMutation) OldSerial(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSerial is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSerial requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSerial: %w", err)
	}
	return oldValue.Serial, nil
}

// ClearSerial clears the value of the "serial" field.
func (m *HoststorageResourceMutation) ClearSerial() {
	m.serial = nil
	m.clearedFields[hoststorageresource.FieldSerial] = struct{}{}
}

// SerialCleared returns if the "serial" field was cleared in this mutation.
func (m *HoststorageResourceMutation) SerialCleared() bool {
	_, ok := m.clearedFields[hoststorageresource.FieldSerial]
	return ok
}

// ResetSerial resets all changes to the "serial" field.
func (m *HoststorageResourceMutation) ResetSerial() {
	m.serial = nil
	delete(m.clearedFields, hoststorageresource.FieldSerial)
}

// SetVendor sets the "vendor" field.
func (m *HoststorageResourceMutation) SetVendor(s string) {
	m.vendor = &s
}

// Vendor returns the value of the "vendor" field in the mutation.
func (m *HoststorageResourceMutation) Vendor() (r string, exists bool) {
	v := m.vendor
	if v == nil {
		return
	}
	return *v, true
}

// OldVendor returns the old "vendor" field's value of the HoststorageResource entity.
// If the HoststorageResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HoststorageResourceMutation) OldVendor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVendor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVendor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVendor: %w", err)
	}
	return oldValue.Vendor, nil
}

// ClearVendor clears the value of the "vendor" field.
func (m *HoststorageResourceMutation) ClearVendor() {
	m.vendor = nil
	m.clearedFields[hoststorageresource.FieldVendor] = struct{}{}
}

// VendorCleared returns if the "vendor" field was cleared in this mutation.
func (m *HoststorageResourceMutation) VendorCleared() bool {
	_, ok := m.clearedFields[hoststorageresource.FieldVendor]
	return ok
}

// ResetVendor resets all changes to the "vendor" field.
func (m *HoststorageResourceMutation) ResetVendor() {
	m.vendor = nil
	delete(m.clearedFields, hoststorageresource.FieldVendor)
}

// SetModel sets the "model" field.
func (m *HoststorageResourceMutation) SetModel(s string) {
	m.model = &s
}

// Model returns the value of the "model" field in the mutation.
func (m *HoststorageResourceMutation) Model() (r string, exists bool) {
	v := m.model
	if v == nil {
		return
	}
	return *v, true
}

// OldModel returns the old "model" field's value of the HoststorageResource entity.
// If the HoststorageResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HoststorageResourceMutation) OldModel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModel: %w", err)
	}
	return oldValue.Model, nil
}

// ClearModel clears the value of the "model" field.
func (m *HoststorageResourceMutation) ClearModel() {
	m.model = nil
	m.clearedFields[hoststorageresource.FieldModel] = struct{}{}
}

// ModelCleared returns if the "model" field was cleared in this mutation.
func (m *HoststorageResourceMutation) ModelCleared() bool {
	_, ok := m.clearedFields[hoststorageresource.FieldModel]
	return ok
}

// ResetModel resets all changes to the "model" field.
func (m *HoststorageResourceMutation) ResetModel() {
	m.model = nil
	delete(m.clearedFields, hoststorageresource.FieldModel)
}

// SetCapacityBytes sets the "capacity_bytes" field.
func (m *HoststorageResourceMutation) SetCapacityBytes(u uint64) {
	m.capacity_bytes = &u
	m.addcapacity_bytes = nil
}

// CapacityBytes returns the value of the "capacity_bytes" field in the mutation.
func (m *HoststorageResourceMutation) CapacityBytes() (r uint64, exists bool) {
	v := m.capacity_bytes
	if v == nil {
		return
	}
	return *v, true
}

// OldCapacityBytes returns the old "capacity_bytes" field's value of the HoststorageResource entity.
// If the HoststorageResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HoststorageResourceMutation) OldCapacityBytes(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCapacityBytes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCapacityBytes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCapacityBytes: %w", err)
	}
	return oldValue.CapacityBytes, nil
}

// AddCapacityBytes adds u to the "capacity_bytes" field.
func (m *HoststorageResourceMutation) AddCapacityBytes(u int64) {
	if m.addcapacity_bytes != nil {
		*m.addcapacity_bytes += u
	} else {
		m.addcapacity_bytes = &u
	}
}

// AddedCapacityBytes returns the value that was added to the "capacity_bytes" field in this mutation.
func (m *HoststorageResourceMutation) AddedCapacityBytes() (r int64, exists bool) {
	v := m.addcapacity_bytes
	if v == nil {
		return
	}
	return *v, true
}

// ClearCapacityBytes clears the value of the "capacity_bytes" field.
func (m *HoststorageResourceMutation) ClearCapacityBytes() {
	m.capacity_bytes = nil
	m.addcapacity_bytes = nil
	m.clearedFields[hoststorageresource.FieldCapacityBytes] = struct{}{}
}

// CapacityBytesCleared returns if the "capacity_bytes" field was cleared in this mutation.
func (m *HoststorageResourceMutation) CapacityBytesCleared() bool {
	_, ok := m.clearedFields[hoststorageresource.FieldCapacityBytes]
	return ok
}

// ResetCapacityBytes resets all changes to the "capacity_bytes" field.
func (m *HoststorageResourceMutation) ResetCapacityBytes() {
	m.capacity_bytes = nil
	m.addcapacity_bytes = nil
	delete(m.clearedFields, hoststorageresource.FieldCapacityBytes)
}

// SetName sets the "name" field.
func (m *HoststorageResourceMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *HoststorageResourceMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the HoststorageResource entity.
// If the HoststorageResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HoststorageResourceMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *HoststorageResourceMutation) ClearName() {
	m.name = nil
	m.clearedFields[hoststorageresource.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *HoststorageResourceMutation) NameCleared() bool {
	_, ok := m.clearedFields[hoststorageresource.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *HoststorageResourceMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, hoststorageresource.FieldName)
}

// SetSiteID sets the "site" edge to the SiteResource entity by id.
func (m *HoststorageResourceMutation) SetSiteID(id int) {
	m.site = &id
}

// ClearSite clears the "site" edge to the SiteResource entity.
func (m *HoststorageResourceMutation) ClearSite() {
	m.clearedsite = true
}

// SiteCleared reports if the "site" edge to the SiteResource entity was cleared.
func (m *HoststorageResourceMutation) SiteCleared() bool {
	return m.clearedsite
}

// SiteID returns the "site" edge ID in the mutation.
func (m *HoststorageResourceMutation) SiteID() (id int, exists bool) {
	if m.site != nil {
		return *m.site, true
	}
	return
}

// SiteIDs returns the "site" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SiteID instead. It exists only for internal usage by the builders.
func (m *HoststorageResourceMutation) SiteIDs() (ids []int) {
	if id := m.site; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSite resets all changes to the "site" edge.
func (m *HoststorageResourceMutation) ResetSite() {
	m.site = nil
	m.clearedsite = false
}

// SetProviderID sets the "provider" edge to the ProviderResource entity by id.
func (m *HoststorageResourceMutation) SetProviderID(id int) {
	m.provider = &id
}

// ClearProvider clears the "provider" edge to the ProviderResource entity.
func (m *HoststorageResourceMutation) ClearProvider() {
	m.clearedprovider = true
}

// ProviderCleared reports if the "provider" edge to the ProviderResource entity was cleared.
func (m *HoststorageResourceMutation) ProviderCleared() bool {
	return m.clearedprovider
}

// ProviderID returns the "provider" edge ID in the mutation.
func (m *HoststorageResourceMutation) ProviderID() (id int, exists bool) {
	if m.provider != nil {
		return *m.provider, true
	}
	return
}

// ProviderIDs returns the "provider" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProviderID instead. It exists only for internal usage by the builders.
func (m *HoststorageResourceMutation) ProviderIDs() (ids []int) {
	if id := m.provider; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProvider resets all changes to the "provider" edge.
func (m *HoststorageResourceMutation) ResetProvider() {
	m.provider = nil
	m.clearedprovider = false
}

// SetProjectID sets the "project" edge to the ProjectResource entity by id.
func (m *HoststorageResourceMutation) SetProjectID(id int) {
	m.project = &id
}

// ClearProject clears the "project" edge to the ProjectResource entity.
func (m *HoststorageResourceMutation) ClearProject() {
	m.clearedproject = true
}

// ProjectCleared reports if the "project" edge to the ProjectResource entity was cleared.
func (m *HoststorageResourceMutation) ProjectCleared() bool {
	return m.clearedproject
}

// ProjectID returns the "project" edge ID in the mutation.
func (m *HoststorageResourceMutation) ProjectID() (id int, exists bool) {
	if m.project != nil {
		return *m.project, true
	}
	return
}

// ProjectIDs returns the "project" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProjectID instead. It exists only for internal usage by the builders.
func (m *HoststorageResourceMutation) ProjectIDs() (ids []int) {
	if id := m.project; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProject resets all changes to the "project" edge.
func (m *HoststorageResourceMutation) ResetProject() {
	m.project = nil
	m.clearedproject = false
}

// SetHostID sets the "host" edge to the HostResource entity by id.
func (m *HoststorageResourceMutation) SetHostID(id int) {
	m.host = &id
}

// ClearHost clears the "host" edge to the HostResource entity.
func (m *HoststorageResourceMutation) ClearHost() {
	m.clearedhost = true
}

// HostCleared reports if the "host" edge to the HostResource entity was cleared.
func (m *HoststorageResourceMutation) HostCleared() bool {
	return m.clearedhost
}

// HostID returns the "host" edge ID in the mutation.
func (m *HoststorageResourceMutation) HostID() (id int, exists bool) {
	if m.host != nil {
		return *m.host, true
	}
	return
}

// HostIDs returns the "host" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// HostID instead. It exists only for internal usage by the builders.
func (m *HoststorageResourceMutation) HostIDs() (ids []int) {
	if id := m.host; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetHost resets all changes to the "host" edge.
func (m *HoststorageResourceMutation) ResetHost() {
	m.host = nil
	m.clearedhost = false
}

// Where appends a list predicates to the HoststorageResourceMutation builder.
func (m *HoststorageResourceMutation) Where(ps ...predicate.HoststorageResource) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the HoststorageResourceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *HoststorageResourceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.HoststorageResource, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *HoststorageResourceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *HoststorageResourceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (HoststorageResource).
func (m *HoststorageResourceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HoststorageResourceMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.resource_id != nil {
		fields = append(fields, hoststorageresource.FieldResourceID)
	}
	if m.kind != nil {
		fields = append(fields, hoststorageresource.FieldKind)
	}
	if m.description != nil {
		fields = append(fields, hoststorageresource.FieldDescription)
	}
	if m.desired_state != nil {
		fields = append(fields, hoststorageresource.FieldDesiredState)
	}
	if m.current_state != nil {
		fields = append(fields, hoststorageresource.FieldCurrentState)
	}
	if m.provider_status != nil {
		fields = append(fields, hoststorageresource.FieldProviderStatus)
	}
	if m.wwid != nil {
		fields = append(fields, hoststorageresource.FieldWwid)
	}
	if m.serial != nil {
		fields = append(fields, hoststorageresource.FieldSerial)
	}
	if m.vendor != nil {
		fields = append(fields, hoststorageresource.FieldVendor)
	}
	if m.model != nil {
		fields = append(fields, hoststorageresource.FieldModel)
	}
	if m.capacity_bytes != nil {
		fields = append(fields, hoststorageresource.FieldCapacityBytes)
	}
	if m.name != nil {
		fields = append(fields, hoststorageresource.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HoststorageResourceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case hoststorageresource.FieldResourceID:
		return m.ResourceID()
	case hoststorageresource.FieldKind:
		return m.Kind()
	case hoststorageresource.FieldDescription:
		return m.Description()
	case hoststorageresource.FieldDesiredState:
		return m.DesiredState()
	case hoststorageresource.FieldCurrentState:
		return m.CurrentState()
	case hoststorageresource.FieldProviderStatus:
		return m.ProviderStatus()
	case hoststorageresource.FieldWwid:
		return m.Wwid()
	case hoststorageresource.FieldSerial:
		return m.Serial()
	case hoststorageresource.FieldVendor:
		return m.Vendor()
	case hoststorageresource.FieldModel:
		return m.Model()
	case hoststorageresource.FieldCapacityBytes:
		return m.CapacityBytes()
	case hoststorageresource.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HoststorageResourceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case hoststorageresource.FieldResourceID:
		return m.OldResourceID(ctx)
	case hoststorageresource.FieldKind:
		return m.OldKind(ctx)
	case hoststorageresource.FieldDescription:
		return m.OldDescription(ctx)
	case hoststorageresource.FieldDesiredState:
		return m.OldDesiredState(ctx)
	case hoststorageresource.FieldCurrentState:
		return m.OldCurrentState(ctx)
	case hoststorageresource.FieldProviderStatus:
		return m.OldProviderStatus(ctx)
	case hoststorageresource.FieldWwid:
		return m.OldWwid(ctx)
	case hoststorageresource.FieldSerial:
		return m.OldSerial(ctx)
	case hoststorageresource.FieldVendor:
		return m.OldVendor(ctx)
	case hoststorageresource.FieldModel:
		return m.OldModel(ctx)
	case hoststorageresource.FieldCapacityBytes:
		return m.OldCapacityBytes(ctx)
	case hoststorageresource.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown HoststorageResource field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HoststorageResourceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case hoststorageresource.FieldResourceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResourceID(v)
		return nil
	case hoststorageresource.FieldKind:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKind(v)
		return nil
	case hoststorageresource.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case hoststorageresource.FieldDesiredState:
		v, ok := value.(hoststorageresource.DesiredState)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesiredState(v)
		return nil
	case hoststorageresource.FieldCurrentState:
		v, ok := value.(hoststorageresource.CurrentState)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrentState(v)
		return nil
	case hoststorageresource.FieldProviderStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProviderStatus(v)
		return nil
	case hoststorageresource.FieldWwid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWwid(v)
		return nil
	case hoststorageresource.FieldSerial:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSerial(v)
		return nil
	case hoststorageresource.FieldVendor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVendor(v)
		return nil
	case hoststorageresource.FieldModel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModel(v)
		return nil
	case hoststorageresource.FieldCapacityBytes:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCapacityBytes(v)
		return nil
	case hoststorageresource.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown HoststorageResource field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HoststorageResourceMutation) AddedFields() []string {
	var fields []string
	if m.addcapacity_bytes != nil {
		fields = append(fields, hoststorageresource.FieldCapacityBytes)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HoststorageResourceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case hoststorageresource.FieldCapacityBytes:
		return m.AddedCapacityBytes()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HoststorageResourceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case hoststorageresource.FieldCapacityBytes:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCapacityBytes(v)
		return nil
	}
	return fmt.Errorf("unknown HoststorageResource numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HoststorageResourceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(hoststorageresource.FieldKind) {
		fields = append(fields, hoststorageresource.FieldKind)
	}
	if m.FieldCleared(hoststorageresource.FieldDescription) {
		fields = append(fields, hoststorageresource.FieldDescription)
	}
	if m.FieldCleared(hoststorageresource.FieldDesiredState) {
		fields = append(fields, hoststorageresource.FieldDesiredState)
	}
	if m.FieldCleared(hoststorageresource.FieldCurrentState) {
		fields = append(fields, hoststorageresource.FieldCurrentState)
	}
	if m.FieldCleared(hoststorageresource.FieldProviderStatus) {
		fields = append(fields, hoststorageresource.FieldProviderStatus)
	}
	if m.FieldCleared(hoststorageresource.FieldWwid) {
		fields = append(fields, hoststorageresource.FieldWwid)
	}
	if m.FieldCleared(hoststorageresource.FieldSerial) {
		fields = append(fields, hoststorageresource.FieldSerial)
	}
	if m.FieldCleared(hoststorageresource.FieldVendor) {
		fields = append(fields, hoststorageresource.FieldVendor)
	}
	if m.FieldCleared(hoststorageresource.FieldModel) {
		fields = append(fields, hoststorageresource.FieldModel)
	}
	if m.FieldCleared(hoststorageresource.FieldCapacityBytes) {
		fields = append(fields, hoststorageresource.FieldCapacityBytes)
	}
	if m.FieldCleared(hoststorageresource.FieldName) {
		fields = append(fields, hoststorageresource.FieldName)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HoststorageResourceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HoststorageResourceMutation) ClearField(name string) error {
	switch name {
	case hoststorageresource.FieldKind:
		m.ClearKind()
		return nil
	case hoststorageresource.FieldDescription:
		m.ClearDescription()
		return nil
	case hoststorageresource.FieldDesiredState:
		m.ClearDesiredState()
		return nil
	case hoststorageresource.FieldCurrentState:
		m.ClearCurrentState()
		return nil
	case hoststorageresource.FieldProviderStatus:
		m.ClearProviderStatus()
		return nil
	case hoststorageresource.FieldWwid:
		m.ClearWwid()
		return nil
	case hoststorageresource.FieldSerial:
		m.ClearSerial()
		return nil
	case hoststorageresource.FieldVendor:
		m.ClearVendor()
		return nil
	case hoststorageresource.FieldModel:
		m.ClearModel()
		return nil
	case hoststorageresource.FieldCapacityBytes:
		m.ClearCapacityBytes()
		return nil
	case hoststorageresource.FieldName:
		m.ClearName()
		return nil
	}
	return fmt.Errorf("unknown HoststorageResource nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HoststorageResourceMutation) ResetField(name string) error {
	switch name {
	case hoststorageresource.FieldResourceID:
		m.ResetResourceID()
		return nil
	case hoststorageresource.FieldKind:
		m.ResetKind()
		return nil
	case hoststorageresource.FieldDescription:
		m.ResetDescription()
		return nil
	case hoststorageresource.FieldDesiredState:
		m.ResetDesiredState()
		return nil
	case hoststorageresource.FieldCurrentState:
		m.ResetCurrentState()
		return nil
	case hoststorageresource.FieldProviderStatus:
		m.ResetProviderStatus()
		return nil
	case hoststorageresource.FieldWwid:
		m.ResetWwid()
		return nil
	case hoststorageresource.FieldSerial:
		m.ResetSerial()
		return nil
	case hoststorageresource.FieldVendor:
		m.ResetVendor()
		return nil
	case hoststorageresource.FieldModel:
		m.ResetModel()
		return nil
	case hoststorageresource.FieldCapacityBytes:
		m.ResetCapacityBytes()
		return nil
	case hoststorageresource.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown HoststorageResource field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HoststorageResourceMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.site != nil {
		edges = append(edges, hoststorageresource.EdgeSite)
	}
	if m.provider != nil {
		edges = append(edges, hoststorageresource.EdgeProvider)
	}
	if m.project != nil {
		edges = append(edges, hoststorageresource.EdgeProject)
	}
	if m.host != nil {
		edges = append(edges, hoststorageresource.EdgeHost)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HoststorageResourceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case hoststorageresource.EdgeSite:
		if id := m.site; id != nil {
			return []ent.Value{*id}
		}
	case hoststorageresource.EdgeProvider:
		if id := m.provider; id != nil {
			return []ent.Value{*id}
		}
	case hoststorageresource.EdgeProject:
		if id := m.project; id != nil {
			return []ent.Value{*id}
		}
	case hoststorageresource.EdgeHost:
		if id := m.host; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HoststorageResourceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HoststorageResourceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HoststorageResourceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedsite {
		edges = append(edges, hoststorageresource.EdgeSite)
	}
	if m.clearedprovider {
		edges = append(edges, hoststorageresource.EdgeProvider)
	}
	if m.clearedproject {
		edges = append(edges, hoststorageresource.EdgeProject)
	}
	if m.clearedhost {
		edges = append(edges, hoststorageresource.EdgeHost)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HoststorageResourceMutation) EdgeCleared(name string) bool {
	switch name {
	case hoststorageresource.EdgeSite:
		return m.clearedsite
	case hoststorageresource.EdgeProvider:
		return m.clearedprovider
	case hoststorageresource.EdgeProject:
		return m.clearedproject
	case hoststorageresource.EdgeHost:
		return m.clearedhost
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HoststorageResourceMutation) ClearEdge(name string) error {
	switch name {
	case hoststorageresource.EdgeSite:
		m.ClearSite()
		return nil
	case hoststorageresource.EdgeProvider:
		m.ClearProvider()
		return nil
	case hoststorageresource.EdgeProject:
		m.ClearProject()
		return nil
	case hoststorageresource.EdgeHost:
		m.ClearHost()
		return nil
	}
	return fmt.Errorf("unknown HoststorageResource unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HoststorageResourceMutation) ResetEdge(name string) error {
	switch name {
	case hoststorageresource.EdgeSite:
		m.ResetSite()
		return nil
	case hoststorageresource.EdgeProvider:
		m.ResetProvider()
		return nil
	case hoststorageresource.EdgeProject:
		m.ResetProject()
		return nil
	case hoststorageresource.EdgeHost:
		m.ResetHost()
		return nil
	}
	return fmt.Errorf("unknown HoststorageResource edge %s", name)
}

// HostusbResourceMutation represents an operation that mutates the HostusbResource nodes in the graph.
type HostusbResourceMutation struct {
	config
	op            Op
	typ           string
	id            *int
	resource_id   *string
	kind          *string
	description   *string
	current_state *hostusbresource.CurrentState
	desired_state *hostusbresource.DesiredState
	owner_id      *string
	idvendor      *string
	idproduct     *string
	bus           *uint32
	addbus        *int32
	addr          *uint32
	addaddr       *int32
	class         *string
	serial        *string
	clearedFields map[string]struct{}
	host          *int
	clearedhost   bool
	done          bool
	oldValue      func(context.Context) (*HostusbResource, error)
	predicates    []predicate.HostusbResource
}

var _ ent.Mutation = (*HostusbResourceMutation)(nil)

// hostusbresourceOption allows management of the mutation configuration using functional options.
type hostusbresourceOption func(*HostusbResourceMutation)

// newHostusbResourceMutation creates new mutation for the HostusbResource entity.
func newHostusbResourceMutation(c config, op Op, opts ...hostusbresourceOption) *HostusbResourceMutation {
	m := &HostusbResourceMutation{
		config:        c,
		op:            op,
		typ:           TypeHostusbResource,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHostusbResourceID sets the ID field of the mutation.
func withHostusbResourceID(id int) hostusbresourceOption {
	return func(m *HostusbResourceMutation) {
		var (
			err   error
			once  sync.Once
			value *HostusbResource
		)
		m.oldValue = func(ctx context.Context) (*HostusbResource, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().HostusbResource.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHostusbResource sets the old HostusbResource of the mutation.
func withHostusbResource(node *HostusbResource) hostusbresourceOption {
	return func(m *HostusbResourceMutation) {
		m.oldValue = func(context.Context) (*HostusbResource, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HostusbResourceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HostusbResourceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HostusbResourceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HostusbResourceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().HostusbResource.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetResourceID sets the "resource_id" field.
func (m *HostusbResourceMutation) SetResourceID(s string) {
	m.resource_id = &s
}

// ResourceID returns the value of the "resource_id" field in the mutation.
func (m *HostusbResourceMutation) ResourceID() (r string, exists bool) {
	v := m.resource_id
	if v == nil {
		return
	}
	return *v, true
}

// OldResourceID returns the old "resource_id" field's value of the HostusbResource entity.
// If the HostusbResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostusbResourceMutation) OldResourceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResourceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResourceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResourceID: %w", err)
	}
	return oldValue.ResourceID, nil
}

// ResetResourceID resets all changes to the "resource_id" field.
func (m *HostusbResourceMutation) ResetResourceID() {
	m.resource_id = nil
}

// SetKind sets the "kind" field.
func (m *HostusbResourceMutation) SetKind(s string) {
	m.kind = &s
}

// Kind returns the value of the "kind" field in the mutation.
func (m *HostusbResourceMutation) Kind() (r string, exists bool) {
	v := m.kind
	if v == nil {
		return
	}
	return *v, true
}

// OldKind returns the old "kind" field's value of the HostusbResource entity.
// If the HostusbResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostusbResourceMutation) OldKind(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKind is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKind requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKind: %w", err)
	}
	return oldValue.Kind, nil
}

// ClearKind clears the value of the "kind" field.
func (m *HostusbResourceMutation) ClearKind() {
	m.kind = nil
	m.clearedFields[hostusbresource.FieldKind] = struct{}{}
}

// KindCleared returns if the "kind" field was cleared in this mutation.
func (m *HostusbResourceMutation) KindCleared() bool {
	_, ok := m.clearedFields[hostusbresource.FieldKind]
	return ok
}

// ResetKind resets all changes to the "kind" field.
func (m *HostusbResourceMutation) ResetKind() {
	m.kind = nil
	delete(m.clearedFields, hostusbresource.FieldKind)
}

// SetDescription sets the "description" field.
func (m *HostusbResourceMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *HostusbResourceMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the HostusbResource entity.
// If the HostusbResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostusbResourceMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *HostusbResourceMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[hostusbresource.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *HostusbResourceMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[hostusbresource.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *HostusbResourceMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, hostusbresource.FieldDescription)
}

// SetCurrentState sets the "current_state" field.
func (m *HostusbResourceMutation) SetCurrentState(hs hostusbresource.CurrentState) {
	m.current_state = &hs
}

// CurrentState returns the value of the "current_state" field in the mutation.
func (m *HostusbResourceMutation) CurrentState() (r hostusbresource.CurrentState, exists bool) {
	v := m.current_state
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrentState returns the old "current_state" field's value of the HostusbResource entity.
// If the HostusbResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostusbResourceMutation) OldCurrentState(ctx context.Context) (v hostusbresource.CurrentState, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrentState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrentState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrentState: %w", err)
	}
	return oldValue.CurrentState, nil
}

// ClearCurrentState clears the value of the "current_state" field.
func (m *HostusbResourceMutation) ClearCurrentState() {
	m.current_state = nil
	m.clearedFields[hostusbresource.FieldCurrentState] = struct{}{}
}

// CurrentStateCleared returns if the "current_state" field was cleared in this mutation.
func (m *HostusbResourceMutation) CurrentStateCleared() bool {
	_, ok := m.clearedFields[hostusbresource.FieldCurrentState]
	return ok
}

// ResetCurrentState resets all changes to the "current_state" field.
func (m *HostusbResourceMutation) ResetCurrentState() {
	m.current_state = nil
	delete(m.clearedFields, hostusbresource.FieldCurrentState)
}

// SetDesiredState sets the "desired_state" field.
func (m *HostusbResourceMutation) SetDesiredState(hs hostusbresource.DesiredState) {
	m.desired_state = &hs
}

// DesiredState returns the value of the "desired_state" field in the mutation.
func (m *HostusbResourceMutation) DesiredState() (r hostusbresource.DesiredState, exists bool) {
	v := m.desired_state
	if v == nil {
		return
	}
	return *v, true
}

// OldDesiredState returns the old "desired_state" field's value of the HostusbResource entity.
// If the HostusbResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostusbResourceMutation) OldDesiredState(ctx context.Context) (v hostusbresource.DesiredState, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesiredState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesiredState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesiredState: %w", err)
	}
	return oldValue.DesiredState, nil
}

// ClearDesiredState clears the value of the "desired_state" field.
func (m *HostusbResourceMutation) ClearDesiredState() {
	m.desired_state = nil
	m.clearedFields[hostusbresource.FieldDesiredState] = struct{}{}
}

// DesiredStateCleared returns if the "desired_state" field was cleared in this mutation.
func (m *HostusbResourceMutation) DesiredStateCleared() bool {
	_, ok := m.clearedFields[hostusbresource.FieldDesiredState]
	return ok
}

// ResetDesiredState resets all changes to the "desired_state" field.
func (m *HostusbResourceMutation) ResetDesiredState() {
	m.desired_state = nil
	delete(m.clearedFields, hostusbresource.FieldDesiredState)
}

// SetOwnerID sets the "owner_id" field.
func (m *HostusbResourceMutation) SetOwnerID(s string) {
	m.owner_id = &s
}

// OwnerID returns the value of the "owner_id" field in the mutation.
func (m *HostusbResourceMutation) OwnerID() (r string, exists bool) {
	v := m.owner_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerID returns the old "owner_id" field's value of the HostusbResource entity.
// If the HostusbResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostusbResourceMutation) OldOwnerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerID: %w", err)
	}
	return oldValue.OwnerID, nil
}

// ClearOwnerID clears the value of the "owner_id" field.
func (m *HostusbResourceMutation) ClearOwnerID() {
	m.owner_id = nil
	m.clearedFields[hostusbresource.FieldOwnerID] = struct{}{}
}

// OwnerIDCleared returns if the "owner_id" field was cleared in this mutation.
func (m *HostusbResourceMutation) OwnerIDCleared() bool {
	_, ok := m.clearedFields[hostusbresource.FieldOwnerID]
	return ok
}

// ResetOwnerID resets all changes to the "owner_id" field.
func (m *HostusbResourceMutation) ResetOwnerID() {
	m.owner_id = nil
	delete(m.clearedFields, hostusbresource.FieldOwnerID)
}

// SetIdvendor sets the "idvendor" field.
func (m *HostusbResourceMutation) SetIdvendor(s string) {
	m.idvendor = &s
}

// Idvendor returns the value of the "idvendor" field in the mutation.
func (m *HostusbResourceMutation) Idvendor() (r string, exists bool) {
	v := m.idvendor
	if v == nil {
		return
	}
	return *v, true
}

// OldIdvendor returns the old "idvendor" field's value of the HostusbResource entity.
// If the HostusbResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostusbResourceMutation) OldIdvendor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdvendor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdvendor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdvendor: %w", err)
	}
	return oldValue.Idvendor, nil
}

// ClearIdvendor clears the value of the "idvendor" field.
func (m *HostusbResourceMutation) ClearIdvendor() {
	m.idvendor = nil
	m.clearedFields[hostusbresource.FieldIdvendor] = struct{}{}
}

// IdvendorCleared returns if the "idvendor" field was cleared in this mutation.
func (m *HostusbResourceMutation) IdvendorCleared() bool {
	_, ok := m.clearedFields[hostusbresource.FieldIdvendor]
	return ok
}

// ResetIdvendor resets all changes to the "idvendor" field.
func (m *HostusbResourceMutation) ResetIdvendor() {
	m.idvendor = nil
	delete(m.clearedFields, hostusbresource.FieldIdvendor)
}

// SetIdproduct sets the "idproduct" field.
func (m *HostusbResourceMutation) SetIdproduct(s string) {
	m.idproduct = &s
}

// Idproduct returns the value of the "idproduct" field in the mutation.
func (m *HostusbResourceMutation) Idproduct() (r string, exists bool) {
	v := m.idproduct
	if v == nil {
		return
	}
	return *v, true
}

// OldIdproduct returns the old "idproduct" field's value of the HostusbResource entity.
// If the HostusbResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostusbResourceMutation) OldIdproduct(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdproduct is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdproduct requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdproduct: %w", err)
	}
	return oldValue.Idproduct, nil
}

// ClearIdproduct clears the value of the "idproduct" field.
func (m *HostusbResourceMutation) ClearIdproduct() {
	m.idproduct = nil
	m.clearedFields[hostusbresource.FieldIdproduct] = struct{}{}
}

// IdproductCleared returns if the "idproduct" field was cleared in this mutation.
func (m *HostusbResourceMutation) IdproductCleared() bool {
	_, ok := m.clearedFields[hostusbresource.FieldIdproduct]
	return ok
}

// ResetIdproduct resets all changes to the "idproduct" field.
func (m *HostusbResourceMutation) ResetIdproduct() {
	m.idproduct = nil
	delete(m.clearedFields, hostusbresource.FieldIdproduct)
}

// SetBus sets the "bus" field.
func (m *HostusbResourceMutation) SetBus(u uint32) {
	m.bus = &u
	m.addbus = nil
}

// Bus returns the value of the "bus" field in the mutation.
func (m *HostusbResourceMutation) Bus() (r uint32, exists bool) {
	v := m.bus
	if v == nil {
		return
	}
	return *v, true
}

// OldBus returns the old "bus" field's value of the HostusbResource entity.
// If the HostusbResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostusbResourceMutation) OldBus(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBus: %w", err)
	}
	return oldValue.Bus, nil
}

// AddBus adds u to the "bus" field.
func (m *HostusbResourceMutation) AddBus(u int32) {
	if m.addbus != nil {
		*m.addbus += u
	} else {
		m.addbus = &u
	}
}

// AddedBus returns the value that was added to the "bus" field in this mutation.
func (m *HostusbResourceMutation) AddedBus() (r int32, exists bool) {
	v := m.addbus
	if v == nil {
		return
	}
	return *v, true
}

// ClearBus clears the value of the "bus" field.
func (m *HostusbResourceMutation) ClearBus() {
	m.bus = nil
	m.addbus = nil
	m.clearedFields[hostusbresource.FieldBus] = struct{}{}
}

// BusCleared returns if the "bus" field was cleared in this mutation.
func (m *HostusbResourceMutation) BusCleared() bool {
	_, ok := m.clearedFields[hostusbresource.FieldBus]
	return ok
}

// ResetBus resets all changes to the "bus" field.
func (m *HostusbResourceMutation) ResetBus() {
	m.bus = nil
	m.addbus = nil
	delete(m.clearedFields, hostusbresource.FieldBus)
}

// SetAddr sets the "addr" field.
func (m *HostusbResourceMutation) SetAddr(u uint32) {
	m.addr = &u
	m.addaddr = nil
}

// Addr returns the value of the "addr" field in the mutation.
func (m *HostusbResourceMutation) Addr() (r uint32, exists bool) {
	v := m.addr
	if v == nil {
		return
	}
	return *v, true
}

// OldAddr returns the old "addr" field's value of the HostusbResource entity.
// If the HostusbResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostusbResourceMutation) OldAddr(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddr is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddr requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddr: %w", err)
	}
	return oldValue.Addr, nil
}

// AddAddr adds u to the "addr" field.
func (m *HostusbResourceMutation) AddAddr(u int32) {
	if m.addaddr != nil {
		*m.addaddr += u
	} else {
		m.addaddr = &u
	}
}

// AddedAddr returns the value that was added to the "addr" field in this mutation.
func (m *HostusbResourceMutation) AddedAddr() (r int32, exists bool) {
	v := m.addaddr
	if v == nil {
		return
	}
	return *v, true
}

// ClearAddr clears the value of the "addr" field.
func (m *HostusbResourceMutation) ClearAddr() {
	m.addr = nil
	m.addaddr = nil
	m.clearedFields[hostusbresource.FieldAddr] = struct{}{}
}

// AddrCleared returns if the "addr" field was cleared in this mutation.
func (m *HostusbResourceMutation) AddrCleared() bool {
	_, ok := m.clearedFields[hostusbresource.FieldAddr]
	return ok
}

// ResetAddr resets all changes to the "addr" field.
func (m *HostusbResourceMutation) ResetAddr() {
	m.addr = nil
	m.addaddr = nil
	delete(m.clearedFields, hostusbresource.FieldAddr)
}

// SetClass sets the "class" field.
func (m *HostusbResourceMutation) SetClass(s string) {
	m.class = &s
}

// Class returns the value of the "class" field in the mutation.
func (m *HostusbResourceMutation) Class() (r string, exists bool) {
	v := m.class
	if v == nil {
		return
	}
	return *v, true
}

// OldClass returns the old "class" field's value of the HostusbResource entity.
// If the HostusbResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostusbResourceMutation) OldClass(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClass is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClass requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClass: %w", err)
	}
	return oldValue.Class, nil
}

// ClearClass clears the value of the "class" field.
func (m *HostusbResourceMutation) ClearClass() {
	m.class = nil
	m.clearedFields[hostusbresource.FieldClass] = struct{}{}
}

// ClassCleared returns if the "class" field was cleared in this mutation.
func (m *HostusbResourceMutation) ClassCleared() bool {
	_, ok := m.clearedFields[hostusbresource.FieldClass]
	return ok
}

// ResetClass resets all changes to the "class" field.
func (m *HostusbResourceMutation) ResetClass() {
	m.class = nil
	delete(m.clearedFields, hostusbresource.FieldClass)
}

// SetSerial sets the "serial" field.
func (m *HostusbResourceMutation) SetSerial(s string) {
	m.serial = &s
}

// Serial returns the value of the "serial" field in the mutation.
func (m *HostusbResourceMutation) Serial() (r string, exists bool) {
	v := m.serial
	if v == nil {
		return
	}
	return *v, true
}

// OldSerial returns the old "serial" field's value of the HostusbResource entity.
// If the HostusbResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostusbResourceMutation) OldSerial(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSerial is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSerial requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSerial: %w", err)
	}
	return oldValue.Serial, nil
}

// ClearSerial clears the value of the "serial" field.
func (m *HostusbResourceMutation) ClearSerial() {
	m.serial = nil
	m.clearedFields[hostusbresource.FieldSerial] = struct{}{}
}

// SerialCleared returns if the "serial" field was cleared in this mutation.
func (m *HostusbResourceMutation) SerialCleared() bool {
	_, ok := m.clearedFields[hostusbresource.FieldSerial]
	return ok
}

// ResetSerial resets all changes to the "serial" field.
func (m *HostusbResourceMutation) ResetSerial() {
	m.serial = nil
	delete(m.clearedFields, hostusbresource.FieldSerial)
}

// SetHostID sets the "host" edge to the HostResource entity by id.
func (m *HostusbResourceMutation) SetHostID(id int) {
	m.host = &id
}

// ClearHost clears the "host" edge to the HostResource entity.
func (m *HostusbResourceMutation) ClearHost() {
	m.clearedhost = true
}

// HostCleared reports if the "host" edge to the HostResource entity was cleared.
func (m *HostusbResourceMutation) HostCleared() bool {
	return m.clearedhost
}

// HostID returns the "host" edge ID in the mutation.
func (m *HostusbResourceMutation) HostID() (id int, exists bool) {
	if m.host != nil {
		return *m.host, true
	}
	return
}

// HostIDs returns the "host" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// HostID instead. It exists only for internal usage by the builders.
func (m *HostusbResourceMutation) HostIDs() (ids []int) {
	if id := m.host; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetHost resets all changes to the "host" edge.
func (m *HostusbResourceMutation) ResetHost() {
	m.host = nil
	m.clearedhost = false
}

// Where appends a list predicates to the HostusbResourceMutation builder.
func (m *HostusbResourceMutation) Where(ps ...predicate.HostusbResource) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the HostusbResourceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *HostusbResourceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.HostusbResource, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *HostusbResourceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *HostusbResourceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (HostusbResource).
func (m *HostusbResourceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HostusbResourceMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.resource_id != nil {
		fields = append(fields, hostusbresource.FieldResourceID)
	}
	if m.kind != nil {
		fields = append(fields, hostusbresource.FieldKind)
	}
	if m.description != nil {
		fields = append(fields, hostusbresource.FieldDescription)
	}
	if m.current_state != nil {
		fields = append(fields, hostusbresource.FieldCurrentState)
	}
	if m.desired_state != nil {
		fields = append(fields, hostusbresource.FieldDesiredState)
	}
	if m.owner_id != nil {
		fields = append(fields, hostusbresource.FieldOwnerID)
	}
	if m.idvendor != nil {
		fields = append(fields, hostusbresource.FieldIdvendor)
	}
	if m.idproduct != nil {
		fields = append(fields, hostusbresource.FieldIdproduct)
	}
	if m.bus != nil {
		fields = append(fields, hostusbresource.FieldBus)
	}
	if m.addr != nil {
		fields = append(fields, hostusbresource.FieldAddr)
	}
	if m.class != nil {
		fields = append(fields, hostusbresource.FieldClass)
	}
	if m.serial != nil {
		fields = append(fields, hostusbresource.FieldSerial)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HostusbResourceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case hostusbresource.FieldResourceID:
		return m.ResourceID()
	case hostusbresource.FieldKind:
		return m.Kind()
	case hostusbresource.FieldDescription:
		return m.Description()
	case hostusbresource.FieldCurrentState:
		return m.CurrentState()
	case hostusbresource.FieldDesiredState:
		return m.DesiredState()
	case hostusbresource.FieldOwnerID:
		return m.OwnerID()
	case hostusbresource.FieldIdvendor:
		return m.Idvendor()
	case hostusbresource.FieldIdproduct:
		return m.Idproduct()
	case hostusbresource.FieldBus:
		return m.Bus()
	case hostusbresource.FieldAddr:
		return m.Addr()
	case hostusbresource.FieldClass:
		return m.Class()
	case hostusbresource.FieldSerial:
		return m.Serial()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HostusbResourceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case hostusbresource.FieldResourceID:
		return m.OldResourceID(ctx)
	case hostusbresource.FieldKind:
		return m.OldKind(ctx)
	case hostusbresource.FieldDescription:
		return m.OldDescription(ctx)
	case hostusbresource.FieldCurrentState:
		return m.OldCurrentState(ctx)
	case hostusbresource.FieldDesiredState:
		return m.OldDesiredState(ctx)
	case hostusbresource.FieldOwnerID:
		return m.OldOwnerID(ctx)
	case hostusbresource.FieldIdvendor:
		return m.OldIdvendor(ctx)
	case hostusbresource.FieldIdproduct:
		return m.OldIdproduct(ctx)
	case hostusbresource.FieldBus:
		return m.OldBus(ctx)
	case hostusbresource.FieldAddr:
		return m.OldAddr(ctx)
	case hostusbresource.FieldClass:
		return m.OldClass(ctx)
	case hostusbresource.FieldSerial:
		return m.OldSerial(ctx)
	}
	return nil, fmt.Errorf("unknown HostusbResource field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HostusbResourceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case hostusbresource.FieldResourceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResourceID(v)
		return nil
	case hostusbresource.FieldKind:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKind(v)
		return nil
	case hostusbresource.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case hostusbresource.FieldCurrentState:
		v, ok := value.(hostusbresource.CurrentState)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrentState(v)
		return nil
	case hostusbresource.FieldDesiredState:
		v, ok := value.(hostusbresource.DesiredState)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesiredState(v)
		return nil
	case hostusbresource.FieldOwnerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerID(v)
		return nil
	case hostusbresource.FieldIdvendor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdvendor(v)
		return nil
	case hostusbresource.FieldIdproduct:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdproduct(v)
		return nil
	case hostusbresource.FieldBus:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBus(v)
		return nil
	case hostusbresource.FieldAddr:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddr(v)
		return nil
	case hostusbresource.FieldClass:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClass(v)
		return nil
	case hostusbresource.FieldSerial:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSerial(v)
		return nil
	}
	return fmt.Errorf("unknown HostusbResource field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HostusbResourceMutation) AddedFields() []string {
	var fields []string
	if m.addbus != nil {
		fields = append(fields, hostusbresource.FieldBus)
	}
	if m.addaddr != nil {
		fields = append(fields, hostusbresource.FieldAddr)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HostusbResourceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case hostusbresource.FieldBus:
		return m.AddedBus()
	case hostusbresource.FieldAddr:
		return m.AddedAddr()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HostusbResourceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case hostusbresource.FieldBus:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBus(v)
		return nil
	case hostusbresource.FieldAddr:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAddr(v)
		return nil
	}
	return fmt.Errorf("unknown HostusbResource numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HostusbResourceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(hostusbresource.FieldKind) {
		fields = append(fields, hostusbresource.FieldKind)
	}
	if m.FieldCleared(hostusbresource.FieldDescription) {
		fields = append(fields, hostusbresource.FieldDescription)
	}
	if m.FieldCleared(hostusbresource.FieldCurrentState) {
		fields = append(fields, hostusbresource.FieldCurrentState)
	}
	if m.FieldCleared(hostusbresource.FieldDesiredState) {
		fields = append(fields, hostusbresource.FieldDesiredState)
	}
	if m.FieldCleared(hostusbresource.FieldOwnerID) {
		fields = append(fields, hostusbresource.FieldOwnerID)
	}
	if m.FieldCleared(hostusbresource.FieldIdvendor) {
		fields = append(fields, hostusbresource.FieldIdvendor)
	}
	if m.FieldCleared(hostusbresource.FieldIdproduct) {
		fields = append(fields, hostusbresource.FieldIdproduct)
	}
	if m.FieldCleared(hostusbresource.FieldBus) {
		fields = append(fields, hostusbresource.FieldBus)
	}
	if m.FieldCleared(hostusbresource.FieldAddr) {
		fields = append(fields, hostusbresource.FieldAddr)
	}
	if m.FieldCleared(hostusbresource.FieldClass) {
		fields = append(fields, hostusbresource.FieldClass)
	}
	if m.FieldCleared(hostusbresource.FieldSerial) {
		fields = append(fields, hostusbresource.FieldSerial)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HostusbResourceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HostusbResourceMutation) ClearField(name string) error {
	switch name {
	case hostusbresource.FieldKind:
		m.ClearKind()
		return nil
	case hostusbresource.FieldDescription:
		m.ClearDescription()
		return nil
	case hostusbresource.FieldCurrentState:
		m.ClearCurrentState()
		return nil
	case hostusbresource.FieldDesiredState:
		m.ClearDesiredState()
		return nil
	case hostusbresource.FieldOwnerID:
		m.ClearOwnerID()
		return nil
	case hostusbresource.FieldIdvendor:
		m.ClearIdvendor()
		return nil
	case hostusbresource.FieldIdproduct:
		m.ClearIdproduct()
		return nil
	case hostusbresource.FieldBus:
		m.ClearBus()
		return nil
	case hostusbresource.FieldAddr:
		m.ClearAddr()
		return nil
	case hostusbresource.FieldClass:
		m.ClearClass()
		return nil
	case hostusbresource.FieldSerial:
		m.ClearSerial()
		return nil
	}
	return fmt.Errorf("unknown HostusbResource nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HostusbResourceMutation) ResetField(name string) error {
	switch name {
	case hostusbresource.FieldResourceID:
		m.ResetResourceID()
		return nil
	case hostusbresource.FieldKind:
		m.ResetKind()
		return nil
	case hostusbresource.FieldDescription:
		m.ResetDescription()
		return nil
	case hostusbresource.FieldCurrentState:
		m.ResetCurrentState()
		return nil
	case hostusbresource.FieldDesiredState:
		m.ResetDesiredState()
		return nil
	case hostusbresource.FieldOwnerID:
		m.ResetOwnerID()
		return nil
	case hostusbresource.FieldIdvendor:
		m.ResetIdvendor()
		return nil
	case hostusbresource.FieldIdproduct:
		m.ResetIdproduct()
		return nil
	case hostusbresource.FieldBus:
		m.ResetBus()
		return nil
	case hostusbresource.FieldAddr:
		m.ResetAddr()
		return nil
	case hostusbresource.FieldClass:
		m.ResetClass()
		return nil
	case hostusbresource.FieldSerial:
		m.ResetSerial()
		return nil
	}
	return fmt.Errorf("unknown HostusbResource field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HostusbResourceMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.host != nil {
		edges = append(edges, hostusbresource.EdgeHost)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HostusbResourceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case hostusbresource.EdgeHost:
		if id := m.host; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HostusbResourceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HostusbResourceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HostusbResourceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedhost {
		edges = append(edges, hostusbresource.EdgeHost)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HostusbResourceMutation) EdgeCleared(name string) bool {
	switch name {
	case hostusbresource.EdgeHost:
		return m.clearedhost
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HostusbResourceMutation) ClearEdge(name string) error {
	switch name {
	case hostusbresource.EdgeHost:
		m.ClearHost()
		return nil
	}
	return fmt.Errorf("unknown HostusbResource unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HostusbResourceMutation) ResetEdge(name string) error {
	switch name {
	case hostusbresource.EdgeHost:
		m.ResetHost()
		return nil
	}
	return fmt.Errorf("unknown HostusbResource edge %s", name)
}

// IPAddressResourceMutation represents an operation that mutates the IPAddressResource nodes in the graph.
type IPAddressResourceMutation struct {
	config
	op            Op
	typ           string
	id            *int
	resource_id   *string
	address       *string
	desired_state *ipaddressresource.DesiredState
	current_state *ipaddressresource.CurrentState
	status        *ipaddressresource.Status
	status_detail *string
	config_method *ipaddressresource.ConfigMethod
	clearedFields map[string]struct{}
	nic           *int
	clearednic    bool
	done          bool
	oldValue      func(context.Context) (*IPAddressResource, error)
	predicates    []predicate.IPAddressResource
}

var _ ent.Mutation = (*IPAddressResourceMutation)(nil)

// ipaddressresourceOption allows management of the mutation configuration using functional options.
type ipaddressresourceOption func(*IPAddressResourceMutation)

// newIPAddressResourceMutation creates new mutation for the IPAddressResource entity.
func newIPAddressResourceMutation(c config, op Op, opts ...ipaddressresourceOption) *IPAddressResourceMutation {
	m := &IPAddressResourceMutation{
		config:        c,
		op:            op,
		typ:           TypeIPAddressResource,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withIPAddressResourceID sets the ID field of the mutation.
func withIPAddressResourceID(id int) ipaddressresourceOption {
	return func(m *IPAddressResourceMutation) {
		var (
			err   error
			once  sync.Once
			value *IPAddressResource
		)
		m.oldValue = func(ctx context.Context) (*IPAddressResource, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().IPAddressResource.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withIPAddressResource sets the old IPAddressResource of the mutation.
func withIPAddressResource(node *IPAddressResource) ipaddressresourceOption {
	return func(m *IPAddressResourceMutation) {
		m.oldValue = func(context.Context) (*IPAddressResource, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m IPAddressResourceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m IPAddressResourceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *IPAddressResourceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *IPAddressResourceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().IPAddressResource.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetResourceID sets the "resource_id" field.
func (m *IPAddressResourceMutation) SetResourceID(s string) {
	m.resource_id = &s
}

// ResourceID returns the value of the "resource_id" field in the mutation.
func (m *IPAddressResourceMutation) ResourceID() (r string, exists bool) {
	v := m.resource_id
	if v == nil {
		return
	}
	return *v, true
}

// OldResourceID returns the old "resource_id" field's value of the IPAddressResource entity.
// If the IPAddressResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPAddressResourceMutation) OldResourceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResourceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResourceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResourceID: %w", err)
	}
	return oldValue.ResourceID, nil
}

// ResetResourceID resets all changes to the "resource_id" field.
func (m *IPAddressResourceMutation) ResetResourceID() {
	m.resource_id = nil
}

// SetAddress sets the "address" field.
func (m *IPAddressResourceMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *IPAddressResourceMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the IPAddressResource entity.
// If the IPAddressResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPAddressResourceMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ClearAddress clears the value of the "address" field.
func (m *IPAddressResourceMutation) ClearAddress() {
	m.address = nil
	m.clearedFields[ipaddressresource.FieldAddress] = struct{}{}
}

// AddressCleared returns if the "address" field was cleared in this mutation.
func (m *IPAddressResourceMutation) AddressCleared() bool {
	_, ok := m.clearedFields[ipaddressresource.FieldAddress]
	return ok
}

// ResetAddress resets all changes to the "address" field.
func (m *IPAddressResourceMutation) ResetAddress() {
	m.address = nil
	delete(m.clearedFields, ipaddressresource.FieldAddress)
}

// SetDesiredState sets the "desired_state" field.
func (m *IPAddressResourceMutation) SetDesiredState(is ipaddressresource.DesiredState) {
	m.desired_state = &is
}

// DesiredState returns the value of the "desired_state" field in the mutation.
func (m *IPAddressResourceMutation) DesiredState() (r ipaddressresource.DesiredState, exists bool) {
	v := m.desired_state
	if v == nil {
		return
	}
	return *v, true
}

// OldDesiredState returns the old "desired_state" field's value of the IPAddressResource entity.
// If the IPAddressResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPAddressResourceMutation) OldDesiredState(ctx context.Context) (v ipaddressresource.DesiredState, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesiredState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesiredState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesiredState: %w", err)
	}
	return oldValue.DesiredState, nil
}

// ClearDesiredState clears the value of the "desired_state" field.
func (m *IPAddressResourceMutation) ClearDesiredState() {
	m.desired_state = nil
	m.clearedFields[ipaddressresource.FieldDesiredState] = struct{}{}
}

// DesiredStateCleared returns if the "desired_state" field was cleared in this mutation.
func (m *IPAddressResourceMutation) DesiredStateCleared() bool {
	_, ok := m.clearedFields[ipaddressresource.FieldDesiredState]
	return ok
}

// ResetDesiredState resets all changes to the "desired_state" field.
func (m *IPAddressResourceMutation) ResetDesiredState() {
	m.desired_state = nil
	delete(m.clearedFields, ipaddressresource.FieldDesiredState)
}

// SetCurrentState sets the "current_state" field.
func (m *IPAddressResourceMutation) SetCurrentState(is ipaddressresource.CurrentState) {
	m.current_state = &is
}

// CurrentState returns the value of the "current_state" field in the mutation.
func (m *IPAddressResourceMutation) CurrentState() (r ipaddressresource.CurrentState, exists bool) {
	v := m.current_state
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrentState returns the old "current_state" field's value of the IPAddressResource entity.
// If the IPAddressResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPAddressResourceMutation) OldCurrentState(ctx context.Context) (v ipaddressresource.CurrentState, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrentState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrentState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrentState: %w", err)
	}
	return oldValue.CurrentState, nil
}

// ClearCurrentState clears the value of the "current_state" field.
func (m *IPAddressResourceMutation) ClearCurrentState() {
	m.current_state = nil
	m.clearedFields[ipaddressresource.FieldCurrentState] = struct{}{}
}

// CurrentStateCleared returns if the "current_state" field was cleared in this mutation.
func (m *IPAddressResourceMutation) CurrentStateCleared() bool {
	_, ok := m.clearedFields[ipaddressresource.FieldCurrentState]
	return ok
}

// ResetCurrentState resets all changes to the "current_state" field.
func (m *IPAddressResourceMutation) ResetCurrentState() {
	m.current_state = nil
	delete(m.clearedFields, ipaddressresource.FieldCurrentState)
}

// SetStatus sets the "status" field.
func (m *IPAddressResourceMutation) SetStatus(i ipaddressresource.Status) {
	m.status = &i
}

// Status returns the value of the "status" field in the mutation.
func (m *IPAddressResourceMutation) Status() (r ipaddressresource.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the IPAddressResource entity.
// If the IPAddressResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPAddressResourceMutation) OldStatus(ctx context.Context) (v ipaddressresource.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ClearStatus clears the value of the "status" field.
func (m *IPAddressResourceMutation) ClearStatus() {
	m.status = nil
	m.clearedFields[ipaddressresource.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *IPAddressResourceMutation) StatusCleared() bool {
	_, ok := m.clearedFields[ipaddressresource.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *IPAddressResourceMutation) ResetStatus() {
	m.status = nil
	delete(m.clearedFields, ipaddressresource.FieldStatus)
}

// SetStatusDetail sets the "status_detail" field.
func (m *IPAddressResourceMutation) SetStatusDetail(s string) {
	m.status_detail = &s
}

// StatusDetail returns the value of the "status_detail" field in the mutation.
func (m *IPAddressResourceMutation) StatusDetail() (r string, exists bool) {
	v := m.status_detail
	if v == nil {
		return
	}
	return *v, true
}

// OldStatusDetail returns the old "status_detail" field's value of the IPAddressResource entity.
// If the IPAddressResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPAddressResourceMutation) OldStatusDetail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatusDetail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatusDetail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatusDetail: %w", err)
	}
	return oldValue.StatusDetail, nil
}

// ClearStatusDetail clears the value of the "status_detail" field.
func (m *IPAddressResourceMutation) ClearStatusDetail() {
	m.status_detail = nil
	m.clearedFields[ipaddressresource.FieldStatusDetail] = struct{}{}
}

// StatusDetailCleared returns if the "status_detail" field was cleared in this mutation.
func (m *IPAddressResourceMutation) StatusDetailCleared() bool {
	_, ok := m.clearedFields[ipaddressresource.FieldStatusDetail]
	return ok
}

// ResetStatusDetail resets all changes to the "status_detail" field.
func (m *IPAddressResourceMutation) ResetStatusDetail() {
	m.status_detail = nil
	delete(m.clearedFields, ipaddressresource.FieldStatusDetail)
}

// SetConfigMethod sets the "config_method" field.
func (m *IPAddressResourceMutation) SetConfigMethod(im ipaddressresource.ConfigMethod) {
	m.config_method = &im
}

// ConfigMethod returns the value of the "config_method" field in the mutation.
func (m *IPAddressResourceMutation) ConfigMethod() (r ipaddressresource.ConfigMethod, exists bool) {
	v := m.config_method
	if v == nil {
		return
	}
	return *v, true
}

// OldConfigMethod returns the old "config_method" field's value of the IPAddressResource entity.
// If the IPAddressResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPAddressResourceMutation) OldConfigMethod(ctx context.Context) (v ipaddressresource.ConfigMethod, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConfigMethod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConfigMethod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfigMethod: %w", err)
	}
	return oldValue.ConfigMethod, nil
}

// ClearConfigMethod clears the value of the "config_method" field.
func (m *IPAddressResourceMutation) ClearConfigMethod() {
	m.config_method = nil
	m.clearedFields[ipaddressresource.FieldConfigMethod] = struct{}{}
}

// ConfigMethodCleared returns if the "config_method" field was cleared in this mutation.
func (m *IPAddressResourceMutation) ConfigMethodCleared() bool {
	_, ok := m.clearedFields[ipaddressresource.FieldConfigMethod]
	return ok
}

// ResetConfigMethod resets all changes to the "config_method" field.
func (m *IPAddressResourceMutation) ResetConfigMethod() {
	m.config_method = nil
	delete(m.clearedFields, ipaddressresource.FieldConfigMethod)
}

// SetNicID sets the "nic" edge to the HostnicResource entity by id.
func (m *IPAddressResourceMutation) SetNicID(id int) {
	m.nic = &id
}

// ClearNic clears the "nic" edge to the HostnicResource entity.
func (m *IPAddressResourceMutation) ClearNic() {
	m.clearednic = true
}

// NicCleared reports if the "nic" edge to the HostnicResource entity was cleared.
func (m *IPAddressResourceMutation) NicCleared() bool {
	return m.clearednic
}

// NicID returns the "nic" edge ID in the mutation.
func (m *IPAddressResourceMutation) NicID() (id int, exists bool) {
	if m.nic != nil {
		return *m.nic, true
	}
	return
}

// NicIDs returns the "nic" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// NicID instead. It exists only for internal usage by the builders.
func (m *IPAddressResourceMutation) NicIDs() (ids []int) {
	if id := m.nic; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNic resets all changes to the "nic" edge.
func (m *IPAddressResourceMutation) ResetNic() {
	m.nic = nil
	m.clearednic = false
}

// Where appends a list predicates to the IPAddressResourceMutation builder.
func (m *IPAddressResourceMutation) Where(ps ...predicate.IPAddressResource) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the IPAddressResourceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *IPAddressResourceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.IPAddressResource, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *IPAddressResourceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *IPAddressResourceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (IPAddressResource).
func (m *IPAddressResourceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *IPAddressResourceMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.resource_id != nil {
		fields = append(fields, ipaddressresource.FieldResourceID)
	}
	if m.address != nil {
		fields = append(fields, ipaddressresource.FieldAddress)
	}
	if m.desired_state != nil {
		fields = append(fields, ipaddressresource.FieldDesiredState)
	}
	if m.current_state != nil {
		fields = append(fields, ipaddressresource.FieldCurrentState)
	}
	if m.status != nil {
		fields = append(fields, ipaddressresource.FieldStatus)
	}
	if m.status_detail != nil {
		fields = append(fields, ipaddressresource.FieldStatusDetail)
	}
	if m.config_method != nil {
		fields = append(fields, ipaddressresource.FieldConfigMethod)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *IPAddressResourceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ipaddressresource.FieldResourceID:
		return m.ResourceID()
	case ipaddressresource.FieldAddress:
		return m.Address()
	case ipaddressresource.FieldDesiredState:
		return m.DesiredState()
	case ipaddressresource.FieldCurrentState:
		return m.CurrentState()
	case ipaddressresource.FieldStatus:
		return m.Status()
	case ipaddressresource.FieldStatusDetail:
		return m.StatusDetail()
	case ipaddressresource.FieldConfigMethod:
		return m.ConfigMethod()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *IPAddressResourceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ipaddressresource.FieldResourceID:
		return m.OldResourceID(ctx)
	case ipaddressresource.FieldAddress:
		return m.OldAddress(ctx)
	case ipaddressresource.FieldDesiredState:
		return m.OldDesiredState(ctx)
	case ipaddressresource.FieldCurrentState:
		return m.OldCurrentState(ctx)
	case ipaddressresource.FieldStatus:
		return m.OldStatus(ctx)
	case ipaddressresource.FieldStatusDetail:
		return m.OldStatusDetail(ctx)
	case ipaddressresource.FieldConfigMethod:
		return m.OldConfigMethod(ctx)
	}
	return nil, fmt.Errorf("unknown IPAddressResource field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IPAddressResourceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ipaddressresource.FieldResourceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResourceID(v)
		return nil
	case ipaddressresource.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case ipaddressresource.FieldDesiredState:
		v, ok := value.(ipaddressresource.DesiredState)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesiredState(v)
		return nil
	case ipaddressresource.FieldCurrentState:
		v, ok := value.(ipaddressresource.CurrentState)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrentState(v)
		return nil
	case ipaddressresource.FieldStatus:
		v, ok := value.(ipaddressresource.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case ipaddressresource.FieldStatusDetail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatusDetail(v)
		return nil
	case ipaddressresource.FieldConfigMethod:
		v, ok := value.(ipaddressresource.ConfigMethod)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfigMethod(v)
		return nil
	}
	return fmt.Errorf("unknown IPAddressResource field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *IPAddressResourceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *IPAddressResourceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IPAddressResourceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown IPAddressResource numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *IPAddressResourceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(ipaddressresource.FieldAddress) {
		fields = append(fields, ipaddressresource.FieldAddress)
	}
	if m.FieldCleared(ipaddressresource.FieldDesiredState) {
		fields = append(fields, ipaddressresource.FieldDesiredState)
	}
	if m.FieldCleared(ipaddressresource.FieldCurrentState) {
		fields = append(fields, ipaddressresource.FieldCurrentState)
	}
	if m.FieldCleared(ipaddressresource.FieldStatus) {
		fields = append(fields, ipaddressresource.FieldStatus)
	}
	if m.FieldCleared(ipaddressresource.FieldStatusDetail) {
		fields = append(fields, ipaddressresource.FieldStatusDetail)
	}
	if m.FieldCleared(ipaddressresource.FieldConfigMethod) {
		fields = append(fields, ipaddressresource.FieldConfigMethod)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *IPAddressResourceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *IPAddressResourceMutation) ClearField(name string) error {
	switch name {
	case ipaddressresource.FieldAddress:
		m.ClearAddress()
		return nil
	case ipaddressresource.FieldDesiredState:
		m.ClearDesiredState()
		return nil
	case ipaddressresource.FieldCurrentState:
		m.ClearCurrentState()
		return nil
	case ipaddressresource.FieldStatus:
		m.ClearStatus()
		return nil
	case ipaddressresource.FieldStatusDetail:
		m.ClearStatusDetail()
		return nil
	case ipaddressresource.FieldConfigMethod:
		m.ClearConfigMethod()
		return nil
	}
	return fmt.Errorf("unknown IPAddressResource nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *IPAddressResourceMutation) ResetField(name string) error {
	switch name {
	case ipaddressresource.FieldResourceID:
		m.ResetResourceID()
		return nil
	case ipaddressresource.FieldAddress:
		m.ResetAddress()
		return nil
	case ipaddressresource.FieldDesiredState:
		m.ResetDesiredState()
		return nil
	case ipaddressresource.FieldCurrentState:
		m.ResetCurrentState()
		return nil
	case ipaddressresource.FieldStatus:
		m.ResetStatus()
		return nil
	case ipaddressresource.FieldStatusDetail:
		m.ResetStatusDetail()
		return nil
	case ipaddressresource.FieldConfigMethod:
		m.ResetConfigMethod()
		return nil
	}
	return fmt.Errorf("unknown IPAddressResource field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *IPAddressResourceMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.nic != nil {
		edges = append(edges, ipaddressresource.EdgeNic)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *IPAddressResourceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case ipaddressresource.EdgeNic:
		if id := m.nic; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *IPAddressResourceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *IPAddressResourceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *IPAddressResourceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearednic {
		edges = append(edges, ipaddressresource.EdgeNic)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *IPAddressResourceMutation) EdgeCleared(name string) bool {
	switch name {
	case ipaddressresource.EdgeNic:
		return m.clearednic
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *IPAddressResourceMutation) ClearEdge(name string) error {
	switch name {
	case ipaddressresource.EdgeNic:
		m.ClearNic()
		return nil
	}
	return fmt.Errorf("unknown IPAddressResource unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *IPAddressResourceMutation) ResetEdge(name string) error {
	switch name {
	case ipaddressresource.EdgeNic:
		m.ResetNic()
		return nil
	}
	return fmt.Errorf("unknown IPAddressResource edge %s", name)
}

// InstanceResourceMutation represents an operation that mutates the InstanceResource nodes in the graph.
type InstanceResourceMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	resource_id             *string
	kind                    *instanceresource.Kind
	description             *string
	desired_state           *instanceresource.DesiredState
	current_state           *instanceresource.CurrentState
	vm_memory_bytes         *uint64
	addvm_memory_bytes      *int64
	vm_cpu_cores            *uint32
	addvm_cpu_cores         *int32
	vm_storage_bytes        *uint64
	addvm_storage_bytes     *int64
	status                  *instanceresource.Status
	status_detail           *string
	clearedFields           map[string]struct{}
	host                    *int
	clearedhost             bool
	user                    *int
	cleareduser             bool
	os                      *int
	clearedos               bool
	workload_members        map[int]struct{}
	removedworkload_members map[int]struct{}
	clearedworkload_members bool
	done                    bool
	oldValue                func(context.Context) (*InstanceResource, error)
	predicates              []predicate.InstanceResource
}

var _ ent.Mutation = (*InstanceResourceMutation)(nil)

// instanceresourceOption allows management of the mutation configuration using functional options.
type instanceresourceOption func(*InstanceResourceMutation)

// newInstanceResourceMutation creates new mutation for the InstanceResource entity.
func newInstanceResourceMutation(c config, op Op, opts ...instanceresourceOption) *InstanceResourceMutation {
	m := &InstanceResourceMutation{
		config:        c,
		op:            op,
		typ:           TypeInstanceResource,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withInstanceResourceID sets the ID field of the mutation.
func withInstanceResourceID(id int) instanceresourceOption {
	return func(m *InstanceResourceMutation) {
		var (
			err   error
			once  sync.Once
			value *InstanceResource
		)
		m.oldValue = func(ctx context.Context) (*InstanceResource, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().InstanceResource.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withInstanceResource sets the old InstanceResource of the mutation.
func withInstanceResource(node *InstanceResource) instanceresourceOption {
	return func(m *InstanceResourceMutation) {
		m.oldValue = func(context.Context) (*InstanceResource, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m InstanceResourceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m InstanceResourceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *InstanceResourceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *InstanceResourceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().InstanceResource.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetResourceID sets the "resource_id" field.
func (m *InstanceResourceMutation) SetResourceID(s string) {
	m.resource_id = &s
}

// ResourceID returns the value of the "resource_id" field in the mutation.
func (m *InstanceResourceMutation) ResourceID() (r string, exists bool) {
	v := m.resource_id
	if v == nil {
		return
	}
	return *v, true
}

// OldResourceID returns the old "resource_id" field's value of the InstanceResource entity.
// If the InstanceResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InstanceResourceMutation) OldResourceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResourceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResourceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResourceID: %w", err)
	}
	return oldValue.ResourceID, nil
}

// ResetResourceID resets all changes to the "resource_id" field.
func (m *InstanceResourceMutation) ResetResourceID() {
	m.resource_id = nil
}

// SetKind sets the "kind" field.
func (m *InstanceResourceMutation) SetKind(i instanceresource.Kind) {
	m.kind = &i
}

// Kind returns the value of the "kind" field in the mutation.
func (m *InstanceResourceMutation) Kind() (r instanceresource.Kind, exists bool) {
	v := m.kind
	if v == nil {
		return
	}
	return *v, true
}

// OldKind returns the old "kind" field's value of the InstanceResource entity.
// If the InstanceResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InstanceResourceMutation) OldKind(ctx context.Context) (v instanceresource.Kind, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKind is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKind requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKind: %w", err)
	}
	return oldValue.Kind, nil
}

// ClearKind clears the value of the "kind" field.
func (m *InstanceResourceMutation) ClearKind() {
	m.kind = nil
	m.clearedFields[instanceresource.FieldKind] = struct{}{}
}

// KindCleared returns if the "kind" field was cleared in this mutation.
func (m *InstanceResourceMutation) KindCleared() bool {
	_, ok := m.clearedFields[instanceresource.FieldKind]
	return ok
}

// ResetKind resets all changes to the "kind" field.
func (m *InstanceResourceMutation) ResetKind() {
	m.kind = nil
	delete(m.clearedFields, instanceresource.FieldKind)
}

// SetDescription sets the "description" field.
func (m *InstanceResourceMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *InstanceResourceMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the InstanceResource entity.
// If the InstanceResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InstanceResourceMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *InstanceResourceMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[instanceresource.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *InstanceResourceMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[instanceresource.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *InstanceResourceMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, instanceresource.FieldDescription)
}

// SetDesiredState sets the "desired_state" field.
func (m *InstanceResourceMutation) SetDesiredState(is instanceresource.DesiredState) {
	m.desired_state = &is
}

// DesiredState returns the value of the "desired_state" field in the mutation.
func (m *InstanceResourceMutation) DesiredState() (r instanceresource.DesiredState, exists bool) {
	v := m.desired_state
	if v == nil {
		return
	}
	return *v, true
}

// OldDesiredState returns the old "desired_state" field's value of the InstanceResource entity.
// If the InstanceResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InstanceResourceMutation) OldDesiredState(ctx context.Context) (v instanceresource.DesiredState, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesiredState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesiredState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesiredState: %w", err)
	}
	return oldValue.DesiredState, nil
}

// ClearDesiredState clears the value of the "desired_state" field.
func (m *InstanceResourceMutation) ClearDesiredState() {
	m.desired_state = nil
	m.clearedFields[instanceresource.FieldDesiredState] = struct{}{}
}

// DesiredStateCleared returns if the "desired_state" field was cleared in this mutation.
func (m *InstanceResourceMutation) DesiredStateCleared() bool {
	_, ok := m.clearedFields[instanceresource.FieldDesiredState]
	return ok
}

// ResetDesiredState resets all changes to the "desired_state" field.
func (m *InstanceResourceMutation) ResetDesiredState() {
	m.desired_state = nil
	delete(m.clearedFields, instanceresource.FieldDesiredState)
}

// SetCurrentState sets the "current_state" field.
func (m *InstanceResourceMutation) SetCurrentState(is instanceresource.CurrentState) {
	m.current_state = &is
}

// CurrentState returns the value of the "current_state" field in the mutation.
func (m *InstanceResourceMutation) CurrentState() (r instanceresource.CurrentState, exists bool) {
	v := m.current_state
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrentState returns the old "current_state" field's value of the InstanceResource entity.
// If the InstanceResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InstanceResourceMutation) OldCurrentState(ctx context.Context) (v instanceresource.CurrentState, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrentState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrentState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrentState: %w", err)
	}
	return oldValue.CurrentState, nil
}

// ClearCurrentState clears the value of the "current_state" field.
func (m *InstanceResourceMutation) ClearCurrentState() {
	m.current_state = nil
	m.clearedFields[instanceresource.FieldCurrentState] = struct{}{}
}

// CurrentStateCleared returns if the "current_state" field was cleared in this mutation.
func (m *InstanceResourceMutation) CurrentStateCleared() bool {
	_, ok := m.clearedFields[instanceresource.FieldCurrentState]
	return ok
}

// ResetCurrentState resets all changes to the "current_state" field.
func (m *InstanceResourceMutation) ResetCurrentState() {
	m.current_state = nil
	delete(m.clearedFields, instanceresource.FieldCurrentState)
}

// SetVMMemoryBytes sets the "vm_memory_bytes" field.
func (m *InstanceResourceMutation) SetVMMemoryBytes(u uint64) {
	m.vm_memory_bytes = &u
	m.addvm_memory_bytes = nil
}

// VMMemoryBytes returns the value of the "vm_memory_bytes" field in the mutation.
func (m *InstanceResourceMutation) VMMemoryBytes() (r uint64, exists bool) {
	v := m.vm_memory_bytes
	if v == nil {
		return
	}
	return *v, true
}

// OldVMMemoryBytes returns the old "vm_memory_bytes" field's value of the InstanceResource entity.
// If the InstanceResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InstanceResourceMutation) OldVMMemoryBytes(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVMMemoryBytes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVMMemoryBytes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVMMemoryBytes: %w", err)
	}
	return oldValue.VMMemoryBytes, nil
}

// AddVMMemoryBytes adds u to the "vm_memory_bytes" field.
func (m *InstanceResourceMutation) AddVMMemoryBytes(u int64) {
	if m.addvm_memory_bytes != nil {
		*m.addvm_memory_bytes += u
	} else {
		m.addvm_memory_bytes = &u
	}
}

// AddedVMMemoryBytes returns the value that was added to the "vm_memory_bytes" field in this mutation.
func (m *InstanceResourceMutation) AddedVMMemoryBytes() (r int64, exists bool) {
	v := m.addvm_memory_bytes
	if v == nil {
		return
	}
	return *v, true
}

// ClearVMMemoryBytes clears the value of the "vm_memory_bytes" field.
func (m *InstanceResourceMutation) ClearVMMemoryBytes() {
	m.vm_memory_bytes = nil
	m.addvm_memory_bytes = nil
	m.clearedFields[instanceresource.FieldVMMemoryBytes] = struct{}{}
}

// VMMemoryBytesCleared returns if the "vm_memory_bytes" field was cleared in this mutation.
func (m *InstanceResourceMutation) VMMemoryBytesCleared() bool {
	_, ok := m.clearedFields[instanceresource.FieldVMMemoryBytes]
	return ok
}

// ResetVMMemoryBytes resets all changes to the "vm_memory_bytes" field.
func (m *InstanceResourceMutation) ResetVMMemoryBytes() {
	m.vm_memory_bytes = nil
	m.addvm_memory_bytes = nil
	delete(m.clearedFields, instanceresource.FieldVMMemoryBytes)
}

// SetVMCPUCores sets the "vm_cpu_cores" field.
func (m *InstanceResourceMutation) SetVMCPUCores(u uint32) {
	m.vm_cpu_cores = &u
	m.addvm_cpu_cores = nil
}

// VMCPUCores returns the value of the "vm_cpu_cores" field in the mutation.
func (m *InstanceResourceMutation) VMCPUCores() (r uint32, exists bool) {
	v := m.vm_cpu_cores
	if v == nil {
		return
	}
	return *v, true
}

// OldVMCPUCores returns the old "vm_cpu_cores" field's value of the InstanceResource entity.
// If the InstanceResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InstanceResourceMutation) OldVMCPUCores(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVMCPUCores is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVMCPUCores requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVMCPUCores: %w", err)
	}
	return oldValue.VMCPUCores, nil
}

// AddVMCPUCores adds u to the "vm_cpu_cores" field.
func (m *InstanceResourceMutation) AddVMCPUCores(u int32) {
	if m.addvm_cpu_cores != nil {
		*m.addvm_cpu_cores += u
	} else {
		m.addvm_cpu_cores = &u
	}
}

// AddedVMCPUCores returns the value that was added to the "vm_cpu_cores" field in this mutation.
func (m *InstanceResourceMutation) AddedVMCPUCores() (r int32, exists bool) {
	v := m.addvm_cpu_cores
	if v == nil {
		return
	}
	return *v, true
}

// ClearVMCPUCores clears the value of the "vm_cpu_cores" field.
func (m *InstanceResourceMutation) ClearVMCPUCores() {
	m.vm_cpu_cores = nil
	m.addvm_cpu_cores = nil
	m.clearedFields[instanceresource.FieldVMCPUCores] = struct{}{}
}

// VMCPUCoresCleared returns if the "vm_cpu_cores" field was cleared in this mutation.
func (m *InstanceResourceMutation) VMCPUCoresCleared() bool {
	_, ok := m.clearedFields[instanceresource.FieldVMCPUCores]
	return ok
}

// ResetVMCPUCores resets all changes to the "vm_cpu_cores" field.
func (m *InstanceResourceMutation) ResetVMCPUCores() {
	m.vm_cpu_cores = nil
	m.addvm_cpu_cores = nil
	delete(m.clearedFields, instanceresource.FieldVMCPUCores)
}

// SetVMStorageBytes sets the "vm_storage_bytes" field.
func (m *InstanceResourceMutation) SetVMStorageBytes(u uint64) {
	m.vm_storage_bytes = &u
	m.addvm_storage_bytes = nil
}

// VMStorageBytes returns the value of the "vm_storage_bytes" field in the mutation.
func (m *InstanceResourceMutation) VMStorageBytes() (r uint64, exists bool) {
	v := m.vm_storage_bytes
	if v == nil {
		return
	}
	return *v, true
}

// OldVMStorageBytes returns the old "vm_storage_bytes" field's value of the InstanceResource entity.
// If the InstanceResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InstanceResourceMutation) OldVMStorageBytes(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVMStorageBytes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVMStorageBytes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVMStorageBytes: %w", err)
	}
	return oldValue.VMStorageBytes, nil
}

// AddVMStorageBytes adds u to the "vm_storage_bytes" field.
func (m *InstanceResourceMutation) AddVMStorageBytes(u int64) {
	if m.addvm_storage_bytes != nil {
		*m.addvm_storage_bytes += u
	} else {
		m.addvm_storage_bytes = &u
	}
}

// AddedVMStorageBytes returns the value that was added to the "vm_storage_bytes" field in this mutation.
func (m *InstanceResourceMutation) AddedVMStorageBytes() (r int64, exists bool) {
	v := m.addvm_storage_bytes
	if v == nil {
		return
	}
	return *v, true
}

// ClearVMStorageBytes clears the value of the "vm_storage_bytes" field.
func (m *InstanceResourceMutation) ClearVMStorageBytes() {
	m.vm_storage_bytes = nil
	m.addvm_storage_bytes = nil
	m.clearedFields[instanceresource.FieldVMStorageBytes] = struct{}{}
}

// VMStorageBytesCleared returns if the "vm_storage_bytes" field was cleared in this mutation.
func (m *InstanceResourceMutation) VMStorageBytesCleared() bool {
	_, ok := m.clearedFields[instanceresource.FieldVMStorageBytes]
	return ok
}

// ResetVMStorageBytes resets all changes to the "vm_storage_bytes" field.
func (m *InstanceResourceMutation) ResetVMStorageBytes() {
	m.vm_storage_bytes = nil
	m.addvm_storage_bytes = nil
	delete(m.clearedFields, instanceresource.FieldVMStorageBytes)
}

// SetStatus sets the "status" field.
func (m *InstanceResourceMutation) SetStatus(i instanceresource.Status) {
	m.status = &i
}

// Status returns the value of the "status" field in the mutation.
func (m *InstanceResourceMutation) Status() (r instanceresource.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the InstanceResource entity.
// If the InstanceResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InstanceResourceMutation) OldStatus(ctx context.Context) (v instanceresource.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ClearStatus clears the value of the "status" field.
func (m *InstanceResourceMutation) ClearStatus() {
	m.status = nil
	m.clearedFields[instanceresource.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *InstanceResourceMutation) StatusCleared() bool {
	_, ok := m.clearedFields[instanceresource.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *InstanceResourceMutation) ResetStatus() {
	m.status = nil
	delete(m.clearedFields, instanceresource.FieldStatus)
}

// SetStatusDetail sets the "status_detail" field.
func (m *InstanceResourceMutation) SetStatusDetail(s string) {
	m.status_detail = &s
}

// StatusDetail returns the value of the "status_detail" field in the mutation.
func (m *InstanceResourceMutation) StatusDetail() (r string, exists bool) {
	v := m.status_detail
	if v == nil {
		return
	}
	return *v, true
}

// OldStatusDetail returns the old "status_detail" field's value of the InstanceResource entity.
// If the InstanceResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InstanceResourceMutation) OldStatusDetail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatusDetail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatusDetail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatusDetail: %w", err)
	}
	return oldValue.StatusDetail, nil
}

// ClearStatusDetail clears the value of the "status_detail" field.
func (m *InstanceResourceMutation) ClearStatusDetail() {
	m.status_detail = nil
	m.clearedFields[instanceresource.FieldStatusDetail] = struct{}{}
}

// StatusDetailCleared returns if the "status_detail" field was cleared in this mutation.
func (m *InstanceResourceMutation) StatusDetailCleared() bool {
	_, ok := m.clearedFields[instanceresource.FieldStatusDetail]
	return ok
}

// ResetStatusDetail resets all changes to the "status_detail" field.
func (m *InstanceResourceMutation) ResetStatusDetail() {
	m.status_detail = nil
	delete(m.clearedFields, instanceresource.FieldStatusDetail)
}

// SetHostID sets the "host" edge to the HostResource entity by id.
func (m *InstanceResourceMutation) SetHostID(id int) {
	m.host = &id
}

// ClearHost clears the "host" edge to the HostResource entity.
func (m *InstanceResourceMutation) ClearHost() {
	m.clearedhost = true
}

// HostCleared reports if the "host" edge to the HostResource entity was cleared.
func (m *InstanceResourceMutation) HostCleared() bool {
	return m.clearedhost
}

// HostID returns the "host" edge ID in the mutation.
func (m *InstanceResourceMutation) HostID() (id int, exists bool) {
	if m.host != nil {
		return *m.host, true
	}
	return
}

// HostIDs returns the "host" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// HostID instead. It exists only for internal usage by the builders.
func (m *InstanceResourceMutation) HostIDs() (ids []int) {
	if id := m.host; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetHost resets all changes to the "host" edge.
func (m *InstanceResourceMutation) ResetHost() {
	m.host = nil
	m.clearedhost = false
}

// SetUserID sets the "user" edge to the UserResource entity by id.
func (m *InstanceResourceMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the UserResource entity.
func (m *InstanceResourceMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the UserResource entity was cleared.
func (m *InstanceResourceMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *InstanceResourceMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *InstanceResourceMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *InstanceResourceMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetOsID sets the "os" edge to the OperatingSystemResource entity by id.
func (m *InstanceResourceMutation) SetOsID(id int) {
	m.os = &id
}

// ClearOs clears the "os" edge to the OperatingSystemResource entity.
func (m *InstanceResourceMutation) ClearOs() {
	m.clearedos = true
}

// OsCleared reports if the "os" edge to the OperatingSystemResource entity was cleared.
func (m *InstanceResourceMutation) OsCleared() bool {
	return m.clearedos
}

// OsID returns the "os" edge ID in the mutation.
func (m *InstanceResourceMutation) OsID() (id int, exists bool) {
	if m.os != nil {
		return *m.os, true
	}
	return
}

// OsIDs returns the "os" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OsID instead. It exists only for internal usage by the builders.
func (m *InstanceResourceMutation) OsIDs() (ids []int) {
	if id := m.os; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOs resets all changes to the "os" edge.
func (m *InstanceResourceMutation) ResetOs() {
	m.os = nil
	m.clearedos = false
}

// AddWorkloadMemberIDs adds the "workload_members" edge to the WorkloadMember entity by ids.
func (m *InstanceResourceMutation) AddWorkloadMemberIDs(ids ...int) {
	if m.workload_members == nil {
		m.workload_members = make(map[int]struct{})
	}
	for i := range ids {
		m.workload_members[ids[i]] = struct{}{}
	}
}

// ClearWorkloadMembers clears the "workload_members" edge to the WorkloadMember entity.
func (m *InstanceResourceMutation) ClearWorkloadMembers() {
	m.clearedworkload_members = true
}

// WorkloadMembersCleared reports if the "workload_members" edge to the WorkloadMember entity was cleared.
func (m *InstanceResourceMutation) WorkloadMembersCleared() bool {
	return m.clearedworkload_members
}

// RemoveWorkloadMemberIDs removes the "workload_members" edge to the WorkloadMember entity by IDs.
func (m *InstanceResourceMutation) RemoveWorkloadMemberIDs(ids ...int) {
	if m.removedworkload_members == nil {
		m.removedworkload_members = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.workload_members, ids[i])
		m.removedworkload_members[ids[i]] = struct{}{}
	}
}

// RemovedWorkloadMembers returns the removed IDs of the "workload_members" edge to the WorkloadMember entity.
func (m *InstanceResourceMutation) RemovedWorkloadMembersIDs() (ids []int) {
	for id := range m.removedworkload_members {
		ids = append(ids, id)
	}
	return
}

// WorkloadMembersIDs returns the "workload_members" edge IDs in the mutation.
func (m *InstanceResourceMutation) WorkloadMembersIDs() (ids []int) {
	for id := range m.workload_members {
		ids = append(ids, id)
	}
	return
}

// ResetWorkloadMembers resets all changes to the "workload_members" edge.
func (m *InstanceResourceMutation) ResetWorkloadMembers() {
	m.workload_members = nil
	m.clearedworkload_members = false
	m.removedworkload_members = nil
}

// Where appends a list predicates to the InstanceResourceMutation builder.
func (m *InstanceResourceMutation) Where(ps ...predicate.InstanceResource) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the InstanceResourceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *InstanceResourceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.InstanceResource, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *InstanceResourceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *InstanceResourceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (InstanceResource).
func (m *InstanceResourceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *InstanceResourceMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.resource_id != nil {
		fields = append(fields, instanceresource.FieldResourceID)
	}
	if m.kind != nil {
		fields = append(fields, instanceresource.FieldKind)
	}
	if m.description != nil {
		fields = append(fields, instanceresource.FieldDescription)
	}
	if m.desired_state != nil {
		fields = append(fields, instanceresource.FieldDesiredState)
	}
	if m.current_state != nil {
		fields = append(fields, instanceresource.FieldCurrentState)
	}
	if m.vm_memory_bytes != nil {
		fields = append(fields, instanceresource.FieldVMMemoryBytes)
	}
	if m.vm_cpu_cores != nil {
		fields = append(fields, instanceresource.FieldVMCPUCores)
	}
	if m.vm_storage_bytes != nil {
		fields = append(fields, instanceresource.FieldVMStorageBytes)
	}
	if m.status != nil {
		fields = append(fields, instanceresource.FieldStatus)
	}
	if m.status_detail != nil {
		fields = append(fields, instanceresource.FieldStatusDetail)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *InstanceResourceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case instanceresource.FieldResourceID:
		return m.ResourceID()
	case instanceresource.FieldKind:
		return m.Kind()
	case instanceresource.FieldDescription:
		return m.Description()
	case instanceresource.FieldDesiredState:
		return m.DesiredState()
	case instanceresource.FieldCurrentState:
		return m.CurrentState()
	case instanceresource.FieldVMMemoryBytes:
		return m.VMMemoryBytes()
	case instanceresource.FieldVMCPUCores:
		return m.VMCPUCores()
	case instanceresource.FieldVMStorageBytes:
		return m.VMStorageBytes()
	case instanceresource.FieldStatus:
		return m.Status()
	case instanceresource.FieldStatusDetail:
		return m.StatusDetail()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *InstanceResourceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case instanceresource.FieldResourceID:
		return m.OldResourceID(ctx)
	case instanceresource.FieldKind:
		return m.OldKind(ctx)
	case instanceresource.FieldDescription:
		return m.OldDescription(ctx)
	case instanceresource.FieldDesiredState:
		return m.OldDesiredState(ctx)
	case instanceresource.FieldCurrentState:
		return m.OldCurrentState(ctx)
	case instanceresource.FieldVMMemoryBytes:
		return m.OldVMMemoryBytes(ctx)
	case instanceresource.FieldVMCPUCores:
		return m.OldVMCPUCores(ctx)
	case instanceresource.FieldVMStorageBytes:
		return m.OldVMStorageBytes(ctx)
	case instanceresource.FieldStatus:
		return m.OldStatus(ctx)
	case instanceresource.FieldStatusDetail:
		return m.OldStatusDetail(ctx)
	}
	return nil, fmt.Errorf("unknown InstanceResource field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InstanceResourceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case instanceresource.FieldResourceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResourceID(v)
		return nil
	case instanceresource.FieldKind:
		v, ok := value.(instanceresource.Kind)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKind(v)
		return nil
	case instanceresource.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case instanceresource.FieldDesiredState:
		v, ok := value.(instanceresource.DesiredState)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesiredState(v)
		return nil
	case instanceresource.FieldCurrentState:
		v, ok := value.(instanceresource.CurrentState)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrentState(v)
		return nil
	case instanceresource.FieldVMMemoryBytes:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVMMemoryBytes(v)
		return nil
	case instanceresource.FieldVMCPUCores:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVMCPUCores(v)
		return nil
	case instanceresource.FieldVMStorageBytes:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVMStorageBytes(v)
		return nil
	case instanceresource.FieldStatus:
		v, ok := value.(instanceresource.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case instanceresource.FieldStatusDetail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatusDetail(v)
		return nil
	}
	return fmt.Errorf("unknown InstanceResource field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *InstanceResourceMutation) AddedFields() []string {
	var fields []string
	if m.addvm_memory_bytes != nil {
		fields = append(fields, instanceresource.FieldVMMemoryBytes)
	}
	if m.addvm_cpu_cores != nil {
		fields = append(fields, instanceresource.FieldVMCPUCores)
	}
	if m.addvm_storage_bytes != nil {
		fields = append(fields, instanceresource.FieldVMStorageBytes)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *InstanceResourceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case instanceresource.FieldVMMemoryBytes:
		return m.AddedVMMemoryBytes()
	case instanceresource.FieldVMCPUCores:
		return m.AddedVMCPUCores()
	case instanceresource.FieldVMStorageBytes:
		return m.AddedVMStorageBytes()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InstanceResourceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case instanceresource.FieldVMMemoryBytes:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVMMemoryBytes(v)
		return nil
	case instanceresource.FieldVMCPUCores:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVMCPUCores(v)
		return nil
	case instanceresource.FieldVMStorageBytes:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVMStorageBytes(v)
		return nil
	}
	return fmt.Errorf("unknown InstanceResource numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *InstanceResourceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(instanceresource.FieldKind) {
		fields = append(fields, instanceresource.FieldKind)
	}
	if m.FieldCleared(instanceresource.FieldDescription) {
		fields = append(fields, instanceresource.FieldDescription)
	}
	if m.FieldCleared(instanceresource.FieldDesiredState) {
		fields = append(fields, instanceresource.FieldDesiredState)
	}
	if m.FieldCleared(instanceresource.FieldCurrentState) {
		fields = append(fields, instanceresource.FieldCurrentState)
	}
	if m.FieldCleared(instanceresource.FieldVMMemoryBytes) {
		fields = append(fields, instanceresource.FieldVMMemoryBytes)
	}
	if m.FieldCleared(instanceresource.FieldVMCPUCores) {
		fields = append(fields, instanceresource.FieldVMCPUCores)
	}
	if m.FieldCleared(instanceresource.FieldVMStorageBytes) {
		fields = append(fields, instanceresource.FieldVMStorageBytes)
	}
	if m.FieldCleared(instanceresource.FieldStatus) {
		fields = append(fields, instanceresource.FieldStatus)
	}
	if m.FieldCleared(instanceresource.FieldStatusDetail) {
		fields = append(fields, instanceresource.FieldStatusDetail)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *InstanceResourceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *InstanceResourceMutation) ClearField(name string) error {
	switch name {
	case instanceresource.FieldKind:
		m.ClearKind()
		return nil
	case instanceresource.FieldDescription:
		m.ClearDescription()
		return nil
	case instanceresource.FieldDesiredState:
		m.ClearDesiredState()
		return nil
	case instanceresource.FieldCurrentState:
		m.ClearCurrentState()
		return nil
	case instanceresource.FieldVMMemoryBytes:
		m.ClearVMMemoryBytes()
		return nil
	case instanceresource.FieldVMCPUCores:
		m.ClearVMCPUCores()
		return nil
	case instanceresource.FieldVMStorageBytes:
		m.ClearVMStorageBytes()
		return nil
	case instanceresource.FieldStatus:
		m.ClearStatus()
		return nil
	case instanceresource.FieldStatusDetail:
		m.ClearStatusDetail()
		return nil
	}
	return fmt.Errorf("unknown InstanceResource nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *InstanceResourceMutation) ResetField(name string) error {
	switch name {
	case instanceresource.FieldResourceID:
		m.ResetResourceID()
		return nil
	case instanceresource.FieldKind:
		m.ResetKind()
		return nil
	case instanceresource.FieldDescription:
		m.ResetDescription()
		return nil
	case instanceresource.FieldDesiredState:
		m.ResetDesiredState()
		return nil
	case instanceresource.FieldCurrentState:
		m.ResetCurrentState()
		return nil
	case instanceresource.FieldVMMemoryBytes:
		m.ResetVMMemoryBytes()
		return nil
	case instanceresource.FieldVMCPUCores:
		m.ResetVMCPUCores()
		return nil
	case instanceresource.FieldVMStorageBytes:
		m.ResetVMStorageBytes()
		return nil
	case instanceresource.FieldStatus:
		m.ResetStatus()
		return nil
	case instanceresource.FieldStatusDetail:
		m.ResetStatusDetail()
		return nil
	}
	return fmt.Errorf("unknown InstanceResource field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *InstanceResourceMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.host != nil {
		edges = append(edges, instanceresource.EdgeHost)
	}
	if m.user != nil {
		edges = append(edges, instanceresource.EdgeUser)
	}
	if m.os != nil {
		edges = append(edges, instanceresource.EdgeOs)
	}
	if m.workload_members != nil {
		edges = append(edges, instanceresource.EdgeWorkloadMembers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *InstanceResourceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case instanceresource.EdgeHost:
		if id := m.host; id != nil {
			return []ent.Value{*id}
		}
	case instanceresource.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case instanceresource.EdgeOs:
		if id := m.os; id != nil {
			return []ent.Value{*id}
		}
	case instanceresource.EdgeWorkloadMembers:
		ids := make([]ent.Value, 0, len(m.workload_members))
		for id := range m.workload_members {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *InstanceResourceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedworkload_members != nil {
		edges = append(edges, instanceresource.EdgeWorkloadMembers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *InstanceResourceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case instanceresource.EdgeWorkloadMembers:
		ids := make([]ent.Value, 0, len(m.removedworkload_members))
		for id := range m.removedworkload_members {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *InstanceResourceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedhost {
		edges = append(edges, instanceresource.EdgeHost)
	}
	if m.cleareduser {
		edges = append(edges, instanceresource.EdgeUser)
	}
	if m.clearedos {
		edges = append(edges, instanceresource.EdgeOs)
	}
	if m.clearedworkload_members {
		edges = append(edges, instanceresource.EdgeWorkloadMembers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *InstanceResourceMutation) EdgeCleared(name string) bool {
	switch name {
	case instanceresource.EdgeHost:
		return m.clearedhost
	case instanceresource.EdgeUser:
		return m.cleareduser
	case instanceresource.EdgeOs:
		return m.clearedos
	case instanceresource.EdgeWorkloadMembers:
		return m.clearedworkload_members
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *InstanceResourceMutation) ClearEdge(name string) error {
	switch name {
	case instanceresource.EdgeHost:
		m.ClearHost()
		return nil
	case instanceresource.EdgeUser:
		m.ClearUser()
		return nil
	case instanceresource.EdgeOs:
		m.ClearOs()
		return nil
	}
	return fmt.Errorf("unknown InstanceResource unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *InstanceResourceMutation) ResetEdge(name string) error {
	switch name {
	case instanceresource.EdgeHost:
		m.ResetHost()
		return nil
	case instanceresource.EdgeUser:
		m.ResetUser()
		return nil
	case instanceresource.EdgeOs:
		m.ResetOs()
		return nil
	case instanceresource.EdgeWorkloadMembers:
		m.ResetWorkloadMembers()
		return nil
	}
	return fmt.Errorf("unknown InstanceResource edge %s", name)
}

// NetlinkResourceMutation represents an operation that mutates the NetlinkResource nodes in the graph.
type NetlinkResourceMutation struct {
	config
	op              Op
	typ             string
	id              *int
	resource_id     *string
	kind            *string
	description     *string
	desired_state   *netlinkresource.DesiredState
	current_state   *netlinkresource.CurrentState
	provider_status *string
	clearedFields   map[string]struct{}
	src             *int
	clearedsrc      bool
	dst             *int
	cleareddst      bool
	done            bool
	oldValue        func(context.Context) (*NetlinkResource, error)
	predicates      []predicate.NetlinkResource
}

var _ ent.Mutation = (*NetlinkResourceMutation)(nil)

// netlinkresourceOption allows management of the mutation configuration using functional options.
type netlinkresourceOption func(*NetlinkResourceMutation)

// newNetlinkResourceMutation creates new mutation for the NetlinkResource entity.
func newNetlinkResourceMutation(c config, op Op, opts ...netlinkresourceOption) *NetlinkResourceMutation {
	m := &NetlinkResourceMutation{
		config:        c,
		op:            op,
		typ:           TypeNetlinkResource,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNetlinkResourceID sets the ID field of the mutation.
func withNetlinkResourceID(id int) netlinkresourceOption {
	return func(m *NetlinkResourceMutation) {
		var (
			err   error
			once  sync.Once
			value *NetlinkResource
		)
		m.oldValue = func(ctx context.Context) (*NetlinkResource, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().NetlinkResource.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNetlinkResource sets the old NetlinkResource of the mutation.
func withNetlinkResource(node *NetlinkResource) netlinkresourceOption {
	return func(m *NetlinkResourceMutation) {
		m.oldValue = func(context.Context) (*NetlinkResource, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NetlinkResourceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NetlinkResourceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NetlinkResourceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NetlinkResourceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().NetlinkResource.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetResourceID sets the "resource_id" field.
func (m *NetlinkResourceMutation) SetResourceID(s string) {
	m.resource_id = &s
}

// ResourceID returns the value of the "resource_id" field in the mutation.
func (m *NetlinkResourceMutation) ResourceID() (r string, exists bool) {
	v := m.resource_id
	if v == nil {
		return
	}
	return *v, true
}

// OldResourceID returns the old "resource_id" field's value of the NetlinkResource entity.
// If the NetlinkResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetlinkResourceMutation) OldResourceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResourceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResourceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResourceID: %w", err)
	}
	return oldValue.ResourceID, nil
}

// ResetResourceID resets all changes to the "resource_id" field.
func (m *NetlinkResourceMutation) ResetResourceID() {
	m.resource_id = nil
}

// SetKind sets the "kind" field.
func (m *NetlinkResourceMutation) SetKind(s string) {
	m.kind = &s
}

// Kind returns the value of the "kind" field in the mutation.
func (m *NetlinkResourceMutation) Kind() (r string, exists bool) {
	v := m.kind
	if v == nil {
		return
	}
	return *v, true
}

// OldKind returns the old "kind" field's value of the NetlinkResource entity.
// If the NetlinkResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetlinkResourceMutation) OldKind(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKind is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKind requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKind: %w", err)
	}
	return oldValue.Kind, nil
}

// ClearKind clears the value of the "kind" field.
func (m *NetlinkResourceMutation) ClearKind() {
	m.kind = nil
	m.clearedFields[netlinkresource.FieldKind] = struct{}{}
}

// KindCleared returns if the "kind" field was cleared in this mutation.
func (m *NetlinkResourceMutation) KindCleared() bool {
	_, ok := m.clearedFields[netlinkresource.FieldKind]
	return ok
}

// ResetKind resets all changes to the "kind" field.
func (m *NetlinkResourceMutation) ResetKind() {
	m.kind = nil
	delete(m.clearedFields, netlinkresource.FieldKind)
}

// SetDescription sets the "description" field.
func (m *NetlinkResourceMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *NetlinkResourceMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the NetlinkResource entity.
// If the NetlinkResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetlinkResourceMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *NetlinkResourceMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[netlinkresource.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *NetlinkResourceMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[netlinkresource.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *NetlinkResourceMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, netlinkresource.FieldDescription)
}

// SetDesiredState sets the "desired_state" field.
func (m *NetlinkResourceMutation) SetDesiredState(ns netlinkresource.DesiredState) {
	m.desired_state = &ns
}

// DesiredState returns the value of the "desired_state" field in the mutation.
func (m *NetlinkResourceMutation) DesiredState() (r netlinkresource.DesiredState, exists bool) {
	v := m.desired_state
	if v == nil {
		return
	}
	return *v, true
}

// OldDesiredState returns the old "desired_state" field's value of the NetlinkResource entity.
// If the NetlinkResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetlinkResourceMutation) OldDesiredState(ctx context.Context) (v netlinkresource.DesiredState, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesiredState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesiredState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesiredState: %w", err)
	}
	return oldValue.DesiredState, nil
}

// ResetDesiredState resets all changes to the "desired_state" field.
func (m *NetlinkResourceMutation) ResetDesiredState() {
	m.desired_state = nil
}

// SetCurrentState sets the "current_state" field.
func (m *NetlinkResourceMutation) SetCurrentState(ns netlinkresource.CurrentState) {
	m.current_state = &ns
}

// CurrentState returns the value of the "current_state" field in the mutation.
func (m *NetlinkResourceMutation) CurrentState() (r netlinkresource.CurrentState, exists bool) {
	v := m.current_state
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrentState returns the old "current_state" field's value of the NetlinkResource entity.
// If the NetlinkResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetlinkResourceMutation) OldCurrentState(ctx context.Context) (v netlinkresource.CurrentState, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrentState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrentState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrentState: %w", err)
	}
	return oldValue.CurrentState, nil
}

// ClearCurrentState clears the value of the "current_state" field.
func (m *NetlinkResourceMutation) ClearCurrentState() {
	m.current_state = nil
	m.clearedFields[netlinkresource.FieldCurrentState] = struct{}{}
}

// CurrentStateCleared returns if the "current_state" field was cleared in this mutation.
func (m *NetlinkResourceMutation) CurrentStateCleared() bool {
	_, ok := m.clearedFields[netlinkresource.FieldCurrentState]
	return ok
}

// ResetCurrentState resets all changes to the "current_state" field.
func (m *NetlinkResourceMutation) ResetCurrentState() {
	m.current_state = nil
	delete(m.clearedFields, netlinkresource.FieldCurrentState)
}

// SetProviderStatus sets the "provider_status" field.
func (m *NetlinkResourceMutation) SetProviderStatus(s string) {
	m.provider_status = &s
}

// ProviderStatus returns the value of the "provider_status" field in the mutation.
func (m *NetlinkResourceMutation) ProviderStatus() (r string, exists bool) {
	v := m.provider_status
	if v == nil {
		return
	}
	return *v, true
}

// OldProviderStatus returns the old "provider_status" field's value of the NetlinkResource entity.
// If the NetlinkResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetlinkResourceMutation) OldProviderStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProviderStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProviderStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProviderStatus: %w", err)
	}
	return oldValue.ProviderStatus, nil
}

// ClearProviderStatus clears the value of the "provider_status" field.
func (m *NetlinkResourceMutation) ClearProviderStatus() {
	m.provider_status = nil
	m.clearedFields[netlinkresource.FieldProviderStatus] = struct{}{}
}

// ProviderStatusCleared returns if the "provider_status" field was cleared in this mutation.
func (m *NetlinkResourceMutation) ProviderStatusCleared() bool {
	_, ok := m.clearedFields[netlinkresource.FieldProviderStatus]
	return ok
}

// ResetProviderStatus resets all changes to the "provider_status" field.
func (m *NetlinkResourceMutation) ResetProviderStatus() {
	m.provider_status = nil
	delete(m.clearedFields, netlinkresource.FieldProviderStatus)
}

// SetSrcID sets the "src" edge to the EndpointResource entity by id.
func (m *NetlinkResourceMutation) SetSrcID(id int) {
	m.src = &id
}

// ClearSrc clears the "src" edge to the EndpointResource entity.
func (m *NetlinkResourceMutation) ClearSrc() {
	m.clearedsrc = true
}

// SrcCleared reports if the "src" edge to the EndpointResource entity was cleared.
func (m *NetlinkResourceMutation) SrcCleared() bool {
	return m.clearedsrc
}

// SrcID returns the "src" edge ID in the mutation.
func (m *NetlinkResourceMutation) SrcID() (id int, exists bool) {
	if m.src != nil {
		return *m.src, true
	}
	return
}

// SrcIDs returns the "src" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SrcID instead. It exists only for internal usage by the builders.
func (m *NetlinkResourceMutation) SrcIDs() (ids []int) {
	if id := m.src; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSrc resets all changes to the "src" edge.
func (m *NetlinkResourceMutation) ResetSrc() {
	m.src = nil
	m.clearedsrc = false
}

// SetDstID sets the "dst" edge to the EndpointResource entity by id.
func (m *NetlinkResourceMutation) SetDstID(id int) {
	m.dst = &id
}

// ClearDst clears the "dst" edge to the EndpointResource entity.
func (m *NetlinkResourceMutation) ClearDst() {
	m.cleareddst = true
}

// DstCleared reports if the "dst" edge to the EndpointResource entity was cleared.
func (m *NetlinkResourceMutation) DstCleared() bool {
	return m.cleareddst
}

// DstID returns the "dst" edge ID in the mutation.
func (m *NetlinkResourceMutation) DstID() (id int, exists bool) {
	if m.dst != nil {
		return *m.dst, true
	}
	return
}

// DstIDs returns the "dst" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DstID instead. It exists only for internal usage by the builders.
func (m *NetlinkResourceMutation) DstIDs() (ids []int) {
	if id := m.dst; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDst resets all changes to the "dst" edge.
func (m *NetlinkResourceMutation) ResetDst() {
	m.dst = nil
	m.cleareddst = false
}

// Where appends a list predicates to the NetlinkResourceMutation builder.
func (m *NetlinkResourceMutation) Where(ps ...predicate.NetlinkResource) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the NetlinkResourceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *NetlinkResourceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.NetlinkResource, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *NetlinkResourceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *NetlinkResourceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (NetlinkResource).
func (m *NetlinkResourceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NetlinkResourceMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.resource_id != nil {
		fields = append(fields, netlinkresource.FieldResourceID)
	}
	if m.kind != nil {
		fields = append(fields, netlinkresource.FieldKind)
	}
	if m.description != nil {
		fields = append(fields, netlinkresource.FieldDescription)
	}
	if m.desired_state != nil {
		fields = append(fields, netlinkresource.FieldDesiredState)
	}
	if m.current_state != nil {
		fields = append(fields, netlinkresource.FieldCurrentState)
	}
	if m.provider_status != nil {
		fields = append(fields, netlinkresource.FieldProviderStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NetlinkResourceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case netlinkresource.FieldResourceID:
		return m.ResourceID()
	case netlinkresource.FieldKind:
		return m.Kind()
	case netlinkresource.FieldDescription:
		return m.Description()
	case netlinkresource.FieldDesiredState:
		return m.DesiredState()
	case netlinkresource.FieldCurrentState:
		return m.CurrentState()
	case netlinkresource.FieldProviderStatus:
		return m.ProviderStatus()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NetlinkResourceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case netlinkresource.FieldResourceID:
		return m.OldResourceID(ctx)
	case netlinkresource.FieldKind:
		return m.OldKind(ctx)
	case netlinkresource.FieldDescription:
		return m.OldDescription(ctx)
	case netlinkresource.FieldDesiredState:
		return m.OldDesiredState(ctx)
	case netlinkresource.FieldCurrentState:
		return m.OldCurrentState(ctx)
	case netlinkresource.FieldProviderStatus:
		return m.OldProviderStatus(ctx)
	}
	return nil, fmt.Errorf("unknown NetlinkResource field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NetlinkResourceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case netlinkresource.FieldResourceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResourceID(v)
		return nil
	case netlinkresource.FieldKind:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKind(v)
		return nil
	case netlinkresource.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case netlinkresource.FieldDesiredState:
		v, ok := value.(netlinkresource.DesiredState)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesiredState(v)
		return nil
	case netlinkresource.FieldCurrentState:
		v, ok := value.(netlinkresource.CurrentState)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrentState(v)
		return nil
	case netlinkresource.FieldProviderStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProviderStatus(v)
		return nil
	}
	return fmt.Errorf("unknown NetlinkResource field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NetlinkResourceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NetlinkResourceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NetlinkResourceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown NetlinkResource numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NetlinkResourceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(netlinkresource.FieldKind) {
		fields = append(fields, netlinkresource.FieldKind)
	}
	if m.FieldCleared(netlinkresource.FieldDescription) {
		fields = append(fields, netlinkresource.FieldDescription)
	}
	if m.FieldCleared(netlinkresource.FieldCurrentState) {
		fields = append(fields, netlinkresource.FieldCurrentState)
	}
	if m.FieldCleared(netlinkresource.FieldProviderStatus) {
		fields = append(fields, netlinkresource.FieldProviderStatus)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NetlinkResourceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NetlinkResourceMutation) ClearField(name string) error {
	switch name {
	case netlinkresource.FieldKind:
		m.ClearKind()
		return nil
	case netlinkresource.FieldDescription:
		m.ClearDescription()
		return nil
	case netlinkresource.FieldCurrentState:
		m.ClearCurrentState()
		return nil
	case netlinkresource.FieldProviderStatus:
		m.ClearProviderStatus()
		return nil
	}
	return fmt.Errorf("unknown NetlinkResource nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NetlinkResourceMutation) ResetField(name string) error {
	switch name {
	case netlinkresource.FieldResourceID:
		m.ResetResourceID()
		return nil
	case netlinkresource.FieldKind:
		m.ResetKind()
		return nil
	case netlinkresource.FieldDescription:
		m.ResetDescription()
		return nil
	case netlinkresource.FieldDesiredState:
		m.ResetDesiredState()
		return nil
	case netlinkresource.FieldCurrentState:
		m.ResetCurrentState()
		return nil
	case netlinkresource.FieldProviderStatus:
		m.ResetProviderStatus()
		return nil
	}
	return fmt.Errorf("unknown NetlinkResource field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NetlinkResourceMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.src != nil {
		edges = append(edges, netlinkresource.EdgeSrc)
	}
	if m.dst != nil {
		edges = append(edges, netlinkresource.EdgeDst)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NetlinkResourceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case netlinkresource.EdgeSrc:
		if id := m.src; id != nil {
			return []ent.Value{*id}
		}
	case netlinkresource.EdgeDst:
		if id := m.dst; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NetlinkResourceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NetlinkResourceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NetlinkResourceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedsrc {
		edges = append(edges, netlinkresource.EdgeSrc)
	}
	if m.cleareddst {
		edges = append(edges, netlinkresource.EdgeDst)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NetlinkResourceMutation) EdgeCleared(name string) bool {
	switch name {
	case netlinkresource.EdgeSrc:
		return m.clearedsrc
	case netlinkresource.EdgeDst:
		return m.cleareddst
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NetlinkResourceMutation) ClearEdge(name string) error {
	switch name {
	case netlinkresource.EdgeSrc:
		m.ClearSrc()
		return nil
	case netlinkresource.EdgeDst:
		m.ClearDst()
		return nil
	}
	return fmt.Errorf("unknown NetlinkResource unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NetlinkResourceMutation) ResetEdge(name string) error {
	switch name {
	case netlinkresource.EdgeSrc:
		m.ResetSrc()
		return nil
	case netlinkresource.EdgeDst:
		m.ResetDst()
		return nil
	}
	return fmt.Errorf("unknown NetlinkResource edge %s", name)
}

// NetworkSegmentMutation represents an operation that mutates the NetworkSegment nodes in the graph.
type NetworkSegmentMutation struct {
	config
	op            Op
	typ           string
	id            *int
	resource_id   *string
	description   *string
	vlan_id       *int32
	addvlan_id    *int32
	clearedFields map[string]struct{}
	site          *int
	clearedsite   bool
	done          bool
	oldValue      func(context.Context) (*NetworkSegment, error)
	predicates    []predicate.NetworkSegment
}

var _ ent.Mutation = (*NetworkSegmentMutation)(nil)

// networksegmentOption allows management of the mutation configuration using functional options.
type networksegmentOption func(*NetworkSegmentMutation)

// newNetworkSegmentMutation creates new mutation for the NetworkSegment entity.
func newNetworkSegmentMutation(c config, op Op, opts ...networksegmentOption) *NetworkSegmentMutation {
	m := &NetworkSegmentMutation{
		config:        c,
		op:            op,
		typ:           TypeNetworkSegment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNetworkSegmentID sets the ID field of the mutation.
func withNetworkSegmentID(id int) networksegmentOption {
	return func(m *NetworkSegmentMutation) {
		var (
			err   error
			once  sync.Once
			value *NetworkSegment
		)
		m.oldValue = func(ctx context.Context) (*NetworkSegment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().NetworkSegment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNetworkSegment sets the old NetworkSegment of the mutation.
func withNetworkSegment(node *NetworkSegment) networksegmentOption {
	return func(m *NetworkSegmentMutation) {
		m.oldValue = func(context.Context) (*NetworkSegment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NetworkSegmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NetworkSegmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NetworkSegmentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NetworkSegmentMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().NetworkSegment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetResourceID sets the "resource_id" field.
func (m *NetworkSegmentMutation) SetResourceID(s string) {
	m.resource_id = &s
}

// ResourceID returns the value of the "resource_id" field in the mutation.
func (m *NetworkSegmentMutation) ResourceID() (r string, exists bool) {
	v := m.resource_id
	if v == nil {
		return
	}
	return *v, true
}

// OldResourceID returns the old "resource_id" field's value of the NetworkSegment entity.
// If the NetworkSegment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkSegmentMutation) OldResourceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResourceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResourceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResourceID: %w", err)
	}
	return oldValue.ResourceID, nil
}

// ResetResourceID resets all changes to the "resource_id" field.
func (m *NetworkSegmentMutation) ResetResourceID() {
	m.resource_id = nil
}

// SetDescription sets the "description" field.
func (m *NetworkSegmentMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *NetworkSegmentMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the NetworkSegment entity.
// If the NetworkSegment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkSegmentMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *NetworkSegmentMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[networksegment.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *NetworkSegmentMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[networksegment.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *NetworkSegmentMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, networksegment.FieldDescription)
}

// SetVlanID sets the "vlan_id" field.
func (m *NetworkSegmentMutation) SetVlanID(i int32) {
	m.vlan_id = &i
	m.addvlan_id = nil
}

// VlanID returns the value of the "vlan_id" field in the mutation.
func (m *NetworkSegmentMutation) VlanID() (r int32, exists bool) {
	v := m.vlan_id
	if v == nil {
		return
	}
	return *v, true
}

// OldVlanID returns the old "vlan_id" field's value of the NetworkSegment entity.
// If the NetworkSegment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkSegmentMutation) OldVlanID(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVlanID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVlanID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVlanID: %w", err)
	}
	return oldValue.VlanID, nil
}

// AddVlanID adds i to the "vlan_id" field.
func (m *NetworkSegmentMutation) AddVlanID(i int32) {
	if m.addvlan_id != nil {
		*m.addvlan_id += i
	} else {
		m.addvlan_id = &i
	}
}

// AddedVlanID returns the value that was added to the "vlan_id" field in this mutation.
func (m *NetworkSegmentMutation) AddedVlanID() (r int32, exists bool) {
	v := m.addvlan_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearVlanID clears the value of the "vlan_id" field.
func (m *NetworkSegmentMutation) ClearVlanID() {
	m.vlan_id = nil
	m.addvlan_id = nil
	m.clearedFields[networksegment.FieldVlanID] = struct{}{}
}

// VlanIDCleared returns if the "vlan_id" field was cleared in this mutation.
func (m *NetworkSegmentMutation) VlanIDCleared() bool {
	_, ok := m.clearedFields[networksegment.FieldVlanID]
	return ok
}

// ResetVlanID resets all changes to the "vlan_id" field.
func (m *NetworkSegmentMutation) ResetVlanID() {
	m.vlan_id = nil
	m.addvlan_id = nil
	delete(m.clearedFields, networksegment.FieldVlanID)
}

// SetSiteID sets the "site" edge to the SiteResource entity by id.
func (m *NetworkSegmentMutation) SetSiteID(id int) {
	m.site = &id
}

// ClearSite clears the "site" edge to the SiteResource entity.
func (m *NetworkSegmentMutation) ClearSite() {
	m.clearedsite = true
}

// SiteCleared reports if the "site" edge to the SiteResource entity was cleared.
func (m *NetworkSegmentMutation) SiteCleared() bool {
	return m.clearedsite
}

// SiteID returns the "site" edge ID in the mutation.
func (m *NetworkSegmentMutation) SiteID() (id int, exists bool) {
	if m.site != nil {
		return *m.site, true
	}
	return
}

// SiteIDs returns the "site" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SiteID instead. It exists only for internal usage by the builders.
func (m *NetworkSegmentMutation) SiteIDs() (ids []int) {
	if id := m.site; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSite resets all changes to the "site" edge.
func (m *NetworkSegmentMutation) ResetSite() {
	m.site = nil
	m.clearedsite = false
}

// Where appends a list predicates to the NetworkSegmentMutation builder.
func (m *NetworkSegmentMutation) Where(ps ...predicate.NetworkSegment) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the NetworkSegmentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *NetworkSegmentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.NetworkSegment, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *NetworkSegmentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *NetworkSegmentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (NetworkSegment).
func (m *NetworkSegmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NetworkSegmentMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.resource_id != nil {
		fields = append(fields, networksegment.FieldResourceID)
	}
	if m.description != nil {
		fields = append(fields, networksegment.FieldDescription)
	}
	if m.vlan_id != nil {
		fields = append(fields, networksegment.FieldVlanID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NetworkSegmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case networksegment.FieldResourceID:
		return m.ResourceID()
	case networksegment.FieldDescription:
		return m.Description()
	case networksegment.FieldVlanID:
		return m.VlanID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NetworkSegmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case networksegment.FieldResourceID:
		return m.OldResourceID(ctx)
	case networksegment.FieldDescription:
		return m.OldDescription(ctx)
	case networksegment.FieldVlanID:
		return m.OldVlanID(ctx)
	}
	return nil, fmt.Errorf("unknown NetworkSegment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NetworkSegmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case networksegment.FieldResourceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResourceID(v)
		return nil
	case networksegment.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case networksegment.FieldVlanID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVlanID(v)
		return nil
	}
	return fmt.Errorf("unknown NetworkSegment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NetworkSegmentMutation) AddedFields() []string {
	var fields []string
	if m.addvlan_id != nil {
		fields = append(fields, networksegment.FieldVlanID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NetworkSegmentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case networksegment.FieldVlanID:
		return m.AddedVlanID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NetworkSegmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case networksegment.FieldVlanID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVlanID(v)
		return nil
	}
	return fmt.Errorf("unknown NetworkSegment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NetworkSegmentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(networksegment.FieldDescription) {
		fields = append(fields, networksegment.FieldDescription)
	}
	if m.FieldCleared(networksegment.FieldVlanID) {
		fields = append(fields, networksegment.FieldVlanID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NetworkSegmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NetworkSegmentMutation) ClearField(name string) error {
	switch name {
	case networksegment.FieldDescription:
		m.ClearDescription()
		return nil
	case networksegment.FieldVlanID:
		m.ClearVlanID()
		return nil
	}
	return fmt.Errorf("unknown NetworkSegment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NetworkSegmentMutation) ResetField(name string) error {
	switch name {
	case networksegment.FieldResourceID:
		m.ResetResourceID()
		return nil
	case networksegment.FieldDescription:
		m.ResetDescription()
		return nil
	case networksegment.FieldVlanID:
		m.ResetVlanID()
		return nil
	}
	return fmt.Errorf("unknown NetworkSegment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NetworkSegmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.site != nil {
		edges = append(edges, networksegment.EdgeSite)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NetworkSegmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case networksegment.EdgeSite:
		if id := m.site; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NetworkSegmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NetworkSegmentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NetworkSegmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsite {
		edges = append(edges, networksegment.EdgeSite)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NetworkSegmentMutation) EdgeCleared(name string) bool {
	switch name {
	case networksegment.EdgeSite:
		return m.clearedsite
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NetworkSegmentMutation) ClearEdge(name string) error {
	switch name {
	case networksegment.EdgeSite:
		m.ClearSite()
		return nil
	}
	return fmt.Errorf("unknown NetworkSegment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NetworkSegmentMutation) ResetEdge(name string) error {
	switch name {
	case networksegment.EdgeSite:
		m.ResetSite()
		return nil
	}
	return fmt.Errorf("unknown NetworkSegment edge %s", name)
}

// OperatingSystemResourceMutation represents an operation that mutates the OperatingSystemResource nodes in the graph.
type OperatingSystemResourceMutation struct {
	config
	op             Op
	typ            string
	id             *int
	resource_id    *string
	description    *string
	architecture   *string
	kernel_command *string
	update_sources *string
	repo_url       *string
	sha256         *string
	profile_name   *string
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*OperatingSystemResource, error)
	predicates     []predicate.OperatingSystemResource
}

var _ ent.Mutation = (*OperatingSystemResourceMutation)(nil)

// operatingsystemresourceOption allows management of the mutation configuration using functional options.
type operatingsystemresourceOption func(*OperatingSystemResourceMutation)

// newOperatingSystemResourceMutation creates new mutation for the OperatingSystemResource entity.
func newOperatingSystemResourceMutation(c config, op Op, opts ...operatingsystemresourceOption) *OperatingSystemResourceMutation {
	m := &OperatingSystemResourceMutation{
		config:        c,
		op:            op,
		typ:           TypeOperatingSystemResource,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOperatingSystemResourceID sets the ID field of the mutation.
func withOperatingSystemResourceID(id int) operatingsystemresourceOption {
	return func(m *OperatingSystemResourceMutation) {
		var (
			err   error
			once  sync.Once
			value *OperatingSystemResource
		)
		m.oldValue = func(ctx context.Context) (*OperatingSystemResource, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OperatingSystemResource.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOperatingSystemResource sets the old OperatingSystemResource of the mutation.
func withOperatingSystemResource(node *OperatingSystemResource) operatingsystemresourceOption {
	return func(m *OperatingSystemResourceMutation) {
		m.oldValue = func(context.Context) (*OperatingSystemResource, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OperatingSystemResourceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OperatingSystemResourceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OperatingSystemResourceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OperatingSystemResourceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OperatingSystemResource.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetResourceID sets the "resource_id" field.
func (m *OperatingSystemResourceMutation) SetResourceID(s string) {
	m.resource_id = &s
}

// ResourceID returns the value of the "resource_id" field in the mutation.
func (m *OperatingSystemResourceMutation) ResourceID() (r string, exists bool) {
	v := m.resource_id
	if v == nil {
		return
	}
	return *v, true
}

// OldResourceID returns the old "resource_id" field's value of the OperatingSystemResource entity.
// If the OperatingSystemResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OperatingSystemResourceMutation) OldResourceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResourceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResourceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResourceID: %w", err)
	}
	return oldValue.ResourceID, nil
}

// ResetResourceID resets all changes to the "resource_id" field.
func (m *OperatingSystemResourceMutation) ResetResourceID() {
	m.resource_id = nil
}

// SetDescription sets the "description" field.
func (m *OperatingSystemResourceMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *OperatingSystemResourceMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the OperatingSystemResource entity.
// If the OperatingSystemResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OperatingSystemResourceMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *OperatingSystemResourceMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[operatingsystemresource.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *OperatingSystemResourceMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[operatingsystemresource.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *OperatingSystemResourceMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, operatingsystemresource.FieldDescription)
}

// SetArchitecture sets the "architecture" field.
func (m *OperatingSystemResourceMutation) SetArchitecture(s string) {
	m.architecture = &s
}

// Architecture returns the value of the "architecture" field in the mutation.
func (m *OperatingSystemResourceMutation) Architecture() (r string, exists bool) {
	v := m.architecture
	if v == nil {
		return
	}
	return *v, true
}

// OldArchitecture returns the old "architecture" field's value of the OperatingSystemResource entity.
// If the OperatingSystemResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OperatingSystemResourceMutation) OldArchitecture(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArchitecture is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArchitecture requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArchitecture: %w", err)
	}
	return oldValue.Architecture, nil
}

// ClearArchitecture clears the value of the "architecture" field.
func (m *OperatingSystemResourceMutation) ClearArchitecture() {
	m.architecture = nil
	m.clearedFields[operatingsystemresource.FieldArchitecture] = struct{}{}
}

// ArchitectureCleared returns if the "architecture" field was cleared in this mutation.
func (m *OperatingSystemResourceMutation) ArchitectureCleared() bool {
	_, ok := m.clearedFields[operatingsystemresource.FieldArchitecture]
	return ok
}

// ResetArchitecture resets all changes to the "architecture" field.
func (m *OperatingSystemResourceMutation) ResetArchitecture() {
	m.architecture = nil
	delete(m.clearedFields, operatingsystemresource.FieldArchitecture)
}

// SetKernelCommand sets the "kernel_command" field.
func (m *OperatingSystemResourceMutation) SetKernelCommand(s string) {
	m.kernel_command = &s
}

// KernelCommand returns the value of the "kernel_command" field in the mutation.
func (m *OperatingSystemResourceMutation) KernelCommand() (r string, exists bool) {
	v := m.kernel_command
	if v == nil {
		return
	}
	return *v, true
}

// OldKernelCommand returns the old "kernel_command" field's value of the OperatingSystemResource entity.
// If the OperatingSystemResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OperatingSystemResourceMutation) OldKernelCommand(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKernelCommand is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKernelCommand requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKernelCommand: %w", err)
	}
	return oldValue.KernelCommand, nil
}

// ClearKernelCommand clears the value of the "kernel_command" field.
func (m *OperatingSystemResourceMutation) ClearKernelCommand() {
	m.kernel_command = nil
	m.clearedFields[operatingsystemresource.FieldKernelCommand] = struct{}{}
}

// KernelCommandCleared returns if the "kernel_command" field was cleared in this mutation.
func (m *OperatingSystemResourceMutation) KernelCommandCleared() bool {
	_, ok := m.clearedFields[operatingsystemresource.FieldKernelCommand]
	return ok
}

// ResetKernelCommand resets all changes to the "kernel_command" field.
func (m *OperatingSystemResourceMutation) ResetKernelCommand() {
	m.kernel_command = nil
	delete(m.clearedFields, operatingsystemresource.FieldKernelCommand)
}

// SetUpdateSources sets the "update_sources" field.
func (m *OperatingSystemResourceMutation) SetUpdateSources(s string) {
	m.update_sources = &s
}

// UpdateSources returns the value of the "update_sources" field in the mutation.
func (m *OperatingSystemResourceMutation) UpdateSources() (r string, exists bool) {
	v := m.update_sources
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateSources returns the old "update_sources" field's value of the OperatingSystemResource entity.
// If the OperatingSystemResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OperatingSystemResourceMutation) OldUpdateSources(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateSources is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateSources requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateSources: %w", err)
	}
	return oldValue.UpdateSources, nil
}

// ResetUpdateSources resets all changes to the "update_sources" field.
func (m *OperatingSystemResourceMutation) ResetUpdateSources() {
	m.update_sources = nil
}

// SetRepoURL sets the "repo_url" field.
func (m *OperatingSystemResourceMutation) SetRepoURL(s string) {
	m.repo_url = &s
}

// RepoURL returns the value of the "repo_url" field in the mutation.
func (m *OperatingSystemResourceMutation) RepoURL() (r string, exists bool) {
	v := m.repo_url
	if v == nil {
		return
	}
	return *v, true
}

// OldRepoURL returns the old "repo_url" field's value of the OperatingSystemResource entity.
// If the OperatingSystemResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OperatingSystemResourceMutation) OldRepoURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRepoURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRepoURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRepoURL: %w", err)
	}
	return oldValue.RepoURL, nil
}

// ResetRepoURL resets all changes to the "repo_url" field.
func (m *OperatingSystemResourceMutation) ResetRepoURL() {
	m.repo_url = nil
}

// SetSha256 sets the "sha256" field.
func (m *OperatingSystemResourceMutation) SetSha256(s string) {
	m.sha256 = &s
}

// Sha256 returns the value of the "sha256" field in the mutation.
func (m *OperatingSystemResourceMutation) Sha256() (r string, exists bool) {
	v := m.sha256
	if v == nil {
		return
	}
	return *v, true
}

// OldSha256 returns the old "sha256" field's value of the OperatingSystemResource entity.
// If the OperatingSystemResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OperatingSystemResourceMutation) OldSha256(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSha256 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSha256 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSha256: %w", err)
	}
	return oldValue.Sha256, nil
}

// ResetSha256 resets all changes to the "sha256" field.
func (m *OperatingSystemResourceMutation) ResetSha256() {
	m.sha256 = nil
}

// SetProfileName sets the "profile_name" field.
func (m *OperatingSystemResourceMutation) SetProfileName(s string) {
	m.profile_name = &s
}

// ProfileName returns the value of the "profile_name" field in the mutation.
func (m *OperatingSystemResourceMutation) ProfileName() (r string, exists bool) {
	v := m.profile_name
	if v == nil {
		return
	}
	return *v, true
}

// OldProfileName returns the old "profile_name" field's value of the OperatingSystemResource entity.
// If the OperatingSystemResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OperatingSystemResourceMutation) OldProfileName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProfileName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProfileName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProfileName: %w", err)
	}
	return oldValue.ProfileName, nil
}

// ClearProfileName clears the value of the "profile_name" field.
func (m *OperatingSystemResourceMutation) ClearProfileName() {
	m.profile_name = nil
	m.clearedFields[operatingsystemresource.FieldProfileName] = struct{}{}
}

// ProfileNameCleared returns if the "profile_name" field was cleared in this mutation.
func (m *OperatingSystemResourceMutation) ProfileNameCleared() bool {
	_, ok := m.clearedFields[operatingsystemresource.FieldProfileName]
	return ok
}

// ResetProfileName resets all changes to the "profile_name" field.
func (m *OperatingSystemResourceMutation) ResetProfileName() {
	m.profile_name = nil
	delete(m.clearedFields, operatingsystemresource.FieldProfileName)
}

// Where appends a list predicates to the OperatingSystemResourceMutation builder.
func (m *OperatingSystemResourceMutation) Where(ps ...predicate.OperatingSystemResource) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OperatingSystemResourceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OperatingSystemResourceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.OperatingSystemResource, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OperatingSystemResourceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OperatingSystemResourceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (OperatingSystemResource).
func (m *OperatingSystemResourceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OperatingSystemResourceMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.resource_id != nil {
		fields = append(fields, operatingsystemresource.FieldResourceID)
	}
	if m.description != nil {
		fields = append(fields, operatingsystemresource.FieldDescription)
	}
	if m.architecture != nil {
		fields = append(fields, operatingsystemresource.FieldArchitecture)
	}
	if m.kernel_command != nil {
		fields = append(fields, operatingsystemresource.FieldKernelCommand)
	}
	if m.update_sources != nil {
		fields = append(fields, operatingsystemresource.FieldUpdateSources)
	}
	if m.repo_url != nil {
		fields = append(fields, operatingsystemresource.FieldRepoURL)
	}
	if m.sha256 != nil {
		fields = append(fields, operatingsystemresource.FieldSha256)
	}
	if m.profile_name != nil {
		fields = append(fields, operatingsystemresource.FieldProfileName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OperatingSystemResourceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case operatingsystemresource.FieldResourceID:
		return m.ResourceID()
	case operatingsystemresource.FieldDescription:
		return m.Description()
	case operatingsystemresource.FieldArchitecture:
		return m.Architecture()
	case operatingsystemresource.FieldKernelCommand:
		return m.KernelCommand()
	case operatingsystemresource.FieldUpdateSources:
		return m.UpdateSources()
	case operatingsystemresource.FieldRepoURL:
		return m.RepoURL()
	case operatingsystemresource.FieldSha256:
		return m.Sha256()
	case operatingsystemresource.FieldProfileName:
		return m.ProfileName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OperatingSystemResourceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case operatingsystemresource.FieldResourceID:
		return m.OldResourceID(ctx)
	case operatingsystemresource.FieldDescription:
		return m.OldDescription(ctx)
	case operatingsystemresource.FieldArchitecture:
		return m.OldArchitecture(ctx)
	case operatingsystemresource.FieldKernelCommand:
		return m.OldKernelCommand(ctx)
	case operatingsystemresource.FieldUpdateSources:
		return m.OldUpdateSources(ctx)
	case operatingsystemresource.FieldRepoURL:
		return m.OldRepoURL(ctx)
	case operatingsystemresource.FieldSha256:
		return m.OldSha256(ctx)
	case operatingsystemresource.FieldProfileName:
		return m.OldProfileName(ctx)
	}
	return nil, fmt.Errorf("unknown OperatingSystemResource field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OperatingSystemResourceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case operatingsystemresource.FieldResourceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResourceID(v)
		return nil
	case operatingsystemresource.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case operatingsystemresource.FieldArchitecture:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArchitecture(v)
		return nil
	case operatingsystemresource.FieldKernelCommand:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKernelCommand(v)
		return nil
	case operatingsystemresource.FieldUpdateSources:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateSources(v)
		return nil
	case operatingsystemresource.FieldRepoURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRepoURL(v)
		return nil
	case operatingsystemresource.FieldSha256:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSha256(v)
		return nil
	case operatingsystemresource.FieldProfileName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProfileName(v)
		return nil
	}
	return fmt.Errorf("unknown OperatingSystemResource field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OperatingSystemResourceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OperatingSystemResourceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OperatingSystemResourceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown OperatingSystemResource numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OperatingSystemResourceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(operatingsystemresource.FieldDescription) {
		fields = append(fields, operatingsystemresource.FieldDescription)
	}
	if m.FieldCleared(operatingsystemresource.FieldArchitecture) {
		fields = append(fields, operatingsystemresource.FieldArchitecture)
	}
	if m.FieldCleared(operatingsystemresource.FieldKernelCommand) {
		fields = append(fields, operatingsystemresource.FieldKernelCommand)
	}
	if m.FieldCleared(operatingsystemresource.FieldProfileName) {
		fields = append(fields, operatingsystemresource.FieldProfileName)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OperatingSystemResourceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OperatingSystemResourceMutation) ClearField(name string) error {
	switch name {
	case operatingsystemresource.FieldDescription:
		m.ClearDescription()
		return nil
	case operatingsystemresource.FieldArchitecture:
		m.ClearArchitecture()
		return nil
	case operatingsystemresource.FieldKernelCommand:
		m.ClearKernelCommand()
		return nil
	case operatingsystemresource.FieldProfileName:
		m.ClearProfileName()
		return nil
	}
	return fmt.Errorf("unknown OperatingSystemResource nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OperatingSystemResourceMutation) ResetField(name string) error {
	switch name {
	case operatingsystemresource.FieldResourceID:
		m.ResetResourceID()
		return nil
	case operatingsystemresource.FieldDescription:
		m.ResetDescription()
		return nil
	case operatingsystemresource.FieldArchitecture:
		m.ResetArchitecture()
		return nil
	case operatingsystemresource.FieldKernelCommand:
		m.ResetKernelCommand()
		return nil
	case operatingsystemresource.FieldUpdateSources:
		m.ResetUpdateSources()
		return nil
	case operatingsystemresource.FieldRepoURL:
		m.ResetRepoURL()
		return nil
	case operatingsystemresource.FieldSha256:
		m.ResetSha256()
		return nil
	case operatingsystemresource.FieldProfileName:
		m.ResetProfileName()
		return nil
	}
	return fmt.Errorf("unknown OperatingSystemResource field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OperatingSystemResourceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OperatingSystemResourceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OperatingSystemResourceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OperatingSystemResourceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OperatingSystemResourceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OperatingSystemResourceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OperatingSystemResourceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown OperatingSystemResource unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OperatingSystemResourceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown OperatingSystemResource edge %s", name)
}

// OuResourceMutation represents an operation that mutates the OuResource nodes in the graph.
type OuResourceMutation struct {
	config
	op               Op
	typ              string
	id               *int
	resource_id      *string
	description      *string
	ou_kind          *string
	metadata         *string
	clearedFields    map[string]struct{}
	parent_ou        *int
	clearedparent_ou bool
	children         map[int]struct{}
	removedchildren  map[int]struct{}
	clearedchildren  bool
	done             bool
	oldValue         func(context.Context) (*OuResource, error)
	predicates       []predicate.OuResource
}

var _ ent.Mutation = (*OuResourceMutation)(nil)

// ouresourceOption allows management of the mutation configuration using functional options.
type ouresourceOption func(*OuResourceMutation)

// newOuResourceMutation creates new mutation for the OuResource entity.
func newOuResourceMutation(c config, op Op, opts ...ouresourceOption) *OuResourceMutation {
	m := &OuResourceMutation{
		config:        c,
		op:            op,
		typ:           TypeOuResource,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOuResourceID sets the ID field of the mutation.
func withOuResourceID(id int) ouresourceOption {
	return func(m *OuResourceMutation) {
		var (
			err   error
			once  sync.Once
			value *OuResource
		)
		m.oldValue = func(ctx context.Context) (*OuResource, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OuResource.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOuResource sets the old OuResource of the mutation.
func withOuResource(node *OuResource) ouresourceOption {
	return func(m *OuResourceMutation) {
		m.oldValue = func(context.Context) (*OuResource, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OuResourceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OuResourceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OuResourceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OuResourceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OuResource.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetResourceID sets the "resource_id" field.
func (m *OuResourceMutation) SetResourceID(s string) {
	m.resource_id = &s
}

// ResourceID returns the value of the "resource_id" field in the mutation.
func (m *OuResourceMutation) ResourceID() (r string, exists bool) {
	v := m.resource_id
	if v == nil {
		return
	}
	return *v, true
}

// OldResourceID returns the old "resource_id" field's value of the OuResource entity.
// If the OuResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OuResourceMutation) OldResourceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResourceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResourceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResourceID: %w", err)
	}
	return oldValue.ResourceID, nil
}

// ResetResourceID resets all changes to the "resource_id" field.
func (m *OuResourceMutation) ResetResourceID() {
	m.resource_id = nil
}

// SetDescription sets the "description" field.
func (m *OuResourceMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *OuResourceMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the OuResource entity.
// If the OuResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OuResourceMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *OuResourceMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[ouresource.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *OuResourceMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[ouresource.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *OuResourceMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, ouresource.FieldDescription)
}

// SetOuKind sets the "ou_kind" field.
func (m *OuResourceMutation) SetOuKind(s string) {
	m.ou_kind = &s
}

// OuKind returns the value of the "ou_kind" field in the mutation.
func (m *OuResourceMutation) OuKind() (r string, exists bool) {
	v := m.ou_kind
	if v == nil {
		return
	}
	return *v, true
}

// OldOuKind returns the old "ou_kind" field's value of the OuResource entity.
// If the OuResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OuResourceMutation) OldOuKind(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOuKind is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOuKind requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOuKind: %w", err)
	}
	return oldValue.OuKind, nil
}

// ClearOuKind clears the value of the "ou_kind" field.
func (m *OuResourceMutation) ClearOuKind() {
	m.ou_kind = nil
	m.clearedFields[ouresource.FieldOuKind] = struct{}{}
}

// OuKindCleared returns if the "ou_kind" field was cleared in this mutation.
func (m *OuResourceMutation) OuKindCleared() bool {
	_, ok := m.clearedFields[ouresource.FieldOuKind]
	return ok
}

// ResetOuKind resets all changes to the "ou_kind" field.
func (m *OuResourceMutation) ResetOuKind() {
	m.ou_kind = nil
	delete(m.clearedFields, ouresource.FieldOuKind)
}

// SetMetadata sets the "metadata" field.
func (m *OuResourceMutation) SetMetadata(s string) {
	m.metadata = &s
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *OuResourceMutation) Metadata() (r string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the OuResource entity.
// If the OuResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OuResourceMutation) OldMetadata(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *OuResourceMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[ouresource.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *OuResourceMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[ouresource.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *OuResourceMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, ouresource.FieldMetadata)
}

// SetParentOuID sets the "parent_ou" edge to the OuResource entity by id.
func (m *OuResourceMutation) SetParentOuID(id int) {
	m.parent_ou = &id
}

// ClearParentOu clears the "parent_ou" edge to the OuResource entity.
func (m *OuResourceMutation) ClearParentOu() {
	m.clearedparent_ou = true
}

// ParentOuCleared reports if the "parent_ou" edge to the OuResource entity was cleared.
func (m *OuResourceMutation) ParentOuCleared() bool {
	return m.clearedparent_ou
}

// ParentOuID returns the "parent_ou" edge ID in the mutation.
func (m *OuResourceMutation) ParentOuID() (id int, exists bool) {
	if m.parent_ou != nil {
		return *m.parent_ou, true
	}
	return
}

// ParentOuIDs returns the "parent_ou" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentOuID instead. It exists only for internal usage by the builders.
func (m *OuResourceMutation) ParentOuIDs() (ids []int) {
	if id := m.parent_ou; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParentOu resets all changes to the "parent_ou" edge.
func (m *OuResourceMutation) ResetParentOu() {
	m.parent_ou = nil
	m.clearedparent_ou = false
}

// AddChildIDs adds the "children" edge to the OuResource entity by ids.
func (m *OuResourceMutation) AddChildIDs(ids ...int) {
	if m.children == nil {
		m.children = make(map[int]struct{})
	}
	for i := range ids {
		m.children[ids[i]] = struct{}{}
	}
}

// ClearChildren clears the "children" edge to the OuResource entity.
func (m *OuResourceMutation) ClearChildren() {
	m.clearedchildren = true
}

// ChildrenCleared reports if the "children" edge to the OuResource entity was cleared.
func (m *OuResourceMutation) ChildrenCleared() bool {
	return m.clearedchildren
}

// RemoveChildIDs removes the "children" edge to the OuResource entity by IDs.
func (m *OuResourceMutation) RemoveChildIDs(ids ...int) {
	if m.removedchildren == nil {
		m.removedchildren = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.children, ids[i])
		m.removedchildren[ids[i]] = struct{}{}
	}
}

// RemovedChildren returns the removed IDs of the "children" edge to the OuResource entity.
func (m *OuResourceMutation) RemovedChildrenIDs() (ids []int) {
	for id := range m.removedchildren {
		ids = append(ids, id)
	}
	return
}

// ChildrenIDs returns the "children" edge IDs in the mutation.
func (m *OuResourceMutation) ChildrenIDs() (ids []int) {
	for id := range m.children {
		ids = append(ids, id)
	}
	return
}

// ResetChildren resets all changes to the "children" edge.
func (m *OuResourceMutation) ResetChildren() {
	m.children = nil
	m.clearedchildren = false
	m.removedchildren = nil
}

// Where appends a list predicates to the OuResourceMutation builder.
func (m *OuResourceMutation) Where(ps ...predicate.OuResource) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OuResourceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OuResourceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.OuResource, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OuResourceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OuResourceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (OuResource).
func (m *OuResourceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OuResourceMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.resource_id != nil {
		fields = append(fields, ouresource.FieldResourceID)
	}
	if m.description != nil {
		fields = append(fields, ouresource.FieldDescription)
	}
	if m.ou_kind != nil {
		fields = append(fields, ouresource.FieldOuKind)
	}
	if m.metadata != nil {
		fields = append(fields, ouresource.FieldMetadata)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OuResourceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ouresource.FieldResourceID:
		return m.ResourceID()
	case ouresource.FieldDescription:
		return m.Description()
	case ouresource.FieldOuKind:
		return m.OuKind()
	case ouresource.FieldMetadata:
		return m.Metadata()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OuResourceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ouresource.FieldResourceID:
		return m.OldResourceID(ctx)
	case ouresource.FieldDescription:
		return m.OldDescription(ctx)
	case ouresource.FieldOuKind:
		return m.OldOuKind(ctx)
	case ouresource.FieldMetadata:
		return m.OldMetadata(ctx)
	}
	return nil, fmt.Errorf("unknown OuResource field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OuResourceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ouresource.FieldResourceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResourceID(v)
		return nil
	case ouresource.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case ouresource.FieldOuKind:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOuKind(v)
		return nil
	case ouresource.FieldMetadata:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	}
	return fmt.Errorf("unknown OuResource field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OuResourceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OuResourceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OuResourceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown OuResource numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OuResourceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(ouresource.FieldDescription) {
		fields = append(fields, ouresource.FieldDescription)
	}
	if m.FieldCleared(ouresource.FieldOuKind) {
		fields = append(fields, ouresource.FieldOuKind)
	}
	if m.FieldCleared(ouresource.FieldMetadata) {
		fields = append(fields, ouresource.FieldMetadata)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OuResourceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OuResourceMutation) ClearField(name string) error {
	switch name {
	case ouresource.FieldDescription:
		m.ClearDescription()
		return nil
	case ouresource.FieldOuKind:
		m.ClearOuKind()
		return nil
	case ouresource.FieldMetadata:
		m.ClearMetadata()
		return nil
	}
	return fmt.Errorf("unknown OuResource nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OuResourceMutation) ResetField(name string) error {
	switch name {
	case ouresource.FieldResourceID:
		m.ResetResourceID()
		return nil
	case ouresource.FieldDescription:
		m.ResetDescription()
		return nil
	case ouresource.FieldOuKind:
		m.ResetOuKind()
		return nil
	case ouresource.FieldMetadata:
		m.ResetMetadata()
		return nil
	}
	return fmt.Errorf("unknown OuResource field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OuResourceMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.parent_ou != nil {
		edges = append(edges, ouresource.EdgeParentOu)
	}
	if m.children != nil {
		edges = append(edges, ouresource.EdgeChildren)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OuResourceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case ouresource.EdgeParentOu:
		if id := m.parent_ou; id != nil {
			return []ent.Value{*id}
		}
	case ouresource.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.children))
		for id := range m.children {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OuResourceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedchildren != nil {
		edges = append(edges, ouresource.EdgeChildren)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OuResourceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case ouresource.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.removedchildren))
		for id := range m.removedchildren {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OuResourceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedparent_ou {
		edges = append(edges, ouresource.EdgeParentOu)
	}
	if m.clearedchildren {
		edges = append(edges, ouresource.EdgeChildren)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OuResourceMutation) EdgeCleared(name string) bool {
	switch name {
	case ouresource.EdgeParentOu:
		return m.clearedparent_ou
	case ouresource.EdgeChildren:
		return m.clearedchildren
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OuResourceMutation) ClearEdge(name string) error {
	switch name {
	case ouresource.EdgeParentOu:
		m.ClearParentOu()
		return nil
	}
	return fmt.Errorf("unknown OuResource unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OuResourceMutation) ResetEdge(name string) error {
	switch name {
	case ouresource.EdgeParentOu:
		m.ResetParentOu()
		return nil
	case ouresource.EdgeChildren:
		m.ResetChildren()
		return nil
	}
	return fmt.Errorf("unknown OuResource edge %s", name)
}

// ProjectResourceMutation represents an operation that mutates the ProjectResource nodes in the graph.
type ProjectResourceMutation struct {
	config
	op            Op
	typ           string
	id            *int
	resource_id   *string
	kind          *string
	description   *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ProjectResource, error)
	predicates    []predicate.ProjectResource
}

var _ ent.Mutation = (*ProjectResourceMutation)(nil)

// projectresourceOption allows management of the mutation configuration using functional options.
type projectresourceOption func(*ProjectResourceMutation)

// newProjectResourceMutation creates new mutation for the ProjectResource entity.
func newProjectResourceMutation(c config, op Op, opts ...projectresourceOption) *ProjectResourceMutation {
	m := &ProjectResourceMutation{
		config:        c,
		op:            op,
		typ:           TypeProjectResource,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProjectResourceID sets the ID field of the mutation.
func withProjectResourceID(id int) projectresourceOption {
	return func(m *ProjectResourceMutation) {
		var (
			err   error
			once  sync.Once
			value *ProjectResource
		)
		m.oldValue = func(ctx context.Context) (*ProjectResource, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProjectResource.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProjectResource sets the old ProjectResource of the mutation.
func withProjectResource(node *ProjectResource) projectresourceOption {
	return func(m *ProjectResourceMutation) {
		m.oldValue = func(context.Context) (*ProjectResource, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProjectResourceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProjectResourceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProjectResourceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProjectResourceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ProjectResource.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetResourceID sets the "resource_id" field.
func (m *ProjectResourceMutation) SetResourceID(s string) {
	m.resource_id = &s
}

// ResourceID returns the value of the "resource_id" field in the mutation.
func (m *ProjectResourceMutation) ResourceID() (r string, exists bool) {
	v := m.resource_id
	if v == nil {
		return
	}
	return *v, true
}

// OldResourceID returns the old "resource_id" field's value of the ProjectResource entity.
// If the ProjectResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectResourceMutation) OldResourceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResourceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResourceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResourceID: %w", err)
	}
	return oldValue.ResourceID, nil
}

// ResetResourceID resets all changes to the "resource_id" field.
func (m *ProjectResourceMutation) ResetResourceID() {
	m.resource_id = nil
}

// SetKind sets the "kind" field.
func (m *ProjectResourceMutation) SetKind(s string) {
	m.kind = &s
}

// Kind returns the value of the "kind" field in the mutation.
func (m *ProjectResourceMutation) Kind() (r string, exists bool) {
	v := m.kind
	if v == nil {
		return
	}
	return *v, true
}

// OldKind returns the old "kind" field's value of the ProjectResource entity.
// If the ProjectResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectResourceMutation) OldKind(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKind is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKind requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKind: %w", err)
	}
	return oldValue.Kind, nil
}

// ClearKind clears the value of the "kind" field.
func (m *ProjectResourceMutation) ClearKind() {
	m.kind = nil
	m.clearedFields[projectresource.FieldKind] = struct{}{}
}

// KindCleared returns if the "kind" field was cleared in this mutation.
func (m *ProjectResourceMutation) KindCleared() bool {
	_, ok := m.clearedFields[projectresource.FieldKind]
	return ok
}

// ResetKind resets all changes to the "kind" field.
func (m *ProjectResourceMutation) ResetKind() {
	m.kind = nil
	delete(m.clearedFields, projectresource.FieldKind)
}

// SetDescription sets the "description" field.
func (m *ProjectResourceMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ProjectResourceMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the ProjectResource entity.
// If the ProjectResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectResourceMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ProjectResourceMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[projectresource.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ProjectResourceMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[projectresource.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ProjectResourceMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, projectresource.FieldDescription)
}

// Where appends a list predicates to the ProjectResourceMutation builder.
func (m *ProjectResourceMutation) Where(ps ...predicate.ProjectResource) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProjectResourceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProjectResourceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ProjectResource, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProjectResourceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProjectResourceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ProjectResource).
func (m *ProjectResourceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProjectResourceMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.resource_id != nil {
		fields = append(fields, projectresource.FieldResourceID)
	}
	if m.kind != nil {
		fields = append(fields, projectresource.FieldKind)
	}
	if m.description != nil {
		fields = append(fields, projectresource.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProjectResourceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case projectresource.FieldResourceID:
		return m.ResourceID()
	case projectresource.FieldKind:
		return m.Kind()
	case projectresource.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProjectResourceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case projectresource.FieldResourceID:
		return m.OldResourceID(ctx)
	case projectresource.FieldKind:
		return m.OldKind(ctx)
	case projectresource.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown ProjectResource field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectResourceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case projectresource.FieldResourceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResourceID(v)
		return nil
	case projectresource.FieldKind:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKind(v)
		return nil
	case projectresource.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown ProjectResource field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProjectResourceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProjectResourceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectResourceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ProjectResource numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProjectResourceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(projectresource.FieldKind) {
		fields = append(fields, projectresource.FieldKind)
	}
	if m.FieldCleared(projectresource.FieldDescription) {
		fields = append(fields, projectresource.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProjectResourceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProjectResourceMutation) ClearField(name string) error {
	switch name {
	case projectresource.FieldKind:
		m.ClearKind()
		return nil
	case projectresource.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown ProjectResource nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProjectResourceMutation) ResetField(name string) error {
	switch name {
	case projectresource.FieldResourceID:
		m.ResetResourceID()
		return nil
	case projectresource.FieldKind:
		m.ResetKind()
		return nil
	case projectresource.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown ProjectResource field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProjectResourceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProjectResourceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProjectResourceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProjectResourceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProjectResourceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProjectResourceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProjectResourceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ProjectResource unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProjectResourceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ProjectResource edge %s", name)
}

// ProviderResourceMutation represents an operation that mutates the ProviderResource nodes in the graph.
type ProviderResourceMutation struct {
	config
	op            Op
	typ           string
	id            *int
	resource_id   *string
	kind          *providerresource.Kind
	description   *string
	desired_state *providerresource.DesiredState
	current_state *providerresource.CurrentState
	endpoint      *string
	token         *string
	clearedFields map[string]struct{}
	site          *int
	clearedsite   bool
	done          bool
	oldValue      func(context.Context) (*ProviderResource, error)
	predicates    []predicate.ProviderResource
}

var _ ent.Mutation = (*ProviderResourceMutation)(nil)

// providerresourceOption allows management of the mutation configuration using functional options.
type providerresourceOption func(*ProviderResourceMutation)

// newProviderResourceMutation creates new mutation for the ProviderResource entity.
func newProviderResourceMutation(c config, op Op, opts ...providerresourceOption) *ProviderResourceMutation {
	m := &ProviderResourceMutation{
		config:        c,
		op:            op,
		typ:           TypeProviderResource,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProviderResourceID sets the ID field of the mutation.
func withProviderResourceID(id int) providerresourceOption {
	return func(m *ProviderResourceMutation) {
		var (
			err   error
			once  sync.Once
			value *ProviderResource
		)
		m.oldValue = func(ctx context.Context) (*ProviderResource, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProviderResource.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProviderResource sets the old ProviderResource of the mutation.
func withProviderResource(node *ProviderResource) providerresourceOption {
	return func(m *ProviderResourceMutation) {
		m.oldValue = func(context.Context) (*ProviderResource, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProviderResourceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProviderResourceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProviderResourceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProviderResourceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ProviderResource.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetResourceID sets the "resource_id" field.
func (m *ProviderResourceMutation) SetResourceID(s string) {
	m.resource_id = &s
}

// ResourceID returns the value of the "resource_id" field in the mutation.
func (m *ProviderResourceMutation) ResourceID() (r string, exists bool) {
	v := m.resource_id
	if v == nil {
		return
	}
	return *v, true
}

// OldResourceID returns the old "resource_id" field's value of the ProviderResource entity.
// If the ProviderResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderResourceMutation) OldResourceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResourceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResourceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResourceID: %w", err)
	}
	return oldValue.ResourceID, nil
}

// ResetResourceID resets all changes to the "resource_id" field.
func (m *ProviderResourceMutation) ResetResourceID() {
	m.resource_id = nil
}

// SetKind sets the "kind" field.
func (m *ProviderResourceMutation) SetKind(pr providerresource.Kind) {
	m.kind = &pr
}

// Kind returns the value of the "kind" field in the mutation.
func (m *ProviderResourceMutation) Kind() (r providerresource.Kind, exists bool) {
	v := m.kind
	if v == nil {
		return
	}
	return *v, true
}

// OldKind returns the old "kind" field's value of the ProviderResource entity.
// If the ProviderResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderResourceMutation) OldKind(ctx context.Context) (v providerresource.Kind, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKind is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKind requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKind: %w", err)
	}
	return oldValue.Kind, nil
}

// ClearKind clears the value of the "kind" field.
func (m *ProviderResourceMutation) ClearKind() {
	m.kind = nil
	m.clearedFields[providerresource.FieldKind] = struct{}{}
}

// KindCleared returns if the "kind" field was cleared in this mutation.
func (m *ProviderResourceMutation) KindCleared() bool {
	_, ok := m.clearedFields[providerresource.FieldKind]
	return ok
}

// ResetKind resets all changes to the "kind" field.
func (m *ProviderResourceMutation) ResetKind() {
	m.kind = nil
	delete(m.clearedFields, providerresource.FieldKind)
}

// SetDescription sets the "description" field.
func (m *ProviderResourceMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ProviderResourceMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the ProviderResource entity.
// If the ProviderResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderResourceMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ProviderResourceMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[providerresource.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ProviderResourceMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[providerresource.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ProviderResourceMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, providerresource.FieldDescription)
}

// SetDesiredState sets the "desired_state" field.
func (m *ProviderResourceMutation) SetDesiredState(ps providerresource.DesiredState) {
	m.desired_state = &ps
}

// DesiredState returns the value of the "desired_state" field in the mutation.
func (m *ProviderResourceMutation) DesiredState() (r providerresource.DesiredState, exists bool) {
	v := m.desired_state
	if v == nil {
		return
	}
	return *v, true
}

// OldDesiredState returns the old "desired_state" field's value of the ProviderResource entity.
// If the ProviderResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderResourceMutation) OldDesiredState(ctx context.Context) (v providerresource.DesiredState, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesiredState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesiredState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesiredState: %w", err)
	}
	return oldValue.DesiredState, nil
}

// ResetDesiredState resets all changes to the "desired_state" field.
func (m *ProviderResourceMutation) ResetDesiredState() {
	m.desired_state = nil
}

// SetCurrentState sets the "current_state" field.
func (m *ProviderResourceMutation) SetCurrentState(ps providerresource.CurrentState) {
	m.current_state = &ps
}

// CurrentState returns the value of the "current_state" field in the mutation.
func (m *ProviderResourceMutation) CurrentState() (r providerresource.CurrentState, exists bool) {
	v := m.current_state
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrentState returns the old "current_state" field's value of the ProviderResource entity.
// If the ProviderResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderResourceMutation) OldCurrentState(ctx context.Context) (v providerresource.CurrentState, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrentState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrentState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrentState: %w", err)
	}
	return oldValue.CurrentState, nil
}

// ClearCurrentState clears the value of the "current_state" field.
func (m *ProviderResourceMutation) ClearCurrentState() {
	m.current_state = nil
	m.clearedFields[providerresource.FieldCurrentState] = struct{}{}
}

// CurrentStateCleared returns if the "current_state" field was cleared in this mutation.
func (m *ProviderResourceMutation) CurrentStateCleared() bool {
	_, ok := m.clearedFields[providerresource.FieldCurrentState]
	return ok
}

// ResetCurrentState resets all changes to the "current_state" field.
func (m *ProviderResourceMutation) ResetCurrentState() {
	m.current_state = nil
	delete(m.clearedFields, providerresource.FieldCurrentState)
}

// SetEndpoint sets the "endpoint" field.
func (m *ProviderResourceMutation) SetEndpoint(s string) {
	m.endpoint = &s
}

// Endpoint returns the value of the "endpoint" field in the mutation.
func (m *ProviderResourceMutation) Endpoint() (r string, exists bool) {
	v := m.endpoint
	if v == nil {
		return
	}
	return *v, true
}

// OldEndpoint returns the old "endpoint" field's value of the ProviderResource entity.
// If the ProviderResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderResourceMutation) OldEndpoint(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndpoint is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndpoint requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndpoint: %w", err)
	}
	return oldValue.Endpoint, nil
}

// ClearEndpoint clears the value of the "endpoint" field.
func (m *ProviderResourceMutation) ClearEndpoint() {
	m.endpoint = nil
	m.clearedFields[providerresource.FieldEndpoint] = struct{}{}
}

// EndpointCleared returns if the "endpoint" field was cleared in this mutation.
func (m *ProviderResourceMutation) EndpointCleared() bool {
	_, ok := m.clearedFields[providerresource.FieldEndpoint]
	return ok
}

// ResetEndpoint resets all changes to the "endpoint" field.
func (m *ProviderResourceMutation) ResetEndpoint() {
	m.endpoint = nil
	delete(m.clearedFields, providerresource.FieldEndpoint)
}

// SetToken sets the "token" field.
func (m *ProviderResourceMutation) SetToken(s string) {
	m.token = &s
}

// Token returns the value of the "token" field in the mutation.
func (m *ProviderResourceMutation) Token() (r string, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the ProviderResource entity.
// If the ProviderResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderResourceMutation) OldToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// ClearToken clears the value of the "token" field.
func (m *ProviderResourceMutation) ClearToken() {
	m.token = nil
	m.clearedFields[providerresource.FieldToken] = struct{}{}
}

// TokenCleared returns if the "token" field was cleared in this mutation.
func (m *ProviderResourceMutation) TokenCleared() bool {
	_, ok := m.clearedFields[providerresource.FieldToken]
	return ok
}

// ResetToken resets all changes to the "token" field.
func (m *ProviderResourceMutation) ResetToken() {
	m.token = nil
	delete(m.clearedFields, providerresource.FieldToken)
}

// SetSiteID sets the "site" edge to the SiteResource entity by id.
func (m *ProviderResourceMutation) SetSiteID(id int) {
	m.site = &id
}

// ClearSite clears the "site" edge to the SiteResource entity.
func (m *ProviderResourceMutation) ClearSite() {
	m.clearedsite = true
}

// SiteCleared reports if the "site" edge to the SiteResource entity was cleared.
func (m *ProviderResourceMutation) SiteCleared() bool {
	return m.clearedsite
}

// SiteID returns the "site" edge ID in the mutation.
func (m *ProviderResourceMutation) SiteID() (id int, exists bool) {
	if m.site != nil {
		return *m.site, true
	}
	return
}

// SiteIDs returns the "site" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SiteID instead. It exists only for internal usage by the builders.
func (m *ProviderResourceMutation) SiteIDs() (ids []int) {
	if id := m.site; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSite resets all changes to the "site" edge.
func (m *ProviderResourceMutation) ResetSite() {
	m.site = nil
	m.clearedsite = false
}

// Where appends a list predicates to the ProviderResourceMutation builder.
func (m *ProviderResourceMutation) Where(ps ...predicate.ProviderResource) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProviderResourceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProviderResourceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ProviderResource, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProviderResourceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProviderResourceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ProviderResource).
func (m *ProviderResourceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProviderResourceMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.resource_id != nil {
		fields = append(fields, providerresource.FieldResourceID)
	}
	if m.kind != nil {
		fields = append(fields, providerresource.FieldKind)
	}
	if m.description != nil {
		fields = append(fields, providerresource.FieldDescription)
	}
	if m.desired_state != nil {
		fields = append(fields, providerresource.FieldDesiredState)
	}
	if m.current_state != nil {
		fields = append(fields, providerresource.FieldCurrentState)
	}
	if m.endpoint != nil {
		fields = append(fields, providerresource.FieldEndpoint)
	}
	if m.token != nil {
		fields = append(fields, providerresource.FieldToken)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProviderResourceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case providerresource.FieldResourceID:
		return m.ResourceID()
	case providerresource.FieldKind:
		return m.Kind()
	case providerresource.FieldDescription:
		return m.Description()
	case providerresource.FieldDesiredState:
		return m.DesiredState()
	case providerresource.FieldCurrentState:
		return m.CurrentState()
	case providerresource.FieldEndpoint:
		return m.Endpoint()
	case providerresource.FieldToken:
		return m.Token()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProviderResourceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case providerresource.FieldResourceID:
		return m.OldResourceID(ctx)
	case providerresource.FieldKind:
		return m.OldKind(ctx)
	case providerresource.FieldDescription:
		return m.OldDescription(ctx)
	case providerresource.FieldDesiredState:
		return m.OldDesiredState(ctx)
	case providerresource.FieldCurrentState:
		return m.OldCurrentState(ctx)
	case providerresource.FieldEndpoint:
		return m.OldEndpoint(ctx)
	case providerresource.FieldToken:
		return m.OldToken(ctx)
	}
	return nil, fmt.Errorf("unknown ProviderResource field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProviderResourceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case providerresource.FieldResourceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResourceID(v)
		return nil
	case providerresource.FieldKind:
		v, ok := value.(providerresource.Kind)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKind(v)
		return nil
	case providerresource.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case providerresource.FieldDesiredState:
		v, ok := value.(providerresource.DesiredState)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesiredState(v)
		return nil
	case providerresource.FieldCurrentState:
		v, ok := value.(providerresource.CurrentState)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrentState(v)
		return nil
	case providerresource.FieldEndpoint:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndpoint(v)
		return nil
	case providerresource.FieldToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	}
	return fmt.Errorf("unknown ProviderResource field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProviderResourceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProviderResourceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProviderResourceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ProviderResource numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProviderResourceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(providerresource.FieldKind) {
		fields = append(fields, providerresource.FieldKind)
	}
	if m.FieldCleared(providerresource.FieldDescription) {
		fields = append(fields, providerresource.FieldDescription)
	}
	if m.FieldCleared(providerresource.FieldCurrentState) {
		fields = append(fields, providerresource.FieldCurrentState)
	}
	if m.FieldCleared(providerresource.FieldEndpoint) {
		fields = append(fields, providerresource.FieldEndpoint)
	}
	if m.FieldCleared(providerresource.FieldToken) {
		fields = append(fields, providerresource.FieldToken)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProviderResourceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProviderResourceMutation) ClearField(name string) error {
	switch name {
	case providerresource.FieldKind:
		m.ClearKind()
		return nil
	case providerresource.FieldDescription:
		m.ClearDescription()
		return nil
	case providerresource.FieldCurrentState:
		m.ClearCurrentState()
		return nil
	case providerresource.FieldEndpoint:
		m.ClearEndpoint()
		return nil
	case providerresource.FieldToken:
		m.ClearToken()
		return nil
	}
	return fmt.Errorf("unknown ProviderResource nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProviderResourceMutation) ResetField(name string) error {
	switch name {
	case providerresource.FieldResourceID:
		m.ResetResourceID()
		return nil
	case providerresource.FieldKind:
		m.ResetKind()
		return nil
	case providerresource.FieldDescription:
		m.ResetDescription()
		return nil
	case providerresource.FieldDesiredState:
		m.ResetDesiredState()
		return nil
	case providerresource.FieldCurrentState:
		m.ResetCurrentState()
		return nil
	case providerresource.FieldEndpoint:
		m.ResetEndpoint()
		return nil
	case providerresource.FieldToken:
		m.ResetToken()
		return nil
	}
	return fmt.Errorf("unknown ProviderResource field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProviderResourceMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.site != nil {
		edges = append(edges, providerresource.EdgeSite)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProviderResourceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case providerresource.EdgeSite:
		if id := m.site; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProviderResourceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProviderResourceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProviderResourceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsite {
		edges = append(edges, providerresource.EdgeSite)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProviderResourceMutation) EdgeCleared(name string) bool {
	switch name {
	case providerresource.EdgeSite:
		return m.clearedsite
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProviderResourceMutation) ClearEdge(name string) error {
	switch name {
	case providerresource.EdgeSite:
		m.ClearSite()
		return nil
	}
	return fmt.Errorf("unknown ProviderResource unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProviderResourceMutation) ResetEdge(name string) error {
	switch name {
	case providerresource.EdgeSite:
		m.ResetSite()
		return nil
	}
	return fmt.Errorf("unknown ProviderResource edge %s", name)
}

// RegionResourceMutation represents an operation that mutates the RegionResource nodes in the graph.
type RegionResourceMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	resource_id          *string
	description          *string
	region_kind          *string
	metadata             *string
	clearedFields        map[string]struct{}
	parent_region        *int
	clearedparent_region bool
	children             map[int]struct{}
	removedchildren      map[int]struct{}
	clearedchildren      bool
	done                 bool
	oldValue             func(context.Context) (*RegionResource, error)
	predicates           []predicate.RegionResource
}

var _ ent.Mutation = (*RegionResourceMutation)(nil)

// regionresourceOption allows management of the mutation configuration using functional options.
type regionresourceOption func(*RegionResourceMutation)

// newRegionResourceMutation creates new mutation for the RegionResource entity.
func newRegionResourceMutation(c config, op Op, opts ...regionresourceOption) *RegionResourceMutation {
	m := &RegionResourceMutation{
		config:        c,
		op:            op,
		typ:           TypeRegionResource,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRegionResourceID sets the ID field of the mutation.
func withRegionResourceID(id int) regionresourceOption {
	return func(m *RegionResourceMutation) {
		var (
			err   error
			once  sync.Once
			value *RegionResource
		)
		m.oldValue = func(ctx context.Context) (*RegionResource, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RegionResource.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRegionResource sets the old RegionResource of the mutation.
func withRegionResource(node *RegionResource) regionresourceOption {
	return func(m *RegionResourceMutation) {
		m.oldValue = func(context.Context) (*RegionResource, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RegionResourceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RegionResourceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RegionResourceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RegionResourceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RegionResource.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetResourceID sets the "resource_id" field.
func (m *RegionResourceMutation) SetResourceID(s string) {
	m.resource_id = &s
}

// ResourceID returns the value of the "resource_id" field in the mutation.
func (m *RegionResourceMutation) ResourceID() (r string, exists bool) {
	v := m.resource_id
	if v == nil {
		return
	}
	return *v, true
}

// OldResourceID returns the old "resource_id" field's value of the RegionResource entity.
// If the RegionResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RegionResourceMutation) OldResourceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResourceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResourceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResourceID: %w", err)
	}
	return oldValue.ResourceID, nil
}

// ResetResourceID resets all changes to the "resource_id" field.
func (m *RegionResourceMutation) ResetResourceID() {
	m.resource_id = nil
}

// SetDescription sets the "description" field.
func (m *RegionResourceMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *RegionResourceMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the RegionResource entity.
// If the RegionResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RegionResourceMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *RegionResourceMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[regionresource.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *RegionResourceMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[regionresource.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *RegionResourceMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, regionresource.FieldDescription)
}

// SetRegionKind sets the "region_kind" field.
func (m *RegionResourceMutation) SetRegionKind(s string) {
	m.region_kind = &s
}

// RegionKind returns the value of the "region_kind" field in the mutation.
func (m *RegionResourceMutation) RegionKind() (r string, exists bool) {
	v := m.region_kind
	if v == nil {
		return
	}
	return *v, true
}

// OldRegionKind returns the old "region_kind" field's value of the RegionResource entity.
// If the RegionResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RegionResourceMutation) OldRegionKind(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRegionKind is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRegionKind requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegionKind: %w", err)
	}
	return oldValue.RegionKind, nil
}

// ClearRegionKind clears the value of the "region_kind" field.
func (m *RegionResourceMutation) ClearRegionKind() {
	m.region_kind = nil
	m.clearedFields[regionresource.FieldRegionKind] = struct{}{}
}

// RegionKindCleared returns if the "region_kind" field was cleared in this mutation.
func (m *RegionResourceMutation) RegionKindCleared() bool {
	_, ok := m.clearedFields[regionresource.FieldRegionKind]
	return ok
}

// ResetRegionKind resets all changes to the "region_kind" field.
func (m *RegionResourceMutation) ResetRegionKind() {
	m.region_kind = nil
	delete(m.clearedFields, regionresource.FieldRegionKind)
}

// SetMetadata sets the "metadata" field.
func (m *RegionResourceMutation) SetMetadata(s string) {
	m.metadata = &s
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *RegionResourceMutation) Metadata() (r string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the RegionResource entity.
// If the RegionResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RegionResourceMutation) OldMetadata(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *RegionResourceMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[regionresource.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *RegionResourceMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[regionresource.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *RegionResourceMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, regionresource.FieldMetadata)
}

// SetParentRegionID sets the "parent_region" edge to the RegionResource entity by id.
func (m *RegionResourceMutation) SetParentRegionID(id int) {
	m.parent_region = &id
}

// ClearParentRegion clears the "parent_region" edge to the RegionResource entity.
func (m *RegionResourceMutation) ClearParentRegion() {
	m.clearedparent_region = true
}

// ParentRegionCleared reports if the "parent_region" edge to the RegionResource entity was cleared.
func (m *RegionResourceMutation) ParentRegionCleared() bool {
	return m.clearedparent_region
}

// ParentRegionID returns the "parent_region" edge ID in the mutation.
func (m *RegionResourceMutation) ParentRegionID() (id int, exists bool) {
	if m.parent_region != nil {
		return *m.parent_region, true
	}
	return
}

// ParentRegionIDs returns the "parent_region" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentRegionID instead. It exists only for internal usage by the builders.
func (m *RegionResourceMutation) ParentRegionIDs() (ids []int) {
	if id := m.parent_region; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParentRegion resets all changes to the "parent_region" edge.
func (m *RegionResourceMutation) ResetParentRegion() {
	m.parent_region = nil
	m.clearedparent_region = false
}

// AddChildIDs adds the "children" edge to the RegionResource entity by ids.
func (m *RegionResourceMutation) AddChildIDs(ids ...int) {
	if m.children == nil {
		m.children = make(map[int]struct{})
	}
	for i := range ids {
		m.children[ids[i]] = struct{}{}
	}
}

// ClearChildren clears the "children" edge to the RegionResource entity.
func (m *RegionResourceMutation) ClearChildren() {
	m.clearedchildren = true
}

// ChildrenCleared reports if the "children" edge to the RegionResource entity was cleared.
func (m *RegionResourceMutation) ChildrenCleared() bool {
	return m.clearedchildren
}

// RemoveChildIDs removes the "children" edge to the RegionResource entity by IDs.
func (m *RegionResourceMutation) RemoveChildIDs(ids ...int) {
	if m.removedchildren == nil {
		m.removedchildren = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.children, ids[i])
		m.removedchildren[ids[i]] = struct{}{}
	}
}

// RemovedChildren returns the removed IDs of the "children" edge to the RegionResource entity.
func (m *RegionResourceMutation) RemovedChildrenIDs() (ids []int) {
	for id := range m.removedchildren {
		ids = append(ids, id)
	}
	return
}

// ChildrenIDs returns the "children" edge IDs in the mutation.
func (m *RegionResourceMutation) ChildrenIDs() (ids []int) {
	for id := range m.children {
		ids = append(ids, id)
	}
	return
}

// ResetChildren resets all changes to the "children" edge.
func (m *RegionResourceMutation) ResetChildren() {
	m.children = nil
	m.clearedchildren = false
	m.removedchildren = nil
}

// Where appends a list predicates to the RegionResourceMutation builder.
func (m *RegionResourceMutation) Where(ps ...predicate.RegionResource) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RegionResourceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RegionResourceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RegionResource, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RegionResourceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RegionResourceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RegionResource).
func (m *RegionResourceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RegionResourceMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.resource_id != nil {
		fields = append(fields, regionresource.FieldResourceID)
	}
	if m.description != nil {
		fields = append(fields, regionresource.FieldDescription)
	}
	if m.region_kind != nil {
		fields = append(fields, regionresource.FieldRegionKind)
	}
	if m.metadata != nil {
		fields = append(fields, regionresource.FieldMetadata)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RegionResourceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case regionresource.FieldResourceID:
		return m.ResourceID()
	case regionresource.FieldDescription:
		return m.Description()
	case regionresource.FieldRegionKind:
		return m.RegionKind()
	case regionresource.FieldMetadata:
		return m.Metadata()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RegionResourceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case regionresource.FieldResourceID:
		return m.OldResourceID(ctx)
	case regionresource.FieldDescription:
		return m.OldDescription(ctx)
	case regionresource.FieldRegionKind:
		return m.OldRegionKind(ctx)
	case regionresource.FieldMetadata:
		return m.OldMetadata(ctx)
	}
	return nil, fmt.Errorf("unknown RegionResource field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RegionResourceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case regionresource.FieldResourceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResourceID(v)
		return nil
	case regionresource.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case regionresource.FieldRegionKind:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegionKind(v)
		return nil
	case regionresource.FieldMetadata:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	}
	return fmt.Errorf("unknown RegionResource field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RegionResourceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RegionResourceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RegionResourceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown RegionResource numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RegionResourceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(regionresource.FieldDescription) {
		fields = append(fields, regionresource.FieldDescription)
	}
	if m.FieldCleared(regionresource.FieldRegionKind) {
		fields = append(fields, regionresource.FieldRegionKind)
	}
	if m.FieldCleared(regionresource.FieldMetadata) {
		fields = append(fields, regionresource.FieldMetadata)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RegionResourceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RegionResourceMutation) ClearField(name string) error {
	switch name {
	case regionresource.FieldDescription:
		m.ClearDescription()
		return nil
	case regionresource.FieldRegionKind:
		m.ClearRegionKind()
		return nil
	case regionresource.FieldMetadata:
		m.ClearMetadata()
		return nil
	}
	return fmt.Errorf("unknown RegionResource nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RegionResourceMutation) ResetField(name string) error {
	switch name {
	case regionresource.FieldResourceID:
		m.ResetResourceID()
		return nil
	case regionresource.FieldDescription:
		m.ResetDescription()
		return nil
	case regionresource.FieldRegionKind:
		m.ResetRegionKind()
		return nil
	case regionresource.FieldMetadata:
		m.ResetMetadata()
		return nil
	}
	return fmt.Errorf("unknown RegionResource field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RegionResourceMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.parent_region != nil {
		edges = append(edges, regionresource.EdgeParentRegion)
	}
	if m.children != nil {
		edges = append(edges, regionresource.EdgeChildren)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RegionResourceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case regionresource.EdgeParentRegion:
		if id := m.parent_region; id != nil {
			return []ent.Value{*id}
		}
	case regionresource.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.children))
		for id := range m.children {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RegionResourceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedchildren != nil {
		edges = append(edges, regionresource.EdgeChildren)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RegionResourceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case regionresource.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.removedchildren))
		for id := range m.removedchildren {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RegionResourceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedparent_region {
		edges = append(edges, regionresource.EdgeParentRegion)
	}
	if m.clearedchildren {
		edges = append(edges, regionresource.EdgeChildren)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RegionResourceMutation) EdgeCleared(name string) bool {
	switch name {
	case regionresource.EdgeParentRegion:
		return m.clearedparent_region
	case regionresource.EdgeChildren:
		return m.clearedchildren
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RegionResourceMutation) ClearEdge(name string) error {
	switch name {
	case regionresource.EdgeParentRegion:
		m.ClearParentRegion()
		return nil
	}
	return fmt.Errorf("unknown RegionResource unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RegionResourceMutation) ResetEdge(name string) error {
	switch name {
	case regionresource.EdgeParentRegion:
		m.ResetParentRegion()
		return nil
	case regionresource.EdgeChildren:
		m.ResetChildren()
		return nil
	}
	return fmt.Errorf("unknown RegionResource edge %s", name)
}

// RepeatedScheduleResourceMutation represents an operation that mutates the RepeatedScheduleResource nodes in the graph.
type RepeatedScheduleResourceMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	resource_id            *string
	schedule_status        *repeatedscheduleresource.ScheduleStatus
	description            *string
	duration_seconds       *uint32
	addduration_seconds    *int32
	cron_minutes           *string
	cron_hours             *string
	cron_day_month         *string
	cron_month             *string
	cron_day_week          *string
	clearedFields          map[string]struct{}
	target_site            *int
	clearedtarget_site     bool
	target_host            *int
	clearedtarget_host     bool
	target_workload        *int
	clearedtarget_workload bool
	done                   bool
	oldValue               func(context.Context) (*RepeatedScheduleResource, error)
	predicates             []predicate.RepeatedScheduleResource
}

var _ ent.Mutation = (*RepeatedScheduleResourceMutation)(nil)

// repeatedscheduleresourceOption allows management of the mutation configuration using functional options.
type repeatedscheduleresourceOption func(*RepeatedScheduleResourceMutation)

// newRepeatedScheduleResourceMutation creates new mutation for the RepeatedScheduleResource entity.
func newRepeatedScheduleResourceMutation(c config, op Op, opts ...repeatedscheduleresourceOption) *RepeatedScheduleResourceMutation {
	m := &RepeatedScheduleResourceMutation{
		config:        c,
		op:            op,
		typ:           TypeRepeatedScheduleResource,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRepeatedScheduleResourceID sets the ID field of the mutation.
func withRepeatedScheduleResourceID(id int) repeatedscheduleresourceOption {
	return func(m *RepeatedScheduleResourceMutation) {
		var (
			err   error
			once  sync.Once
			value *RepeatedScheduleResource
		)
		m.oldValue = func(ctx context.Context) (*RepeatedScheduleResource, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RepeatedScheduleResource.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRepeatedScheduleResource sets the old RepeatedScheduleResource of the mutation.
func withRepeatedScheduleResource(node *RepeatedScheduleResource) repeatedscheduleresourceOption {
	return func(m *RepeatedScheduleResourceMutation) {
		m.oldValue = func(context.Context) (*RepeatedScheduleResource, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RepeatedScheduleResourceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RepeatedScheduleResourceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RepeatedScheduleResourceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RepeatedScheduleResourceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RepeatedScheduleResource.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetResourceID sets the "resource_id" field.
func (m *RepeatedScheduleResourceMutation) SetResourceID(s string) {
	m.resource_id = &s
}

// ResourceID returns the value of the "resource_id" field in the mutation.
func (m *RepeatedScheduleResourceMutation) ResourceID() (r string, exists bool) {
	v := m.resource_id
	if v == nil {
		return
	}
	return *v, true
}

// OldResourceID returns the old "resource_id" field's value of the RepeatedScheduleResource entity.
// If the RepeatedScheduleResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepeatedScheduleResourceMutation) OldResourceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResourceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResourceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResourceID: %w", err)
	}
	return oldValue.ResourceID, nil
}

// ResetResourceID resets all changes to the "resource_id" field.
func (m *RepeatedScheduleResourceMutation) ResetResourceID() {
	m.resource_id = nil
}

// SetScheduleStatus sets the "schedule_status" field.
func (m *RepeatedScheduleResourceMutation) SetScheduleStatus(rs repeatedscheduleresource.ScheduleStatus) {
	m.schedule_status = &rs
}

// ScheduleStatus returns the value of the "schedule_status" field in the mutation.
func (m *RepeatedScheduleResourceMutation) ScheduleStatus() (r repeatedscheduleresource.ScheduleStatus, exists bool) {
	v := m.schedule_status
	if v == nil {
		return
	}
	return *v, true
}

// OldScheduleStatus returns the old "schedule_status" field's value of the RepeatedScheduleResource entity.
// If the RepeatedScheduleResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepeatedScheduleResourceMutation) OldScheduleStatus(ctx context.Context) (v repeatedscheduleresource.ScheduleStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScheduleStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScheduleStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScheduleStatus: %w", err)
	}
	return oldValue.ScheduleStatus, nil
}

// ClearScheduleStatus clears the value of the "schedule_status" field.
func (m *RepeatedScheduleResourceMutation) ClearScheduleStatus() {
	m.schedule_status = nil
	m.clearedFields[repeatedscheduleresource.FieldScheduleStatus] = struct{}{}
}

// ScheduleStatusCleared returns if the "schedule_status" field was cleared in this mutation.
func (m *RepeatedScheduleResourceMutation) ScheduleStatusCleared() bool {
	_, ok := m.clearedFields[repeatedscheduleresource.FieldScheduleStatus]
	return ok
}

// ResetScheduleStatus resets all changes to the "schedule_status" field.
func (m *RepeatedScheduleResourceMutation) ResetScheduleStatus() {
	m.schedule_status = nil
	delete(m.clearedFields, repeatedscheduleresource.FieldScheduleStatus)
}

// SetDescription sets the "description" field.
func (m *RepeatedScheduleResourceMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *RepeatedScheduleResourceMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the RepeatedScheduleResource entity.
// If the RepeatedScheduleResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepeatedScheduleResourceMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *RepeatedScheduleResourceMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[repeatedscheduleresource.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *RepeatedScheduleResourceMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[repeatedscheduleresource.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *RepeatedScheduleResourceMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, repeatedscheduleresource.FieldDescription)
}

// SetDurationSeconds sets the "duration_seconds" field.
func (m *RepeatedScheduleResourceMutation) SetDurationSeconds(u uint32) {
	m.duration_seconds = &u
	m.addduration_seconds = nil
}

// DurationSeconds returns the value of the "duration_seconds" field in the mutation.
func (m *RepeatedScheduleResourceMutation) DurationSeconds() (r uint32, exists bool) {
	v := m.duration_seconds
	if v == nil {
		return
	}
	return *v, true
}

// OldDurationSeconds returns the old "duration_seconds" field's value of the RepeatedScheduleResource entity.
// If the RepeatedScheduleResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepeatedScheduleResourceMutation) OldDurationSeconds(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDurationSeconds is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDurationSeconds requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDurationSeconds: %w", err)
	}
	return oldValue.DurationSeconds, nil
}

// AddDurationSeconds adds u to the "duration_seconds" field.
func (m *RepeatedScheduleResourceMutation) AddDurationSeconds(u int32) {
	if m.addduration_seconds != nil {
		*m.addduration_seconds += u
	} else {
		m.addduration_seconds = &u
	}
}

// AddedDurationSeconds returns the value that was added to the "duration_seconds" field in this mutation.
func (m *RepeatedScheduleResourceMutation) AddedDurationSeconds() (r int32, exists bool) {
	v := m.addduration_seconds
	if v == nil {
		return
	}
	return *v, true
}

// ClearDurationSeconds clears the value of the "duration_seconds" field.
func (m *RepeatedScheduleResourceMutation) ClearDurationSeconds() {
	m.duration_seconds = nil
	m.addduration_seconds = nil
	m.clearedFields[repeatedscheduleresource.FieldDurationSeconds] = struct{}{}
}

// DurationSecondsCleared returns if the "duration_seconds" field was cleared in this mutation.
func (m *RepeatedScheduleResourceMutation) DurationSecondsCleared() bool {
	_, ok := m.clearedFields[repeatedscheduleresource.FieldDurationSeconds]
	return ok
}

// ResetDurationSeconds resets all changes to the "duration_seconds" field.
func (m *RepeatedScheduleResourceMutation) ResetDurationSeconds() {
	m.duration_seconds = nil
	m.addduration_seconds = nil
	delete(m.clearedFields, repeatedscheduleresource.FieldDurationSeconds)
}

// SetCronMinutes sets the "cron_minutes" field.
func (m *RepeatedScheduleResourceMutation) SetCronMinutes(s string) {
	m.cron_minutes = &s
}

// CronMinutes returns the value of the "cron_minutes" field in the mutation.
func (m *RepeatedScheduleResourceMutation) CronMinutes() (r string, exists bool) {
	v := m.cron_minutes
	if v == nil {
		return
	}
	return *v, true
}

// OldCronMinutes returns the old "cron_minutes" field's value of the RepeatedScheduleResource entity.
// If the RepeatedScheduleResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepeatedScheduleResourceMutation) OldCronMinutes(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCronMinutes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCronMinutes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCronMinutes: %w", err)
	}
	return oldValue.CronMinutes, nil
}

// ResetCronMinutes resets all changes to the "cron_minutes" field.
func (m *RepeatedScheduleResourceMutation) ResetCronMinutes() {
	m.cron_minutes = nil
}

// SetCronHours sets the "cron_hours" field.
func (m *RepeatedScheduleResourceMutation) SetCronHours(s string) {
	m.cron_hours = &s
}

// CronHours returns the value of the "cron_hours" field in the mutation.
func (m *RepeatedScheduleResourceMutation) CronHours() (r string, exists bool) {
	v := m.cron_hours
	if v == nil {
		return
	}
	return *v, true
}

// OldCronHours returns the old "cron_hours" field's value of the RepeatedScheduleResource entity.
// If the RepeatedScheduleResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepeatedScheduleResourceMutation) OldCronHours(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCronHours is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCronHours requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCronHours: %w", err)
	}
	return oldValue.CronHours, nil
}

// ResetCronHours resets all changes to the "cron_hours" field.
func (m *RepeatedScheduleResourceMutation) ResetCronHours() {
	m.cron_hours = nil
}

// SetCronDayMonth sets the "cron_day_month" field.
func (m *RepeatedScheduleResourceMutation) SetCronDayMonth(s string) {
	m.cron_day_month = &s
}

// CronDayMonth returns the value of the "cron_day_month" field in the mutation.
func (m *RepeatedScheduleResourceMutation) CronDayMonth() (r string, exists bool) {
	v := m.cron_day_month
	if v == nil {
		return
	}
	return *v, true
}

// OldCronDayMonth returns the old "cron_day_month" field's value of the RepeatedScheduleResource entity.
// If the RepeatedScheduleResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepeatedScheduleResourceMutation) OldCronDayMonth(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCronDayMonth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCronDayMonth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCronDayMonth: %w", err)
	}
	return oldValue.CronDayMonth, nil
}

// ResetCronDayMonth resets all changes to the "cron_day_month" field.
func (m *RepeatedScheduleResourceMutation) ResetCronDayMonth() {
	m.cron_day_month = nil
}

// SetCronMonth sets the "cron_month" field.
func (m *RepeatedScheduleResourceMutation) SetCronMonth(s string) {
	m.cron_month = &s
}

// CronMonth returns the value of the "cron_month" field in the mutation.
func (m *RepeatedScheduleResourceMutation) CronMonth() (r string, exists bool) {
	v := m.cron_month
	if v == nil {
		return
	}
	return *v, true
}

// OldCronMonth returns the old "cron_month" field's value of the RepeatedScheduleResource entity.
// If the RepeatedScheduleResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepeatedScheduleResourceMutation) OldCronMonth(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCronMonth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCronMonth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCronMonth: %w", err)
	}
	return oldValue.CronMonth, nil
}

// ResetCronMonth resets all changes to the "cron_month" field.
func (m *RepeatedScheduleResourceMutation) ResetCronMonth() {
	m.cron_month = nil
}

// SetCronDayWeek sets the "cron_day_week" field.
func (m *RepeatedScheduleResourceMutation) SetCronDayWeek(s string) {
	m.cron_day_week = &s
}

// CronDayWeek returns the value of the "cron_day_week" field in the mutation.
func (m *RepeatedScheduleResourceMutation) CronDayWeek() (r string, exists bool) {
	v := m.cron_day_week
	if v == nil {
		return
	}
	return *v, true
}

// OldCronDayWeek returns the old "cron_day_week" field's value of the RepeatedScheduleResource entity.
// If the RepeatedScheduleResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepeatedScheduleResourceMutation) OldCronDayWeek(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCronDayWeek is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCronDayWeek requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCronDayWeek: %w", err)
	}
	return oldValue.CronDayWeek, nil
}

// ResetCronDayWeek resets all changes to the "cron_day_week" field.
func (m *RepeatedScheduleResourceMutation) ResetCronDayWeek() {
	m.cron_day_week = nil
}

// SetTargetSiteID sets the "target_site" edge to the SiteResource entity by id.
func (m *RepeatedScheduleResourceMutation) SetTargetSiteID(id int) {
	m.target_site = &id
}

// ClearTargetSite clears the "target_site" edge to the SiteResource entity.
func (m *RepeatedScheduleResourceMutation) ClearTargetSite() {
	m.clearedtarget_site = true
}

// TargetSiteCleared reports if the "target_site" edge to the SiteResource entity was cleared.
func (m *RepeatedScheduleResourceMutation) TargetSiteCleared() bool {
	return m.clearedtarget_site
}

// TargetSiteID returns the "target_site" edge ID in the mutation.
func (m *RepeatedScheduleResourceMutation) TargetSiteID() (id int, exists bool) {
	if m.target_site != nil {
		return *m.target_site, true
	}
	return
}

// TargetSiteIDs returns the "target_site" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TargetSiteID instead. It exists only for internal usage by the builders.
func (m *RepeatedScheduleResourceMutation) TargetSiteIDs() (ids []int) {
	if id := m.target_site; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTargetSite resets all changes to the "target_site" edge.
func (m *RepeatedScheduleResourceMutation) ResetTargetSite() {
	m.target_site = nil
	m.clearedtarget_site = false
}

// SetTargetHostID sets the "target_host" edge to the HostResource entity by id.
func (m *RepeatedScheduleResourceMutation) SetTargetHostID(id int) {
	m.target_host = &id
}

// ClearTargetHost clears the "target_host" edge to the HostResource entity.
func (m *RepeatedScheduleResourceMutation) ClearTargetHost() {
	m.clearedtarget_host = true
}

// TargetHostCleared reports if the "target_host" edge to the HostResource entity was cleared.
func (m *RepeatedScheduleResourceMutation) TargetHostCleared() bool {
	return m.clearedtarget_host
}

// TargetHostID returns the "target_host" edge ID in the mutation.
func (m *RepeatedScheduleResourceMutation) TargetHostID() (id int, exists bool) {
	if m.target_host != nil {
		return *m.target_host, true
	}
	return
}

// TargetHostIDs returns the "target_host" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TargetHostID instead. It exists only for internal usage by the builders.
func (m *RepeatedScheduleResourceMutation) TargetHostIDs() (ids []int) {
	if id := m.target_host; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTargetHost resets all changes to the "target_host" edge.
func (m *RepeatedScheduleResourceMutation) ResetTargetHost() {
	m.target_host = nil
	m.clearedtarget_host = false
}

// SetTargetWorkloadID sets the "target_workload" edge to the WorkloadResource entity by id.
func (m *RepeatedScheduleResourceMutation) SetTargetWorkloadID(id int) {
	m.target_workload = &id
}

// ClearTargetWorkload clears the "target_workload" edge to the WorkloadResource entity.
func (m *RepeatedScheduleResourceMutation) ClearTargetWorkload() {
	m.clearedtarget_workload = true
}

// TargetWorkloadCleared reports if the "target_workload" edge to the WorkloadResource entity was cleared.
func (m *RepeatedScheduleResourceMutation) TargetWorkloadCleared() bool {
	return m.clearedtarget_workload
}

// TargetWorkloadID returns the "target_workload" edge ID in the mutation.
func (m *RepeatedScheduleResourceMutation) TargetWorkloadID() (id int, exists bool) {
	if m.target_workload != nil {
		return *m.target_workload, true
	}
	return
}

// TargetWorkloadIDs returns the "target_workload" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TargetWorkloadID instead. It exists only for internal usage by the builders.
func (m *RepeatedScheduleResourceMutation) TargetWorkloadIDs() (ids []int) {
	if id := m.target_workload; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTargetWorkload resets all changes to the "target_workload" edge.
func (m *RepeatedScheduleResourceMutation) ResetTargetWorkload() {
	m.target_workload = nil
	m.clearedtarget_workload = false
}

// Where appends a list predicates to the RepeatedScheduleResourceMutation builder.
func (m *RepeatedScheduleResourceMutation) Where(ps ...predicate.RepeatedScheduleResource) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RepeatedScheduleResourceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RepeatedScheduleResourceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RepeatedScheduleResource, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RepeatedScheduleResourceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RepeatedScheduleResourceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RepeatedScheduleResource).
func (m *RepeatedScheduleResourceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RepeatedScheduleResourceMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.resource_id != nil {
		fields = append(fields, repeatedscheduleresource.FieldResourceID)
	}
	if m.schedule_status != nil {
		fields = append(fields, repeatedscheduleresource.FieldScheduleStatus)
	}
	if m.description != nil {
		fields = append(fields, repeatedscheduleresource.FieldDescription)
	}
	if m.duration_seconds != nil {
		fields = append(fields, repeatedscheduleresource.FieldDurationSeconds)
	}
	if m.cron_minutes != nil {
		fields = append(fields, repeatedscheduleresource.FieldCronMinutes)
	}
	if m.cron_hours != nil {
		fields = append(fields, repeatedscheduleresource.FieldCronHours)
	}
	if m.cron_day_month != nil {
		fields = append(fields, repeatedscheduleresource.FieldCronDayMonth)
	}
	if m.cron_month != nil {
		fields = append(fields, repeatedscheduleresource.FieldCronMonth)
	}
	if m.cron_day_week != nil {
		fields = append(fields, repeatedscheduleresource.FieldCronDayWeek)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RepeatedScheduleResourceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case repeatedscheduleresource.FieldResourceID:
		return m.ResourceID()
	case repeatedscheduleresource.FieldScheduleStatus:
		return m.ScheduleStatus()
	case repeatedscheduleresource.FieldDescription:
		return m.Description()
	case repeatedscheduleresource.FieldDurationSeconds:
		return m.DurationSeconds()
	case repeatedscheduleresource.FieldCronMinutes:
		return m.CronMinutes()
	case repeatedscheduleresource.FieldCronHours:
		return m.CronHours()
	case repeatedscheduleresource.FieldCronDayMonth:
		return m.CronDayMonth()
	case repeatedscheduleresource.FieldCronMonth:
		return m.CronMonth()
	case repeatedscheduleresource.FieldCronDayWeek:
		return m.CronDayWeek()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RepeatedScheduleResourceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case repeatedscheduleresource.FieldResourceID:
		return m.OldResourceID(ctx)
	case repeatedscheduleresource.FieldScheduleStatus:
		return m.OldScheduleStatus(ctx)
	case repeatedscheduleresource.FieldDescription:
		return m.OldDescription(ctx)
	case repeatedscheduleresource.FieldDurationSeconds:
		return m.OldDurationSeconds(ctx)
	case repeatedscheduleresource.FieldCronMinutes:
		return m.OldCronMinutes(ctx)
	case repeatedscheduleresource.FieldCronHours:
		return m.OldCronHours(ctx)
	case repeatedscheduleresource.FieldCronDayMonth:
		return m.OldCronDayMonth(ctx)
	case repeatedscheduleresource.FieldCronMonth:
		return m.OldCronMonth(ctx)
	case repeatedscheduleresource.FieldCronDayWeek:
		return m.OldCronDayWeek(ctx)
	}
	return nil, fmt.Errorf("unknown RepeatedScheduleResource field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RepeatedScheduleResourceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case repeatedscheduleresource.FieldResourceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResourceID(v)
		return nil
	case repeatedscheduleresource.FieldScheduleStatus:
		v, ok := value.(repeatedscheduleresource.ScheduleStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScheduleStatus(v)
		return nil
	case repeatedscheduleresource.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case repeatedscheduleresource.FieldDurationSeconds:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDurationSeconds(v)
		return nil
	case repeatedscheduleresource.FieldCronMinutes:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCronMinutes(v)
		return nil
	case repeatedscheduleresource.FieldCronHours:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCronHours(v)
		return nil
	case repeatedscheduleresource.FieldCronDayMonth:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCronDayMonth(v)
		return nil
	case repeatedscheduleresource.FieldCronMonth:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCronMonth(v)
		return nil
	case repeatedscheduleresource.FieldCronDayWeek:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCronDayWeek(v)
		return nil
	}
	return fmt.Errorf("unknown RepeatedScheduleResource field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RepeatedScheduleResourceMutation) AddedFields() []string {
	var fields []string
	if m.addduration_seconds != nil {
		fields = append(fields, repeatedscheduleresource.FieldDurationSeconds)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RepeatedScheduleResourceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case repeatedscheduleresource.FieldDurationSeconds:
		return m.AddedDurationSeconds()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RepeatedScheduleResourceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case repeatedscheduleresource.FieldDurationSeconds:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDurationSeconds(v)
		return nil
	}
	return fmt.Errorf("unknown RepeatedScheduleResource numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RepeatedScheduleResourceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(repeatedscheduleresource.FieldScheduleStatus) {
		fields = append(fields, repeatedscheduleresource.FieldScheduleStatus)
	}
	if m.FieldCleared(repeatedscheduleresource.FieldDescription) {
		fields = append(fields, repeatedscheduleresource.FieldDescription)
	}
	if m.FieldCleared(repeatedscheduleresource.FieldDurationSeconds) {
		fields = append(fields, repeatedscheduleresource.FieldDurationSeconds)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RepeatedScheduleResourceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RepeatedScheduleResourceMutation) ClearField(name string) error {
	switch name {
	case repeatedscheduleresource.FieldScheduleStatus:
		m.ClearScheduleStatus()
		return nil
	case repeatedscheduleresource.FieldDescription:
		m.ClearDescription()
		return nil
	case repeatedscheduleresource.FieldDurationSeconds:
		m.ClearDurationSeconds()
		return nil
	}
	return fmt.Errorf("unknown RepeatedScheduleResource nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RepeatedScheduleResourceMutation) ResetField(name string) error {
	switch name {
	case repeatedscheduleresource.FieldResourceID:
		m.ResetResourceID()
		return nil
	case repeatedscheduleresource.FieldScheduleStatus:
		m.ResetScheduleStatus()
		return nil
	case repeatedscheduleresource.FieldDescription:
		m.ResetDescription()
		return nil
	case repeatedscheduleresource.FieldDurationSeconds:
		m.ResetDurationSeconds()
		return nil
	case repeatedscheduleresource.FieldCronMinutes:
		m.ResetCronMinutes()
		return nil
	case repeatedscheduleresource.FieldCronHours:
		m.ResetCronHours()
		return nil
	case repeatedscheduleresource.FieldCronDayMonth:
		m.ResetCronDayMonth()
		return nil
	case repeatedscheduleresource.FieldCronMonth:
		m.ResetCronMonth()
		return nil
	case repeatedscheduleresource.FieldCronDayWeek:
		m.ResetCronDayWeek()
		return nil
	}
	return fmt.Errorf("unknown RepeatedScheduleResource field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RepeatedScheduleResourceMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.target_site != nil {
		edges = append(edges, repeatedscheduleresource.EdgeTargetSite)
	}
	if m.target_host != nil {
		edges = append(edges, repeatedscheduleresource.EdgeTargetHost)
	}
	if m.target_workload != nil {
		edges = append(edges, repeatedscheduleresource.EdgeTargetWorkload)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RepeatedScheduleResourceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case repeatedscheduleresource.EdgeTargetSite:
		if id := m.target_site; id != nil {
			return []ent.Value{*id}
		}
	case repeatedscheduleresource.EdgeTargetHost:
		if id := m.target_host; id != nil {
			return []ent.Value{*id}
		}
	case repeatedscheduleresource.EdgeTargetWorkload:
		if id := m.target_workload; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RepeatedScheduleResourceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RepeatedScheduleResourceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RepeatedScheduleResourceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedtarget_site {
		edges = append(edges, repeatedscheduleresource.EdgeTargetSite)
	}
	if m.clearedtarget_host {
		edges = append(edges, repeatedscheduleresource.EdgeTargetHost)
	}
	if m.clearedtarget_workload {
		edges = append(edges, repeatedscheduleresource.EdgeTargetWorkload)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RepeatedScheduleResourceMutation) EdgeCleared(name string) bool {
	switch name {
	case repeatedscheduleresource.EdgeTargetSite:
		return m.clearedtarget_site
	case repeatedscheduleresource.EdgeTargetHost:
		return m.clearedtarget_host
	case repeatedscheduleresource.EdgeTargetWorkload:
		return m.clearedtarget_workload
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RepeatedScheduleResourceMutation) ClearEdge(name string) error {
	switch name {
	case repeatedscheduleresource.EdgeTargetSite:
		m.ClearTargetSite()
		return nil
	case repeatedscheduleresource.EdgeTargetHost:
		m.ClearTargetHost()
		return nil
	case repeatedscheduleresource.EdgeTargetWorkload:
		m.ClearTargetWorkload()
		return nil
	}
	return fmt.Errorf("unknown RepeatedScheduleResource unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RepeatedScheduleResourceMutation) ResetEdge(name string) error {
	switch name {
	case repeatedscheduleresource.EdgeTargetSite:
		m.ResetTargetSite()
		return nil
	case repeatedscheduleresource.EdgeTargetHost:
		m.ResetTargetHost()
		return nil
	case repeatedscheduleresource.EdgeTargetWorkload:
		m.ResetTargetWorkload()
		return nil
	}
	return fmt.Errorf("unknown RepeatedScheduleResource edge %s", name)
}

// SingleScheduleResourceMutation represents an operation that mutates the SingleScheduleResource nodes in the graph.
type SingleScheduleResourceMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	resource_id            *string
	schedule_status        *singlescheduleresource.ScheduleStatus
	description            *string
	start_seconds          *uint64
	addstart_seconds       *int64
	end_seconds            *uint64
	addend_seconds         *int64
	clearedFields          map[string]struct{}
	target_site            *int
	clearedtarget_site     bool
	target_host            *int
	clearedtarget_host     bool
	target_workload        *int
	clearedtarget_workload bool
	done                   bool
	oldValue               func(context.Context) (*SingleScheduleResource, error)
	predicates             []predicate.SingleScheduleResource
}

var _ ent.Mutation = (*SingleScheduleResourceMutation)(nil)

// singlescheduleresourceOption allows management of the mutation configuration using functional options.
type singlescheduleresourceOption func(*SingleScheduleResourceMutation)

// newSingleScheduleResourceMutation creates new mutation for the SingleScheduleResource entity.
func newSingleScheduleResourceMutation(c config, op Op, opts ...singlescheduleresourceOption) *SingleScheduleResourceMutation {
	m := &SingleScheduleResourceMutation{
		config:        c,
		op:            op,
		typ:           TypeSingleScheduleResource,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSingleScheduleResourceID sets the ID field of the mutation.
func withSingleScheduleResourceID(id int) singlescheduleresourceOption {
	return func(m *SingleScheduleResourceMutation) {
		var (
			err   error
			once  sync.Once
			value *SingleScheduleResource
		)
		m.oldValue = func(ctx context.Context) (*SingleScheduleResource, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SingleScheduleResource.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSingleScheduleResource sets the old SingleScheduleResource of the mutation.
func withSingleScheduleResource(node *SingleScheduleResource) singlescheduleresourceOption {
	return func(m *SingleScheduleResourceMutation) {
		m.oldValue = func(context.Context) (*SingleScheduleResource, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SingleScheduleResourceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SingleScheduleResourceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SingleScheduleResourceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SingleScheduleResourceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SingleScheduleResource.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetResourceID sets the "resource_id" field.
func (m *SingleScheduleResourceMutation) SetResourceID(s string) {
	m.resource_id = &s
}

// ResourceID returns the value of the "resource_id" field in the mutation.
func (m *SingleScheduleResourceMutation) ResourceID() (r string, exists bool) {
	v := m.resource_id
	if v == nil {
		return
	}
	return *v, true
}

// OldResourceID returns the old "resource_id" field's value of the SingleScheduleResource entity.
// If the SingleScheduleResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SingleScheduleResourceMutation) OldResourceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResourceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResourceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResourceID: %w", err)
	}
	return oldValue.ResourceID, nil
}

// ResetResourceID resets all changes to the "resource_id" field.
func (m *SingleScheduleResourceMutation) ResetResourceID() {
	m.resource_id = nil
}

// SetScheduleStatus sets the "schedule_status" field.
func (m *SingleScheduleResourceMutation) SetScheduleStatus(ss singlescheduleresource.ScheduleStatus) {
	m.schedule_status = &ss
}

// ScheduleStatus returns the value of the "schedule_status" field in the mutation.
func (m *SingleScheduleResourceMutation) ScheduleStatus() (r singlescheduleresource.ScheduleStatus, exists bool) {
	v := m.schedule_status
	if v == nil {
		return
	}
	return *v, true
}

// OldScheduleStatus returns the old "schedule_status" field's value of the SingleScheduleResource entity.
// If the SingleScheduleResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SingleScheduleResourceMutation) OldScheduleStatus(ctx context.Context) (v singlescheduleresource.ScheduleStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScheduleStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScheduleStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScheduleStatus: %w", err)
	}
	return oldValue.ScheduleStatus, nil
}

// ClearScheduleStatus clears the value of the "schedule_status" field.
func (m *SingleScheduleResourceMutation) ClearScheduleStatus() {
	m.schedule_status = nil
	m.clearedFields[singlescheduleresource.FieldScheduleStatus] = struct{}{}
}

// ScheduleStatusCleared returns if the "schedule_status" field was cleared in this mutation.
func (m *SingleScheduleResourceMutation) ScheduleStatusCleared() bool {
	_, ok := m.clearedFields[singlescheduleresource.FieldScheduleStatus]
	return ok
}

// ResetScheduleStatus resets all changes to the "schedule_status" field.
func (m *SingleScheduleResourceMutation) ResetScheduleStatus() {
	m.schedule_status = nil
	delete(m.clearedFields, singlescheduleresource.FieldScheduleStatus)
}

// SetDescription sets the "description" field.
func (m *SingleScheduleResourceMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *SingleScheduleResourceMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the SingleScheduleResource entity.
// If the SingleScheduleResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SingleScheduleResourceMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *SingleScheduleResourceMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[singlescheduleresource.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *SingleScheduleResourceMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[singlescheduleresource.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *SingleScheduleResourceMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, singlescheduleresource.FieldDescription)
}

// SetStartSeconds sets the "start_seconds" field.
func (m *SingleScheduleResourceMutation) SetStartSeconds(u uint64) {
	m.start_seconds = &u
	m.addstart_seconds = nil
}

// StartSeconds returns the value of the "start_seconds" field in the mutation.
func (m *SingleScheduleResourceMutation) StartSeconds() (r uint64, exists bool) {
	v := m.start_seconds
	if v == nil {
		return
	}
	return *v, true
}

// OldStartSeconds returns the old "start_seconds" field's value of the SingleScheduleResource entity.
// If the SingleScheduleResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SingleScheduleResourceMutation) OldStartSeconds(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartSeconds is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartSeconds requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartSeconds: %w", err)
	}
	return oldValue.StartSeconds, nil
}

// AddStartSeconds adds u to the "start_seconds" field.
func (m *SingleScheduleResourceMutation) AddStartSeconds(u int64) {
	if m.addstart_seconds != nil {
		*m.addstart_seconds += u
	} else {
		m.addstart_seconds = &u
	}
}

// AddedStartSeconds returns the value that was added to the "start_seconds" field in this mutation.
func (m *SingleScheduleResourceMutation) AddedStartSeconds() (r int64, exists bool) {
	v := m.addstart_seconds
	if v == nil {
		return
	}
	return *v, true
}

// ResetStartSeconds resets all changes to the "start_seconds" field.
func (m *SingleScheduleResourceMutation) ResetStartSeconds() {
	m.start_seconds = nil
	m.addstart_seconds = nil
}

// SetEndSeconds sets the "end_seconds" field.
func (m *SingleScheduleResourceMutation) SetEndSeconds(u uint64) {
	m.end_seconds = &u
	m.addend_seconds = nil
}

// EndSeconds returns the value of the "end_seconds" field in the mutation.
func (m *SingleScheduleResourceMutation) EndSeconds() (r uint64, exists bool) {
	v := m.end_seconds
	if v == nil {
		return
	}
	return *v, true
}

// OldEndSeconds returns the old "end_seconds" field's value of the SingleScheduleResource entity.
// If the SingleScheduleResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SingleScheduleResourceMutation) OldEndSeconds(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndSeconds is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndSeconds requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndSeconds: %w", err)
	}
	return oldValue.EndSeconds, nil
}

// AddEndSeconds adds u to the "end_seconds" field.
func (m *SingleScheduleResourceMutation) AddEndSeconds(u int64) {
	if m.addend_seconds != nil {
		*m.addend_seconds += u
	} else {
		m.addend_seconds = &u
	}
}

// AddedEndSeconds returns the value that was added to the "end_seconds" field in this mutation.
func (m *SingleScheduleResourceMutation) AddedEndSeconds() (r int64, exists bool) {
	v := m.addend_seconds
	if v == nil {
		return
	}
	return *v, true
}

// ClearEndSeconds clears the value of the "end_seconds" field.
func (m *SingleScheduleResourceMutation) ClearEndSeconds() {
	m.end_seconds = nil
	m.addend_seconds = nil
	m.clearedFields[singlescheduleresource.FieldEndSeconds] = struct{}{}
}

// EndSecondsCleared returns if the "end_seconds" field was cleared in this mutation.
func (m *SingleScheduleResourceMutation) EndSecondsCleared() bool {
	_, ok := m.clearedFields[singlescheduleresource.FieldEndSeconds]
	return ok
}

// ResetEndSeconds resets all changes to the "end_seconds" field.
func (m *SingleScheduleResourceMutation) ResetEndSeconds() {
	m.end_seconds = nil
	m.addend_seconds = nil
	delete(m.clearedFields, singlescheduleresource.FieldEndSeconds)
}

// SetTargetSiteID sets the "target_site" edge to the SiteResource entity by id.
func (m *SingleScheduleResourceMutation) SetTargetSiteID(id int) {
	m.target_site = &id
}

// ClearTargetSite clears the "target_site" edge to the SiteResource entity.
func (m *SingleScheduleResourceMutation) ClearTargetSite() {
	m.clearedtarget_site = true
}

// TargetSiteCleared reports if the "target_site" edge to the SiteResource entity was cleared.
func (m *SingleScheduleResourceMutation) TargetSiteCleared() bool {
	return m.clearedtarget_site
}

// TargetSiteID returns the "target_site" edge ID in the mutation.
func (m *SingleScheduleResourceMutation) TargetSiteID() (id int, exists bool) {
	if m.target_site != nil {
		return *m.target_site, true
	}
	return
}

// TargetSiteIDs returns the "target_site" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TargetSiteID instead. It exists only for internal usage by the builders.
func (m *SingleScheduleResourceMutation) TargetSiteIDs() (ids []int) {
	if id := m.target_site; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTargetSite resets all changes to the "target_site" edge.
func (m *SingleScheduleResourceMutation) ResetTargetSite() {
	m.target_site = nil
	m.clearedtarget_site = false
}

// SetTargetHostID sets the "target_host" edge to the HostResource entity by id.
func (m *SingleScheduleResourceMutation) SetTargetHostID(id int) {
	m.target_host = &id
}

// ClearTargetHost clears the "target_host" edge to the HostResource entity.
func (m *SingleScheduleResourceMutation) ClearTargetHost() {
	m.clearedtarget_host = true
}

// TargetHostCleared reports if the "target_host" edge to the HostResource entity was cleared.
func (m *SingleScheduleResourceMutation) TargetHostCleared() bool {
	return m.clearedtarget_host
}

// TargetHostID returns the "target_host" edge ID in the mutation.
func (m *SingleScheduleResourceMutation) TargetHostID() (id int, exists bool) {
	if m.target_host != nil {
		return *m.target_host, true
	}
	return
}

// TargetHostIDs returns the "target_host" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TargetHostID instead. It exists only for internal usage by the builders.
func (m *SingleScheduleResourceMutation) TargetHostIDs() (ids []int) {
	if id := m.target_host; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTargetHost resets all changes to the "target_host" edge.
func (m *SingleScheduleResourceMutation) ResetTargetHost() {
	m.target_host = nil
	m.clearedtarget_host = false
}

// SetTargetWorkloadID sets the "target_workload" edge to the WorkloadResource entity by id.
func (m *SingleScheduleResourceMutation) SetTargetWorkloadID(id int) {
	m.target_workload = &id
}

// ClearTargetWorkload clears the "target_workload" edge to the WorkloadResource entity.
func (m *SingleScheduleResourceMutation) ClearTargetWorkload() {
	m.clearedtarget_workload = true
}

// TargetWorkloadCleared reports if the "target_workload" edge to the WorkloadResource entity was cleared.
func (m *SingleScheduleResourceMutation) TargetWorkloadCleared() bool {
	return m.clearedtarget_workload
}

// TargetWorkloadID returns the "target_workload" edge ID in the mutation.
func (m *SingleScheduleResourceMutation) TargetWorkloadID() (id int, exists bool) {
	if m.target_workload != nil {
		return *m.target_workload, true
	}
	return
}

// TargetWorkloadIDs returns the "target_workload" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TargetWorkloadID instead. It exists only for internal usage by the builders.
func (m *SingleScheduleResourceMutation) TargetWorkloadIDs() (ids []int) {
	if id := m.target_workload; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTargetWorkload resets all changes to the "target_workload" edge.
func (m *SingleScheduleResourceMutation) ResetTargetWorkload() {
	m.target_workload = nil
	m.clearedtarget_workload = false
}

// Where appends a list predicates to the SingleScheduleResourceMutation builder.
func (m *SingleScheduleResourceMutation) Where(ps ...predicate.SingleScheduleResource) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SingleScheduleResourceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SingleScheduleResourceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SingleScheduleResource, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SingleScheduleResourceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SingleScheduleResourceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SingleScheduleResource).
func (m *SingleScheduleResourceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SingleScheduleResourceMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.resource_id != nil {
		fields = append(fields, singlescheduleresource.FieldResourceID)
	}
	if m.schedule_status != nil {
		fields = append(fields, singlescheduleresource.FieldScheduleStatus)
	}
	if m.description != nil {
		fields = append(fields, singlescheduleresource.FieldDescription)
	}
	if m.start_seconds != nil {
		fields = append(fields, singlescheduleresource.FieldStartSeconds)
	}
	if m.end_seconds != nil {
		fields = append(fields, singlescheduleresource.FieldEndSeconds)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SingleScheduleResourceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case singlescheduleresource.FieldResourceID:
		return m.ResourceID()
	case singlescheduleresource.FieldScheduleStatus:
		return m.ScheduleStatus()
	case singlescheduleresource.FieldDescription:
		return m.Description()
	case singlescheduleresource.FieldStartSeconds:
		return m.StartSeconds()
	case singlescheduleresource.FieldEndSeconds:
		return m.EndSeconds()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SingleScheduleResourceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case singlescheduleresource.FieldResourceID:
		return m.OldResourceID(ctx)
	case singlescheduleresource.FieldScheduleStatus:
		return m.OldScheduleStatus(ctx)
	case singlescheduleresource.FieldDescription:
		return m.OldDescription(ctx)
	case singlescheduleresource.FieldStartSeconds:
		return m.OldStartSeconds(ctx)
	case singlescheduleresource.FieldEndSeconds:
		return m.OldEndSeconds(ctx)
	}
	return nil, fmt.Errorf("unknown SingleScheduleResource field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SingleScheduleResourceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case singlescheduleresource.FieldResourceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResourceID(v)
		return nil
	case singlescheduleresource.FieldScheduleStatus:
		v, ok := value.(singlescheduleresource.ScheduleStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScheduleStatus(v)
		return nil
	case singlescheduleresource.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case singlescheduleresource.FieldStartSeconds:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartSeconds(v)
		return nil
	case singlescheduleresource.FieldEndSeconds:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndSeconds(v)
		return nil
	}
	return fmt.Errorf("unknown SingleScheduleResource field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SingleScheduleResourceMutation) AddedFields() []string {
	var fields []string
	if m.addstart_seconds != nil {
		fields = append(fields, singlescheduleresource.FieldStartSeconds)
	}
	if m.addend_seconds != nil {
		fields = append(fields, singlescheduleresource.FieldEndSeconds)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SingleScheduleResourceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case singlescheduleresource.FieldStartSeconds:
		return m.AddedStartSeconds()
	case singlescheduleresource.FieldEndSeconds:
		return m.AddedEndSeconds()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SingleScheduleResourceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case singlescheduleresource.FieldStartSeconds:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStartSeconds(v)
		return nil
	case singlescheduleresource.FieldEndSeconds:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEndSeconds(v)
		return nil
	}
	return fmt.Errorf("unknown SingleScheduleResource numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SingleScheduleResourceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(singlescheduleresource.FieldScheduleStatus) {
		fields = append(fields, singlescheduleresource.FieldScheduleStatus)
	}
	if m.FieldCleared(singlescheduleresource.FieldDescription) {
		fields = append(fields, singlescheduleresource.FieldDescription)
	}
	if m.FieldCleared(singlescheduleresource.FieldEndSeconds) {
		fields = append(fields, singlescheduleresource.FieldEndSeconds)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SingleScheduleResourceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SingleScheduleResourceMutation) ClearField(name string) error {
	switch name {
	case singlescheduleresource.FieldScheduleStatus:
		m.ClearScheduleStatus()
		return nil
	case singlescheduleresource.FieldDescription:
		m.ClearDescription()
		return nil
	case singlescheduleresource.FieldEndSeconds:
		m.ClearEndSeconds()
		return nil
	}
	return fmt.Errorf("unknown SingleScheduleResource nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SingleScheduleResourceMutation) ResetField(name string) error {
	switch name {
	case singlescheduleresource.FieldResourceID:
		m.ResetResourceID()
		return nil
	case singlescheduleresource.FieldScheduleStatus:
		m.ResetScheduleStatus()
		return nil
	case singlescheduleresource.FieldDescription:
		m.ResetDescription()
		return nil
	case singlescheduleresource.FieldStartSeconds:
		m.ResetStartSeconds()
		return nil
	case singlescheduleresource.FieldEndSeconds:
		m.ResetEndSeconds()
		return nil
	}
	return fmt.Errorf("unknown SingleScheduleResource field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SingleScheduleResourceMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.target_site != nil {
		edges = append(edges, singlescheduleresource.EdgeTargetSite)
	}
	if m.target_host != nil {
		edges = append(edges, singlescheduleresource.EdgeTargetHost)
	}
	if m.target_workload != nil {
		edges = append(edges, singlescheduleresource.EdgeTargetWorkload)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SingleScheduleResourceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case singlescheduleresource.EdgeTargetSite:
		if id := m.target_site; id != nil {
			return []ent.Value{*id}
		}
	case singlescheduleresource.EdgeTargetHost:
		if id := m.target_host; id != nil {
			return []ent.Value{*id}
		}
	case singlescheduleresource.EdgeTargetWorkload:
		if id := m.target_workload; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SingleScheduleResourceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SingleScheduleResourceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SingleScheduleResourceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedtarget_site {
		edges = append(edges, singlescheduleresource.EdgeTargetSite)
	}
	if m.clearedtarget_host {
		edges = append(edges, singlescheduleresource.EdgeTargetHost)
	}
	if m.clearedtarget_workload {
		edges = append(edges, singlescheduleresource.EdgeTargetWorkload)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SingleScheduleResourceMutation) EdgeCleared(name string) bool {
	switch name {
	case singlescheduleresource.EdgeTargetSite:
		return m.clearedtarget_site
	case singlescheduleresource.EdgeTargetHost:
		return m.clearedtarget_host
	case singlescheduleresource.EdgeTargetWorkload:
		return m.clearedtarget_workload
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SingleScheduleResourceMutation) ClearEdge(name string) error {
	switch name {
	case singlescheduleresource.EdgeTargetSite:
		m.ClearTargetSite()
		return nil
	case singlescheduleresource.EdgeTargetHost:
		m.ClearTargetHost()
		return nil
	case singlescheduleresource.EdgeTargetWorkload:
		m.ClearTargetWorkload()
		return nil
	}
	return fmt.Errorf("unknown SingleScheduleResource unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SingleScheduleResourceMutation) ResetEdge(name string) error {
	switch name {
	case singlescheduleresource.EdgeTargetSite:
		m.ResetTargetSite()
		return nil
	case singlescheduleresource.EdgeTargetHost:
		m.ResetTargetHost()
		return nil
	case singlescheduleresource.EdgeTargetWorkload:
		m.ResetTargetWorkload()
		return nil
	}
	return fmt.Errorf("unknown SingleScheduleResource edge %s", name)
}

// SiteResourceMutation represents an operation that mutates the SiteResource nodes in the graph.
type SiteResourceMutation struct {
	config
	op                Op
	typ               string
	id                *int
	resource_id       *string
	description       *string
	site_kind         *string
	address           *string
	site_lat          *int32
	addsite_lat       *int32
	site_lng          *int32
	addsite_lng       *int32
	dns_servers       *string
	docker_registries *string
	metrics_endpoint  *string
	http_proxy        *string
	https_proxy       *string
	ftp_proxy         *string
	no_proxy          *string
	metadata          *string
	clearedFields     map[string]struct{}
	region            *int
	clearedregion     bool
	ou                *int
	clearedou         bool
	done              bool
	oldValue          func(context.Context) (*SiteResource, error)
	predicates        []predicate.SiteResource
}

var _ ent.Mutation = (*SiteResourceMutation)(nil)

// siteresourceOption allows management of the mutation configuration using functional options.
type siteresourceOption func(*SiteResourceMutation)

// newSiteResourceMutation creates new mutation for the SiteResource entity.
func newSiteResourceMutation(c config, op Op, opts ...siteresourceOption) *SiteResourceMutation {
	m := &SiteResourceMutation{
		config:        c,
		op:            op,
		typ:           TypeSiteResource,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSiteResourceID sets the ID field of the mutation.
func withSiteResourceID(id int) siteresourceOption {
	return func(m *SiteResourceMutation) {
		var (
			err   error
			once  sync.Once
			value *SiteResource
		)
		m.oldValue = func(ctx context.Context) (*SiteResource, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SiteResource.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSiteResource sets the old SiteResource of the mutation.
func withSiteResource(node *SiteResource) siteresourceOption {
	return func(m *SiteResourceMutation) {
		m.oldValue = func(context.Context) (*SiteResource, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SiteResourceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SiteResourceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SiteResourceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SiteResourceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SiteResource.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetResourceID sets the "resource_id" field.
func (m *SiteResourceMutation) SetResourceID(s string) {
	m.resource_id = &s
}

// ResourceID returns the value of the "resource_id" field in the mutation.
func (m *SiteResourceMutation) ResourceID() (r string, exists bool) {
	v := m.resource_id
	if v == nil {
		return
	}
	return *v, true
}

// OldResourceID returns the old "resource_id" field's value of the SiteResource entity.
// If the SiteResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteResourceMutation) OldResourceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResourceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResourceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResourceID: %w", err)
	}
	return oldValue.ResourceID, nil
}

// ResetResourceID resets all changes to the "resource_id" field.
func (m *SiteResourceMutation) ResetResourceID() {
	m.resource_id = nil
}

// SetDescription sets the "description" field.
func (m *SiteResourceMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *SiteResourceMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the SiteResource entity.
// If the SiteResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteResourceMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *SiteResourceMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[siteresource.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *SiteResourceMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[siteresource.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *SiteResourceMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, siteresource.FieldDescription)
}

// SetSiteKind sets the "site_kind" field.
func (m *SiteResourceMutation) SetSiteKind(s string) {
	m.site_kind = &s
}

// SiteKind returns the value of the "site_kind" field in the mutation.
func (m *SiteResourceMutation) SiteKind() (r string, exists bool) {
	v := m.site_kind
	if v == nil {
		return
	}
	return *v, true
}

// OldSiteKind returns the old "site_kind" field's value of the SiteResource entity.
// If the SiteResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteResourceMutation) OldSiteKind(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSiteKind is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSiteKind requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSiteKind: %w", err)
	}
	return oldValue.SiteKind, nil
}

// ClearSiteKind clears the value of the "site_kind" field.
func (m *SiteResourceMutation) ClearSiteKind() {
	m.site_kind = nil
	m.clearedFields[siteresource.FieldSiteKind] = struct{}{}
}

// SiteKindCleared returns if the "site_kind" field was cleared in this mutation.
func (m *SiteResourceMutation) SiteKindCleared() bool {
	_, ok := m.clearedFields[siteresource.FieldSiteKind]
	return ok
}

// ResetSiteKind resets all changes to the "site_kind" field.
func (m *SiteResourceMutation) ResetSiteKind() {
	m.site_kind = nil
	delete(m.clearedFields, siteresource.FieldSiteKind)
}

// SetAddress sets the "address" field.
func (m *SiteResourceMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *SiteResourceMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the SiteResource entity.
// If the SiteResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteResourceMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ClearAddress clears the value of the "address" field.
func (m *SiteResourceMutation) ClearAddress() {
	m.address = nil
	m.clearedFields[siteresource.FieldAddress] = struct{}{}
}

// AddressCleared returns if the "address" field was cleared in this mutation.
func (m *SiteResourceMutation) AddressCleared() bool {
	_, ok := m.clearedFields[siteresource.FieldAddress]
	return ok
}

// ResetAddress resets all changes to the "address" field.
func (m *SiteResourceMutation) ResetAddress() {
	m.address = nil
	delete(m.clearedFields, siteresource.FieldAddress)
}

// SetSiteLat sets the "site_lat" field.
func (m *SiteResourceMutation) SetSiteLat(i int32) {
	m.site_lat = &i
	m.addsite_lat = nil
}

// SiteLat returns the value of the "site_lat" field in the mutation.
func (m *SiteResourceMutation) SiteLat() (r int32, exists bool) {
	v := m.site_lat
	if v == nil {
		return
	}
	return *v, true
}

// OldSiteLat returns the old "site_lat" field's value of the SiteResource entity.
// If the SiteResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteResourceMutation) OldSiteLat(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSiteLat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSiteLat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSiteLat: %w", err)
	}
	return oldValue.SiteLat, nil
}

// AddSiteLat adds i to the "site_lat" field.
func (m *SiteResourceMutation) AddSiteLat(i int32) {
	if m.addsite_lat != nil {
		*m.addsite_lat += i
	} else {
		m.addsite_lat = &i
	}
}

// AddedSiteLat returns the value that was added to the "site_lat" field in this mutation.
func (m *SiteResourceMutation) AddedSiteLat() (r int32, exists bool) {
	v := m.addsite_lat
	if v == nil {
		return
	}
	return *v, true
}

// ClearSiteLat clears the value of the "site_lat" field.
func (m *SiteResourceMutation) ClearSiteLat() {
	m.site_lat = nil
	m.addsite_lat = nil
	m.clearedFields[siteresource.FieldSiteLat] = struct{}{}
}

// SiteLatCleared returns if the "site_lat" field was cleared in this mutation.
func (m *SiteResourceMutation) SiteLatCleared() bool {
	_, ok := m.clearedFields[siteresource.FieldSiteLat]
	return ok
}

// ResetSiteLat resets all changes to the "site_lat" field.
func (m *SiteResourceMutation) ResetSiteLat() {
	m.site_lat = nil
	m.addsite_lat = nil
	delete(m.clearedFields, siteresource.FieldSiteLat)
}

// SetSiteLng sets the "site_lng" field.
func (m *SiteResourceMutation) SetSiteLng(i int32) {
	m.site_lng = &i
	m.addsite_lng = nil
}

// SiteLng returns the value of the "site_lng" field in the mutation.
func (m *SiteResourceMutation) SiteLng() (r int32, exists bool) {
	v := m.site_lng
	if v == nil {
		return
	}
	return *v, true
}

// OldSiteLng returns the old "site_lng" field's value of the SiteResource entity.
// If the SiteResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteResourceMutation) OldSiteLng(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSiteLng is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSiteLng requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSiteLng: %w", err)
	}
	return oldValue.SiteLng, nil
}

// AddSiteLng adds i to the "site_lng" field.
func (m *SiteResourceMutation) AddSiteLng(i int32) {
	if m.addsite_lng != nil {
		*m.addsite_lng += i
	} else {
		m.addsite_lng = &i
	}
}

// AddedSiteLng returns the value that was added to the "site_lng" field in this mutation.
func (m *SiteResourceMutation) AddedSiteLng() (r int32, exists bool) {
	v := m.addsite_lng
	if v == nil {
		return
	}
	return *v, true
}

// ClearSiteLng clears the value of the "site_lng" field.
func (m *SiteResourceMutation) ClearSiteLng() {
	m.site_lng = nil
	m.addsite_lng = nil
	m.clearedFields[siteresource.FieldSiteLng] = struct{}{}
}

// SiteLngCleared returns if the "site_lng" field was cleared in this mutation.
func (m *SiteResourceMutation) SiteLngCleared() bool {
	_, ok := m.clearedFields[siteresource.FieldSiteLng]
	return ok
}

// ResetSiteLng resets all changes to the "site_lng" field.
func (m *SiteResourceMutation) ResetSiteLng() {
	m.site_lng = nil
	m.addsite_lng = nil
	delete(m.clearedFields, siteresource.FieldSiteLng)
}

// SetDNSServers sets the "dns_servers" field.
func (m *SiteResourceMutation) SetDNSServers(s string) {
	m.dns_servers = &s
}

// DNSServers returns the value of the "dns_servers" field in the mutation.
func (m *SiteResourceMutation) DNSServers() (r string, exists bool) {
	v := m.dns_servers
	if v == nil {
		return
	}
	return *v, true
}

// OldDNSServers returns the old "dns_servers" field's value of the SiteResource entity.
// If the SiteResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteResourceMutation) OldDNSServers(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDNSServers is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDNSServers requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDNSServers: %w", err)
	}
	return oldValue.DNSServers, nil
}

// ClearDNSServers clears the value of the "dns_servers" field.
func (m *SiteResourceMutation) ClearDNSServers() {
	m.dns_servers = nil
	m.clearedFields[siteresource.FieldDNSServers] = struct{}{}
}

// DNSServersCleared returns if the "dns_servers" field was cleared in this mutation.
func (m *SiteResourceMutation) DNSServersCleared() bool {
	_, ok := m.clearedFields[siteresource.FieldDNSServers]
	return ok
}

// ResetDNSServers resets all changes to the "dns_servers" field.
func (m *SiteResourceMutation) ResetDNSServers() {
	m.dns_servers = nil
	delete(m.clearedFields, siteresource.FieldDNSServers)
}

// SetDockerRegistries sets the "docker_registries" field.
func (m *SiteResourceMutation) SetDockerRegistries(s string) {
	m.docker_registries = &s
}

// DockerRegistries returns the value of the "docker_registries" field in the mutation.
func (m *SiteResourceMutation) DockerRegistries() (r string, exists bool) {
	v := m.docker_registries
	if v == nil {
		return
	}
	return *v, true
}

// OldDockerRegistries returns the old "docker_registries" field's value of the SiteResource entity.
// If the SiteResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteResourceMutation) OldDockerRegistries(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDockerRegistries is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDockerRegistries requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDockerRegistries: %w", err)
	}
	return oldValue.DockerRegistries, nil
}

// ClearDockerRegistries clears the value of the "docker_registries" field.
func (m *SiteResourceMutation) ClearDockerRegistries() {
	m.docker_registries = nil
	m.clearedFields[siteresource.FieldDockerRegistries] = struct{}{}
}

// DockerRegistriesCleared returns if the "docker_registries" field was cleared in this mutation.
func (m *SiteResourceMutation) DockerRegistriesCleared() bool {
	_, ok := m.clearedFields[siteresource.FieldDockerRegistries]
	return ok
}

// ResetDockerRegistries resets all changes to the "docker_registries" field.
func (m *SiteResourceMutation) ResetDockerRegistries() {
	m.docker_registries = nil
	delete(m.clearedFields, siteresource.FieldDockerRegistries)
}

// SetMetricsEndpoint sets the "metrics_endpoint" field.
func (m *SiteResourceMutation) SetMetricsEndpoint(s string) {
	m.metrics_endpoint = &s
}

// MetricsEndpoint returns the value of the "metrics_endpoint" field in the mutation.
func (m *SiteResourceMutation) MetricsEndpoint() (r string, exists bool) {
	v := m.metrics_endpoint
	if v == nil {
		return
	}
	return *v, true
}

// OldMetricsEndpoint returns the old "metrics_endpoint" field's value of the SiteResource entity.
// If the SiteResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteResourceMutation) OldMetricsEndpoint(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetricsEndpoint is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetricsEndpoint requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetricsEndpoint: %w", err)
	}
	return oldValue.MetricsEndpoint, nil
}

// ClearMetricsEndpoint clears the value of the "metrics_endpoint" field.
func (m *SiteResourceMutation) ClearMetricsEndpoint() {
	m.metrics_endpoint = nil
	m.clearedFields[siteresource.FieldMetricsEndpoint] = struct{}{}
}

// MetricsEndpointCleared returns if the "metrics_endpoint" field was cleared in this mutation.
func (m *SiteResourceMutation) MetricsEndpointCleared() bool {
	_, ok := m.clearedFields[siteresource.FieldMetricsEndpoint]
	return ok
}

// ResetMetricsEndpoint resets all changes to the "metrics_endpoint" field.
func (m *SiteResourceMutation) ResetMetricsEndpoint() {
	m.metrics_endpoint = nil
	delete(m.clearedFields, siteresource.FieldMetricsEndpoint)
}

// SetHTTPProxy sets the "http_proxy" field.
func (m *SiteResourceMutation) SetHTTPProxy(s string) {
	m.http_proxy = &s
}

// HTTPProxy returns the value of the "http_proxy" field in the mutation.
func (m *SiteResourceMutation) HTTPProxy() (r string, exists bool) {
	v := m.http_proxy
	if v == nil {
		return
	}
	return *v, true
}

// OldHTTPProxy returns the old "http_proxy" field's value of the SiteResource entity.
// If the SiteResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteResourceMutation) OldHTTPProxy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHTTPProxy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHTTPProxy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHTTPProxy: %w", err)
	}
	return oldValue.HTTPProxy, nil
}

// ClearHTTPProxy clears the value of the "http_proxy" field.
func (m *SiteResourceMutation) ClearHTTPProxy() {
	m.http_proxy = nil
	m.clearedFields[siteresource.FieldHTTPProxy] = struct{}{}
}

// HTTPProxyCleared returns if the "http_proxy" field was cleared in this mutation.
func (m *SiteResourceMutation) HTTPProxyCleared() bool {
	_, ok := m.clearedFields[siteresource.FieldHTTPProxy]
	return ok
}

// ResetHTTPProxy resets all changes to the "http_proxy" field.
func (m *SiteResourceMutation) ResetHTTPProxy() {
	m.http_proxy = nil
	delete(m.clearedFields, siteresource.FieldHTTPProxy)
}

// SetHTTPSProxy sets the "https_proxy" field.
func (m *SiteResourceMutation) SetHTTPSProxy(s string) {
	m.https_proxy = &s
}

// HTTPSProxy returns the value of the "https_proxy" field in the mutation.
func (m *SiteResourceMutation) HTTPSProxy() (r string, exists bool) {
	v := m.https_proxy
	if v == nil {
		return
	}
	return *v, true
}

// OldHTTPSProxy returns the old "https_proxy" field's value of the SiteResource entity.
// If the SiteResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteResourceMutation) OldHTTPSProxy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHTTPSProxy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHTTPSProxy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHTTPSProxy: %w", err)
	}
	return oldValue.HTTPSProxy, nil
}

// ClearHTTPSProxy clears the value of the "https_proxy" field.
func (m *SiteResourceMutation) ClearHTTPSProxy() {
	m.https_proxy = nil
	m.clearedFields[siteresource.FieldHTTPSProxy] = struct{}{}
}

// HTTPSProxyCleared returns if the "https_proxy" field was cleared in this mutation.
func (m *SiteResourceMutation) HTTPSProxyCleared() bool {
	_, ok := m.clearedFields[siteresource.FieldHTTPSProxy]
	return ok
}

// ResetHTTPSProxy resets all changes to the "https_proxy" field.
func (m *SiteResourceMutation) ResetHTTPSProxy() {
	m.https_proxy = nil
	delete(m.clearedFields, siteresource.FieldHTTPSProxy)
}

// SetFtpProxy sets the "ftp_proxy" field.
func (m *SiteResourceMutation) SetFtpProxy(s string) {
	m.ftp_proxy = &s
}

// FtpProxy returns the value of the "ftp_proxy" field in the mutation.
func (m *SiteResourceMutation) FtpProxy() (r string, exists bool) {
	v := m.ftp_proxy
	if v == nil {
		return
	}
	return *v, true
}

// OldFtpProxy returns the old "ftp_proxy" field's value of the SiteResource entity.
// If the SiteResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteResourceMutation) OldFtpProxy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFtpProxy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFtpProxy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFtpProxy: %w", err)
	}
	return oldValue.FtpProxy, nil
}

// ClearFtpProxy clears the value of the "ftp_proxy" field.
func (m *SiteResourceMutation) ClearFtpProxy() {
	m.ftp_proxy = nil
	m.clearedFields[siteresource.FieldFtpProxy] = struct{}{}
}

// FtpProxyCleared returns if the "ftp_proxy" field was cleared in this mutation.
func (m *SiteResourceMutation) FtpProxyCleared() bool {
	_, ok := m.clearedFields[siteresource.FieldFtpProxy]
	return ok
}

// ResetFtpProxy resets all changes to the "ftp_proxy" field.
func (m *SiteResourceMutation) ResetFtpProxy() {
	m.ftp_proxy = nil
	delete(m.clearedFields, siteresource.FieldFtpProxy)
}

// SetNoProxy sets the "no_proxy" field.
func (m *SiteResourceMutation) SetNoProxy(s string) {
	m.no_proxy = &s
}

// NoProxy returns the value of the "no_proxy" field in the mutation.
func (m *SiteResourceMutation) NoProxy() (r string, exists bool) {
	v := m.no_proxy
	if v == nil {
		return
	}
	return *v, true
}

// OldNoProxy returns the old "no_proxy" field's value of the SiteResource entity.
// If the SiteResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteResourceMutation) OldNoProxy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNoProxy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNoProxy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNoProxy: %w", err)
	}
	return oldValue.NoProxy, nil
}

// ClearNoProxy clears the value of the "no_proxy" field.
func (m *SiteResourceMutation) ClearNoProxy() {
	m.no_proxy = nil
	m.clearedFields[siteresource.FieldNoProxy] = struct{}{}
}

// NoProxyCleared returns if the "no_proxy" field was cleared in this mutation.
func (m *SiteResourceMutation) NoProxyCleared() bool {
	_, ok := m.clearedFields[siteresource.FieldNoProxy]
	return ok
}

// ResetNoProxy resets all changes to the "no_proxy" field.
func (m *SiteResourceMutation) ResetNoProxy() {
	m.no_proxy = nil
	delete(m.clearedFields, siteresource.FieldNoProxy)
}

// SetMetadata sets the "metadata" field.
func (m *SiteResourceMutation) SetMetadata(s string) {
	m.metadata = &s
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *SiteResourceMutation) Metadata() (r string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the SiteResource entity.
// If the SiteResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteResourceMutation) OldMetadata(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *SiteResourceMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[siteresource.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *SiteResourceMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[siteresource.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *SiteResourceMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, siteresource.FieldMetadata)
}

// SetRegionID sets the "region" edge to the RegionResource entity by id.
func (m *SiteResourceMutation) SetRegionID(id int) {
	m.region = &id
}

// ClearRegion clears the "region" edge to the RegionResource entity.
func (m *SiteResourceMutation) ClearRegion() {
	m.clearedregion = true
}

// RegionCleared reports if the "region" edge to the RegionResource entity was cleared.
func (m *SiteResourceMutation) RegionCleared() bool {
	return m.clearedregion
}

// RegionID returns the "region" edge ID in the mutation.
func (m *SiteResourceMutation) RegionID() (id int, exists bool) {
	if m.region != nil {
		return *m.region, true
	}
	return
}

// RegionIDs returns the "region" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RegionID instead. It exists only for internal usage by the builders.
func (m *SiteResourceMutation) RegionIDs() (ids []int) {
	if id := m.region; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRegion resets all changes to the "region" edge.
func (m *SiteResourceMutation) ResetRegion() {
	m.region = nil
	m.clearedregion = false
}

// SetOuID sets the "ou" edge to the OuResource entity by id.
func (m *SiteResourceMutation) SetOuID(id int) {
	m.ou = &id
}

// ClearOu clears the "ou" edge to the OuResource entity.
func (m *SiteResourceMutation) ClearOu() {
	m.clearedou = true
}

// OuCleared reports if the "ou" edge to the OuResource entity was cleared.
func (m *SiteResourceMutation) OuCleared() bool {
	return m.clearedou
}

// OuID returns the "ou" edge ID in the mutation.
func (m *SiteResourceMutation) OuID() (id int, exists bool) {
	if m.ou != nil {
		return *m.ou, true
	}
	return
}

// OuIDs returns the "ou" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OuID instead. It exists only for internal usage by the builders.
func (m *SiteResourceMutation) OuIDs() (ids []int) {
	if id := m.ou; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOu resets all changes to the "ou" edge.
func (m *SiteResourceMutation) ResetOu() {
	m.ou = nil
	m.clearedou = false
}

// Where appends a list predicates to the SiteResourceMutation builder.
func (m *SiteResourceMutation) Where(ps ...predicate.SiteResource) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SiteResourceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SiteResourceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SiteResource, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SiteResourceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SiteResourceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SiteResource).
func (m *SiteResourceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SiteResourceMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.resource_id != nil {
		fields = append(fields, siteresource.FieldResourceID)
	}
	if m.description != nil {
		fields = append(fields, siteresource.FieldDescription)
	}
	if m.site_kind != nil {
		fields = append(fields, siteresource.FieldSiteKind)
	}
	if m.address != nil {
		fields = append(fields, siteresource.FieldAddress)
	}
	if m.site_lat != nil {
		fields = append(fields, siteresource.FieldSiteLat)
	}
	if m.site_lng != nil {
		fields = append(fields, siteresource.FieldSiteLng)
	}
	if m.dns_servers != nil {
		fields = append(fields, siteresource.FieldDNSServers)
	}
	if m.docker_registries != nil {
		fields = append(fields, siteresource.FieldDockerRegistries)
	}
	if m.metrics_endpoint != nil {
		fields = append(fields, siteresource.FieldMetricsEndpoint)
	}
	if m.http_proxy != nil {
		fields = append(fields, siteresource.FieldHTTPProxy)
	}
	if m.https_proxy != nil {
		fields = append(fields, siteresource.FieldHTTPSProxy)
	}
	if m.ftp_proxy != nil {
		fields = append(fields, siteresource.FieldFtpProxy)
	}
	if m.no_proxy != nil {
		fields = append(fields, siteresource.FieldNoProxy)
	}
	if m.metadata != nil {
		fields = append(fields, siteresource.FieldMetadata)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SiteResourceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case siteresource.FieldResourceID:
		return m.ResourceID()
	case siteresource.FieldDescription:
		return m.Description()
	case siteresource.FieldSiteKind:
		return m.SiteKind()
	case siteresource.FieldAddress:
		return m.Address()
	case siteresource.FieldSiteLat:
		return m.SiteLat()
	case siteresource.FieldSiteLng:
		return m.SiteLng()
	case siteresource.FieldDNSServers:
		return m.DNSServers()
	case siteresource.FieldDockerRegistries:
		return m.DockerRegistries()
	case siteresource.FieldMetricsEndpoint:
		return m.MetricsEndpoint()
	case siteresource.FieldHTTPProxy:
		return m.HTTPProxy()
	case siteresource.FieldHTTPSProxy:
		return m.HTTPSProxy()
	case siteresource.FieldFtpProxy:
		return m.FtpProxy()
	case siteresource.FieldNoProxy:
		return m.NoProxy()
	case siteresource.FieldMetadata:
		return m.Metadata()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SiteResourceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case siteresource.FieldResourceID:
		return m.OldResourceID(ctx)
	case siteresource.FieldDescription:
		return m.OldDescription(ctx)
	case siteresource.FieldSiteKind:
		return m.OldSiteKind(ctx)
	case siteresource.FieldAddress:
		return m.OldAddress(ctx)
	case siteresource.FieldSiteLat:
		return m.OldSiteLat(ctx)
	case siteresource.FieldSiteLng:
		return m.OldSiteLng(ctx)
	case siteresource.FieldDNSServers:
		return m.OldDNSServers(ctx)
	case siteresource.FieldDockerRegistries:
		return m.OldDockerRegistries(ctx)
	case siteresource.FieldMetricsEndpoint:
		return m.OldMetricsEndpoint(ctx)
	case siteresource.FieldHTTPProxy:
		return m.OldHTTPProxy(ctx)
	case siteresource.FieldHTTPSProxy:
		return m.OldHTTPSProxy(ctx)
	case siteresource.FieldFtpProxy:
		return m.OldFtpProxy(ctx)
	case siteresource.FieldNoProxy:
		return m.OldNoProxy(ctx)
	case siteresource.FieldMetadata:
		return m.OldMetadata(ctx)
	}
	return nil, fmt.Errorf("unknown SiteResource field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SiteResourceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case siteresource.FieldResourceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResourceID(v)
		return nil
	case siteresource.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case siteresource.FieldSiteKind:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSiteKind(v)
		return nil
	case siteresource.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case siteresource.FieldSiteLat:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSiteLat(v)
		return nil
	case siteresource.FieldSiteLng:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSiteLng(v)
		return nil
	case siteresource.FieldDNSServers:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDNSServers(v)
		return nil
	case siteresource.FieldDockerRegistries:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDockerRegistries(v)
		return nil
	case siteresource.FieldMetricsEndpoint:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetricsEndpoint(v)
		return nil
	case siteresource.FieldHTTPProxy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHTTPProxy(v)
		return nil
	case siteresource.FieldHTTPSProxy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHTTPSProxy(v)
		return nil
	case siteresource.FieldFtpProxy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFtpProxy(v)
		return nil
	case siteresource.FieldNoProxy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNoProxy(v)
		return nil
	case siteresource.FieldMetadata:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	}
	return fmt.Errorf("unknown SiteResource field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SiteResourceMutation) AddedFields() []string {
	var fields []string
	if m.addsite_lat != nil {
		fields = append(fields, siteresource.FieldSiteLat)
	}
	if m.addsite_lng != nil {
		fields = append(fields, siteresource.FieldSiteLng)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SiteResourceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case siteresource.FieldSiteLat:
		return m.AddedSiteLat()
	case siteresource.FieldSiteLng:
		return m.AddedSiteLng()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SiteResourceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case siteresource.FieldSiteLat:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSiteLat(v)
		return nil
	case siteresource.FieldSiteLng:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSiteLng(v)
		return nil
	}
	return fmt.Errorf("unknown SiteResource numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SiteResourceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(siteresource.FieldDescription) {
		fields = append(fields, siteresource.FieldDescription)
	}
	if m.FieldCleared(siteresource.FieldSiteKind) {
		fields = append(fields, siteresource.FieldSiteKind)
	}
	if m.FieldCleared(siteresource.FieldAddress) {
		fields = append(fields, siteresource.FieldAddress)
	}
	if m.FieldCleared(siteresource.FieldSiteLat) {
		fields = append(fields, siteresource.FieldSiteLat)
	}
	if m.FieldCleared(siteresource.FieldSiteLng) {
		fields = append(fields, siteresource.FieldSiteLng)
	}
	if m.FieldCleared(siteresource.FieldDNSServers) {
		fields = append(fields, siteresource.FieldDNSServers)
	}
	if m.FieldCleared(siteresource.FieldDockerRegistries) {
		fields = append(fields, siteresource.FieldDockerRegistries)
	}
	if m.FieldCleared(siteresource.FieldMetricsEndpoint) {
		fields = append(fields, siteresource.FieldMetricsEndpoint)
	}
	if m.FieldCleared(siteresource.FieldHTTPProxy) {
		fields = append(fields, siteresource.FieldHTTPProxy)
	}
	if m.FieldCleared(siteresource.FieldHTTPSProxy) {
		fields = append(fields, siteresource.FieldHTTPSProxy)
	}
	if m.FieldCleared(siteresource.FieldFtpProxy) {
		fields = append(fields, siteresource.FieldFtpProxy)
	}
	if m.FieldCleared(siteresource.FieldNoProxy) {
		fields = append(fields, siteresource.FieldNoProxy)
	}
	if m.FieldCleared(siteresource.FieldMetadata) {
		fields = append(fields, siteresource.FieldMetadata)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SiteResourceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SiteResourceMutation) ClearField(name string) error {
	switch name {
	case siteresource.FieldDescription:
		m.ClearDescription()
		return nil
	case siteresource.FieldSiteKind:
		m.ClearSiteKind()
		return nil
	case siteresource.FieldAddress:
		m.ClearAddress()
		return nil
	case siteresource.FieldSiteLat:
		m.ClearSiteLat()
		return nil
	case siteresource.FieldSiteLng:
		m.ClearSiteLng()
		return nil
	case siteresource.FieldDNSServers:
		m.ClearDNSServers()
		return nil
	case siteresource.FieldDockerRegistries:
		m.ClearDockerRegistries()
		return nil
	case siteresource.FieldMetricsEndpoint:
		m.ClearMetricsEndpoint()
		return nil
	case siteresource.FieldHTTPProxy:
		m.ClearHTTPProxy()
		return nil
	case siteresource.FieldHTTPSProxy:
		m.ClearHTTPSProxy()
		return nil
	case siteresource.FieldFtpProxy:
		m.ClearFtpProxy()
		return nil
	case siteresource.FieldNoProxy:
		m.ClearNoProxy()
		return nil
	case siteresource.FieldMetadata:
		m.ClearMetadata()
		return nil
	}
	return fmt.Errorf("unknown SiteResource nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SiteResourceMutation) ResetField(name string) error {
	switch name {
	case siteresource.FieldResourceID:
		m.ResetResourceID()
		return nil
	case siteresource.FieldDescription:
		m.ResetDescription()
		return nil
	case siteresource.FieldSiteKind:
		m.ResetSiteKind()
		return nil
	case siteresource.FieldAddress:
		m.ResetAddress()
		return nil
	case siteresource.FieldSiteLat:
		m.ResetSiteLat()
		return nil
	case siteresource.FieldSiteLng:
		m.ResetSiteLng()
		return nil
	case siteresource.FieldDNSServers:
		m.ResetDNSServers()
		return nil
	case siteresource.FieldDockerRegistries:
		m.ResetDockerRegistries()
		return nil
	case siteresource.FieldMetricsEndpoint:
		m.ResetMetricsEndpoint()
		return nil
	case siteresource.FieldHTTPProxy:
		m.ResetHTTPProxy()
		return nil
	case siteresource.FieldHTTPSProxy:
		m.ResetHTTPSProxy()
		return nil
	case siteresource.FieldFtpProxy:
		m.ResetFtpProxy()
		return nil
	case siteresource.FieldNoProxy:
		m.ResetNoProxy()
		return nil
	case siteresource.FieldMetadata:
		m.ResetMetadata()
		return nil
	}
	return fmt.Errorf("unknown SiteResource field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SiteResourceMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.region != nil {
		edges = append(edges, siteresource.EdgeRegion)
	}
	if m.ou != nil {
		edges = append(edges, siteresource.EdgeOu)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SiteResourceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case siteresource.EdgeRegion:
		if id := m.region; id != nil {
			return []ent.Value{*id}
		}
	case siteresource.EdgeOu:
		if id := m.ou; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SiteResourceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SiteResourceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SiteResourceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedregion {
		edges = append(edges, siteresource.EdgeRegion)
	}
	if m.clearedou {
		edges = append(edges, siteresource.EdgeOu)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SiteResourceMutation) EdgeCleared(name string) bool {
	switch name {
	case siteresource.EdgeRegion:
		return m.clearedregion
	case siteresource.EdgeOu:
		return m.clearedou
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SiteResourceMutation) ClearEdge(name string) error {
	switch name {
	case siteresource.EdgeRegion:
		m.ClearRegion()
		return nil
	case siteresource.EdgeOu:
		m.ClearOu()
		return nil
	}
	return fmt.Errorf("unknown SiteResource unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SiteResourceMutation) ResetEdge(name string) error {
	switch name {
	case siteresource.EdgeRegion:
		m.ResetRegion()
		return nil
	case siteresource.EdgeOu:
		m.ResetOu()
		return nil
	}
	return fmt.Errorf("unknown SiteResource edge %s", name)
}

// UserResourceMutation represents an operation that mutates the UserResource nodes in the graph.
type UserResourceMutation struct {
	config
	op            Op
	typ           string
	id            *int
	resource_id   *string
	kind          *string
	description   *string
	username      *string
	ssh_pubkey    *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*UserResource, error)
	predicates    []predicate.UserResource
}

var _ ent.Mutation = (*UserResourceMutation)(nil)

// userresourceOption allows management of the mutation configuration using functional options.
type userresourceOption func(*UserResourceMutation)

// newUserResourceMutation creates new mutation for the UserResource entity.
func newUserResourceMutation(c config, op Op, opts ...userresourceOption) *UserResourceMutation {
	m := &UserResourceMutation{
		config:        c,
		op:            op,
		typ:           TypeUserResource,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserResourceID sets the ID field of the mutation.
func withUserResourceID(id int) userresourceOption {
	return func(m *UserResourceMutation) {
		var (
			err   error
			once  sync.Once
			value *UserResource
		)
		m.oldValue = func(ctx context.Context) (*UserResource, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserResource.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserResource sets the old UserResource of the mutation.
func withUserResource(node *UserResource) userresourceOption {
	return func(m *UserResourceMutation) {
		m.oldValue = func(context.Context) (*UserResource, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserResourceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserResourceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserResourceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserResourceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserResource.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetResourceID sets the "resource_id" field.
func (m *UserResourceMutation) SetResourceID(s string) {
	m.resource_id = &s
}

// ResourceID returns the value of the "resource_id" field in the mutation.
func (m *UserResourceMutation) ResourceID() (r string, exists bool) {
	v := m.resource_id
	if v == nil {
		return
	}
	return *v, true
}

// OldResourceID returns the old "resource_id" field's value of the UserResource entity.
// If the UserResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserResourceMutation) OldResourceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResourceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResourceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResourceID: %w", err)
	}
	return oldValue.ResourceID, nil
}

// ResetResourceID resets all changes to the "resource_id" field.
func (m *UserResourceMutation) ResetResourceID() {
	m.resource_id = nil
}

// SetKind sets the "kind" field.
func (m *UserResourceMutation) SetKind(s string) {
	m.kind = &s
}

// Kind returns the value of the "kind" field in the mutation.
func (m *UserResourceMutation) Kind() (r string, exists bool) {
	v := m.kind
	if v == nil {
		return
	}
	return *v, true
}

// OldKind returns the old "kind" field's value of the UserResource entity.
// If the UserResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserResourceMutation) OldKind(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKind is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKind requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKind: %w", err)
	}
	return oldValue.Kind, nil
}

// ClearKind clears the value of the "kind" field.
func (m *UserResourceMutation) ClearKind() {
	m.kind = nil
	m.clearedFields[userresource.FieldKind] = struct{}{}
}

// KindCleared returns if the "kind" field was cleared in this mutation.
func (m *UserResourceMutation) KindCleared() bool {
	_, ok := m.clearedFields[userresource.FieldKind]
	return ok
}

// ResetKind resets all changes to the "kind" field.
func (m *UserResourceMutation) ResetKind() {
	m.kind = nil
	delete(m.clearedFields, userresource.FieldKind)
}

// SetDescription sets the "description" field.
func (m *UserResourceMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *UserResourceMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the UserResource entity.
// If the UserResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserResourceMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *UserResourceMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[userresource.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *UserResourceMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[userresource.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *UserResourceMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, userresource.FieldDescription)
}

// SetUsername sets the "username" field.
func (m *UserResourceMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserResourceMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the UserResource entity.
// If the UserResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserResourceMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ClearUsername clears the value of the "username" field.
func (m *UserResourceMutation) ClearUsername() {
	m.username = nil
	m.clearedFields[userresource.FieldUsername] = struct{}{}
}

// UsernameCleared returns if the "username" field was cleared in this mutation.
func (m *UserResourceMutation) UsernameCleared() bool {
	_, ok := m.clearedFields[userresource.FieldUsername]
	return ok
}

// ResetUsername resets all changes to the "username" field.
func (m *UserResourceMutation) ResetUsername() {
	m.username = nil
	delete(m.clearedFields, userresource.FieldUsername)
}

// SetSSHPubkey sets the "ssh_pubkey" field.
func (m *UserResourceMutation) SetSSHPubkey(s string) {
	m.ssh_pubkey = &s
}

// SSHPubkey returns the value of the "ssh_pubkey" field in the mutation.
func (m *UserResourceMutation) SSHPubkey() (r string, exists bool) {
	v := m.ssh_pubkey
	if v == nil {
		return
	}
	return *v, true
}

// OldSSHPubkey returns the old "ssh_pubkey" field's value of the UserResource entity.
// If the UserResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserResourceMutation) OldSSHPubkey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSSHPubkey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSSHPubkey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSSHPubkey: %w", err)
	}
	return oldValue.SSHPubkey, nil
}

// ClearSSHPubkey clears the value of the "ssh_pubkey" field.
func (m *UserResourceMutation) ClearSSHPubkey() {
	m.ssh_pubkey = nil
	m.clearedFields[userresource.FieldSSHPubkey] = struct{}{}
}

// SSHPubkeyCleared returns if the "ssh_pubkey" field was cleared in this mutation.
func (m *UserResourceMutation) SSHPubkeyCleared() bool {
	_, ok := m.clearedFields[userresource.FieldSSHPubkey]
	return ok
}

// ResetSSHPubkey resets all changes to the "ssh_pubkey" field.
func (m *UserResourceMutation) ResetSSHPubkey() {
	m.ssh_pubkey = nil
	delete(m.clearedFields, userresource.FieldSSHPubkey)
}

// Where appends a list predicates to the UserResourceMutation builder.
func (m *UserResourceMutation) Where(ps ...predicate.UserResource) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserResourceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserResourceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserResource, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserResourceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserResourceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserResource).
func (m *UserResourceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserResourceMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.resource_id != nil {
		fields = append(fields, userresource.FieldResourceID)
	}
	if m.kind != nil {
		fields = append(fields, userresource.FieldKind)
	}
	if m.description != nil {
		fields = append(fields, userresource.FieldDescription)
	}
	if m.username != nil {
		fields = append(fields, userresource.FieldUsername)
	}
	if m.ssh_pubkey != nil {
		fields = append(fields, userresource.FieldSSHPubkey)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserResourceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userresource.FieldResourceID:
		return m.ResourceID()
	case userresource.FieldKind:
		return m.Kind()
	case userresource.FieldDescription:
		return m.Description()
	case userresource.FieldUsername:
		return m.Username()
	case userresource.FieldSSHPubkey:
		return m.SSHPubkey()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserResourceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userresource.FieldResourceID:
		return m.OldResourceID(ctx)
	case userresource.FieldKind:
		return m.OldKind(ctx)
	case userresource.FieldDescription:
		return m.OldDescription(ctx)
	case userresource.FieldUsername:
		return m.OldUsername(ctx)
	case userresource.FieldSSHPubkey:
		return m.OldSSHPubkey(ctx)
	}
	return nil, fmt.Errorf("unknown UserResource field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserResourceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userresource.FieldResourceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResourceID(v)
		return nil
	case userresource.FieldKind:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKind(v)
		return nil
	case userresource.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case userresource.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case userresource.FieldSSHPubkey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSSHPubkey(v)
		return nil
	}
	return fmt.Errorf("unknown UserResource field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserResourceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserResourceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserResourceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserResource numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserResourceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(userresource.FieldKind) {
		fields = append(fields, userresource.FieldKind)
	}
	if m.FieldCleared(userresource.FieldDescription) {
		fields = append(fields, userresource.FieldDescription)
	}
	if m.FieldCleared(userresource.FieldUsername) {
		fields = append(fields, userresource.FieldUsername)
	}
	if m.FieldCleared(userresource.FieldSSHPubkey) {
		fields = append(fields, userresource.FieldSSHPubkey)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserResourceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserResourceMutation) ClearField(name string) error {
	switch name {
	case userresource.FieldKind:
		m.ClearKind()
		return nil
	case userresource.FieldDescription:
		m.ClearDescription()
		return nil
	case userresource.FieldUsername:
		m.ClearUsername()
		return nil
	case userresource.FieldSSHPubkey:
		m.ClearSSHPubkey()
		return nil
	}
	return fmt.Errorf("unknown UserResource nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserResourceMutation) ResetField(name string) error {
	switch name {
	case userresource.FieldResourceID:
		m.ResetResourceID()
		return nil
	case userresource.FieldKind:
		m.ResetKind()
		return nil
	case userresource.FieldDescription:
		m.ResetDescription()
		return nil
	case userresource.FieldUsername:
		m.ResetUsername()
		return nil
	case userresource.FieldSSHPubkey:
		m.ResetSSHPubkey()
		return nil
	}
	return fmt.Errorf("unknown UserResource field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserResourceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserResourceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserResourceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserResourceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserResourceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserResourceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserResourceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserResource unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserResourceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserResource edge %s", name)
}

// WorkloadMemberMutation represents an operation that mutates the WorkloadMember nodes in the graph.
type WorkloadMemberMutation struct {
	config
	op              Op
	typ             string
	id              *int
	resource_id     *string
	kind            *workloadmember.Kind
	clearedFields   map[string]struct{}
	workload        *int
	clearedworkload bool
	instance        *int
	clearedinstance bool
	done            bool
	oldValue        func(context.Context) (*WorkloadMember, error)
	predicates      []predicate.WorkloadMember
}

var _ ent.Mutation = (*WorkloadMemberMutation)(nil)

// workloadmemberOption allows management of the mutation configuration using functional options.
type workloadmemberOption func(*WorkloadMemberMutation)

// newWorkloadMemberMutation creates new mutation for the WorkloadMember entity.
func newWorkloadMemberMutation(c config, op Op, opts ...workloadmemberOption) *WorkloadMemberMutation {
	m := &WorkloadMemberMutation{
		config:        c,
		op:            op,
		typ:           TypeWorkloadMember,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWorkloadMemberID sets the ID field of the mutation.
func withWorkloadMemberID(id int) workloadmemberOption {
	return func(m *WorkloadMemberMutation) {
		var (
			err   error
			once  sync.Once
			value *WorkloadMember
		)
		m.oldValue = func(ctx context.Context) (*WorkloadMember, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().WorkloadMember.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWorkloadMember sets the old WorkloadMember of the mutation.
func withWorkloadMember(node *WorkloadMember) workloadmemberOption {
	return func(m *WorkloadMemberMutation) {
		m.oldValue = func(context.Context) (*WorkloadMember, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WorkloadMemberMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WorkloadMemberMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WorkloadMemberMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WorkloadMemberMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().WorkloadMember.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetResourceID sets the "resource_id" field.
func (m *WorkloadMemberMutation) SetResourceID(s string) {
	m.resource_id = &s
}

// ResourceID returns the value of the "resource_id" field in the mutation.
func (m *WorkloadMemberMutation) ResourceID() (r string, exists bool) {
	v := m.resource_id
	if v == nil {
		return
	}
	return *v, true
}

// OldResourceID returns the old "resource_id" field's value of the WorkloadMember entity.
// If the WorkloadMember object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkloadMemberMutation) OldResourceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResourceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResourceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResourceID: %w", err)
	}
	return oldValue.ResourceID, nil
}

// ResetResourceID resets all changes to the "resource_id" field.
func (m *WorkloadMemberMutation) ResetResourceID() {
	m.resource_id = nil
}

// SetKind sets the "kind" field.
func (m *WorkloadMemberMutation) SetKind(w workloadmember.Kind) {
	m.kind = &w
}

// Kind returns the value of the "kind" field in the mutation.
func (m *WorkloadMemberMutation) Kind() (r workloadmember.Kind, exists bool) {
	v := m.kind
	if v == nil {
		return
	}
	return *v, true
}

// OldKind returns the old "kind" field's value of the WorkloadMember entity.
// If the WorkloadMember object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkloadMemberMutation) OldKind(ctx context.Context) (v workloadmember.Kind, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKind is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKind requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKind: %w", err)
	}
	return oldValue.Kind, nil
}

// ResetKind resets all changes to the "kind" field.
func (m *WorkloadMemberMutation) ResetKind() {
	m.kind = nil
}

// SetWorkloadID sets the "workload" edge to the WorkloadResource entity by id.
func (m *WorkloadMemberMutation) SetWorkloadID(id int) {
	m.workload = &id
}

// ClearWorkload clears the "workload" edge to the WorkloadResource entity.
func (m *WorkloadMemberMutation) ClearWorkload() {
	m.clearedworkload = true
}

// WorkloadCleared reports if the "workload" edge to the WorkloadResource entity was cleared.
func (m *WorkloadMemberMutation) WorkloadCleared() bool {
	return m.clearedworkload
}

// WorkloadID returns the "workload" edge ID in the mutation.
func (m *WorkloadMemberMutation) WorkloadID() (id int, exists bool) {
	if m.workload != nil {
		return *m.workload, true
	}
	return
}

// WorkloadIDs returns the "workload" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WorkloadID instead. It exists only for internal usage by the builders.
func (m *WorkloadMemberMutation) WorkloadIDs() (ids []int) {
	if id := m.workload; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWorkload resets all changes to the "workload" edge.
func (m *WorkloadMemberMutation) ResetWorkload() {
	m.workload = nil
	m.clearedworkload = false
}

// SetInstanceID sets the "instance" edge to the InstanceResource entity by id.
func (m *WorkloadMemberMutation) SetInstanceID(id int) {
	m.instance = &id
}

// ClearInstance clears the "instance" edge to the InstanceResource entity.
func (m *WorkloadMemberMutation) ClearInstance() {
	m.clearedinstance = true
}

// InstanceCleared reports if the "instance" edge to the InstanceResource entity was cleared.
func (m *WorkloadMemberMutation) InstanceCleared() bool {
	return m.clearedinstance
}

// InstanceID returns the "instance" edge ID in the mutation.
func (m *WorkloadMemberMutation) InstanceID() (id int, exists bool) {
	if m.instance != nil {
		return *m.instance, true
	}
	return
}

// InstanceIDs returns the "instance" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// InstanceID instead. It exists only for internal usage by the builders.
func (m *WorkloadMemberMutation) InstanceIDs() (ids []int) {
	if id := m.instance; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetInstance resets all changes to the "instance" edge.
func (m *WorkloadMemberMutation) ResetInstance() {
	m.instance = nil
	m.clearedinstance = false
}

// Where appends a list predicates to the WorkloadMemberMutation builder.
func (m *WorkloadMemberMutation) Where(ps ...predicate.WorkloadMember) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WorkloadMemberMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WorkloadMemberMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.WorkloadMember, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WorkloadMemberMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WorkloadMemberMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (WorkloadMember).
func (m *WorkloadMemberMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WorkloadMemberMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.resource_id != nil {
		fields = append(fields, workloadmember.FieldResourceID)
	}
	if m.kind != nil {
		fields = append(fields, workloadmember.FieldKind)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WorkloadMemberMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case workloadmember.FieldResourceID:
		return m.ResourceID()
	case workloadmember.FieldKind:
		return m.Kind()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WorkloadMemberMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case workloadmember.FieldResourceID:
		return m.OldResourceID(ctx)
	case workloadmember.FieldKind:
		return m.OldKind(ctx)
	}
	return nil, fmt.Errorf("unknown WorkloadMember field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WorkloadMemberMutation) SetField(name string, value ent.Value) error {
	switch name {
	case workloadmember.FieldResourceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResourceID(v)
		return nil
	case workloadmember.FieldKind:
		v, ok := value.(workloadmember.Kind)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKind(v)
		return nil
	}
	return fmt.Errorf("unknown WorkloadMember field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WorkloadMemberMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WorkloadMemberMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WorkloadMemberMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown WorkloadMember numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WorkloadMemberMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WorkloadMemberMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WorkloadMemberMutation) ClearField(name string) error {
	return fmt.Errorf("unknown WorkloadMember nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WorkloadMemberMutation) ResetField(name string) error {
	switch name {
	case workloadmember.FieldResourceID:
		m.ResetResourceID()
		return nil
	case workloadmember.FieldKind:
		m.ResetKind()
		return nil
	}
	return fmt.Errorf("unknown WorkloadMember field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WorkloadMemberMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.workload != nil {
		edges = append(edges, workloadmember.EdgeWorkload)
	}
	if m.instance != nil {
		edges = append(edges, workloadmember.EdgeInstance)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WorkloadMemberMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case workloadmember.EdgeWorkload:
		if id := m.workload; id != nil {
			return []ent.Value{*id}
		}
	case workloadmember.EdgeInstance:
		if id := m.instance; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WorkloadMemberMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WorkloadMemberMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WorkloadMemberMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedworkload {
		edges = append(edges, workloadmember.EdgeWorkload)
	}
	if m.clearedinstance {
		edges = append(edges, workloadmember.EdgeInstance)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WorkloadMemberMutation) EdgeCleared(name string) bool {
	switch name {
	case workloadmember.EdgeWorkload:
		return m.clearedworkload
	case workloadmember.EdgeInstance:
		return m.clearedinstance
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WorkloadMemberMutation) ClearEdge(name string) error {
	switch name {
	case workloadmember.EdgeWorkload:
		m.ClearWorkload()
		return nil
	case workloadmember.EdgeInstance:
		m.ClearInstance()
		return nil
	}
	return fmt.Errorf("unknown WorkloadMember unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WorkloadMemberMutation) ResetEdge(name string) error {
	switch name {
	case workloadmember.EdgeWorkload:
		m.ResetWorkload()
		return nil
	case workloadmember.EdgeInstance:
		m.ResetInstance()
		return nil
	}
	return fmt.Errorf("unknown WorkloadMember edge %s", name)
}

// WorkloadResourceMutation represents an operation that mutates the WorkloadResource nodes in the graph.
type WorkloadResourceMutation struct {
	config
	op             Op
	typ            string
	id             *int
	resource_id    *string
	kind           *workloadresource.Kind
	description    *string
	external_id    *string
	desired_state  *workloadresource.DesiredState
	current_state  *workloadresource.CurrentState
	status         *string
	metadata       *string
	clearedFields  map[string]struct{}
	members        map[int]struct{}
	removedmembers map[int]struct{}
	clearedmembers bool
	done           bool
	oldValue       func(context.Context) (*WorkloadResource, error)
	predicates     []predicate.WorkloadResource
}

var _ ent.Mutation = (*WorkloadResourceMutation)(nil)

// workloadresourceOption allows management of the mutation configuration using functional options.
type workloadresourceOption func(*WorkloadResourceMutation)

// newWorkloadResourceMutation creates new mutation for the WorkloadResource entity.
func newWorkloadResourceMutation(c config, op Op, opts ...workloadresourceOption) *WorkloadResourceMutation {
	m := &WorkloadResourceMutation{
		config:        c,
		op:            op,
		typ:           TypeWorkloadResource,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWorkloadResourceID sets the ID field of the mutation.
func withWorkloadResourceID(id int) workloadresourceOption {
	return func(m *WorkloadResourceMutation) {
		var (
			err   error
			once  sync.Once
			value *WorkloadResource
		)
		m.oldValue = func(ctx context.Context) (*WorkloadResource, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().WorkloadResource.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWorkloadResource sets the old WorkloadResource of the mutation.
func withWorkloadResource(node *WorkloadResource) workloadresourceOption {
	return func(m *WorkloadResourceMutation) {
		m.oldValue = func(context.Context) (*WorkloadResource, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WorkloadResourceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WorkloadResourceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WorkloadResourceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WorkloadResourceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().WorkloadResource.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetResourceID sets the "resource_id" field.
func (m *WorkloadResourceMutation) SetResourceID(s string) {
	m.resource_id = &s
}

// ResourceID returns the value of the "resource_id" field in the mutation.
func (m *WorkloadResourceMutation) ResourceID() (r string, exists bool) {
	v := m.resource_id
	if v == nil {
		return
	}
	return *v, true
}

// OldResourceID returns the old "resource_id" field's value of the WorkloadResource entity.
// If the WorkloadResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkloadResourceMutation) OldResourceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResourceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResourceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResourceID: %w", err)
	}
	return oldValue.ResourceID, nil
}

// ResetResourceID resets all changes to the "resource_id" field.
func (m *WorkloadResourceMutation) ResetResourceID() {
	m.resource_id = nil
}

// SetKind sets the "kind" field.
func (m *WorkloadResourceMutation) SetKind(w workloadresource.Kind) {
	m.kind = &w
}

// Kind returns the value of the "kind" field in the mutation.
func (m *WorkloadResourceMutation) Kind() (r workloadresource.Kind, exists bool) {
	v := m.kind
	if v == nil {
		return
	}
	return *v, true
}

// OldKind returns the old "kind" field's value of the WorkloadResource entity.
// If the WorkloadResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkloadResourceMutation) OldKind(ctx context.Context) (v workloadresource.Kind, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKind is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKind requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKind: %w", err)
	}
	return oldValue.Kind, nil
}

// ResetKind resets all changes to the "kind" field.
func (m *WorkloadResourceMutation) ResetKind() {
	m.kind = nil
}

// SetDescription sets the "description" field.
func (m *WorkloadResourceMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *WorkloadResourceMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the WorkloadResource entity.
// If the WorkloadResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkloadResourceMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *WorkloadResourceMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[workloadresource.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *WorkloadResourceMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[workloadresource.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *WorkloadResourceMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, workloadresource.FieldDescription)
}

// SetExternalID sets the "external_id" field.
func (m *WorkloadResourceMutation) SetExternalID(s string) {
	m.external_id = &s
}

// ExternalID returns the value of the "external_id" field in the mutation.
func (m *WorkloadResourceMutation) ExternalID() (r string, exists bool) {
	v := m.external_id
	if v == nil {
		return
	}
	return *v, true
}

// OldExternalID returns the old "external_id" field's value of the WorkloadResource entity.
// If the WorkloadResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkloadResourceMutation) OldExternalID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExternalID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExternalID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExternalID: %w", err)
	}
	return oldValue.ExternalID, nil
}

// ClearExternalID clears the value of the "external_id" field.
func (m *WorkloadResourceMutation) ClearExternalID() {
	m.external_id = nil
	m.clearedFields[workloadresource.FieldExternalID] = struct{}{}
}

// ExternalIDCleared returns if the "external_id" field was cleared in this mutation.
func (m *WorkloadResourceMutation) ExternalIDCleared() bool {
	_, ok := m.clearedFields[workloadresource.FieldExternalID]
	return ok
}

// ResetExternalID resets all changes to the "external_id" field.
func (m *WorkloadResourceMutation) ResetExternalID() {
	m.external_id = nil
	delete(m.clearedFields, workloadresource.FieldExternalID)
}

// SetDesiredState sets the "desired_state" field.
func (m *WorkloadResourceMutation) SetDesiredState(ws workloadresource.DesiredState) {
	m.desired_state = &ws
}

// DesiredState returns the value of the "desired_state" field in the mutation.
func (m *WorkloadResourceMutation) DesiredState() (r workloadresource.DesiredState, exists bool) {
	v := m.desired_state
	if v == nil {
		return
	}
	return *v, true
}

// OldDesiredState returns the old "desired_state" field's value of the WorkloadResource entity.
// If the WorkloadResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkloadResourceMutation) OldDesiredState(ctx context.Context) (v workloadresource.DesiredState, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesiredState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesiredState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesiredState: %w", err)
	}
	return oldValue.DesiredState, nil
}

// ResetDesiredState resets all changes to the "desired_state" field.
func (m *WorkloadResourceMutation) ResetDesiredState() {
	m.desired_state = nil
}

// SetCurrentState sets the "current_state" field.
func (m *WorkloadResourceMutation) SetCurrentState(ws workloadresource.CurrentState) {
	m.current_state = &ws
}

// CurrentState returns the value of the "current_state" field in the mutation.
func (m *WorkloadResourceMutation) CurrentState() (r workloadresource.CurrentState, exists bool) {
	v := m.current_state
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrentState returns the old "current_state" field's value of the WorkloadResource entity.
// If the WorkloadResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkloadResourceMutation) OldCurrentState(ctx context.Context) (v workloadresource.CurrentState, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrentState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrentState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrentState: %w", err)
	}
	return oldValue.CurrentState, nil
}

// ClearCurrentState clears the value of the "current_state" field.
func (m *WorkloadResourceMutation) ClearCurrentState() {
	m.current_state = nil
	m.clearedFields[workloadresource.FieldCurrentState] = struct{}{}
}

// CurrentStateCleared returns if the "current_state" field was cleared in this mutation.
func (m *WorkloadResourceMutation) CurrentStateCleared() bool {
	_, ok := m.clearedFields[workloadresource.FieldCurrentState]
	return ok
}

// ResetCurrentState resets all changes to the "current_state" field.
func (m *WorkloadResourceMutation) ResetCurrentState() {
	m.current_state = nil
	delete(m.clearedFields, workloadresource.FieldCurrentState)
}

// SetStatus sets the "status" field.
func (m *WorkloadResourceMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *WorkloadResourceMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the WorkloadResource entity.
// If the WorkloadResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkloadResourceMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ClearStatus clears the value of the "status" field.
func (m *WorkloadResourceMutation) ClearStatus() {
	m.status = nil
	m.clearedFields[workloadresource.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *WorkloadResourceMutation) StatusCleared() bool {
	_, ok := m.clearedFields[workloadresource.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *WorkloadResourceMutation) ResetStatus() {
	m.status = nil
	delete(m.clearedFields, workloadresource.FieldStatus)
}

// SetMetadata sets the "metadata" field.
func (m *WorkloadResourceMutation) SetMetadata(s string) {
	m.metadata = &s
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *WorkloadResourceMutation) Metadata() (r string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the WorkloadResource entity.
// If the WorkloadResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkloadResourceMutation) OldMetadata(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *WorkloadResourceMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[workloadresource.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *WorkloadResourceMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[workloadresource.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *WorkloadResourceMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, workloadresource.FieldMetadata)
}

// AddMemberIDs adds the "members" edge to the WorkloadMember entity by ids.
func (m *WorkloadResourceMutation) AddMemberIDs(ids ...int) {
	if m.members == nil {
		m.members = make(map[int]struct{})
	}
	for i := range ids {
		m.members[ids[i]] = struct{}{}
	}
}

// ClearMembers clears the "members" edge to the WorkloadMember entity.
func (m *WorkloadResourceMutation) ClearMembers() {
	m.clearedmembers = true
}

// MembersCleared reports if the "members" edge to the WorkloadMember entity was cleared.
func (m *WorkloadResourceMutation) MembersCleared() bool {
	return m.clearedmembers
}

// RemoveMemberIDs removes the "members" edge to the WorkloadMember entity by IDs.
func (m *WorkloadResourceMutation) RemoveMemberIDs(ids ...int) {
	if m.removedmembers == nil {
		m.removedmembers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.members, ids[i])
		m.removedmembers[ids[i]] = struct{}{}
	}
}

// RemovedMembers returns the removed IDs of the "members" edge to the WorkloadMember entity.
func (m *WorkloadResourceMutation) RemovedMembersIDs() (ids []int) {
	for id := range m.removedmembers {
		ids = append(ids, id)
	}
	return
}

// MembersIDs returns the "members" edge IDs in the mutation.
func (m *WorkloadResourceMutation) MembersIDs() (ids []int) {
	for id := range m.members {
		ids = append(ids, id)
	}
	return
}

// ResetMembers resets all changes to the "members" edge.
func (m *WorkloadResourceMutation) ResetMembers() {
	m.members = nil
	m.clearedmembers = false
	m.removedmembers = nil
}

// Where appends a list predicates to the WorkloadResourceMutation builder.
func (m *WorkloadResourceMutation) Where(ps ...predicate.WorkloadResource) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WorkloadResourceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WorkloadResourceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.WorkloadResource, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WorkloadResourceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WorkloadResourceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (WorkloadResource).
func (m *WorkloadResourceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WorkloadResourceMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.resource_id != nil {
		fields = append(fields, workloadresource.FieldResourceID)
	}
	if m.kind != nil {
		fields = append(fields, workloadresource.FieldKind)
	}
	if m.description != nil {
		fields = append(fields, workloadresource.FieldDescription)
	}
	if m.external_id != nil {
		fields = append(fields, workloadresource.FieldExternalID)
	}
	if m.desired_state != nil {
		fields = append(fields, workloadresource.FieldDesiredState)
	}
	if m.current_state != nil {
		fields = append(fields, workloadresource.FieldCurrentState)
	}
	if m.status != nil {
		fields = append(fields, workloadresource.FieldStatus)
	}
	if m.metadata != nil {
		fields = append(fields, workloadresource.FieldMetadata)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WorkloadResourceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case workloadresource.FieldResourceID:
		return m.ResourceID()
	case workloadresource.FieldKind:
		return m.Kind()
	case workloadresource.FieldDescription:
		return m.Description()
	case workloadresource.FieldExternalID:
		return m.ExternalID()
	case workloadresource.FieldDesiredState:
		return m.DesiredState()
	case workloadresource.FieldCurrentState:
		return m.CurrentState()
	case workloadresource.FieldStatus:
		return m.Status()
	case workloadresource.FieldMetadata:
		return m.Metadata()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WorkloadResourceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case workloadresource.FieldResourceID:
		return m.OldResourceID(ctx)
	case workloadresource.FieldKind:
		return m.OldKind(ctx)
	case workloadresource.FieldDescription:
		return m.OldDescription(ctx)
	case workloadresource.FieldExternalID:
		return m.OldExternalID(ctx)
	case workloadresource.FieldDesiredState:
		return m.OldDesiredState(ctx)
	case workloadresource.FieldCurrentState:
		return m.OldCurrentState(ctx)
	case workloadresource.FieldStatus:
		return m.OldStatus(ctx)
	case workloadresource.FieldMetadata:
		return m.OldMetadata(ctx)
	}
	return nil, fmt.Errorf("unknown WorkloadResource field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WorkloadResourceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case workloadresource.FieldResourceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResourceID(v)
		return nil
	case workloadresource.FieldKind:
		v, ok := value.(workloadresource.Kind)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKind(v)
		return nil
	case workloadresource.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case workloadresource.FieldExternalID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExternalID(v)
		return nil
	case workloadresource.FieldDesiredState:
		v, ok := value.(workloadresource.DesiredState)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesiredState(v)
		return nil
	case workloadresource.FieldCurrentState:
		v, ok := value.(workloadresource.CurrentState)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrentState(v)
		return nil
	case workloadresource.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case workloadresource.FieldMetadata:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	}
	return fmt.Errorf("unknown WorkloadResource field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WorkloadResourceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WorkloadResourceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WorkloadResourceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown WorkloadResource numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WorkloadResourceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(workloadresource.FieldDescription) {
		fields = append(fields, workloadresource.FieldDescription)
	}
	if m.FieldCleared(workloadresource.FieldExternalID) {
		fields = append(fields, workloadresource.FieldExternalID)
	}
	if m.FieldCleared(workloadresource.FieldCurrentState) {
		fields = append(fields, workloadresource.FieldCurrentState)
	}
	if m.FieldCleared(workloadresource.FieldStatus) {
		fields = append(fields, workloadresource.FieldStatus)
	}
	if m.FieldCleared(workloadresource.FieldMetadata) {
		fields = append(fields, workloadresource.FieldMetadata)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WorkloadResourceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WorkloadResourceMutation) ClearField(name string) error {
	switch name {
	case workloadresource.FieldDescription:
		m.ClearDescription()
		return nil
	case workloadresource.FieldExternalID:
		m.ClearExternalID()
		return nil
	case workloadresource.FieldCurrentState:
		m.ClearCurrentState()
		return nil
	case workloadresource.FieldStatus:
		m.ClearStatus()
		return nil
	case workloadresource.FieldMetadata:
		m.ClearMetadata()
		return nil
	}
	return fmt.Errorf("unknown WorkloadResource nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WorkloadResourceMutation) ResetField(name string) error {
	switch name {
	case workloadresource.FieldResourceID:
		m.ResetResourceID()
		return nil
	case workloadresource.FieldKind:
		m.ResetKind()
		return nil
	case workloadresource.FieldDescription:
		m.ResetDescription()
		return nil
	case workloadresource.FieldExternalID:
		m.ResetExternalID()
		return nil
	case workloadresource.FieldDesiredState:
		m.ResetDesiredState()
		return nil
	case workloadresource.FieldCurrentState:
		m.ResetCurrentState()
		return nil
	case workloadresource.FieldStatus:
		m.ResetStatus()
		return nil
	case workloadresource.FieldMetadata:
		m.ResetMetadata()
		return nil
	}
	return fmt.Errorf("unknown WorkloadResource field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WorkloadResourceMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.members != nil {
		edges = append(edges, workloadresource.EdgeMembers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WorkloadResourceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case workloadresource.EdgeMembers:
		ids := make([]ent.Value, 0, len(m.members))
		for id := range m.members {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WorkloadResourceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedmembers != nil {
		edges = append(edges, workloadresource.EdgeMembers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WorkloadResourceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case workloadresource.EdgeMembers:
		ids := make([]ent.Value, 0, len(m.removedmembers))
		for id := range m.removedmembers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WorkloadResourceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmembers {
		edges = append(edges, workloadresource.EdgeMembers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WorkloadResourceMutation) EdgeCleared(name string) bool {
	switch name {
	case workloadresource.EdgeMembers:
		return m.clearedmembers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WorkloadResourceMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown WorkloadResource unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WorkloadResourceMutation) ResetEdge(name string) error {
	switch name {
	case workloadresource.EdgeMembers:
		m.ResetMembers()
		return nil
	}
	return fmt.Errorf("unknown WorkloadResource edge %s", name)
}
