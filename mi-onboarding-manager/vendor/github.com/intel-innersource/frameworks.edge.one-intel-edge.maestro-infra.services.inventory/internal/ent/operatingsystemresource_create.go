// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/operatingsystemresource"
)

// OperatingSystemResourceCreate is the builder for creating a OperatingSystemResource entity.
type OperatingSystemResourceCreate struct {
	config
	mutation *OperatingSystemResourceMutation
	hooks    []Hook
}

// SetResourceID sets the "resource_id" field.
func (osrc *OperatingSystemResourceCreate) SetResourceID(s string) *OperatingSystemResourceCreate {
	osrc.mutation.SetResourceID(s)
	return osrc
}

// SetName sets the "name" field.
func (osrc *OperatingSystemResourceCreate) SetName(s string) *OperatingSystemResourceCreate {
	osrc.mutation.SetName(s)
	return osrc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (osrc *OperatingSystemResourceCreate) SetNillableName(s *string) *OperatingSystemResourceCreate {
	if s != nil {
		osrc.SetName(*s)
	}
	return osrc
}

// SetArchitecture sets the "architecture" field.
func (osrc *OperatingSystemResourceCreate) SetArchitecture(s string) *OperatingSystemResourceCreate {
	osrc.mutation.SetArchitecture(s)
	return osrc
}

// SetNillableArchitecture sets the "architecture" field if the given value is not nil.
func (osrc *OperatingSystemResourceCreate) SetNillableArchitecture(s *string) *OperatingSystemResourceCreate {
	if s != nil {
		osrc.SetArchitecture(*s)
	}
	return osrc
}

// SetKernelCommand sets the "kernel_command" field.
func (osrc *OperatingSystemResourceCreate) SetKernelCommand(s string) *OperatingSystemResourceCreate {
	osrc.mutation.SetKernelCommand(s)
	return osrc
}

// SetNillableKernelCommand sets the "kernel_command" field if the given value is not nil.
func (osrc *OperatingSystemResourceCreate) SetNillableKernelCommand(s *string) *OperatingSystemResourceCreate {
	if s != nil {
		osrc.SetKernelCommand(*s)
	}
	return osrc
}

// SetUpdateSources sets the "update_sources" field.
func (osrc *OperatingSystemResourceCreate) SetUpdateSources(s string) *OperatingSystemResourceCreate {
	osrc.mutation.SetUpdateSources(s)
	return osrc
}

// SetRepoURL sets the "repo_url" field.
func (osrc *OperatingSystemResourceCreate) SetRepoURL(s string) *OperatingSystemResourceCreate {
	osrc.mutation.SetRepoURL(s)
	return osrc
}

// SetSha256 sets the "sha256" field.
func (osrc *OperatingSystemResourceCreate) SetSha256(s string) *OperatingSystemResourceCreate {
	osrc.mutation.SetSha256(s)
	return osrc
}

// SetProfileName sets the "profile_name" field.
func (osrc *OperatingSystemResourceCreate) SetProfileName(s string) *OperatingSystemResourceCreate {
	osrc.mutation.SetProfileName(s)
	return osrc
}

// SetNillableProfileName sets the "profile_name" field if the given value is not nil.
func (osrc *OperatingSystemResourceCreate) SetNillableProfileName(s *string) *OperatingSystemResourceCreate {
	if s != nil {
		osrc.SetProfileName(*s)
	}
	return osrc
}

// Mutation returns the OperatingSystemResourceMutation object of the builder.
func (osrc *OperatingSystemResourceCreate) Mutation() *OperatingSystemResourceMutation {
	return osrc.mutation
}

// Save creates the OperatingSystemResource in the database.
func (osrc *OperatingSystemResourceCreate) Save(ctx context.Context) (*OperatingSystemResource, error) {
	return withHooks[*OperatingSystemResource, OperatingSystemResourceMutation](ctx, osrc.sqlSave, osrc.mutation, osrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (osrc *OperatingSystemResourceCreate) SaveX(ctx context.Context) *OperatingSystemResource {
	v, err := osrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (osrc *OperatingSystemResourceCreate) Exec(ctx context.Context) error {
	_, err := osrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osrc *OperatingSystemResourceCreate) ExecX(ctx context.Context) {
	if err := osrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osrc *OperatingSystemResourceCreate) check() error {
	if _, ok := osrc.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource_id", err: errors.New(`ent: missing required field "OperatingSystemResource.resource_id"`)}
	}
	if _, ok := osrc.mutation.UpdateSources(); !ok {
		return &ValidationError{Name: "update_sources", err: errors.New(`ent: missing required field "OperatingSystemResource.update_sources"`)}
	}
	if _, ok := osrc.mutation.RepoURL(); !ok {
		return &ValidationError{Name: "repo_url", err: errors.New(`ent: missing required field "OperatingSystemResource.repo_url"`)}
	}
	if _, ok := osrc.mutation.Sha256(); !ok {
		return &ValidationError{Name: "sha256", err: errors.New(`ent: missing required field "OperatingSystemResource.sha256"`)}
	}
	return nil
}

func (osrc *OperatingSystemResourceCreate) sqlSave(ctx context.Context) (*OperatingSystemResource, error) {
	if err := osrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := osrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, osrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	osrc.mutation.id = &_node.ID
	osrc.mutation.done = true
	return _node, nil
}

func (osrc *OperatingSystemResourceCreate) createSpec() (*OperatingSystemResource, *sqlgraph.CreateSpec) {
	var (
		_node = &OperatingSystemResource{config: osrc.config}
		_spec = sqlgraph.NewCreateSpec(operatingsystemresource.Table, sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt))
	)
	if value, ok := osrc.mutation.ResourceID(); ok {
		_spec.SetField(operatingsystemresource.FieldResourceID, field.TypeString, value)
		_node.ResourceID = value
	}
	if value, ok := osrc.mutation.Name(); ok {
		_spec.SetField(operatingsystemresource.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := osrc.mutation.Architecture(); ok {
		_spec.SetField(operatingsystemresource.FieldArchitecture, field.TypeString, value)
		_node.Architecture = value
	}
	if value, ok := osrc.mutation.KernelCommand(); ok {
		_spec.SetField(operatingsystemresource.FieldKernelCommand, field.TypeString, value)
		_node.KernelCommand = value
	}
	if value, ok := osrc.mutation.UpdateSources(); ok {
		_spec.SetField(operatingsystemresource.FieldUpdateSources, field.TypeString, value)
		_node.UpdateSources = value
	}
	if value, ok := osrc.mutation.RepoURL(); ok {
		_spec.SetField(operatingsystemresource.FieldRepoURL, field.TypeString, value)
		_node.RepoURL = value
	}
	if value, ok := osrc.mutation.Sha256(); ok {
		_spec.SetField(operatingsystemresource.FieldSha256, field.TypeString, value)
		_node.Sha256 = value
	}
	if value, ok := osrc.mutation.ProfileName(); ok {
		_spec.SetField(operatingsystemresource.FieldProfileName, field.TypeString, value)
		_node.ProfileName = value
	}
	return _node, _spec
}

// OperatingSystemResourceCreateBulk is the builder for creating many OperatingSystemResource entities in bulk.
type OperatingSystemResourceCreateBulk struct {
	config
	builders []*OperatingSystemResourceCreate
}

// Save creates the OperatingSystemResource entities in the database.
func (osrcb *OperatingSystemResourceCreateBulk) Save(ctx context.Context) ([]*OperatingSystemResource, error) {
	specs := make([]*sqlgraph.CreateSpec, len(osrcb.builders))
	nodes := make([]*OperatingSystemResource, len(osrcb.builders))
	mutators := make([]Mutator, len(osrcb.builders))
	for i := range osrcb.builders {
		func(i int, root context.Context) {
			builder := osrcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OperatingSystemResourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, osrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, osrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, osrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (osrcb *OperatingSystemResourceCreateBulk) SaveX(ctx context.Context) []*OperatingSystemResource {
	v, err := osrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (osrcb *OperatingSystemResourceCreateBulk) Exec(ctx context.Context) error {
	_, err := osrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osrcb *OperatingSystemResourceCreateBulk) ExecX(ctx context.Context) {
	if err := osrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
