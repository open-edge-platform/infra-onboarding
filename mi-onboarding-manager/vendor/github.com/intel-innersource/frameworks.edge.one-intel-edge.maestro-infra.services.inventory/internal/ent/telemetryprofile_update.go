// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/instanceresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/regionresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/siteresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/telemetrygroupresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/telemetryprofile"
)

// TelemetryProfileUpdate is the builder for updating TelemetryProfile entities.
type TelemetryProfileUpdate struct {
	config
	hooks    []Hook
	mutation *TelemetryProfileMutation
}

// Where appends a list predicates to the TelemetryProfileUpdate builder.
func (tpu *TelemetryProfileUpdate) Where(ps ...predicate.TelemetryProfile) *TelemetryProfileUpdate {
	tpu.mutation.Where(ps...)
	return tpu
}

// SetResourceID sets the "resource_id" field.
func (tpu *TelemetryProfileUpdate) SetResourceID(s string) *TelemetryProfileUpdate {
	tpu.mutation.SetResourceID(s)
	return tpu
}

// SetKind sets the "kind" field.
func (tpu *TelemetryProfileUpdate) SetKind(t telemetryprofile.Kind) *TelemetryProfileUpdate {
	tpu.mutation.SetKind(t)
	return tpu
}

// SetMetricsInterval sets the "metrics_interval" field.
func (tpu *TelemetryProfileUpdate) SetMetricsInterval(u uint32) *TelemetryProfileUpdate {
	tpu.mutation.ResetMetricsInterval()
	tpu.mutation.SetMetricsInterval(u)
	return tpu
}

// SetNillableMetricsInterval sets the "metrics_interval" field if the given value is not nil.
func (tpu *TelemetryProfileUpdate) SetNillableMetricsInterval(u *uint32) *TelemetryProfileUpdate {
	if u != nil {
		tpu.SetMetricsInterval(*u)
	}
	return tpu
}

// AddMetricsInterval adds u to the "metrics_interval" field.
func (tpu *TelemetryProfileUpdate) AddMetricsInterval(u int32) *TelemetryProfileUpdate {
	tpu.mutation.AddMetricsInterval(u)
	return tpu
}

// ClearMetricsInterval clears the value of the "metrics_interval" field.
func (tpu *TelemetryProfileUpdate) ClearMetricsInterval() *TelemetryProfileUpdate {
	tpu.mutation.ClearMetricsInterval()
	return tpu
}

// SetLogLevel sets the "log_level" field.
func (tpu *TelemetryProfileUpdate) SetLogLevel(tl telemetryprofile.LogLevel) *TelemetryProfileUpdate {
	tpu.mutation.SetLogLevel(tl)
	return tpu
}

// SetNillableLogLevel sets the "log_level" field if the given value is not nil.
func (tpu *TelemetryProfileUpdate) SetNillableLogLevel(tl *telemetryprofile.LogLevel) *TelemetryProfileUpdate {
	if tl != nil {
		tpu.SetLogLevel(*tl)
	}
	return tpu
}

// ClearLogLevel clears the value of the "log_level" field.
func (tpu *TelemetryProfileUpdate) ClearLogLevel() *TelemetryProfileUpdate {
	tpu.mutation.ClearLogLevel()
	return tpu
}

// SetRegionID sets the "region" edge to the RegionResource entity by ID.
func (tpu *TelemetryProfileUpdate) SetRegionID(id int) *TelemetryProfileUpdate {
	tpu.mutation.SetRegionID(id)
	return tpu
}

// SetNillableRegionID sets the "region" edge to the RegionResource entity by ID if the given value is not nil.
func (tpu *TelemetryProfileUpdate) SetNillableRegionID(id *int) *TelemetryProfileUpdate {
	if id != nil {
		tpu = tpu.SetRegionID(*id)
	}
	return tpu
}

// SetRegion sets the "region" edge to the RegionResource entity.
func (tpu *TelemetryProfileUpdate) SetRegion(r *RegionResource) *TelemetryProfileUpdate {
	return tpu.SetRegionID(r.ID)
}

// SetSiteID sets the "site" edge to the SiteResource entity by ID.
func (tpu *TelemetryProfileUpdate) SetSiteID(id int) *TelemetryProfileUpdate {
	tpu.mutation.SetSiteID(id)
	return tpu
}

// SetNillableSiteID sets the "site" edge to the SiteResource entity by ID if the given value is not nil.
func (tpu *TelemetryProfileUpdate) SetNillableSiteID(id *int) *TelemetryProfileUpdate {
	if id != nil {
		tpu = tpu.SetSiteID(*id)
	}
	return tpu
}

// SetSite sets the "site" edge to the SiteResource entity.
func (tpu *TelemetryProfileUpdate) SetSite(s *SiteResource) *TelemetryProfileUpdate {
	return tpu.SetSiteID(s.ID)
}

// SetInstanceID sets the "instance" edge to the InstanceResource entity by ID.
func (tpu *TelemetryProfileUpdate) SetInstanceID(id int) *TelemetryProfileUpdate {
	tpu.mutation.SetInstanceID(id)
	return tpu
}

// SetNillableInstanceID sets the "instance" edge to the InstanceResource entity by ID if the given value is not nil.
func (tpu *TelemetryProfileUpdate) SetNillableInstanceID(id *int) *TelemetryProfileUpdate {
	if id != nil {
		tpu = tpu.SetInstanceID(*id)
	}
	return tpu
}

// SetInstance sets the "instance" edge to the InstanceResource entity.
func (tpu *TelemetryProfileUpdate) SetInstance(i *InstanceResource) *TelemetryProfileUpdate {
	return tpu.SetInstanceID(i.ID)
}

// SetGroupID sets the "group" edge to the TelemetryGroupResource entity by ID.
func (tpu *TelemetryProfileUpdate) SetGroupID(id int) *TelemetryProfileUpdate {
	tpu.mutation.SetGroupID(id)
	return tpu
}

// SetGroup sets the "group" edge to the TelemetryGroupResource entity.
func (tpu *TelemetryProfileUpdate) SetGroup(t *TelemetryGroupResource) *TelemetryProfileUpdate {
	return tpu.SetGroupID(t.ID)
}

// Mutation returns the TelemetryProfileMutation object of the builder.
func (tpu *TelemetryProfileUpdate) Mutation() *TelemetryProfileMutation {
	return tpu.mutation
}

// ClearRegion clears the "region" edge to the RegionResource entity.
func (tpu *TelemetryProfileUpdate) ClearRegion() *TelemetryProfileUpdate {
	tpu.mutation.ClearRegion()
	return tpu
}

// ClearSite clears the "site" edge to the SiteResource entity.
func (tpu *TelemetryProfileUpdate) ClearSite() *TelemetryProfileUpdate {
	tpu.mutation.ClearSite()
	return tpu
}

// ClearInstance clears the "instance" edge to the InstanceResource entity.
func (tpu *TelemetryProfileUpdate) ClearInstance() *TelemetryProfileUpdate {
	tpu.mutation.ClearInstance()
	return tpu
}

// ClearGroup clears the "group" edge to the TelemetryGroupResource entity.
func (tpu *TelemetryProfileUpdate) ClearGroup() *TelemetryProfileUpdate {
	tpu.mutation.ClearGroup()
	return tpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tpu *TelemetryProfileUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, TelemetryProfileMutation](ctx, tpu.sqlSave, tpu.mutation, tpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tpu *TelemetryProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := tpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tpu *TelemetryProfileUpdate) Exec(ctx context.Context) error {
	_, err := tpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpu *TelemetryProfileUpdate) ExecX(ctx context.Context) {
	if err := tpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tpu *TelemetryProfileUpdate) check() error {
	if v, ok := tpu.mutation.Kind(); ok {
		if err := telemetryprofile.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "TelemetryProfile.kind": %w`, err)}
		}
	}
	if v, ok := tpu.mutation.LogLevel(); ok {
		if err := telemetryprofile.LogLevelValidator(v); err != nil {
			return &ValidationError{Name: "log_level", err: fmt.Errorf(`ent: validator failed for field "TelemetryProfile.log_level": %w`, err)}
		}
	}
	if _, ok := tpu.mutation.GroupID(); tpu.mutation.GroupCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TelemetryProfile.group"`)
	}
	return nil
}

func (tpu *TelemetryProfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(telemetryprofile.Table, telemetryprofile.Columns, sqlgraph.NewFieldSpec(telemetryprofile.FieldID, field.TypeInt))
	if ps := tpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tpu.mutation.ResourceID(); ok {
		_spec.SetField(telemetryprofile.FieldResourceID, field.TypeString, value)
	}
	if value, ok := tpu.mutation.Kind(); ok {
		_spec.SetField(telemetryprofile.FieldKind, field.TypeEnum, value)
	}
	if value, ok := tpu.mutation.MetricsInterval(); ok {
		_spec.SetField(telemetryprofile.FieldMetricsInterval, field.TypeUint32, value)
	}
	if value, ok := tpu.mutation.AddedMetricsInterval(); ok {
		_spec.AddField(telemetryprofile.FieldMetricsInterval, field.TypeUint32, value)
	}
	if tpu.mutation.MetricsIntervalCleared() {
		_spec.ClearField(telemetryprofile.FieldMetricsInterval, field.TypeUint32)
	}
	if value, ok := tpu.mutation.LogLevel(); ok {
		_spec.SetField(telemetryprofile.FieldLogLevel, field.TypeEnum, value)
	}
	if tpu.mutation.LogLevelCleared() {
		_spec.ClearField(telemetryprofile.FieldLogLevel, field.TypeEnum)
	}
	if tpu.mutation.RegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   telemetryprofile.RegionTable,
			Columns: []string{telemetryprofile.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpu.mutation.RegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   telemetryprofile.RegionTable,
			Columns: []string{telemetryprofile.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpu.mutation.SiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   telemetryprofile.SiteTable,
			Columns: []string{telemetryprofile.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpu.mutation.SiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   telemetryprofile.SiteTable,
			Columns: []string{telemetryprofile.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpu.mutation.InstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   telemetryprofile.InstanceTable,
			Columns: []string{telemetryprofile.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpu.mutation.InstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   telemetryprofile.InstanceTable,
			Columns: []string{telemetryprofile.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpu.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   telemetryprofile.GroupTable,
			Columns: []string{telemetryprofile.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(telemetrygroupresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpu.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   telemetryprofile.GroupTable,
			Columns: []string{telemetryprofile.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(telemetrygroupresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{telemetryprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tpu.mutation.done = true
	return n, nil
}

// TelemetryProfileUpdateOne is the builder for updating a single TelemetryProfile entity.
type TelemetryProfileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TelemetryProfileMutation
}

// SetResourceID sets the "resource_id" field.
func (tpuo *TelemetryProfileUpdateOne) SetResourceID(s string) *TelemetryProfileUpdateOne {
	tpuo.mutation.SetResourceID(s)
	return tpuo
}

// SetKind sets the "kind" field.
func (tpuo *TelemetryProfileUpdateOne) SetKind(t telemetryprofile.Kind) *TelemetryProfileUpdateOne {
	tpuo.mutation.SetKind(t)
	return tpuo
}

// SetMetricsInterval sets the "metrics_interval" field.
func (tpuo *TelemetryProfileUpdateOne) SetMetricsInterval(u uint32) *TelemetryProfileUpdateOne {
	tpuo.mutation.ResetMetricsInterval()
	tpuo.mutation.SetMetricsInterval(u)
	return tpuo
}

// SetNillableMetricsInterval sets the "metrics_interval" field if the given value is not nil.
func (tpuo *TelemetryProfileUpdateOne) SetNillableMetricsInterval(u *uint32) *TelemetryProfileUpdateOne {
	if u != nil {
		tpuo.SetMetricsInterval(*u)
	}
	return tpuo
}

// AddMetricsInterval adds u to the "metrics_interval" field.
func (tpuo *TelemetryProfileUpdateOne) AddMetricsInterval(u int32) *TelemetryProfileUpdateOne {
	tpuo.mutation.AddMetricsInterval(u)
	return tpuo
}

// ClearMetricsInterval clears the value of the "metrics_interval" field.
func (tpuo *TelemetryProfileUpdateOne) ClearMetricsInterval() *TelemetryProfileUpdateOne {
	tpuo.mutation.ClearMetricsInterval()
	return tpuo
}

// SetLogLevel sets the "log_level" field.
func (tpuo *TelemetryProfileUpdateOne) SetLogLevel(tl telemetryprofile.LogLevel) *TelemetryProfileUpdateOne {
	tpuo.mutation.SetLogLevel(tl)
	return tpuo
}

// SetNillableLogLevel sets the "log_level" field if the given value is not nil.
func (tpuo *TelemetryProfileUpdateOne) SetNillableLogLevel(tl *telemetryprofile.LogLevel) *TelemetryProfileUpdateOne {
	if tl != nil {
		tpuo.SetLogLevel(*tl)
	}
	return tpuo
}

// ClearLogLevel clears the value of the "log_level" field.
func (tpuo *TelemetryProfileUpdateOne) ClearLogLevel() *TelemetryProfileUpdateOne {
	tpuo.mutation.ClearLogLevel()
	return tpuo
}

// SetRegionID sets the "region" edge to the RegionResource entity by ID.
func (tpuo *TelemetryProfileUpdateOne) SetRegionID(id int) *TelemetryProfileUpdateOne {
	tpuo.mutation.SetRegionID(id)
	return tpuo
}

// SetNillableRegionID sets the "region" edge to the RegionResource entity by ID if the given value is not nil.
func (tpuo *TelemetryProfileUpdateOne) SetNillableRegionID(id *int) *TelemetryProfileUpdateOne {
	if id != nil {
		tpuo = tpuo.SetRegionID(*id)
	}
	return tpuo
}

// SetRegion sets the "region" edge to the RegionResource entity.
func (tpuo *TelemetryProfileUpdateOne) SetRegion(r *RegionResource) *TelemetryProfileUpdateOne {
	return tpuo.SetRegionID(r.ID)
}

// SetSiteID sets the "site" edge to the SiteResource entity by ID.
func (tpuo *TelemetryProfileUpdateOne) SetSiteID(id int) *TelemetryProfileUpdateOne {
	tpuo.mutation.SetSiteID(id)
	return tpuo
}

// SetNillableSiteID sets the "site" edge to the SiteResource entity by ID if the given value is not nil.
func (tpuo *TelemetryProfileUpdateOne) SetNillableSiteID(id *int) *TelemetryProfileUpdateOne {
	if id != nil {
		tpuo = tpuo.SetSiteID(*id)
	}
	return tpuo
}

// SetSite sets the "site" edge to the SiteResource entity.
func (tpuo *TelemetryProfileUpdateOne) SetSite(s *SiteResource) *TelemetryProfileUpdateOne {
	return tpuo.SetSiteID(s.ID)
}

// SetInstanceID sets the "instance" edge to the InstanceResource entity by ID.
func (tpuo *TelemetryProfileUpdateOne) SetInstanceID(id int) *TelemetryProfileUpdateOne {
	tpuo.mutation.SetInstanceID(id)
	return tpuo
}

// SetNillableInstanceID sets the "instance" edge to the InstanceResource entity by ID if the given value is not nil.
func (tpuo *TelemetryProfileUpdateOne) SetNillableInstanceID(id *int) *TelemetryProfileUpdateOne {
	if id != nil {
		tpuo = tpuo.SetInstanceID(*id)
	}
	return tpuo
}

// SetInstance sets the "instance" edge to the InstanceResource entity.
func (tpuo *TelemetryProfileUpdateOne) SetInstance(i *InstanceResource) *TelemetryProfileUpdateOne {
	return tpuo.SetInstanceID(i.ID)
}

// SetGroupID sets the "group" edge to the TelemetryGroupResource entity by ID.
func (tpuo *TelemetryProfileUpdateOne) SetGroupID(id int) *TelemetryProfileUpdateOne {
	tpuo.mutation.SetGroupID(id)
	return tpuo
}

// SetGroup sets the "group" edge to the TelemetryGroupResource entity.
func (tpuo *TelemetryProfileUpdateOne) SetGroup(t *TelemetryGroupResource) *TelemetryProfileUpdateOne {
	return tpuo.SetGroupID(t.ID)
}

// Mutation returns the TelemetryProfileMutation object of the builder.
func (tpuo *TelemetryProfileUpdateOne) Mutation() *TelemetryProfileMutation {
	return tpuo.mutation
}

// ClearRegion clears the "region" edge to the RegionResource entity.
func (tpuo *TelemetryProfileUpdateOne) ClearRegion() *TelemetryProfileUpdateOne {
	tpuo.mutation.ClearRegion()
	return tpuo
}

// ClearSite clears the "site" edge to the SiteResource entity.
func (tpuo *TelemetryProfileUpdateOne) ClearSite() *TelemetryProfileUpdateOne {
	tpuo.mutation.ClearSite()
	return tpuo
}

// ClearInstance clears the "instance" edge to the InstanceResource entity.
func (tpuo *TelemetryProfileUpdateOne) ClearInstance() *TelemetryProfileUpdateOne {
	tpuo.mutation.ClearInstance()
	return tpuo
}

// ClearGroup clears the "group" edge to the TelemetryGroupResource entity.
func (tpuo *TelemetryProfileUpdateOne) ClearGroup() *TelemetryProfileUpdateOne {
	tpuo.mutation.ClearGroup()
	return tpuo
}

// Where appends a list predicates to the TelemetryProfileUpdate builder.
func (tpuo *TelemetryProfileUpdateOne) Where(ps ...predicate.TelemetryProfile) *TelemetryProfileUpdateOne {
	tpuo.mutation.Where(ps...)
	return tpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tpuo *TelemetryProfileUpdateOne) Select(field string, fields ...string) *TelemetryProfileUpdateOne {
	tpuo.fields = append([]string{field}, fields...)
	return tpuo
}

// Save executes the query and returns the updated TelemetryProfile entity.
func (tpuo *TelemetryProfileUpdateOne) Save(ctx context.Context) (*TelemetryProfile, error) {
	return withHooks[*TelemetryProfile, TelemetryProfileMutation](ctx, tpuo.sqlSave, tpuo.mutation, tpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tpuo *TelemetryProfileUpdateOne) SaveX(ctx context.Context) *TelemetryProfile {
	node, err := tpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tpuo *TelemetryProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := tpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpuo *TelemetryProfileUpdateOne) ExecX(ctx context.Context) {
	if err := tpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tpuo *TelemetryProfileUpdateOne) check() error {
	if v, ok := tpuo.mutation.Kind(); ok {
		if err := telemetryprofile.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "TelemetryProfile.kind": %w`, err)}
		}
	}
	if v, ok := tpuo.mutation.LogLevel(); ok {
		if err := telemetryprofile.LogLevelValidator(v); err != nil {
			return &ValidationError{Name: "log_level", err: fmt.Errorf(`ent: validator failed for field "TelemetryProfile.log_level": %w`, err)}
		}
	}
	if _, ok := tpuo.mutation.GroupID(); tpuo.mutation.GroupCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TelemetryProfile.group"`)
	}
	return nil
}

func (tpuo *TelemetryProfileUpdateOne) sqlSave(ctx context.Context) (_node *TelemetryProfile, err error) {
	if err := tpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(telemetryprofile.Table, telemetryprofile.Columns, sqlgraph.NewFieldSpec(telemetryprofile.FieldID, field.TypeInt))
	id, ok := tpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TelemetryProfile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, telemetryprofile.FieldID)
		for _, f := range fields {
			if !telemetryprofile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != telemetryprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tpuo.mutation.ResourceID(); ok {
		_spec.SetField(telemetryprofile.FieldResourceID, field.TypeString, value)
	}
	if value, ok := tpuo.mutation.Kind(); ok {
		_spec.SetField(telemetryprofile.FieldKind, field.TypeEnum, value)
	}
	if value, ok := tpuo.mutation.MetricsInterval(); ok {
		_spec.SetField(telemetryprofile.FieldMetricsInterval, field.TypeUint32, value)
	}
	if value, ok := tpuo.mutation.AddedMetricsInterval(); ok {
		_spec.AddField(telemetryprofile.FieldMetricsInterval, field.TypeUint32, value)
	}
	if tpuo.mutation.MetricsIntervalCleared() {
		_spec.ClearField(telemetryprofile.FieldMetricsInterval, field.TypeUint32)
	}
	if value, ok := tpuo.mutation.LogLevel(); ok {
		_spec.SetField(telemetryprofile.FieldLogLevel, field.TypeEnum, value)
	}
	if tpuo.mutation.LogLevelCleared() {
		_spec.ClearField(telemetryprofile.FieldLogLevel, field.TypeEnum)
	}
	if tpuo.mutation.RegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   telemetryprofile.RegionTable,
			Columns: []string{telemetryprofile.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpuo.mutation.RegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   telemetryprofile.RegionTable,
			Columns: []string{telemetryprofile.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpuo.mutation.SiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   telemetryprofile.SiteTable,
			Columns: []string{telemetryprofile.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpuo.mutation.SiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   telemetryprofile.SiteTable,
			Columns: []string{telemetryprofile.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpuo.mutation.InstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   telemetryprofile.InstanceTable,
			Columns: []string{telemetryprofile.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpuo.mutation.InstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   telemetryprofile.InstanceTable,
			Columns: []string{telemetryprofile.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpuo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   telemetryprofile.GroupTable,
			Columns: []string{telemetryprofile.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(telemetrygroupresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpuo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   telemetryprofile.GroupTable,
			Columns: []string{telemetryprofile.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(telemetrygroupresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TelemetryProfile{config: tpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{telemetryprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tpuo.mutation.done = true
	return _node, nil
}
