// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/endpointresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/netlinkresource"
)

// NetlinkResourceCreate is the builder for creating a NetlinkResource entity.
type NetlinkResourceCreate struct {
	config
	mutation *NetlinkResourceMutation
	hooks    []Hook
}

// SetResourceID sets the "resource_id" field.
func (nrc *NetlinkResourceCreate) SetResourceID(s string) *NetlinkResourceCreate {
	nrc.mutation.SetResourceID(s)
	return nrc
}

// SetKind sets the "kind" field.
func (nrc *NetlinkResourceCreate) SetKind(s string) *NetlinkResourceCreate {
	nrc.mutation.SetKind(s)
	return nrc
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (nrc *NetlinkResourceCreate) SetNillableKind(s *string) *NetlinkResourceCreate {
	if s != nil {
		nrc.SetKind(*s)
	}
	return nrc
}

// SetDescription sets the "description" field.
func (nrc *NetlinkResourceCreate) SetDescription(s string) *NetlinkResourceCreate {
	nrc.mutation.SetDescription(s)
	return nrc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (nrc *NetlinkResourceCreate) SetNillableDescription(s *string) *NetlinkResourceCreate {
	if s != nil {
		nrc.SetDescription(*s)
	}
	return nrc
}

// SetDesiredState sets the "desired_state" field.
func (nrc *NetlinkResourceCreate) SetDesiredState(ns netlinkresource.DesiredState) *NetlinkResourceCreate {
	nrc.mutation.SetDesiredState(ns)
	return nrc
}

// SetCurrentState sets the "current_state" field.
func (nrc *NetlinkResourceCreate) SetCurrentState(ns netlinkresource.CurrentState) *NetlinkResourceCreate {
	nrc.mutation.SetCurrentState(ns)
	return nrc
}

// SetNillableCurrentState sets the "current_state" field if the given value is not nil.
func (nrc *NetlinkResourceCreate) SetNillableCurrentState(ns *netlinkresource.CurrentState) *NetlinkResourceCreate {
	if ns != nil {
		nrc.SetCurrentState(*ns)
	}
	return nrc
}

// SetProviderStatus sets the "provider_status" field.
func (nrc *NetlinkResourceCreate) SetProviderStatus(s string) *NetlinkResourceCreate {
	nrc.mutation.SetProviderStatus(s)
	return nrc
}

// SetNillableProviderStatus sets the "provider_status" field if the given value is not nil.
func (nrc *NetlinkResourceCreate) SetNillableProviderStatus(s *string) *NetlinkResourceCreate {
	if s != nil {
		nrc.SetProviderStatus(*s)
	}
	return nrc
}

// SetSrcID sets the "src" edge to the EndpointResource entity by ID.
func (nrc *NetlinkResourceCreate) SetSrcID(id int) *NetlinkResourceCreate {
	nrc.mutation.SetSrcID(id)
	return nrc
}

// SetNillableSrcID sets the "src" edge to the EndpointResource entity by ID if the given value is not nil.
func (nrc *NetlinkResourceCreate) SetNillableSrcID(id *int) *NetlinkResourceCreate {
	if id != nil {
		nrc = nrc.SetSrcID(*id)
	}
	return nrc
}

// SetSrc sets the "src" edge to the EndpointResource entity.
func (nrc *NetlinkResourceCreate) SetSrc(e *EndpointResource) *NetlinkResourceCreate {
	return nrc.SetSrcID(e.ID)
}

// SetDstID sets the "dst" edge to the EndpointResource entity by ID.
func (nrc *NetlinkResourceCreate) SetDstID(id int) *NetlinkResourceCreate {
	nrc.mutation.SetDstID(id)
	return nrc
}

// SetNillableDstID sets the "dst" edge to the EndpointResource entity by ID if the given value is not nil.
func (nrc *NetlinkResourceCreate) SetNillableDstID(id *int) *NetlinkResourceCreate {
	if id != nil {
		nrc = nrc.SetDstID(*id)
	}
	return nrc
}

// SetDst sets the "dst" edge to the EndpointResource entity.
func (nrc *NetlinkResourceCreate) SetDst(e *EndpointResource) *NetlinkResourceCreate {
	return nrc.SetDstID(e.ID)
}

// Mutation returns the NetlinkResourceMutation object of the builder.
func (nrc *NetlinkResourceCreate) Mutation() *NetlinkResourceMutation {
	return nrc.mutation
}

// Save creates the NetlinkResource in the database.
func (nrc *NetlinkResourceCreate) Save(ctx context.Context) (*NetlinkResource, error) {
	return withHooks[*NetlinkResource, NetlinkResourceMutation](ctx, nrc.sqlSave, nrc.mutation, nrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nrc *NetlinkResourceCreate) SaveX(ctx context.Context) *NetlinkResource {
	v, err := nrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nrc *NetlinkResourceCreate) Exec(ctx context.Context) error {
	_, err := nrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nrc *NetlinkResourceCreate) ExecX(ctx context.Context) {
	if err := nrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nrc *NetlinkResourceCreate) check() error {
	if _, ok := nrc.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource_id", err: errors.New(`ent: missing required field "NetlinkResource.resource_id"`)}
	}
	if _, ok := nrc.mutation.DesiredState(); !ok {
		return &ValidationError{Name: "desired_state", err: errors.New(`ent: missing required field "NetlinkResource.desired_state"`)}
	}
	if v, ok := nrc.mutation.DesiredState(); ok {
		if err := netlinkresource.DesiredStateValidator(v); err != nil {
			return &ValidationError{Name: "desired_state", err: fmt.Errorf(`ent: validator failed for field "NetlinkResource.desired_state": %w`, err)}
		}
	}
	if v, ok := nrc.mutation.CurrentState(); ok {
		if err := netlinkresource.CurrentStateValidator(v); err != nil {
			return &ValidationError{Name: "current_state", err: fmt.Errorf(`ent: validator failed for field "NetlinkResource.current_state": %w`, err)}
		}
	}
	return nil
}

func (nrc *NetlinkResourceCreate) sqlSave(ctx context.Context) (*NetlinkResource, error) {
	if err := nrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	nrc.mutation.id = &_node.ID
	nrc.mutation.done = true
	return _node, nil
}

func (nrc *NetlinkResourceCreate) createSpec() (*NetlinkResource, *sqlgraph.CreateSpec) {
	var (
		_node = &NetlinkResource{config: nrc.config}
		_spec = sqlgraph.NewCreateSpec(netlinkresource.Table, sqlgraph.NewFieldSpec(netlinkresource.FieldID, field.TypeInt))
	)
	if value, ok := nrc.mutation.ResourceID(); ok {
		_spec.SetField(netlinkresource.FieldResourceID, field.TypeString, value)
		_node.ResourceID = value
	}
	if value, ok := nrc.mutation.Kind(); ok {
		_spec.SetField(netlinkresource.FieldKind, field.TypeString, value)
		_node.Kind = value
	}
	if value, ok := nrc.mutation.Description(); ok {
		_spec.SetField(netlinkresource.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := nrc.mutation.DesiredState(); ok {
		_spec.SetField(netlinkresource.FieldDesiredState, field.TypeEnum, value)
		_node.DesiredState = value
	}
	if value, ok := nrc.mutation.CurrentState(); ok {
		_spec.SetField(netlinkresource.FieldCurrentState, field.TypeEnum, value)
		_node.CurrentState = value
	}
	if value, ok := nrc.mutation.ProviderStatus(); ok {
		_spec.SetField(netlinkresource.FieldProviderStatus, field.TypeString, value)
		_node.ProviderStatus = value
	}
	if nodes := nrc.mutation.SrcIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   netlinkresource.SrcTable,
			Columns: []string{netlinkresource.SrcColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(endpointresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.netlink_resource_src = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nrc.mutation.DstIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   netlinkresource.DstTable,
			Columns: []string{netlinkresource.DstColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(endpointresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.netlink_resource_dst = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NetlinkResourceCreateBulk is the builder for creating many NetlinkResource entities in bulk.
type NetlinkResourceCreateBulk struct {
	config
	builders []*NetlinkResourceCreate
}

// Save creates the NetlinkResource entities in the database.
func (nrcb *NetlinkResourceCreateBulk) Save(ctx context.Context) ([]*NetlinkResource, error) {
	specs := make([]*sqlgraph.CreateSpec, len(nrcb.builders))
	nodes := make([]*NetlinkResource, len(nrcb.builders))
	mutators := make([]Mutator, len(nrcb.builders))
	for i := range nrcb.builders {
		func(i int, root context.Context) {
			builder := nrcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NetlinkResourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nrcb *NetlinkResourceCreateBulk) SaveX(ctx context.Context) []*NetlinkResource {
	v, err := nrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nrcb *NetlinkResourceCreateBulk) Exec(ctx context.Context) error {
	_, err := nrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nrcb *NetlinkResourceCreateBulk) ExecX(ctx context.Context) {
	if err := nrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
