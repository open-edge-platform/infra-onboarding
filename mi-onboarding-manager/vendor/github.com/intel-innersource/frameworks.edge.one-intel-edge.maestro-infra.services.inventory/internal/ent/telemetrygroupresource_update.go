// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/telemetrygroupresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/telemetryprofile"
)

// TelemetryGroupResourceUpdate is the builder for updating TelemetryGroupResource entities.
type TelemetryGroupResourceUpdate struct {
	config
	hooks    []Hook
	mutation *TelemetryGroupResourceMutation
}

// Where appends a list predicates to the TelemetryGroupResourceUpdate builder.
func (tgru *TelemetryGroupResourceUpdate) Where(ps ...predicate.TelemetryGroupResource) *TelemetryGroupResourceUpdate {
	tgru.mutation.Where(ps...)
	return tgru
}

// SetResourceID sets the "resource_id" field.
func (tgru *TelemetryGroupResourceUpdate) SetResourceID(s string) *TelemetryGroupResourceUpdate {
	tgru.mutation.SetResourceID(s)
	return tgru
}

// SetName sets the "name" field.
func (tgru *TelemetryGroupResourceUpdate) SetName(s string) *TelemetryGroupResourceUpdate {
	tgru.mutation.SetName(s)
	return tgru
}

// SetKind sets the "kind" field.
func (tgru *TelemetryGroupResourceUpdate) SetKind(t telemetrygroupresource.Kind) *TelemetryGroupResourceUpdate {
	tgru.mutation.SetKind(t)
	return tgru
}

// SetCollectorKind sets the "collector_kind" field.
func (tgru *TelemetryGroupResourceUpdate) SetCollectorKind(tk telemetrygroupresource.CollectorKind) *TelemetryGroupResourceUpdate {
	tgru.mutation.SetCollectorKind(tk)
	return tgru
}

// SetGroups sets the "groups" field.
func (tgru *TelemetryGroupResourceUpdate) SetGroups(s string) *TelemetryGroupResourceUpdate {
	tgru.mutation.SetGroups(s)
	return tgru
}

// AddProfileIDs adds the "profiles" edge to the TelemetryProfile entity by IDs.
func (tgru *TelemetryGroupResourceUpdate) AddProfileIDs(ids ...int) *TelemetryGroupResourceUpdate {
	tgru.mutation.AddProfileIDs(ids...)
	return tgru
}

// AddProfiles adds the "profiles" edges to the TelemetryProfile entity.
func (tgru *TelemetryGroupResourceUpdate) AddProfiles(t ...*TelemetryProfile) *TelemetryGroupResourceUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tgru.AddProfileIDs(ids...)
}

// Mutation returns the TelemetryGroupResourceMutation object of the builder.
func (tgru *TelemetryGroupResourceUpdate) Mutation() *TelemetryGroupResourceMutation {
	return tgru.mutation
}

// ClearProfiles clears all "profiles" edges to the TelemetryProfile entity.
func (tgru *TelemetryGroupResourceUpdate) ClearProfiles() *TelemetryGroupResourceUpdate {
	tgru.mutation.ClearProfiles()
	return tgru
}

// RemoveProfileIDs removes the "profiles" edge to TelemetryProfile entities by IDs.
func (tgru *TelemetryGroupResourceUpdate) RemoveProfileIDs(ids ...int) *TelemetryGroupResourceUpdate {
	tgru.mutation.RemoveProfileIDs(ids...)
	return tgru
}

// RemoveProfiles removes "profiles" edges to TelemetryProfile entities.
func (tgru *TelemetryGroupResourceUpdate) RemoveProfiles(t ...*TelemetryProfile) *TelemetryGroupResourceUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tgru.RemoveProfileIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tgru *TelemetryGroupResourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, TelemetryGroupResourceMutation](ctx, tgru.sqlSave, tgru.mutation, tgru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tgru *TelemetryGroupResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := tgru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tgru *TelemetryGroupResourceUpdate) Exec(ctx context.Context) error {
	_, err := tgru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tgru *TelemetryGroupResourceUpdate) ExecX(ctx context.Context) {
	if err := tgru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tgru *TelemetryGroupResourceUpdate) check() error {
	if v, ok := tgru.mutation.Kind(); ok {
		if err := telemetrygroupresource.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "TelemetryGroupResource.kind": %w`, err)}
		}
	}
	if v, ok := tgru.mutation.CollectorKind(); ok {
		if err := telemetrygroupresource.CollectorKindValidator(v); err != nil {
			return &ValidationError{Name: "collector_kind", err: fmt.Errorf(`ent: validator failed for field "TelemetryGroupResource.collector_kind": %w`, err)}
		}
	}
	return nil
}

func (tgru *TelemetryGroupResourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tgru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(telemetrygroupresource.Table, telemetrygroupresource.Columns, sqlgraph.NewFieldSpec(telemetrygroupresource.FieldID, field.TypeInt))
	if ps := tgru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tgru.mutation.ResourceID(); ok {
		_spec.SetField(telemetrygroupresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := tgru.mutation.Name(); ok {
		_spec.SetField(telemetrygroupresource.FieldName, field.TypeString, value)
	}
	if value, ok := tgru.mutation.Kind(); ok {
		_spec.SetField(telemetrygroupresource.FieldKind, field.TypeEnum, value)
	}
	if value, ok := tgru.mutation.CollectorKind(); ok {
		_spec.SetField(telemetrygroupresource.FieldCollectorKind, field.TypeEnum, value)
	}
	if value, ok := tgru.mutation.Groups(); ok {
		_spec.SetField(telemetrygroupresource.FieldGroups, field.TypeString, value)
	}
	if tgru.mutation.ProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   telemetrygroupresource.ProfilesTable,
			Columns: []string{telemetrygroupresource.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(telemetryprofile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tgru.mutation.RemovedProfilesIDs(); len(nodes) > 0 && !tgru.mutation.ProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   telemetrygroupresource.ProfilesTable,
			Columns: []string{telemetrygroupresource.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(telemetryprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tgru.mutation.ProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   telemetrygroupresource.ProfilesTable,
			Columns: []string{telemetrygroupresource.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(telemetryprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tgru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{telemetrygroupresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tgru.mutation.done = true
	return n, nil
}

// TelemetryGroupResourceUpdateOne is the builder for updating a single TelemetryGroupResource entity.
type TelemetryGroupResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TelemetryGroupResourceMutation
}

// SetResourceID sets the "resource_id" field.
func (tgruo *TelemetryGroupResourceUpdateOne) SetResourceID(s string) *TelemetryGroupResourceUpdateOne {
	tgruo.mutation.SetResourceID(s)
	return tgruo
}

// SetName sets the "name" field.
func (tgruo *TelemetryGroupResourceUpdateOne) SetName(s string) *TelemetryGroupResourceUpdateOne {
	tgruo.mutation.SetName(s)
	return tgruo
}

// SetKind sets the "kind" field.
func (tgruo *TelemetryGroupResourceUpdateOne) SetKind(t telemetrygroupresource.Kind) *TelemetryGroupResourceUpdateOne {
	tgruo.mutation.SetKind(t)
	return tgruo
}

// SetCollectorKind sets the "collector_kind" field.
func (tgruo *TelemetryGroupResourceUpdateOne) SetCollectorKind(tk telemetrygroupresource.CollectorKind) *TelemetryGroupResourceUpdateOne {
	tgruo.mutation.SetCollectorKind(tk)
	return tgruo
}

// SetGroups sets the "groups" field.
func (tgruo *TelemetryGroupResourceUpdateOne) SetGroups(s string) *TelemetryGroupResourceUpdateOne {
	tgruo.mutation.SetGroups(s)
	return tgruo
}

// AddProfileIDs adds the "profiles" edge to the TelemetryProfile entity by IDs.
func (tgruo *TelemetryGroupResourceUpdateOne) AddProfileIDs(ids ...int) *TelemetryGroupResourceUpdateOne {
	tgruo.mutation.AddProfileIDs(ids...)
	return tgruo
}

// AddProfiles adds the "profiles" edges to the TelemetryProfile entity.
func (tgruo *TelemetryGroupResourceUpdateOne) AddProfiles(t ...*TelemetryProfile) *TelemetryGroupResourceUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tgruo.AddProfileIDs(ids...)
}

// Mutation returns the TelemetryGroupResourceMutation object of the builder.
func (tgruo *TelemetryGroupResourceUpdateOne) Mutation() *TelemetryGroupResourceMutation {
	return tgruo.mutation
}

// ClearProfiles clears all "profiles" edges to the TelemetryProfile entity.
func (tgruo *TelemetryGroupResourceUpdateOne) ClearProfiles() *TelemetryGroupResourceUpdateOne {
	tgruo.mutation.ClearProfiles()
	return tgruo
}

// RemoveProfileIDs removes the "profiles" edge to TelemetryProfile entities by IDs.
func (tgruo *TelemetryGroupResourceUpdateOne) RemoveProfileIDs(ids ...int) *TelemetryGroupResourceUpdateOne {
	tgruo.mutation.RemoveProfileIDs(ids...)
	return tgruo
}

// RemoveProfiles removes "profiles" edges to TelemetryProfile entities.
func (tgruo *TelemetryGroupResourceUpdateOne) RemoveProfiles(t ...*TelemetryProfile) *TelemetryGroupResourceUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tgruo.RemoveProfileIDs(ids...)
}

// Where appends a list predicates to the TelemetryGroupResourceUpdate builder.
func (tgruo *TelemetryGroupResourceUpdateOne) Where(ps ...predicate.TelemetryGroupResource) *TelemetryGroupResourceUpdateOne {
	tgruo.mutation.Where(ps...)
	return tgruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tgruo *TelemetryGroupResourceUpdateOne) Select(field string, fields ...string) *TelemetryGroupResourceUpdateOne {
	tgruo.fields = append([]string{field}, fields...)
	return tgruo
}

// Save executes the query and returns the updated TelemetryGroupResource entity.
func (tgruo *TelemetryGroupResourceUpdateOne) Save(ctx context.Context) (*TelemetryGroupResource, error) {
	return withHooks[*TelemetryGroupResource, TelemetryGroupResourceMutation](ctx, tgruo.sqlSave, tgruo.mutation, tgruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tgruo *TelemetryGroupResourceUpdateOne) SaveX(ctx context.Context) *TelemetryGroupResource {
	node, err := tgruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tgruo *TelemetryGroupResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := tgruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tgruo *TelemetryGroupResourceUpdateOne) ExecX(ctx context.Context) {
	if err := tgruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tgruo *TelemetryGroupResourceUpdateOne) check() error {
	if v, ok := tgruo.mutation.Kind(); ok {
		if err := telemetrygroupresource.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "TelemetryGroupResource.kind": %w`, err)}
		}
	}
	if v, ok := tgruo.mutation.CollectorKind(); ok {
		if err := telemetrygroupresource.CollectorKindValidator(v); err != nil {
			return &ValidationError{Name: "collector_kind", err: fmt.Errorf(`ent: validator failed for field "TelemetryGroupResource.collector_kind": %w`, err)}
		}
	}
	return nil
}

func (tgruo *TelemetryGroupResourceUpdateOne) sqlSave(ctx context.Context) (_node *TelemetryGroupResource, err error) {
	if err := tgruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(telemetrygroupresource.Table, telemetrygroupresource.Columns, sqlgraph.NewFieldSpec(telemetrygroupresource.FieldID, field.TypeInt))
	id, ok := tgruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TelemetryGroupResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tgruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, telemetrygroupresource.FieldID)
		for _, f := range fields {
			if !telemetrygroupresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != telemetrygroupresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tgruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tgruo.mutation.ResourceID(); ok {
		_spec.SetField(telemetrygroupresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := tgruo.mutation.Name(); ok {
		_spec.SetField(telemetrygroupresource.FieldName, field.TypeString, value)
	}
	if value, ok := tgruo.mutation.Kind(); ok {
		_spec.SetField(telemetrygroupresource.FieldKind, field.TypeEnum, value)
	}
	if value, ok := tgruo.mutation.CollectorKind(); ok {
		_spec.SetField(telemetrygroupresource.FieldCollectorKind, field.TypeEnum, value)
	}
	if value, ok := tgruo.mutation.Groups(); ok {
		_spec.SetField(telemetrygroupresource.FieldGroups, field.TypeString, value)
	}
	if tgruo.mutation.ProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   telemetrygroupresource.ProfilesTable,
			Columns: []string{telemetrygroupresource.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(telemetryprofile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tgruo.mutation.RemovedProfilesIDs(); len(nodes) > 0 && !tgruo.mutation.ProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   telemetrygroupresource.ProfilesTable,
			Columns: []string{telemetrygroupresource.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(telemetryprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tgruo.mutation.ProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   telemetrygroupresource.ProfilesTable,
			Columns: []string{telemetrygroupresource.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(telemetryprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TelemetryGroupResource{config: tgruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tgruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{telemetrygroupresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tgruo.mutation.done = true
	return _node, nil
}
