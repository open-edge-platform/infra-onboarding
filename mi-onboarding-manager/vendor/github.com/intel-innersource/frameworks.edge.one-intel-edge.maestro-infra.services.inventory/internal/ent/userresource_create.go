// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/userresource"
)

// UserResourceCreate is the builder for creating a UserResource entity.
type UserResourceCreate struct {
	config
	mutation *UserResourceMutation
	hooks    []Hook
}

// SetResourceID sets the "resource_id" field.
func (urc *UserResourceCreate) SetResourceID(s string) *UserResourceCreate {
	urc.mutation.SetResourceID(s)
	return urc
}

// SetKind sets the "kind" field.
func (urc *UserResourceCreate) SetKind(s string) *UserResourceCreate {
	urc.mutation.SetKind(s)
	return urc
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (urc *UserResourceCreate) SetNillableKind(s *string) *UserResourceCreate {
	if s != nil {
		urc.SetKind(*s)
	}
	return urc
}

// SetName sets the "name" field.
func (urc *UserResourceCreate) SetName(s string) *UserResourceCreate {
	urc.mutation.SetName(s)
	return urc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (urc *UserResourceCreate) SetNillableName(s *string) *UserResourceCreate {
	if s != nil {
		urc.SetName(*s)
	}
	return urc
}

// SetUsername sets the "username" field.
func (urc *UserResourceCreate) SetUsername(s string) *UserResourceCreate {
	urc.mutation.SetUsername(s)
	return urc
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (urc *UserResourceCreate) SetNillableUsername(s *string) *UserResourceCreate {
	if s != nil {
		urc.SetUsername(*s)
	}
	return urc
}

// SetSSHPubkey sets the "ssh_pubkey" field.
func (urc *UserResourceCreate) SetSSHPubkey(s string) *UserResourceCreate {
	urc.mutation.SetSSHPubkey(s)
	return urc
}

// SetNillableSSHPubkey sets the "ssh_pubkey" field if the given value is not nil.
func (urc *UserResourceCreate) SetNillableSSHPubkey(s *string) *UserResourceCreate {
	if s != nil {
		urc.SetSSHPubkey(*s)
	}
	return urc
}

// Mutation returns the UserResourceMutation object of the builder.
func (urc *UserResourceCreate) Mutation() *UserResourceMutation {
	return urc.mutation
}

// Save creates the UserResource in the database.
func (urc *UserResourceCreate) Save(ctx context.Context) (*UserResource, error) {
	return withHooks[*UserResource, UserResourceMutation](ctx, urc.sqlSave, urc.mutation, urc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (urc *UserResourceCreate) SaveX(ctx context.Context) *UserResource {
	v, err := urc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (urc *UserResourceCreate) Exec(ctx context.Context) error {
	_, err := urc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (urc *UserResourceCreate) ExecX(ctx context.Context) {
	if err := urc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (urc *UserResourceCreate) check() error {
	if _, ok := urc.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource_id", err: errors.New(`ent: missing required field "UserResource.resource_id"`)}
	}
	return nil
}

func (urc *UserResourceCreate) sqlSave(ctx context.Context) (*UserResource, error) {
	if err := urc.check(); err != nil {
		return nil, err
	}
	_node, _spec := urc.createSpec()
	if err := sqlgraph.CreateNode(ctx, urc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	urc.mutation.id = &_node.ID
	urc.mutation.done = true
	return _node, nil
}

func (urc *UserResourceCreate) createSpec() (*UserResource, *sqlgraph.CreateSpec) {
	var (
		_node = &UserResource{config: urc.config}
		_spec = sqlgraph.NewCreateSpec(userresource.Table, sqlgraph.NewFieldSpec(userresource.FieldID, field.TypeInt))
	)
	if value, ok := urc.mutation.ResourceID(); ok {
		_spec.SetField(userresource.FieldResourceID, field.TypeString, value)
		_node.ResourceID = value
	}
	if value, ok := urc.mutation.Kind(); ok {
		_spec.SetField(userresource.FieldKind, field.TypeString, value)
		_node.Kind = value
	}
	if value, ok := urc.mutation.Name(); ok {
		_spec.SetField(userresource.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := urc.mutation.Username(); ok {
		_spec.SetField(userresource.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := urc.mutation.SSHPubkey(); ok {
		_spec.SetField(userresource.FieldSSHPubkey, field.TypeString, value)
		_node.SSHPubkey = value
	}
	return _node, _spec
}

// UserResourceCreateBulk is the builder for creating many UserResource entities in bulk.
type UserResourceCreateBulk struct {
	config
	builders []*UserResourceCreate
}

// Save creates the UserResource entities in the database.
func (urcb *UserResourceCreateBulk) Save(ctx context.Context) ([]*UserResource, error) {
	specs := make([]*sqlgraph.CreateSpec, len(urcb.builders))
	nodes := make([]*UserResource, len(urcb.builders))
	mutators := make([]Mutator, len(urcb.builders))
	for i := range urcb.builders {
		func(i int, root context.Context) {
			builder := urcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserResourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, urcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, urcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, urcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (urcb *UserResourceCreateBulk) SaveX(ctx context.Context) []*UserResource {
	v, err := urcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (urcb *UserResourceCreateBulk) Exec(ctx context.Context) error {
	_, err := urcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (urcb *UserResourceCreateBulk) ExecX(ctx context.Context) {
	if err := urcb.Exec(ctx); err != nil {
		panic(err)
	}
}
