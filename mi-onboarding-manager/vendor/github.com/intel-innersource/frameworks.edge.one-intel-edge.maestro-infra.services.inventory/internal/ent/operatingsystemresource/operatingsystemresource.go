// Code generated by ent, DO NOT EDIT.

package operatingsystemresource

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the operatingsystemresource type in the database.
	Label = "operating_system_resource"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldResourceID holds the string denoting the resource_id field in the database.
	FieldResourceID = "resource_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldArchitecture holds the string denoting the architecture field in the database.
	FieldArchitecture = "architecture"
	// FieldKernelCommand holds the string denoting the kernel_command field in the database.
	FieldKernelCommand = "kernel_command"
	// FieldUpdateSources holds the string denoting the update_sources field in the database.
	FieldUpdateSources = "update_sources"
	// FieldRepoURL holds the string denoting the repo_url field in the database.
	FieldRepoURL = "repo_url"
	// FieldSha256 holds the string denoting the sha256 field in the database.
	FieldSha256 = "sha256"
	// FieldProfileName holds the string denoting the profile_name field in the database.
	FieldProfileName = "profile_name"
	// Table holds the table name of the operatingsystemresource in the database.
	Table = "operating_system_resources"
)

// Columns holds all SQL columns for operatingsystemresource fields.
var Columns = []string{
	FieldID,
	FieldResourceID,
	FieldName,
	FieldArchitecture,
	FieldKernelCommand,
	FieldUpdateSources,
	FieldRepoURL,
	FieldSha256,
	FieldProfileName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the OperatingSystemResource queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByResourceID orders the results by the resource_id field.
func ByResourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByArchitecture orders the results by the architecture field.
func ByArchitecture(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArchitecture, opts...).ToFunc()
}

// ByKernelCommand orders the results by the kernel_command field.
func ByKernelCommand(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKernelCommand, opts...).ToFunc()
}

// ByUpdateSources orders the results by the update_sources field.
func ByUpdateSources(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateSources, opts...).ToFunc()
}

// ByRepoURL orders the results by the repo_url field.
func ByRepoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRepoURL, opts...).ToFunc()
}

// BySha256 orders the results by the sha256 field.
func BySha256(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSha256, opts...).ToFunc()
}

// ByProfileName orders the results by the profile_name field.
func ByProfileName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProfileName, opts...).ToFunc()
}
