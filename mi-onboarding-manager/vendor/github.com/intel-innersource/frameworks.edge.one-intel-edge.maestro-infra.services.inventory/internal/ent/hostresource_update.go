// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hostgpuresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hostnicresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hostresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hoststorageresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hostusbresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/instanceresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/projectresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/providerresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/siteresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/userresource"
)

// HostResourceUpdate is the builder for updating HostResource entities.
type HostResourceUpdate struct {
	config
	hooks    []Hook
	mutation *HostResourceMutation
}

// Where appends a list predicates to the HostResourceUpdate builder.
func (hru *HostResourceUpdate) Where(ps ...predicate.HostResource) *HostResourceUpdate {
	hru.mutation.Where(ps...)
	return hru
}

// SetResourceID sets the "resource_id" field.
func (hru *HostResourceUpdate) SetResourceID(s string) *HostResourceUpdate {
	hru.mutation.SetResourceID(s)
	return hru
}

// SetKind sets the "kind" field.
func (hru *HostResourceUpdate) SetKind(s string) *HostResourceUpdate {
	hru.mutation.SetKind(s)
	return hru
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (hru *HostResourceUpdate) SetNillableKind(s *string) *HostResourceUpdate {
	if s != nil {
		hru.SetKind(*s)
	}
	return hru
}

// ClearKind clears the value of the "kind" field.
func (hru *HostResourceUpdate) ClearKind() *HostResourceUpdate {
	hru.mutation.ClearKind()
	return hru
}

// SetName sets the "name" field.
func (hru *HostResourceUpdate) SetName(s string) *HostResourceUpdate {
	hru.mutation.SetName(s)
	return hru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (hru *HostResourceUpdate) SetNillableName(s *string) *HostResourceUpdate {
	if s != nil {
		hru.SetName(*s)
	}
	return hru
}

// ClearName clears the value of the "name" field.
func (hru *HostResourceUpdate) ClearName() *HostResourceUpdate {
	hru.mutation.ClearName()
	return hru
}

// SetDesiredState sets the "desired_state" field.
func (hru *HostResourceUpdate) SetDesiredState(hs hostresource.DesiredState) *HostResourceUpdate {
	hru.mutation.SetDesiredState(hs)
	return hru
}

// SetNillableDesiredState sets the "desired_state" field if the given value is not nil.
func (hru *HostResourceUpdate) SetNillableDesiredState(hs *hostresource.DesiredState) *HostResourceUpdate {
	if hs != nil {
		hru.SetDesiredState(*hs)
	}
	return hru
}

// ClearDesiredState clears the value of the "desired_state" field.
func (hru *HostResourceUpdate) ClearDesiredState() *HostResourceUpdate {
	hru.mutation.ClearDesiredState()
	return hru
}

// SetCurrentState sets the "current_state" field.
func (hru *HostResourceUpdate) SetCurrentState(hs hostresource.CurrentState) *HostResourceUpdate {
	hru.mutation.SetCurrentState(hs)
	return hru
}

// SetNillableCurrentState sets the "current_state" field if the given value is not nil.
func (hru *HostResourceUpdate) SetNillableCurrentState(hs *hostresource.CurrentState) *HostResourceUpdate {
	if hs != nil {
		hru.SetCurrentState(*hs)
	}
	return hru
}

// ClearCurrentState clears the value of the "current_state" field.
func (hru *HostResourceUpdate) ClearCurrentState() *HostResourceUpdate {
	hru.mutation.ClearCurrentState()
	return hru
}

// SetProviderStatus sets the "provider_status" field.
func (hru *HostResourceUpdate) SetProviderStatus(s string) *HostResourceUpdate {
	hru.mutation.SetProviderStatus(s)
	return hru
}

// SetNillableProviderStatus sets the "provider_status" field if the given value is not nil.
func (hru *HostResourceUpdate) SetNillableProviderStatus(s *string) *HostResourceUpdate {
	if s != nil {
		hru.SetProviderStatus(*s)
	}
	return hru
}

// ClearProviderStatus clears the value of the "provider_status" field.
func (hru *HostResourceUpdate) ClearProviderStatus() *HostResourceUpdate {
	hru.mutation.ClearProviderStatus()
	return hru
}

// SetHostStatus sets the "host_status" field.
func (hru *HostResourceUpdate) SetHostStatus(hs hostresource.HostStatus) *HostResourceUpdate {
	hru.mutation.SetHostStatus(hs)
	return hru
}

// SetNillableHostStatus sets the "host_status" field if the given value is not nil.
func (hru *HostResourceUpdate) SetNillableHostStatus(hs *hostresource.HostStatus) *HostResourceUpdate {
	if hs != nil {
		hru.SetHostStatus(*hs)
	}
	return hru
}

// ClearHostStatus clears the value of the "host_status" field.
func (hru *HostResourceUpdate) ClearHostStatus() *HostResourceUpdate {
	hru.mutation.ClearHostStatus()
	return hru
}

// SetProviderStatusDetail sets the "provider_status_detail" field.
func (hru *HostResourceUpdate) SetProviderStatusDetail(s string) *HostResourceUpdate {
	hru.mutation.SetProviderStatusDetail(s)
	return hru
}

// SetNillableProviderStatusDetail sets the "provider_status_detail" field if the given value is not nil.
func (hru *HostResourceUpdate) SetNillableProviderStatusDetail(s *string) *HostResourceUpdate {
	if s != nil {
		hru.SetProviderStatusDetail(*s)
	}
	return hru
}

// ClearProviderStatusDetail clears the value of the "provider_status_detail" field.
func (hru *HostResourceUpdate) ClearProviderStatusDetail() *HostResourceUpdate {
	hru.mutation.ClearProviderStatusDetail()
	return hru
}

// SetNote sets the "note" field.
func (hru *HostResourceUpdate) SetNote(s string) *HostResourceUpdate {
	hru.mutation.SetNote(s)
	return hru
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (hru *HostResourceUpdate) SetNillableNote(s *string) *HostResourceUpdate {
	if s != nil {
		hru.SetNote(*s)
	}
	return hru
}

// ClearNote clears the value of the "note" field.
func (hru *HostResourceUpdate) ClearNote() *HostResourceUpdate {
	hru.mutation.ClearNote()
	return hru
}

// SetHardwareKind sets the "hardware_kind" field.
func (hru *HostResourceUpdate) SetHardwareKind(s string) *HostResourceUpdate {
	hru.mutation.SetHardwareKind(s)
	return hru
}

// SetNillableHardwareKind sets the "hardware_kind" field if the given value is not nil.
func (hru *HostResourceUpdate) SetNillableHardwareKind(s *string) *HostResourceUpdate {
	if s != nil {
		hru.SetHardwareKind(*s)
	}
	return hru
}

// ClearHardwareKind clears the value of the "hardware_kind" field.
func (hru *HostResourceUpdate) ClearHardwareKind() *HostResourceUpdate {
	hru.mutation.ClearHardwareKind()
	return hru
}

// SetSerialNumber sets the "serial_number" field.
func (hru *HostResourceUpdate) SetSerialNumber(s string) *HostResourceUpdate {
	hru.mutation.SetSerialNumber(s)
	return hru
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (hru *HostResourceUpdate) SetNillableSerialNumber(s *string) *HostResourceUpdate {
	if s != nil {
		hru.SetSerialNumber(*s)
	}
	return hru
}

// ClearSerialNumber clears the value of the "serial_number" field.
func (hru *HostResourceUpdate) ClearSerialNumber() *HostResourceUpdate {
	hru.mutation.ClearSerialNumber()
	return hru
}

// SetUUID sets the "uuid" field.
func (hru *HostResourceUpdate) SetUUID(s string) *HostResourceUpdate {
	hru.mutation.SetUUID(s)
	return hru
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (hru *HostResourceUpdate) SetNillableUUID(s *string) *HostResourceUpdate {
	if s != nil {
		hru.SetUUID(*s)
	}
	return hru
}

// ClearUUID clears the value of the "uuid" field.
func (hru *HostResourceUpdate) ClearUUID() *HostResourceUpdate {
	hru.mutation.ClearUUID()
	return hru
}

// SetMemoryBytes sets the "memory_bytes" field.
func (hru *HostResourceUpdate) SetMemoryBytes(u uint64) *HostResourceUpdate {
	hru.mutation.ResetMemoryBytes()
	hru.mutation.SetMemoryBytes(u)
	return hru
}

// SetNillableMemoryBytes sets the "memory_bytes" field if the given value is not nil.
func (hru *HostResourceUpdate) SetNillableMemoryBytes(u *uint64) *HostResourceUpdate {
	if u != nil {
		hru.SetMemoryBytes(*u)
	}
	return hru
}

// AddMemoryBytes adds u to the "memory_bytes" field.
func (hru *HostResourceUpdate) AddMemoryBytes(u int64) *HostResourceUpdate {
	hru.mutation.AddMemoryBytes(u)
	return hru
}

// ClearMemoryBytes clears the value of the "memory_bytes" field.
func (hru *HostResourceUpdate) ClearMemoryBytes() *HostResourceUpdate {
	hru.mutation.ClearMemoryBytes()
	return hru
}

// SetCPUModel sets the "cpu_model" field.
func (hru *HostResourceUpdate) SetCPUModel(s string) *HostResourceUpdate {
	hru.mutation.SetCPUModel(s)
	return hru
}

// SetNillableCPUModel sets the "cpu_model" field if the given value is not nil.
func (hru *HostResourceUpdate) SetNillableCPUModel(s *string) *HostResourceUpdate {
	if s != nil {
		hru.SetCPUModel(*s)
	}
	return hru
}

// ClearCPUModel clears the value of the "cpu_model" field.
func (hru *HostResourceUpdate) ClearCPUModel() *HostResourceUpdate {
	hru.mutation.ClearCPUModel()
	return hru
}

// SetCPUSockets sets the "cpu_sockets" field.
func (hru *HostResourceUpdate) SetCPUSockets(u uint32) *HostResourceUpdate {
	hru.mutation.ResetCPUSockets()
	hru.mutation.SetCPUSockets(u)
	return hru
}

// SetNillableCPUSockets sets the "cpu_sockets" field if the given value is not nil.
func (hru *HostResourceUpdate) SetNillableCPUSockets(u *uint32) *HostResourceUpdate {
	if u != nil {
		hru.SetCPUSockets(*u)
	}
	return hru
}

// AddCPUSockets adds u to the "cpu_sockets" field.
func (hru *HostResourceUpdate) AddCPUSockets(u int32) *HostResourceUpdate {
	hru.mutation.AddCPUSockets(u)
	return hru
}

// ClearCPUSockets clears the value of the "cpu_sockets" field.
func (hru *HostResourceUpdate) ClearCPUSockets() *HostResourceUpdate {
	hru.mutation.ClearCPUSockets()
	return hru
}

// SetCPUCores sets the "cpu_cores" field.
func (hru *HostResourceUpdate) SetCPUCores(u uint32) *HostResourceUpdate {
	hru.mutation.ResetCPUCores()
	hru.mutation.SetCPUCores(u)
	return hru
}

// SetNillableCPUCores sets the "cpu_cores" field if the given value is not nil.
func (hru *HostResourceUpdate) SetNillableCPUCores(u *uint32) *HostResourceUpdate {
	if u != nil {
		hru.SetCPUCores(*u)
	}
	return hru
}

// AddCPUCores adds u to the "cpu_cores" field.
func (hru *HostResourceUpdate) AddCPUCores(u int32) *HostResourceUpdate {
	hru.mutation.AddCPUCores(u)
	return hru
}

// ClearCPUCores clears the value of the "cpu_cores" field.
func (hru *HostResourceUpdate) ClearCPUCores() *HostResourceUpdate {
	hru.mutation.ClearCPUCores()
	return hru
}

// SetCPUCapabilities sets the "cpu_capabilities" field.
func (hru *HostResourceUpdate) SetCPUCapabilities(s string) *HostResourceUpdate {
	hru.mutation.SetCPUCapabilities(s)
	return hru
}

// SetNillableCPUCapabilities sets the "cpu_capabilities" field if the given value is not nil.
func (hru *HostResourceUpdate) SetNillableCPUCapabilities(s *string) *HostResourceUpdate {
	if s != nil {
		hru.SetCPUCapabilities(*s)
	}
	return hru
}

// ClearCPUCapabilities clears the value of the "cpu_capabilities" field.
func (hru *HostResourceUpdate) ClearCPUCapabilities() *HostResourceUpdate {
	hru.mutation.ClearCPUCapabilities()
	return hru
}

// SetCPUArchitecture sets the "cpu_architecture" field.
func (hru *HostResourceUpdate) SetCPUArchitecture(s string) *HostResourceUpdate {
	hru.mutation.SetCPUArchitecture(s)
	return hru
}

// SetNillableCPUArchitecture sets the "cpu_architecture" field if the given value is not nil.
func (hru *HostResourceUpdate) SetNillableCPUArchitecture(s *string) *HostResourceUpdate {
	if s != nil {
		hru.SetCPUArchitecture(*s)
	}
	return hru
}

// ClearCPUArchitecture clears the value of the "cpu_architecture" field.
func (hru *HostResourceUpdate) ClearCPUArchitecture() *HostResourceUpdate {
	hru.mutation.ClearCPUArchitecture()
	return hru
}

// SetCPUThreads sets the "cpu_threads" field.
func (hru *HostResourceUpdate) SetCPUThreads(u uint32) *HostResourceUpdate {
	hru.mutation.ResetCPUThreads()
	hru.mutation.SetCPUThreads(u)
	return hru
}

// SetNillableCPUThreads sets the "cpu_threads" field if the given value is not nil.
func (hru *HostResourceUpdate) SetNillableCPUThreads(u *uint32) *HostResourceUpdate {
	if u != nil {
		hru.SetCPUThreads(*u)
	}
	return hru
}

// AddCPUThreads adds u to the "cpu_threads" field.
func (hru *HostResourceUpdate) AddCPUThreads(u int32) *HostResourceUpdate {
	hru.mutation.AddCPUThreads(u)
	return hru
}

// ClearCPUThreads clears the value of the "cpu_threads" field.
func (hru *HostResourceUpdate) ClearCPUThreads() *HostResourceUpdate {
	hru.mutation.ClearCPUThreads()
	return hru
}

// SetMgmtIP sets the "mgmt_ip" field.
func (hru *HostResourceUpdate) SetMgmtIP(s string) *HostResourceUpdate {
	hru.mutation.SetMgmtIP(s)
	return hru
}

// SetNillableMgmtIP sets the "mgmt_ip" field if the given value is not nil.
func (hru *HostResourceUpdate) SetNillableMgmtIP(s *string) *HostResourceUpdate {
	if s != nil {
		hru.SetMgmtIP(*s)
	}
	return hru
}

// ClearMgmtIP clears the value of the "mgmt_ip" field.
func (hru *HostResourceUpdate) ClearMgmtIP() *HostResourceUpdate {
	hru.mutation.ClearMgmtIP()
	return hru
}

// SetBmcKind sets the "bmc_kind" field.
func (hru *HostResourceUpdate) SetBmcKind(hk hostresource.BmcKind) *HostResourceUpdate {
	hru.mutation.SetBmcKind(hk)
	return hru
}

// SetNillableBmcKind sets the "bmc_kind" field if the given value is not nil.
func (hru *HostResourceUpdate) SetNillableBmcKind(hk *hostresource.BmcKind) *HostResourceUpdate {
	if hk != nil {
		hru.SetBmcKind(*hk)
	}
	return hru
}

// ClearBmcKind clears the value of the "bmc_kind" field.
func (hru *HostResourceUpdate) ClearBmcKind() *HostResourceUpdate {
	hru.mutation.ClearBmcKind()
	return hru
}

// SetBmcIP sets the "bmc_ip" field.
func (hru *HostResourceUpdate) SetBmcIP(s string) *HostResourceUpdate {
	hru.mutation.SetBmcIP(s)
	return hru
}

// SetNillableBmcIP sets the "bmc_ip" field if the given value is not nil.
func (hru *HostResourceUpdate) SetNillableBmcIP(s *string) *HostResourceUpdate {
	if s != nil {
		hru.SetBmcIP(*s)
	}
	return hru
}

// ClearBmcIP clears the value of the "bmc_ip" field.
func (hru *HostResourceUpdate) ClearBmcIP() *HostResourceUpdate {
	hru.mutation.ClearBmcIP()
	return hru
}

// SetBmcUsername sets the "bmc_username" field.
func (hru *HostResourceUpdate) SetBmcUsername(s string) *HostResourceUpdate {
	hru.mutation.SetBmcUsername(s)
	return hru
}

// SetNillableBmcUsername sets the "bmc_username" field if the given value is not nil.
func (hru *HostResourceUpdate) SetNillableBmcUsername(s *string) *HostResourceUpdate {
	if s != nil {
		hru.SetBmcUsername(*s)
	}
	return hru
}

// ClearBmcUsername clears the value of the "bmc_username" field.
func (hru *HostResourceUpdate) ClearBmcUsername() *HostResourceUpdate {
	hru.mutation.ClearBmcUsername()
	return hru
}

// SetBmcPassword sets the "bmc_password" field.
func (hru *HostResourceUpdate) SetBmcPassword(s string) *HostResourceUpdate {
	hru.mutation.SetBmcPassword(s)
	return hru
}

// SetNillableBmcPassword sets the "bmc_password" field if the given value is not nil.
func (hru *HostResourceUpdate) SetNillableBmcPassword(s *string) *HostResourceUpdate {
	if s != nil {
		hru.SetBmcPassword(*s)
	}
	return hru
}

// ClearBmcPassword clears the value of the "bmc_password" field.
func (hru *HostResourceUpdate) ClearBmcPassword() *HostResourceUpdate {
	hru.mutation.ClearBmcPassword()
	return hru
}

// SetPxeMAC sets the "pxe_mac" field.
func (hru *HostResourceUpdate) SetPxeMAC(s string) *HostResourceUpdate {
	hru.mutation.SetPxeMAC(s)
	return hru
}

// SetNillablePxeMAC sets the "pxe_mac" field if the given value is not nil.
func (hru *HostResourceUpdate) SetNillablePxeMAC(s *string) *HostResourceUpdate {
	if s != nil {
		hru.SetPxeMAC(*s)
	}
	return hru
}

// ClearPxeMAC clears the value of the "pxe_mac" field.
func (hru *HostResourceUpdate) ClearPxeMAC() *HostResourceUpdate {
	hru.mutation.ClearPxeMAC()
	return hru
}

// SetHostname sets the "hostname" field.
func (hru *HostResourceUpdate) SetHostname(s string) *HostResourceUpdate {
	hru.mutation.SetHostname(s)
	return hru
}

// SetNillableHostname sets the "hostname" field if the given value is not nil.
func (hru *HostResourceUpdate) SetNillableHostname(s *string) *HostResourceUpdate {
	if s != nil {
		hru.SetHostname(*s)
	}
	return hru
}

// ClearHostname clears the value of the "hostname" field.
func (hru *HostResourceUpdate) ClearHostname() *HostResourceUpdate {
	hru.mutation.ClearHostname()
	return hru
}

// SetProductName sets the "product_name" field.
func (hru *HostResourceUpdate) SetProductName(s string) *HostResourceUpdate {
	hru.mutation.SetProductName(s)
	return hru
}

// SetNillableProductName sets the "product_name" field if the given value is not nil.
func (hru *HostResourceUpdate) SetNillableProductName(s *string) *HostResourceUpdate {
	if s != nil {
		hru.SetProductName(*s)
	}
	return hru
}

// ClearProductName clears the value of the "product_name" field.
func (hru *HostResourceUpdate) ClearProductName() *HostResourceUpdate {
	hru.mutation.ClearProductName()
	return hru
}

// SetBiosVersion sets the "bios_version" field.
func (hru *HostResourceUpdate) SetBiosVersion(s string) *HostResourceUpdate {
	hru.mutation.SetBiosVersion(s)
	return hru
}

// SetNillableBiosVersion sets the "bios_version" field if the given value is not nil.
func (hru *HostResourceUpdate) SetNillableBiosVersion(s *string) *HostResourceUpdate {
	if s != nil {
		hru.SetBiosVersion(*s)
	}
	return hru
}

// ClearBiosVersion clears the value of the "bios_version" field.
func (hru *HostResourceUpdate) ClearBiosVersion() *HostResourceUpdate {
	hru.mutation.ClearBiosVersion()
	return hru
}

// SetBiosReleaseDate sets the "bios_release_date" field.
func (hru *HostResourceUpdate) SetBiosReleaseDate(s string) *HostResourceUpdate {
	hru.mutation.SetBiosReleaseDate(s)
	return hru
}

// SetNillableBiosReleaseDate sets the "bios_release_date" field if the given value is not nil.
func (hru *HostResourceUpdate) SetNillableBiosReleaseDate(s *string) *HostResourceUpdate {
	if s != nil {
		hru.SetBiosReleaseDate(*s)
	}
	return hru
}

// ClearBiosReleaseDate clears the value of the "bios_release_date" field.
func (hru *HostResourceUpdate) ClearBiosReleaseDate() *HostResourceUpdate {
	hru.mutation.ClearBiosReleaseDate()
	return hru
}

// SetBiosVendor sets the "bios_vendor" field.
func (hru *HostResourceUpdate) SetBiosVendor(s string) *HostResourceUpdate {
	hru.mutation.SetBiosVendor(s)
	return hru
}

// SetNillableBiosVendor sets the "bios_vendor" field if the given value is not nil.
func (hru *HostResourceUpdate) SetNillableBiosVendor(s *string) *HostResourceUpdate {
	if s != nil {
		hru.SetBiosVendor(*s)
	}
	return hru
}

// ClearBiosVendor clears the value of the "bios_vendor" field.
func (hru *HostResourceUpdate) ClearBiosVendor() *HostResourceUpdate {
	hru.mutation.ClearBiosVendor()
	return hru
}

// SetMetadata sets the "metadata" field.
func (hru *HostResourceUpdate) SetMetadata(s string) *HostResourceUpdate {
	hru.mutation.SetMetadata(s)
	return hru
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (hru *HostResourceUpdate) SetNillableMetadata(s *string) *HostResourceUpdate {
	if s != nil {
		hru.SetMetadata(*s)
	}
	return hru
}

// ClearMetadata clears the value of the "metadata" field.
func (hru *HostResourceUpdate) ClearMetadata() *HostResourceUpdate {
	hru.mutation.ClearMetadata()
	return hru
}

// SetDesiredPowerState sets the "desired_power_state" field.
func (hru *HostResourceUpdate) SetDesiredPowerState(hps hostresource.DesiredPowerState) *HostResourceUpdate {
	hru.mutation.SetDesiredPowerState(hps)
	return hru
}

// SetNillableDesiredPowerState sets the "desired_power_state" field if the given value is not nil.
func (hru *HostResourceUpdate) SetNillableDesiredPowerState(hps *hostresource.DesiredPowerState) *HostResourceUpdate {
	if hps != nil {
		hru.SetDesiredPowerState(*hps)
	}
	return hru
}

// ClearDesiredPowerState clears the value of the "desired_power_state" field.
func (hru *HostResourceUpdate) ClearDesiredPowerState() *HostResourceUpdate {
	hru.mutation.ClearDesiredPowerState()
	return hru
}

// SetCurrentPowerState sets the "current_power_state" field.
func (hru *HostResourceUpdate) SetCurrentPowerState(hps hostresource.CurrentPowerState) *HostResourceUpdate {
	hru.mutation.SetCurrentPowerState(hps)
	return hru
}

// SetNillableCurrentPowerState sets the "current_power_state" field if the given value is not nil.
func (hru *HostResourceUpdate) SetNillableCurrentPowerState(hps *hostresource.CurrentPowerState) *HostResourceUpdate {
	if hps != nil {
		hru.SetCurrentPowerState(*hps)
	}
	return hru
}

// ClearCurrentPowerState clears the value of the "current_power_state" field.
func (hru *HostResourceUpdate) ClearCurrentPowerState() *HostResourceUpdate {
	hru.mutation.ClearCurrentPowerState()
	return hru
}

// SetSiteID sets the "site" edge to the SiteResource entity by ID.
func (hru *HostResourceUpdate) SetSiteID(id int) *HostResourceUpdate {
	hru.mutation.SetSiteID(id)
	return hru
}

// SetNillableSiteID sets the "site" edge to the SiteResource entity by ID if the given value is not nil.
func (hru *HostResourceUpdate) SetNillableSiteID(id *int) *HostResourceUpdate {
	if id != nil {
		hru = hru.SetSiteID(*id)
	}
	return hru
}

// SetSite sets the "site" edge to the SiteResource entity.
func (hru *HostResourceUpdate) SetSite(s *SiteResource) *HostResourceUpdate {
	return hru.SetSiteID(s.ID)
}

// SetProviderID sets the "provider" edge to the ProviderResource entity by ID.
func (hru *HostResourceUpdate) SetProviderID(id int) *HostResourceUpdate {
	hru.mutation.SetProviderID(id)
	return hru
}

// SetNillableProviderID sets the "provider" edge to the ProviderResource entity by ID if the given value is not nil.
func (hru *HostResourceUpdate) SetNillableProviderID(id *int) *HostResourceUpdate {
	if id != nil {
		hru = hru.SetProviderID(*id)
	}
	return hru
}

// SetProvider sets the "provider" edge to the ProviderResource entity.
func (hru *HostResourceUpdate) SetProvider(p *ProviderResource) *HostResourceUpdate {
	return hru.SetProviderID(p.ID)
}

// SetProjectID sets the "project" edge to the ProjectResource entity by ID.
func (hru *HostResourceUpdate) SetProjectID(id int) *HostResourceUpdate {
	hru.mutation.SetProjectID(id)
	return hru
}

// SetNillableProjectID sets the "project" edge to the ProjectResource entity by ID if the given value is not nil.
func (hru *HostResourceUpdate) SetNillableProjectID(id *int) *HostResourceUpdate {
	if id != nil {
		hru = hru.SetProjectID(*id)
	}
	return hru
}

// SetProject sets the "project" edge to the ProjectResource entity.
func (hru *HostResourceUpdate) SetProject(p *ProjectResource) *HostResourceUpdate {
	return hru.SetProjectID(p.ID)
}

// SetUserID sets the "user" edge to the UserResource entity by ID.
func (hru *HostResourceUpdate) SetUserID(id int) *HostResourceUpdate {
	hru.mutation.SetUserID(id)
	return hru
}

// SetNillableUserID sets the "user" edge to the UserResource entity by ID if the given value is not nil.
func (hru *HostResourceUpdate) SetNillableUserID(id *int) *HostResourceUpdate {
	if id != nil {
		hru = hru.SetUserID(*id)
	}
	return hru
}

// SetUser sets the "user" edge to the UserResource entity.
func (hru *HostResourceUpdate) SetUser(u *UserResource) *HostResourceUpdate {
	return hru.SetUserID(u.ID)
}

// AddHostStorageIDs adds the "host_storages" edge to the HoststorageResource entity by IDs.
func (hru *HostResourceUpdate) AddHostStorageIDs(ids ...int) *HostResourceUpdate {
	hru.mutation.AddHostStorageIDs(ids...)
	return hru
}

// AddHostStorages adds the "host_storages" edges to the HoststorageResource entity.
func (hru *HostResourceUpdate) AddHostStorages(h ...*HoststorageResource) *HostResourceUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hru.AddHostStorageIDs(ids...)
}

// AddHostNicIDs adds the "host_nics" edge to the HostnicResource entity by IDs.
func (hru *HostResourceUpdate) AddHostNicIDs(ids ...int) *HostResourceUpdate {
	hru.mutation.AddHostNicIDs(ids...)
	return hru
}

// AddHostNics adds the "host_nics" edges to the HostnicResource entity.
func (hru *HostResourceUpdate) AddHostNics(h ...*HostnicResource) *HostResourceUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hru.AddHostNicIDs(ids...)
}

// AddHostUsbIDs adds the "host_usbs" edge to the HostusbResource entity by IDs.
func (hru *HostResourceUpdate) AddHostUsbIDs(ids ...int) *HostResourceUpdate {
	hru.mutation.AddHostUsbIDs(ids...)
	return hru
}

// AddHostUsbs adds the "host_usbs" edges to the HostusbResource entity.
func (hru *HostResourceUpdate) AddHostUsbs(h ...*HostusbResource) *HostResourceUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hru.AddHostUsbIDs(ids...)
}

// AddHostGpuIDs adds the "host_gpus" edge to the HostgpuResource entity by IDs.
func (hru *HostResourceUpdate) AddHostGpuIDs(ids ...int) *HostResourceUpdate {
	hru.mutation.AddHostGpuIDs(ids...)
	return hru
}

// AddHostGpus adds the "host_gpus" edges to the HostgpuResource entity.
func (hru *HostResourceUpdate) AddHostGpus(h ...*HostgpuResource) *HostResourceUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hru.AddHostGpuIDs(ids...)
}

// SetInstanceID sets the "instance" edge to the InstanceResource entity by ID.
func (hru *HostResourceUpdate) SetInstanceID(id int) *HostResourceUpdate {
	hru.mutation.SetInstanceID(id)
	return hru
}

// SetNillableInstanceID sets the "instance" edge to the InstanceResource entity by ID if the given value is not nil.
func (hru *HostResourceUpdate) SetNillableInstanceID(id *int) *HostResourceUpdate {
	if id != nil {
		hru = hru.SetInstanceID(*id)
	}
	return hru
}

// SetInstance sets the "instance" edge to the InstanceResource entity.
func (hru *HostResourceUpdate) SetInstance(i *InstanceResource) *HostResourceUpdate {
	return hru.SetInstanceID(i.ID)
}

// Mutation returns the HostResourceMutation object of the builder.
func (hru *HostResourceUpdate) Mutation() *HostResourceMutation {
	return hru.mutation
}

// ClearSite clears the "site" edge to the SiteResource entity.
func (hru *HostResourceUpdate) ClearSite() *HostResourceUpdate {
	hru.mutation.ClearSite()
	return hru
}

// ClearProvider clears the "provider" edge to the ProviderResource entity.
func (hru *HostResourceUpdate) ClearProvider() *HostResourceUpdate {
	hru.mutation.ClearProvider()
	return hru
}

// ClearProject clears the "project" edge to the ProjectResource entity.
func (hru *HostResourceUpdate) ClearProject() *HostResourceUpdate {
	hru.mutation.ClearProject()
	return hru
}

// ClearUser clears the "user" edge to the UserResource entity.
func (hru *HostResourceUpdate) ClearUser() *HostResourceUpdate {
	hru.mutation.ClearUser()
	return hru
}

// ClearHostStorages clears all "host_storages" edges to the HoststorageResource entity.
func (hru *HostResourceUpdate) ClearHostStorages() *HostResourceUpdate {
	hru.mutation.ClearHostStorages()
	return hru
}

// RemoveHostStorageIDs removes the "host_storages" edge to HoststorageResource entities by IDs.
func (hru *HostResourceUpdate) RemoveHostStorageIDs(ids ...int) *HostResourceUpdate {
	hru.mutation.RemoveHostStorageIDs(ids...)
	return hru
}

// RemoveHostStorages removes "host_storages" edges to HoststorageResource entities.
func (hru *HostResourceUpdate) RemoveHostStorages(h ...*HoststorageResource) *HostResourceUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hru.RemoveHostStorageIDs(ids...)
}

// ClearHostNics clears all "host_nics" edges to the HostnicResource entity.
func (hru *HostResourceUpdate) ClearHostNics() *HostResourceUpdate {
	hru.mutation.ClearHostNics()
	return hru
}

// RemoveHostNicIDs removes the "host_nics" edge to HostnicResource entities by IDs.
func (hru *HostResourceUpdate) RemoveHostNicIDs(ids ...int) *HostResourceUpdate {
	hru.mutation.RemoveHostNicIDs(ids...)
	return hru
}

// RemoveHostNics removes "host_nics" edges to HostnicResource entities.
func (hru *HostResourceUpdate) RemoveHostNics(h ...*HostnicResource) *HostResourceUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hru.RemoveHostNicIDs(ids...)
}

// ClearHostUsbs clears all "host_usbs" edges to the HostusbResource entity.
func (hru *HostResourceUpdate) ClearHostUsbs() *HostResourceUpdate {
	hru.mutation.ClearHostUsbs()
	return hru
}

// RemoveHostUsbIDs removes the "host_usbs" edge to HostusbResource entities by IDs.
func (hru *HostResourceUpdate) RemoveHostUsbIDs(ids ...int) *HostResourceUpdate {
	hru.mutation.RemoveHostUsbIDs(ids...)
	return hru
}

// RemoveHostUsbs removes "host_usbs" edges to HostusbResource entities.
func (hru *HostResourceUpdate) RemoveHostUsbs(h ...*HostusbResource) *HostResourceUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hru.RemoveHostUsbIDs(ids...)
}

// ClearHostGpus clears all "host_gpus" edges to the HostgpuResource entity.
func (hru *HostResourceUpdate) ClearHostGpus() *HostResourceUpdate {
	hru.mutation.ClearHostGpus()
	return hru
}

// RemoveHostGpuIDs removes the "host_gpus" edge to HostgpuResource entities by IDs.
func (hru *HostResourceUpdate) RemoveHostGpuIDs(ids ...int) *HostResourceUpdate {
	hru.mutation.RemoveHostGpuIDs(ids...)
	return hru
}

// RemoveHostGpus removes "host_gpus" edges to HostgpuResource entities.
func (hru *HostResourceUpdate) RemoveHostGpus(h ...*HostgpuResource) *HostResourceUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hru.RemoveHostGpuIDs(ids...)
}

// ClearInstance clears the "instance" edge to the InstanceResource entity.
func (hru *HostResourceUpdate) ClearInstance() *HostResourceUpdate {
	hru.mutation.ClearInstance()
	return hru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hru *HostResourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, HostResourceMutation](ctx, hru.sqlSave, hru.mutation, hru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hru *HostResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := hru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hru *HostResourceUpdate) Exec(ctx context.Context) error {
	_, err := hru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hru *HostResourceUpdate) ExecX(ctx context.Context) {
	if err := hru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hru *HostResourceUpdate) check() error {
	if v, ok := hru.mutation.DesiredState(); ok {
		if err := hostresource.DesiredStateValidator(v); err != nil {
			return &ValidationError{Name: "desired_state", err: fmt.Errorf(`ent: validator failed for field "HostResource.desired_state": %w`, err)}
		}
	}
	if v, ok := hru.mutation.CurrentState(); ok {
		if err := hostresource.CurrentStateValidator(v); err != nil {
			return &ValidationError{Name: "current_state", err: fmt.Errorf(`ent: validator failed for field "HostResource.current_state": %w`, err)}
		}
	}
	if v, ok := hru.mutation.HostStatus(); ok {
		if err := hostresource.HostStatusValidator(v); err != nil {
			return &ValidationError{Name: "host_status", err: fmt.Errorf(`ent: validator failed for field "HostResource.host_status": %w`, err)}
		}
	}
	if v, ok := hru.mutation.BmcKind(); ok {
		if err := hostresource.BmcKindValidator(v); err != nil {
			return &ValidationError{Name: "bmc_kind", err: fmt.Errorf(`ent: validator failed for field "HostResource.bmc_kind": %w`, err)}
		}
	}
	if v, ok := hru.mutation.DesiredPowerState(); ok {
		if err := hostresource.DesiredPowerStateValidator(v); err != nil {
			return &ValidationError{Name: "desired_power_state", err: fmt.Errorf(`ent: validator failed for field "HostResource.desired_power_state": %w`, err)}
		}
	}
	if v, ok := hru.mutation.CurrentPowerState(); ok {
		if err := hostresource.CurrentPowerStateValidator(v); err != nil {
			return &ValidationError{Name: "current_power_state", err: fmt.Errorf(`ent: validator failed for field "HostResource.current_power_state": %w`, err)}
		}
	}
	return nil
}

func (hru *HostResourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(hostresource.Table, hostresource.Columns, sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt))
	if ps := hru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hru.mutation.ResourceID(); ok {
		_spec.SetField(hostresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := hru.mutation.Kind(); ok {
		_spec.SetField(hostresource.FieldKind, field.TypeString, value)
	}
	if hru.mutation.KindCleared() {
		_spec.ClearField(hostresource.FieldKind, field.TypeString)
	}
	if value, ok := hru.mutation.Name(); ok {
		_spec.SetField(hostresource.FieldName, field.TypeString, value)
	}
	if hru.mutation.NameCleared() {
		_spec.ClearField(hostresource.FieldName, field.TypeString)
	}
	if value, ok := hru.mutation.DesiredState(); ok {
		_spec.SetField(hostresource.FieldDesiredState, field.TypeEnum, value)
	}
	if hru.mutation.DesiredStateCleared() {
		_spec.ClearField(hostresource.FieldDesiredState, field.TypeEnum)
	}
	if value, ok := hru.mutation.CurrentState(); ok {
		_spec.SetField(hostresource.FieldCurrentState, field.TypeEnum, value)
	}
	if hru.mutation.CurrentStateCleared() {
		_spec.ClearField(hostresource.FieldCurrentState, field.TypeEnum)
	}
	if value, ok := hru.mutation.ProviderStatus(); ok {
		_spec.SetField(hostresource.FieldProviderStatus, field.TypeString, value)
	}
	if hru.mutation.ProviderStatusCleared() {
		_spec.ClearField(hostresource.FieldProviderStatus, field.TypeString)
	}
	if value, ok := hru.mutation.HostStatus(); ok {
		_spec.SetField(hostresource.FieldHostStatus, field.TypeEnum, value)
	}
	if hru.mutation.HostStatusCleared() {
		_spec.ClearField(hostresource.FieldHostStatus, field.TypeEnum)
	}
	if value, ok := hru.mutation.ProviderStatusDetail(); ok {
		_spec.SetField(hostresource.FieldProviderStatusDetail, field.TypeString, value)
	}
	if hru.mutation.ProviderStatusDetailCleared() {
		_spec.ClearField(hostresource.FieldProviderStatusDetail, field.TypeString)
	}
	if value, ok := hru.mutation.Note(); ok {
		_spec.SetField(hostresource.FieldNote, field.TypeString, value)
	}
	if hru.mutation.NoteCleared() {
		_spec.ClearField(hostresource.FieldNote, field.TypeString)
	}
	if value, ok := hru.mutation.HardwareKind(); ok {
		_spec.SetField(hostresource.FieldHardwareKind, field.TypeString, value)
	}
	if hru.mutation.HardwareKindCleared() {
		_spec.ClearField(hostresource.FieldHardwareKind, field.TypeString)
	}
	if value, ok := hru.mutation.SerialNumber(); ok {
		_spec.SetField(hostresource.FieldSerialNumber, field.TypeString, value)
	}
	if hru.mutation.SerialNumberCleared() {
		_spec.ClearField(hostresource.FieldSerialNumber, field.TypeString)
	}
	if value, ok := hru.mutation.UUID(); ok {
		_spec.SetField(hostresource.FieldUUID, field.TypeString, value)
	}
	if hru.mutation.UUIDCleared() {
		_spec.ClearField(hostresource.FieldUUID, field.TypeString)
	}
	if value, ok := hru.mutation.MemoryBytes(); ok {
		_spec.SetField(hostresource.FieldMemoryBytes, field.TypeUint64, value)
	}
	if value, ok := hru.mutation.AddedMemoryBytes(); ok {
		_spec.AddField(hostresource.FieldMemoryBytes, field.TypeUint64, value)
	}
	if hru.mutation.MemoryBytesCleared() {
		_spec.ClearField(hostresource.FieldMemoryBytes, field.TypeUint64)
	}
	if value, ok := hru.mutation.CPUModel(); ok {
		_spec.SetField(hostresource.FieldCPUModel, field.TypeString, value)
	}
	if hru.mutation.CPUModelCleared() {
		_spec.ClearField(hostresource.FieldCPUModel, field.TypeString)
	}
	if value, ok := hru.mutation.CPUSockets(); ok {
		_spec.SetField(hostresource.FieldCPUSockets, field.TypeUint32, value)
	}
	if value, ok := hru.mutation.AddedCPUSockets(); ok {
		_spec.AddField(hostresource.FieldCPUSockets, field.TypeUint32, value)
	}
	if hru.mutation.CPUSocketsCleared() {
		_spec.ClearField(hostresource.FieldCPUSockets, field.TypeUint32)
	}
	if value, ok := hru.mutation.CPUCores(); ok {
		_spec.SetField(hostresource.FieldCPUCores, field.TypeUint32, value)
	}
	if value, ok := hru.mutation.AddedCPUCores(); ok {
		_spec.AddField(hostresource.FieldCPUCores, field.TypeUint32, value)
	}
	if hru.mutation.CPUCoresCleared() {
		_spec.ClearField(hostresource.FieldCPUCores, field.TypeUint32)
	}
	if value, ok := hru.mutation.CPUCapabilities(); ok {
		_spec.SetField(hostresource.FieldCPUCapabilities, field.TypeString, value)
	}
	if hru.mutation.CPUCapabilitiesCleared() {
		_spec.ClearField(hostresource.FieldCPUCapabilities, field.TypeString)
	}
	if value, ok := hru.mutation.CPUArchitecture(); ok {
		_spec.SetField(hostresource.FieldCPUArchitecture, field.TypeString, value)
	}
	if hru.mutation.CPUArchitectureCleared() {
		_spec.ClearField(hostresource.FieldCPUArchitecture, field.TypeString)
	}
	if value, ok := hru.mutation.CPUThreads(); ok {
		_spec.SetField(hostresource.FieldCPUThreads, field.TypeUint32, value)
	}
	if value, ok := hru.mutation.AddedCPUThreads(); ok {
		_spec.AddField(hostresource.FieldCPUThreads, field.TypeUint32, value)
	}
	if hru.mutation.CPUThreadsCleared() {
		_spec.ClearField(hostresource.FieldCPUThreads, field.TypeUint32)
	}
	if value, ok := hru.mutation.MgmtIP(); ok {
		_spec.SetField(hostresource.FieldMgmtIP, field.TypeString, value)
	}
	if hru.mutation.MgmtIPCleared() {
		_spec.ClearField(hostresource.FieldMgmtIP, field.TypeString)
	}
	if value, ok := hru.mutation.BmcKind(); ok {
		_spec.SetField(hostresource.FieldBmcKind, field.TypeEnum, value)
	}
	if hru.mutation.BmcKindCleared() {
		_spec.ClearField(hostresource.FieldBmcKind, field.TypeEnum)
	}
	if value, ok := hru.mutation.BmcIP(); ok {
		_spec.SetField(hostresource.FieldBmcIP, field.TypeString, value)
	}
	if hru.mutation.BmcIPCleared() {
		_spec.ClearField(hostresource.FieldBmcIP, field.TypeString)
	}
	if value, ok := hru.mutation.BmcUsername(); ok {
		_spec.SetField(hostresource.FieldBmcUsername, field.TypeString, value)
	}
	if hru.mutation.BmcUsernameCleared() {
		_spec.ClearField(hostresource.FieldBmcUsername, field.TypeString)
	}
	if value, ok := hru.mutation.BmcPassword(); ok {
		_spec.SetField(hostresource.FieldBmcPassword, field.TypeString, value)
	}
	if hru.mutation.BmcPasswordCleared() {
		_spec.ClearField(hostresource.FieldBmcPassword, field.TypeString)
	}
	if value, ok := hru.mutation.PxeMAC(); ok {
		_spec.SetField(hostresource.FieldPxeMAC, field.TypeString, value)
	}
	if hru.mutation.PxeMACCleared() {
		_spec.ClearField(hostresource.FieldPxeMAC, field.TypeString)
	}
	if value, ok := hru.mutation.Hostname(); ok {
		_spec.SetField(hostresource.FieldHostname, field.TypeString, value)
	}
	if hru.mutation.HostnameCleared() {
		_spec.ClearField(hostresource.FieldHostname, field.TypeString)
	}
	if value, ok := hru.mutation.ProductName(); ok {
		_spec.SetField(hostresource.FieldProductName, field.TypeString, value)
	}
	if hru.mutation.ProductNameCleared() {
		_spec.ClearField(hostresource.FieldProductName, field.TypeString)
	}
	if value, ok := hru.mutation.BiosVersion(); ok {
		_spec.SetField(hostresource.FieldBiosVersion, field.TypeString, value)
	}
	if hru.mutation.BiosVersionCleared() {
		_spec.ClearField(hostresource.FieldBiosVersion, field.TypeString)
	}
	if value, ok := hru.mutation.BiosReleaseDate(); ok {
		_spec.SetField(hostresource.FieldBiosReleaseDate, field.TypeString, value)
	}
	if hru.mutation.BiosReleaseDateCleared() {
		_spec.ClearField(hostresource.FieldBiosReleaseDate, field.TypeString)
	}
	if value, ok := hru.mutation.BiosVendor(); ok {
		_spec.SetField(hostresource.FieldBiosVendor, field.TypeString, value)
	}
	if hru.mutation.BiosVendorCleared() {
		_spec.ClearField(hostresource.FieldBiosVendor, field.TypeString)
	}
	if value, ok := hru.mutation.Metadata(); ok {
		_spec.SetField(hostresource.FieldMetadata, field.TypeString, value)
	}
	if hru.mutation.MetadataCleared() {
		_spec.ClearField(hostresource.FieldMetadata, field.TypeString)
	}
	if value, ok := hru.mutation.DesiredPowerState(); ok {
		_spec.SetField(hostresource.FieldDesiredPowerState, field.TypeEnum, value)
	}
	if hru.mutation.DesiredPowerStateCleared() {
		_spec.ClearField(hostresource.FieldDesiredPowerState, field.TypeEnum)
	}
	if value, ok := hru.mutation.CurrentPowerState(); ok {
		_spec.SetField(hostresource.FieldCurrentPowerState, field.TypeEnum, value)
	}
	if hru.mutation.CurrentPowerStateCleared() {
		_spec.ClearField(hostresource.FieldCurrentPowerState, field.TypeEnum)
	}
	if hru.mutation.SiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostresource.SiteTable,
			Columns: []string{hostresource.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hru.mutation.SiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostresource.SiteTable,
			Columns: []string{hostresource.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hru.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostresource.ProviderTable,
			Columns: []string{hostresource.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hru.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostresource.ProviderTable,
			Columns: []string{hostresource.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hru.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostresource.ProjectTable,
			Columns: []string{hostresource.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hru.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostresource.ProjectTable,
			Columns: []string{hostresource.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostresource.UserTable,
			Columns: []string{hostresource.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostresource.UserTable,
			Columns: []string{hostresource.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hru.mutation.HostStoragesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostStoragesTable,
			Columns: []string{hostresource.HostStoragesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hoststorageresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hru.mutation.RemovedHostStoragesIDs(); len(nodes) > 0 && !hru.mutation.HostStoragesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostStoragesTable,
			Columns: []string{hostresource.HostStoragesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hoststorageresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hru.mutation.HostStoragesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostStoragesTable,
			Columns: []string{hostresource.HostStoragesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hoststorageresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hru.mutation.HostNicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostNicsTable,
			Columns: []string{hostresource.HostNicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostnicresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hru.mutation.RemovedHostNicsIDs(); len(nodes) > 0 && !hru.mutation.HostNicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostNicsTable,
			Columns: []string{hostresource.HostNicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostnicresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hru.mutation.HostNicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostNicsTable,
			Columns: []string{hostresource.HostNicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostnicresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hru.mutation.HostUsbsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostUsbsTable,
			Columns: []string{hostresource.HostUsbsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostusbresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hru.mutation.RemovedHostUsbsIDs(); len(nodes) > 0 && !hru.mutation.HostUsbsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostUsbsTable,
			Columns: []string{hostresource.HostUsbsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostusbresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hru.mutation.HostUsbsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostUsbsTable,
			Columns: []string{hostresource.HostUsbsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostusbresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hru.mutation.HostGpusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostGpusTable,
			Columns: []string{hostresource.HostGpusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostgpuresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hru.mutation.RemovedHostGpusIDs(); len(nodes) > 0 && !hru.mutation.HostGpusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostGpusTable,
			Columns: []string{hostresource.HostGpusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostgpuresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hru.mutation.HostGpusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostGpusTable,
			Columns: []string{hostresource.HostGpusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostgpuresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hru.mutation.InstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   hostresource.InstanceTable,
			Columns: []string{hostresource.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hru.mutation.InstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   hostresource.InstanceTable,
			Columns: []string{hostresource.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hostresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hru.mutation.done = true
	return n, nil
}

// HostResourceUpdateOne is the builder for updating a single HostResource entity.
type HostResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HostResourceMutation
}

// SetResourceID sets the "resource_id" field.
func (hruo *HostResourceUpdateOne) SetResourceID(s string) *HostResourceUpdateOne {
	hruo.mutation.SetResourceID(s)
	return hruo
}

// SetKind sets the "kind" field.
func (hruo *HostResourceUpdateOne) SetKind(s string) *HostResourceUpdateOne {
	hruo.mutation.SetKind(s)
	return hruo
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillableKind(s *string) *HostResourceUpdateOne {
	if s != nil {
		hruo.SetKind(*s)
	}
	return hruo
}

// ClearKind clears the value of the "kind" field.
func (hruo *HostResourceUpdateOne) ClearKind() *HostResourceUpdateOne {
	hruo.mutation.ClearKind()
	return hruo
}

// SetName sets the "name" field.
func (hruo *HostResourceUpdateOne) SetName(s string) *HostResourceUpdateOne {
	hruo.mutation.SetName(s)
	return hruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillableName(s *string) *HostResourceUpdateOne {
	if s != nil {
		hruo.SetName(*s)
	}
	return hruo
}

// ClearName clears the value of the "name" field.
func (hruo *HostResourceUpdateOne) ClearName() *HostResourceUpdateOne {
	hruo.mutation.ClearName()
	return hruo
}

// SetDesiredState sets the "desired_state" field.
func (hruo *HostResourceUpdateOne) SetDesiredState(hs hostresource.DesiredState) *HostResourceUpdateOne {
	hruo.mutation.SetDesiredState(hs)
	return hruo
}

// SetNillableDesiredState sets the "desired_state" field if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillableDesiredState(hs *hostresource.DesiredState) *HostResourceUpdateOne {
	if hs != nil {
		hruo.SetDesiredState(*hs)
	}
	return hruo
}

// ClearDesiredState clears the value of the "desired_state" field.
func (hruo *HostResourceUpdateOne) ClearDesiredState() *HostResourceUpdateOne {
	hruo.mutation.ClearDesiredState()
	return hruo
}

// SetCurrentState sets the "current_state" field.
func (hruo *HostResourceUpdateOne) SetCurrentState(hs hostresource.CurrentState) *HostResourceUpdateOne {
	hruo.mutation.SetCurrentState(hs)
	return hruo
}

// SetNillableCurrentState sets the "current_state" field if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillableCurrentState(hs *hostresource.CurrentState) *HostResourceUpdateOne {
	if hs != nil {
		hruo.SetCurrentState(*hs)
	}
	return hruo
}

// ClearCurrentState clears the value of the "current_state" field.
func (hruo *HostResourceUpdateOne) ClearCurrentState() *HostResourceUpdateOne {
	hruo.mutation.ClearCurrentState()
	return hruo
}

// SetProviderStatus sets the "provider_status" field.
func (hruo *HostResourceUpdateOne) SetProviderStatus(s string) *HostResourceUpdateOne {
	hruo.mutation.SetProviderStatus(s)
	return hruo
}

// SetNillableProviderStatus sets the "provider_status" field if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillableProviderStatus(s *string) *HostResourceUpdateOne {
	if s != nil {
		hruo.SetProviderStatus(*s)
	}
	return hruo
}

// ClearProviderStatus clears the value of the "provider_status" field.
func (hruo *HostResourceUpdateOne) ClearProviderStatus() *HostResourceUpdateOne {
	hruo.mutation.ClearProviderStatus()
	return hruo
}

// SetHostStatus sets the "host_status" field.
func (hruo *HostResourceUpdateOne) SetHostStatus(hs hostresource.HostStatus) *HostResourceUpdateOne {
	hruo.mutation.SetHostStatus(hs)
	return hruo
}

// SetNillableHostStatus sets the "host_status" field if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillableHostStatus(hs *hostresource.HostStatus) *HostResourceUpdateOne {
	if hs != nil {
		hruo.SetHostStatus(*hs)
	}
	return hruo
}

// ClearHostStatus clears the value of the "host_status" field.
func (hruo *HostResourceUpdateOne) ClearHostStatus() *HostResourceUpdateOne {
	hruo.mutation.ClearHostStatus()
	return hruo
}

// SetProviderStatusDetail sets the "provider_status_detail" field.
func (hruo *HostResourceUpdateOne) SetProviderStatusDetail(s string) *HostResourceUpdateOne {
	hruo.mutation.SetProviderStatusDetail(s)
	return hruo
}

// SetNillableProviderStatusDetail sets the "provider_status_detail" field if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillableProviderStatusDetail(s *string) *HostResourceUpdateOne {
	if s != nil {
		hruo.SetProviderStatusDetail(*s)
	}
	return hruo
}

// ClearProviderStatusDetail clears the value of the "provider_status_detail" field.
func (hruo *HostResourceUpdateOne) ClearProviderStatusDetail() *HostResourceUpdateOne {
	hruo.mutation.ClearProviderStatusDetail()
	return hruo
}

// SetNote sets the "note" field.
func (hruo *HostResourceUpdateOne) SetNote(s string) *HostResourceUpdateOne {
	hruo.mutation.SetNote(s)
	return hruo
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillableNote(s *string) *HostResourceUpdateOne {
	if s != nil {
		hruo.SetNote(*s)
	}
	return hruo
}

// ClearNote clears the value of the "note" field.
func (hruo *HostResourceUpdateOne) ClearNote() *HostResourceUpdateOne {
	hruo.mutation.ClearNote()
	return hruo
}

// SetHardwareKind sets the "hardware_kind" field.
func (hruo *HostResourceUpdateOne) SetHardwareKind(s string) *HostResourceUpdateOne {
	hruo.mutation.SetHardwareKind(s)
	return hruo
}

// SetNillableHardwareKind sets the "hardware_kind" field if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillableHardwareKind(s *string) *HostResourceUpdateOne {
	if s != nil {
		hruo.SetHardwareKind(*s)
	}
	return hruo
}

// ClearHardwareKind clears the value of the "hardware_kind" field.
func (hruo *HostResourceUpdateOne) ClearHardwareKind() *HostResourceUpdateOne {
	hruo.mutation.ClearHardwareKind()
	return hruo
}

// SetSerialNumber sets the "serial_number" field.
func (hruo *HostResourceUpdateOne) SetSerialNumber(s string) *HostResourceUpdateOne {
	hruo.mutation.SetSerialNumber(s)
	return hruo
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillableSerialNumber(s *string) *HostResourceUpdateOne {
	if s != nil {
		hruo.SetSerialNumber(*s)
	}
	return hruo
}

// ClearSerialNumber clears the value of the "serial_number" field.
func (hruo *HostResourceUpdateOne) ClearSerialNumber() *HostResourceUpdateOne {
	hruo.mutation.ClearSerialNumber()
	return hruo
}

// SetUUID sets the "uuid" field.
func (hruo *HostResourceUpdateOne) SetUUID(s string) *HostResourceUpdateOne {
	hruo.mutation.SetUUID(s)
	return hruo
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillableUUID(s *string) *HostResourceUpdateOne {
	if s != nil {
		hruo.SetUUID(*s)
	}
	return hruo
}

// ClearUUID clears the value of the "uuid" field.
func (hruo *HostResourceUpdateOne) ClearUUID() *HostResourceUpdateOne {
	hruo.mutation.ClearUUID()
	return hruo
}

// SetMemoryBytes sets the "memory_bytes" field.
func (hruo *HostResourceUpdateOne) SetMemoryBytes(u uint64) *HostResourceUpdateOne {
	hruo.mutation.ResetMemoryBytes()
	hruo.mutation.SetMemoryBytes(u)
	return hruo
}

// SetNillableMemoryBytes sets the "memory_bytes" field if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillableMemoryBytes(u *uint64) *HostResourceUpdateOne {
	if u != nil {
		hruo.SetMemoryBytes(*u)
	}
	return hruo
}

// AddMemoryBytes adds u to the "memory_bytes" field.
func (hruo *HostResourceUpdateOne) AddMemoryBytes(u int64) *HostResourceUpdateOne {
	hruo.mutation.AddMemoryBytes(u)
	return hruo
}

// ClearMemoryBytes clears the value of the "memory_bytes" field.
func (hruo *HostResourceUpdateOne) ClearMemoryBytes() *HostResourceUpdateOne {
	hruo.mutation.ClearMemoryBytes()
	return hruo
}

// SetCPUModel sets the "cpu_model" field.
func (hruo *HostResourceUpdateOne) SetCPUModel(s string) *HostResourceUpdateOne {
	hruo.mutation.SetCPUModel(s)
	return hruo
}

// SetNillableCPUModel sets the "cpu_model" field if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillableCPUModel(s *string) *HostResourceUpdateOne {
	if s != nil {
		hruo.SetCPUModel(*s)
	}
	return hruo
}

// ClearCPUModel clears the value of the "cpu_model" field.
func (hruo *HostResourceUpdateOne) ClearCPUModel() *HostResourceUpdateOne {
	hruo.mutation.ClearCPUModel()
	return hruo
}

// SetCPUSockets sets the "cpu_sockets" field.
func (hruo *HostResourceUpdateOne) SetCPUSockets(u uint32) *HostResourceUpdateOne {
	hruo.mutation.ResetCPUSockets()
	hruo.mutation.SetCPUSockets(u)
	return hruo
}

// SetNillableCPUSockets sets the "cpu_sockets" field if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillableCPUSockets(u *uint32) *HostResourceUpdateOne {
	if u != nil {
		hruo.SetCPUSockets(*u)
	}
	return hruo
}

// AddCPUSockets adds u to the "cpu_sockets" field.
func (hruo *HostResourceUpdateOne) AddCPUSockets(u int32) *HostResourceUpdateOne {
	hruo.mutation.AddCPUSockets(u)
	return hruo
}

// ClearCPUSockets clears the value of the "cpu_sockets" field.
func (hruo *HostResourceUpdateOne) ClearCPUSockets() *HostResourceUpdateOne {
	hruo.mutation.ClearCPUSockets()
	return hruo
}

// SetCPUCores sets the "cpu_cores" field.
func (hruo *HostResourceUpdateOne) SetCPUCores(u uint32) *HostResourceUpdateOne {
	hruo.mutation.ResetCPUCores()
	hruo.mutation.SetCPUCores(u)
	return hruo
}

// SetNillableCPUCores sets the "cpu_cores" field if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillableCPUCores(u *uint32) *HostResourceUpdateOne {
	if u != nil {
		hruo.SetCPUCores(*u)
	}
	return hruo
}

// AddCPUCores adds u to the "cpu_cores" field.
func (hruo *HostResourceUpdateOne) AddCPUCores(u int32) *HostResourceUpdateOne {
	hruo.mutation.AddCPUCores(u)
	return hruo
}

// ClearCPUCores clears the value of the "cpu_cores" field.
func (hruo *HostResourceUpdateOne) ClearCPUCores() *HostResourceUpdateOne {
	hruo.mutation.ClearCPUCores()
	return hruo
}

// SetCPUCapabilities sets the "cpu_capabilities" field.
func (hruo *HostResourceUpdateOne) SetCPUCapabilities(s string) *HostResourceUpdateOne {
	hruo.mutation.SetCPUCapabilities(s)
	return hruo
}

// SetNillableCPUCapabilities sets the "cpu_capabilities" field if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillableCPUCapabilities(s *string) *HostResourceUpdateOne {
	if s != nil {
		hruo.SetCPUCapabilities(*s)
	}
	return hruo
}

// ClearCPUCapabilities clears the value of the "cpu_capabilities" field.
func (hruo *HostResourceUpdateOne) ClearCPUCapabilities() *HostResourceUpdateOne {
	hruo.mutation.ClearCPUCapabilities()
	return hruo
}

// SetCPUArchitecture sets the "cpu_architecture" field.
func (hruo *HostResourceUpdateOne) SetCPUArchitecture(s string) *HostResourceUpdateOne {
	hruo.mutation.SetCPUArchitecture(s)
	return hruo
}

// SetNillableCPUArchitecture sets the "cpu_architecture" field if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillableCPUArchitecture(s *string) *HostResourceUpdateOne {
	if s != nil {
		hruo.SetCPUArchitecture(*s)
	}
	return hruo
}

// ClearCPUArchitecture clears the value of the "cpu_architecture" field.
func (hruo *HostResourceUpdateOne) ClearCPUArchitecture() *HostResourceUpdateOne {
	hruo.mutation.ClearCPUArchitecture()
	return hruo
}

// SetCPUThreads sets the "cpu_threads" field.
func (hruo *HostResourceUpdateOne) SetCPUThreads(u uint32) *HostResourceUpdateOne {
	hruo.mutation.ResetCPUThreads()
	hruo.mutation.SetCPUThreads(u)
	return hruo
}

// SetNillableCPUThreads sets the "cpu_threads" field if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillableCPUThreads(u *uint32) *HostResourceUpdateOne {
	if u != nil {
		hruo.SetCPUThreads(*u)
	}
	return hruo
}

// AddCPUThreads adds u to the "cpu_threads" field.
func (hruo *HostResourceUpdateOne) AddCPUThreads(u int32) *HostResourceUpdateOne {
	hruo.mutation.AddCPUThreads(u)
	return hruo
}

// ClearCPUThreads clears the value of the "cpu_threads" field.
func (hruo *HostResourceUpdateOne) ClearCPUThreads() *HostResourceUpdateOne {
	hruo.mutation.ClearCPUThreads()
	return hruo
}

// SetMgmtIP sets the "mgmt_ip" field.
func (hruo *HostResourceUpdateOne) SetMgmtIP(s string) *HostResourceUpdateOne {
	hruo.mutation.SetMgmtIP(s)
	return hruo
}

// SetNillableMgmtIP sets the "mgmt_ip" field if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillableMgmtIP(s *string) *HostResourceUpdateOne {
	if s != nil {
		hruo.SetMgmtIP(*s)
	}
	return hruo
}

// ClearMgmtIP clears the value of the "mgmt_ip" field.
func (hruo *HostResourceUpdateOne) ClearMgmtIP() *HostResourceUpdateOne {
	hruo.mutation.ClearMgmtIP()
	return hruo
}

// SetBmcKind sets the "bmc_kind" field.
func (hruo *HostResourceUpdateOne) SetBmcKind(hk hostresource.BmcKind) *HostResourceUpdateOne {
	hruo.mutation.SetBmcKind(hk)
	return hruo
}

// SetNillableBmcKind sets the "bmc_kind" field if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillableBmcKind(hk *hostresource.BmcKind) *HostResourceUpdateOne {
	if hk != nil {
		hruo.SetBmcKind(*hk)
	}
	return hruo
}

// ClearBmcKind clears the value of the "bmc_kind" field.
func (hruo *HostResourceUpdateOne) ClearBmcKind() *HostResourceUpdateOne {
	hruo.mutation.ClearBmcKind()
	return hruo
}

// SetBmcIP sets the "bmc_ip" field.
func (hruo *HostResourceUpdateOne) SetBmcIP(s string) *HostResourceUpdateOne {
	hruo.mutation.SetBmcIP(s)
	return hruo
}

// SetNillableBmcIP sets the "bmc_ip" field if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillableBmcIP(s *string) *HostResourceUpdateOne {
	if s != nil {
		hruo.SetBmcIP(*s)
	}
	return hruo
}

// ClearBmcIP clears the value of the "bmc_ip" field.
func (hruo *HostResourceUpdateOne) ClearBmcIP() *HostResourceUpdateOne {
	hruo.mutation.ClearBmcIP()
	return hruo
}

// SetBmcUsername sets the "bmc_username" field.
func (hruo *HostResourceUpdateOne) SetBmcUsername(s string) *HostResourceUpdateOne {
	hruo.mutation.SetBmcUsername(s)
	return hruo
}

// SetNillableBmcUsername sets the "bmc_username" field if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillableBmcUsername(s *string) *HostResourceUpdateOne {
	if s != nil {
		hruo.SetBmcUsername(*s)
	}
	return hruo
}

// ClearBmcUsername clears the value of the "bmc_username" field.
func (hruo *HostResourceUpdateOne) ClearBmcUsername() *HostResourceUpdateOne {
	hruo.mutation.ClearBmcUsername()
	return hruo
}

// SetBmcPassword sets the "bmc_password" field.
func (hruo *HostResourceUpdateOne) SetBmcPassword(s string) *HostResourceUpdateOne {
	hruo.mutation.SetBmcPassword(s)
	return hruo
}

// SetNillableBmcPassword sets the "bmc_password" field if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillableBmcPassword(s *string) *HostResourceUpdateOne {
	if s != nil {
		hruo.SetBmcPassword(*s)
	}
	return hruo
}

// ClearBmcPassword clears the value of the "bmc_password" field.
func (hruo *HostResourceUpdateOne) ClearBmcPassword() *HostResourceUpdateOne {
	hruo.mutation.ClearBmcPassword()
	return hruo
}

// SetPxeMAC sets the "pxe_mac" field.
func (hruo *HostResourceUpdateOne) SetPxeMAC(s string) *HostResourceUpdateOne {
	hruo.mutation.SetPxeMAC(s)
	return hruo
}

// SetNillablePxeMAC sets the "pxe_mac" field if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillablePxeMAC(s *string) *HostResourceUpdateOne {
	if s != nil {
		hruo.SetPxeMAC(*s)
	}
	return hruo
}

// ClearPxeMAC clears the value of the "pxe_mac" field.
func (hruo *HostResourceUpdateOne) ClearPxeMAC() *HostResourceUpdateOne {
	hruo.mutation.ClearPxeMAC()
	return hruo
}

// SetHostname sets the "hostname" field.
func (hruo *HostResourceUpdateOne) SetHostname(s string) *HostResourceUpdateOne {
	hruo.mutation.SetHostname(s)
	return hruo
}

// SetNillableHostname sets the "hostname" field if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillableHostname(s *string) *HostResourceUpdateOne {
	if s != nil {
		hruo.SetHostname(*s)
	}
	return hruo
}

// ClearHostname clears the value of the "hostname" field.
func (hruo *HostResourceUpdateOne) ClearHostname() *HostResourceUpdateOne {
	hruo.mutation.ClearHostname()
	return hruo
}

// SetProductName sets the "product_name" field.
func (hruo *HostResourceUpdateOne) SetProductName(s string) *HostResourceUpdateOne {
	hruo.mutation.SetProductName(s)
	return hruo
}

// SetNillableProductName sets the "product_name" field if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillableProductName(s *string) *HostResourceUpdateOne {
	if s != nil {
		hruo.SetProductName(*s)
	}
	return hruo
}

// ClearProductName clears the value of the "product_name" field.
func (hruo *HostResourceUpdateOne) ClearProductName() *HostResourceUpdateOne {
	hruo.mutation.ClearProductName()
	return hruo
}

// SetBiosVersion sets the "bios_version" field.
func (hruo *HostResourceUpdateOne) SetBiosVersion(s string) *HostResourceUpdateOne {
	hruo.mutation.SetBiosVersion(s)
	return hruo
}

// SetNillableBiosVersion sets the "bios_version" field if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillableBiosVersion(s *string) *HostResourceUpdateOne {
	if s != nil {
		hruo.SetBiosVersion(*s)
	}
	return hruo
}

// ClearBiosVersion clears the value of the "bios_version" field.
func (hruo *HostResourceUpdateOne) ClearBiosVersion() *HostResourceUpdateOne {
	hruo.mutation.ClearBiosVersion()
	return hruo
}

// SetBiosReleaseDate sets the "bios_release_date" field.
func (hruo *HostResourceUpdateOne) SetBiosReleaseDate(s string) *HostResourceUpdateOne {
	hruo.mutation.SetBiosReleaseDate(s)
	return hruo
}

// SetNillableBiosReleaseDate sets the "bios_release_date" field if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillableBiosReleaseDate(s *string) *HostResourceUpdateOne {
	if s != nil {
		hruo.SetBiosReleaseDate(*s)
	}
	return hruo
}

// ClearBiosReleaseDate clears the value of the "bios_release_date" field.
func (hruo *HostResourceUpdateOne) ClearBiosReleaseDate() *HostResourceUpdateOne {
	hruo.mutation.ClearBiosReleaseDate()
	return hruo
}

// SetBiosVendor sets the "bios_vendor" field.
func (hruo *HostResourceUpdateOne) SetBiosVendor(s string) *HostResourceUpdateOne {
	hruo.mutation.SetBiosVendor(s)
	return hruo
}

// SetNillableBiosVendor sets the "bios_vendor" field if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillableBiosVendor(s *string) *HostResourceUpdateOne {
	if s != nil {
		hruo.SetBiosVendor(*s)
	}
	return hruo
}

// ClearBiosVendor clears the value of the "bios_vendor" field.
func (hruo *HostResourceUpdateOne) ClearBiosVendor() *HostResourceUpdateOne {
	hruo.mutation.ClearBiosVendor()
	return hruo
}

// SetMetadata sets the "metadata" field.
func (hruo *HostResourceUpdateOne) SetMetadata(s string) *HostResourceUpdateOne {
	hruo.mutation.SetMetadata(s)
	return hruo
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillableMetadata(s *string) *HostResourceUpdateOne {
	if s != nil {
		hruo.SetMetadata(*s)
	}
	return hruo
}

// ClearMetadata clears the value of the "metadata" field.
func (hruo *HostResourceUpdateOne) ClearMetadata() *HostResourceUpdateOne {
	hruo.mutation.ClearMetadata()
	return hruo
}

// SetDesiredPowerState sets the "desired_power_state" field.
func (hruo *HostResourceUpdateOne) SetDesiredPowerState(hps hostresource.DesiredPowerState) *HostResourceUpdateOne {
	hruo.mutation.SetDesiredPowerState(hps)
	return hruo
}

// SetNillableDesiredPowerState sets the "desired_power_state" field if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillableDesiredPowerState(hps *hostresource.DesiredPowerState) *HostResourceUpdateOne {
	if hps != nil {
		hruo.SetDesiredPowerState(*hps)
	}
	return hruo
}

// ClearDesiredPowerState clears the value of the "desired_power_state" field.
func (hruo *HostResourceUpdateOne) ClearDesiredPowerState() *HostResourceUpdateOne {
	hruo.mutation.ClearDesiredPowerState()
	return hruo
}

// SetCurrentPowerState sets the "current_power_state" field.
func (hruo *HostResourceUpdateOne) SetCurrentPowerState(hps hostresource.CurrentPowerState) *HostResourceUpdateOne {
	hruo.mutation.SetCurrentPowerState(hps)
	return hruo
}

// SetNillableCurrentPowerState sets the "current_power_state" field if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillableCurrentPowerState(hps *hostresource.CurrentPowerState) *HostResourceUpdateOne {
	if hps != nil {
		hruo.SetCurrentPowerState(*hps)
	}
	return hruo
}

// ClearCurrentPowerState clears the value of the "current_power_state" field.
func (hruo *HostResourceUpdateOne) ClearCurrentPowerState() *HostResourceUpdateOne {
	hruo.mutation.ClearCurrentPowerState()
	return hruo
}

// SetSiteID sets the "site" edge to the SiteResource entity by ID.
func (hruo *HostResourceUpdateOne) SetSiteID(id int) *HostResourceUpdateOne {
	hruo.mutation.SetSiteID(id)
	return hruo
}

// SetNillableSiteID sets the "site" edge to the SiteResource entity by ID if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillableSiteID(id *int) *HostResourceUpdateOne {
	if id != nil {
		hruo = hruo.SetSiteID(*id)
	}
	return hruo
}

// SetSite sets the "site" edge to the SiteResource entity.
func (hruo *HostResourceUpdateOne) SetSite(s *SiteResource) *HostResourceUpdateOne {
	return hruo.SetSiteID(s.ID)
}

// SetProviderID sets the "provider" edge to the ProviderResource entity by ID.
func (hruo *HostResourceUpdateOne) SetProviderID(id int) *HostResourceUpdateOne {
	hruo.mutation.SetProviderID(id)
	return hruo
}

// SetNillableProviderID sets the "provider" edge to the ProviderResource entity by ID if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillableProviderID(id *int) *HostResourceUpdateOne {
	if id != nil {
		hruo = hruo.SetProviderID(*id)
	}
	return hruo
}

// SetProvider sets the "provider" edge to the ProviderResource entity.
func (hruo *HostResourceUpdateOne) SetProvider(p *ProviderResource) *HostResourceUpdateOne {
	return hruo.SetProviderID(p.ID)
}

// SetProjectID sets the "project" edge to the ProjectResource entity by ID.
func (hruo *HostResourceUpdateOne) SetProjectID(id int) *HostResourceUpdateOne {
	hruo.mutation.SetProjectID(id)
	return hruo
}

// SetNillableProjectID sets the "project" edge to the ProjectResource entity by ID if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillableProjectID(id *int) *HostResourceUpdateOne {
	if id != nil {
		hruo = hruo.SetProjectID(*id)
	}
	return hruo
}

// SetProject sets the "project" edge to the ProjectResource entity.
func (hruo *HostResourceUpdateOne) SetProject(p *ProjectResource) *HostResourceUpdateOne {
	return hruo.SetProjectID(p.ID)
}

// SetUserID sets the "user" edge to the UserResource entity by ID.
func (hruo *HostResourceUpdateOne) SetUserID(id int) *HostResourceUpdateOne {
	hruo.mutation.SetUserID(id)
	return hruo
}

// SetNillableUserID sets the "user" edge to the UserResource entity by ID if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillableUserID(id *int) *HostResourceUpdateOne {
	if id != nil {
		hruo = hruo.SetUserID(*id)
	}
	return hruo
}

// SetUser sets the "user" edge to the UserResource entity.
func (hruo *HostResourceUpdateOne) SetUser(u *UserResource) *HostResourceUpdateOne {
	return hruo.SetUserID(u.ID)
}

// AddHostStorageIDs adds the "host_storages" edge to the HoststorageResource entity by IDs.
func (hruo *HostResourceUpdateOne) AddHostStorageIDs(ids ...int) *HostResourceUpdateOne {
	hruo.mutation.AddHostStorageIDs(ids...)
	return hruo
}

// AddHostStorages adds the "host_storages" edges to the HoststorageResource entity.
func (hruo *HostResourceUpdateOne) AddHostStorages(h ...*HoststorageResource) *HostResourceUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hruo.AddHostStorageIDs(ids...)
}

// AddHostNicIDs adds the "host_nics" edge to the HostnicResource entity by IDs.
func (hruo *HostResourceUpdateOne) AddHostNicIDs(ids ...int) *HostResourceUpdateOne {
	hruo.mutation.AddHostNicIDs(ids...)
	return hruo
}

// AddHostNics adds the "host_nics" edges to the HostnicResource entity.
func (hruo *HostResourceUpdateOne) AddHostNics(h ...*HostnicResource) *HostResourceUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hruo.AddHostNicIDs(ids...)
}

// AddHostUsbIDs adds the "host_usbs" edge to the HostusbResource entity by IDs.
func (hruo *HostResourceUpdateOne) AddHostUsbIDs(ids ...int) *HostResourceUpdateOne {
	hruo.mutation.AddHostUsbIDs(ids...)
	return hruo
}

// AddHostUsbs adds the "host_usbs" edges to the HostusbResource entity.
func (hruo *HostResourceUpdateOne) AddHostUsbs(h ...*HostusbResource) *HostResourceUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hruo.AddHostUsbIDs(ids...)
}

// AddHostGpuIDs adds the "host_gpus" edge to the HostgpuResource entity by IDs.
func (hruo *HostResourceUpdateOne) AddHostGpuIDs(ids ...int) *HostResourceUpdateOne {
	hruo.mutation.AddHostGpuIDs(ids...)
	return hruo
}

// AddHostGpus adds the "host_gpus" edges to the HostgpuResource entity.
func (hruo *HostResourceUpdateOne) AddHostGpus(h ...*HostgpuResource) *HostResourceUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hruo.AddHostGpuIDs(ids...)
}

// SetInstanceID sets the "instance" edge to the InstanceResource entity by ID.
func (hruo *HostResourceUpdateOne) SetInstanceID(id int) *HostResourceUpdateOne {
	hruo.mutation.SetInstanceID(id)
	return hruo
}

// SetNillableInstanceID sets the "instance" edge to the InstanceResource entity by ID if the given value is not nil.
func (hruo *HostResourceUpdateOne) SetNillableInstanceID(id *int) *HostResourceUpdateOne {
	if id != nil {
		hruo = hruo.SetInstanceID(*id)
	}
	return hruo
}

// SetInstance sets the "instance" edge to the InstanceResource entity.
func (hruo *HostResourceUpdateOne) SetInstance(i *InstanceResource) *HostResourceUpdateOne {
	return hruo.SetInstanceID(i.ID)
}

// Mutation returns the HostResourceMutation object of the builder.
func (hruo *HostResourceUpdateOne) Mutation() *HostResourceMutation {
	return hruo.mutation
}

// ClearSite clears the "site" edge to the SiteResource entity.
func (hruo *HostResourceUpdateOne) ClearSite() *HostResourceUpdateOne {
	hruo.mutation.ClearSite()
	return hruo
}

// ClearProvider clears the "provider" edge to the ProviderResource entity.
func (hruo *HostResourceUpdateOne) ClearProvider() *HostResourceUpdateOne {
	hruo.mutation.ClearProvider()
	return hruo
}

// ClearProject clears the "project" edge to the ProjectResource entity.
func (hruo *HostResourceUpdateOne) ClearProject() *HostResourceUpdateOne {
	hruo.mutation.ClearProject()
	return hruo
}

// ClearUser clears the "user" edge to the UserResource entity.
func (hruo *HostResourceUpdateOne) ClearUser() *HostResourceUpdateOne {
	hruo.mutation.ClearUser()
	return hruo
}

// ClearHostStorages clears all "host_storages" edges to the HoststorageResource entity.
func (hruo *HostResourceUpdateOne) ClearHostStorages() *HostResourceUpdateOne {
	hruo.mutation.ClearHostStorages()
	return hruo
}

// RemoveHostStorageIDs removes the "host_storages" edge to HoststorageResource entities by IDs.
func (hruo *HostResourceUpdateOne) RemoveHostStorageIDs(ids ...int) *HostResourceUpdateOne {
	hruo.mutation.RemoveHostStorageIDs(ids...)
	return hruo
}

// RemoveHostStorages removes "host_storages" edges to HoststorageResource entities.
func (hruo *HostResourceUpdateOne) RemoveHostStorages(h ...*HoststorageResource) *HostResourceUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hruo.RemoveHostStorageIDs(ids...)
}

// ClearHostNics clears all "host_nics" edges to the HostnicResource entity.
func (hruo *HostResourceUpdateOne) ClearHostNics() *HostResourceUpdateOne {
	hruo.mutation.ClearHostNics()
	return hruo
}

// RemoveHostNicIDs removes the "host_nics" edge to HostnicResource entities by IDs.
func (hruo *HostResourceUpdateOne) RemoveHostNicIDs(ids ...int) *HostResourceUpdateOne {
	hruo.mutation.RemoveHostNicIDs(ids...)
	return hruo
}

// RemoveHostNics removes "host_nics" edges to HostnicResource entities.
func (hruo *HostResourceUpdateOne) RemoveHostNics(h ...*HostnicResource) *HostResourceUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hruo.RemoveHostNicIDs(ids...)
}

// ClearHostUsbs clears all "host_usbs" edges to the HostusbResource entity.
func (hruo *HostResourceUpdateOne) ClearHostUsbs() *HostResourceUpdateOne {
	hruo.mutation.ClearHostUsbs()
	return hruo
}

// RemoveHostUsbIDs removes the "host_usbs" edge to HostusbResource entities by IDs.
func (hruo *HostResourceUpdateOne) RemoveHostUsbIDs(ids ...int) *HostResourceUpdateOne {
	hruo.mutation.RemoveHostUsbIDs(ids...)
	return hruo
}

// RemoveHostUsbs removes "host_usbs" edges to HostusbResource entities.
func (hruo *HostResourceUpdateOne) RemoveHostUsbs(h ...*HostusbResource) *HostResourceUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hruo.RemoveHostUsbIDs(ids...)
}

// ClearHostGpus clears all "host_gpus" edges to the HostgpuResource entity.
func (hruo *HostResourceUpdateOne) ClearHostGpus() *HostResourceUpdateOne {
	hruo.mutation.ClearHostGpus()
	return hruo
}

// RemoveHostGpuIDs removes the "host_gpus" edge to HostgpuResource entities by IDs.
func (hruo *HostResourceUpdateOne) RemoveHostGpuIDs(ids ...int) *HostResourceUpdateOne {
	hruo.mutation.RemoveHostGpuIDs(ids...)
	return hruo
}

// RemoveHostGpus removes "host_gpus" edges to HostgpuResource entities.
func (hruo *HostResourceUpdateOne) RemoveHostGpus(h ...*HostgpuResource) *HostResourceUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hruo.RemoveHostGpuIDs(ids...)
}

// ClearInstance clears the "instance" edge to the InstanceResource entity.
func (hruo *HostResourceUpdateOne) ClearInstance() *HostResourceUpdateOne {
	hruo.mutation.ClearInstance()
	return hruo
}

// Where appends a list predicates to the HostResourceUpdate builder.
func (hruo *HostResourceUpdateOne) Where(ps ...predicate.HostResource) *HostResourceUpdateOne {
	hruo.mutation.Where(ps...)
	return hruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hruo *HostResourceUpdateOne) Select(field string, fields ...string) *HostResourceUpdateOne {
	hruo.fields = append([]string{field}, fields...)
	return hruo
}

// Save executes the query and returns the updated HostResource entity.
func (hruo *HostResourceUpdateOne) Save(ctx context.Context) (*HostResource, error) {
	return withHooks[*HostResource, HostResourceMutation](ctx, hruo.sqlSave, hruo.mutation, hruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hruo *HostResourceUpdateOne) SaveX(ctx context.Context) *HostResource {
	node, err := hruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hruo *HostResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := hruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hruo *HostResourceUpdateOne) ExecX(ctx context.Context) {
	if err := hruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hruo *HostResourceUpdateOne) check() error {
	if v, ok := hruo.mutation.DesiredState(); ok {
		if err := hostresource.DesiredStateValidator(v); err != nil {
			return &ValidationError{Name: "desired_state", err: fmt.Errorf(`ent: validator failed for field "HostResource.desired_state": %w`, err)}
		}
	}
	if v, ok := hruo.mutation.CurrentState(); ok {
		if err := hostresource.CurrentStateValidator(v); err != nil {
			return &ValidationError{Name: "current_state", err: fmt.Errorf(`ent: validator failed for field "HostResource.current_state": %w`, err)}
		}
	}
	if v, ok := hruo.mutation.HostStatus(); ok {
		if err := hostresource.HostStatusValidator(v); err != nil {
			return &ValidationError{Name: "host_status", err: fmt.Errorf(`ent: validator failed for field "HostResource.host_status": %w`, err)}
		}
	}
	if v, ok := hruo.mutation.BmcKind(); ok {
		if err := hostresource.BmcKindValidator(v); err != nil {
			return &ValidationError{Name: "bmc_kind", err: fmt.Errorf(`ent: validator failed for field "HostResource.bmc_kind": %w`, err)}
		}
	}
	if v, ok := hruo.mutation.DesiredPowerState(); ok {
		if err := hostresource.DesiredPowerStateValidator(v); err != nil {
			return &ValidationError{Name: "desired_power_state", err: fmt.Errorf(`ent: validator failed for field "HostResource.desired_power_state": %w`, err)}
		}
	}
	if v, ok := hruo.mutation.CurrentPowerState(); ok {
		if err := hostresource.CurrentPowerStateValidator(v); err != nil {
			return &ValidationError{Name: "current_power_state", err: fmt.Errorf(`ent: validator failed for field "HostResource.current_power_state": %w`, err)}
		}
	}
	return nil
}

func (hruo *HostResourceUpdateOne) sqlSave(ctx context.Context) (_node *HostResource, err error) {
	if err := hruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hostresource.Table, hostresource.Columns, sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt))
	id, ok := hruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HostResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hostresource.FieldID)
		for _, f := range fields {
			if !hostresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hostresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hruo.mutation.ResourceID(); ok {
		_spec.SetField(hostresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := hruo.mutation.Kind(); ok {
		_spec.SetField(hostresource.FieldKind, field.TypeString, value)
	}
	if hruo.mutation.KindCleared() {
		_spec.ClearField(hostresource.FieldKind, field.TypeString)
	}
	if value, ok := hruo.mutation.Name(); ok {
		_spec.SetField(hostresource.FieldName, field.TypeString, value)
	}
	if hruo.mutation.NameCleared() {
		_spec.ClearField(hostresource.FieldName, field.TypeString)
	}
	if value, ok := hruo.mutation.DesiredState(); ok {
		_spec.SetField(hostresource.FieldDesiredState, field.TypeEnum, value)
	}
	if hruo.mutation.DesiredStateCleared() {
		_spec.ClearField(hostresource.FieldDesiredState, field.TypeEnum)
	}
	if value, ok := hruo.mutation.CurrentState(); ok {
		_spec.SetField(hostresource.FieldCurrentState, field.TypeEnum, value)
	}
	if hruo.mutation.CurrentStateCleared() {
		_spec.ClearField(hostresource.FieldCurrentState, field.TypeEnum)
	}
	if value, ok := hruo.mutation.ProviderStatus(); ok {
		_spec.SetField(hostresource.FieldProviderStatus, field.TypeString, value)
	}
	if hruo.mutation.ProviderStatusCleared() {
		_spec.ClearField(hostresource.FieldProviderStatus, field.TypeString)
	}
	if value, ok := hruo.mutation.HostStatus(); ok {
		_spec.SetField(hostresource.FieldHostStatus, field.TypeEnum, value)
	}
	if hruo.mutation.HostStatusCleared() {
		_spec.ClearField(hostresource.FieldHostStatus, field.TypeEnum)
	}
	if value, ok := hruo.mutation.ProviderStatusDetail(); ok {
		_spec.SetField(hostresource.FieldProviderStatusDetail, field.TypeString, value)
	}
	if hruo.mutation.ProviderStatusDetailCleared() {
		_spec.ClearField(hostresource.FieldProviderStatusDetail, field.TypeString)
	}
	if value, ok := hruo.mutation.Note(); ok {
		_spec.SetField(hostresource.FieldNote, field.TypeString, value)
	}
	if hruo.mutation.NoteCleared() {
		_spec.ClearField(hostresource.FieldNote, field.TypeString)
	}
	if value, ok := hruo.mutation.HardwareKind(); ok {
		_spec.SetField(hostresource.FieldHardwareKind, field.TypeString, value)
	}
	if hruo.mutation.HardwareKindCleared() {
		_spec.ClearField(hostresource.FieldHardwareKind, field.TypeString)
	}
	if value, ok := hruo.mutation.SerialNumber(); ok {
		_spec.SetField(hostresource.FieldSerialNumber, field.TypeString, value)
	}
	if hruo.mutation.SerialNumberCleared() {
		_spec.ClearField(hostresource.FieldSerialNumber, field.TypeString)
	}
	if value, ok := hruo.mutation.UUID(); ok {
		_spec.SetField(hostresource.FieldUUID, field.TypeString, value)
	}
	if hruo.mutation.UUIDCleared() {
		_spec.ClearField(hostresource.FieldUUID, field.TypeString)
	}
	if value, ok := hruo.mutation.MemoryBytes(); ok {
		_spec.SetField(hostresource.FieldMemoryBytes, field.TypeUint64, value)
	}
	if value, ok := hruo.mutation.AddedMemoryBytes(); ok {
		_spec.AddField(hostresource.FieldMemoryBytes, field.TypeUint64, value)
	}
	if hruo.mutation.MemoryBytesCleared() {
		_spec.ClearField(hostresource.FieldMemoryBytes, field.TypeUint64)
	}
	if value, ok := hruo.mutation.CPUModel(); ok {
		_spec.SetField(hostresource.FieldCPUModel, field.TypeString, value)
	}
	if hruo.mutation.CPUModelCleared() {
		_spec.ClearField(hostresource.FieldCPUModel, field.TypeString)
	}
	if value, ok := hruo.mutation.CPUSockets(); ok {
		_spec.SetField(hostresource.FieldCPUSockets, field.TypeUint32, value)
	}
	if value, ok := hruo.mutation.AddedCPUSockets(); ok {
		_spec.AddField(hostresource.FieldCPUSockets, field.TypeUint32, value)
	}
	if hruo.mutation.CPUSocketsCleared() {
		_spec.ClearField(hostresource.FieldCPUSockets, field.TypeUint32)
	}
	if value, ok := hruo.mutation.CPUCores(); ok {
		_spec.SetField(hostresource.FieldCPUCores, field.TypeUint32, value)
	}
	if value, ok := hruo.mutation.AddedCPUCores(); ok {
		_spec.AddField(hostresource.FieldCPUCores, field.TypeUint32, value)
	}
	if hruo.mutation.CPUCoresCleared() {
		_spec.ClearField(hostresource.FieldCPUCores, field.TypeUint32)
	}
	if value, ok := hruo.mutation.CPUCapabilities(); ok {
		_spec.SetField(hostresource.FieldCPUCapabilities, field.TypeString, value)
	}
	if hruo.mutation.CPUCapabilitiesCleared() {
		_spec.ClearField(hostresource.FieldCPUCapabilities, field.TypeString)
	}
	if value, ok := hruo.mutation.CPUArchitecture(); ok {
		_spec.SetField(hostresource.FieldCPUArchitecture, field.TypeString, value)
	}
	if hruo.mutation.CPUArchitectureCleared() {
		_spec.ClearField(hostresource.FieldCPUArchitecture, field.TypeString)
	}
	if value, ok := hruo.mutation.CPUThreads(); ok {
		_spec.SetField(hostresource.FieldCPUThreads, field.TypeUint32, value)
	}
	if value, ok := hruo.mutation.AddedCPUThreads(); ok {
		_spec.AddField(hostresource.FieldCPUThreads, field.TypeUint32, value)
	}
	if hruo.mutation.CPUThreadsCleared() {
		_spec.ClearField(hostresource.FieldCPUThreads, field.TypeUint32)
	}
	if value, ok := hruo.mutation.MgmtIP(); ok {
		_spec.SetField(hostresource.FieldMgmtIP, field.TypeString, value)
	}
	if hruo.mutation.MgmtIPCleared() {
		_spec.ClearField(hostresource.FieldMgmtIP, field.TypeString)
	}
	if value, ok := hruo.mutation.BmcKind(); ok {
		_spec.SetField(hostresource.FieldBmcKind, field.TypeEnum, value)
	}
	if hruo.mutation.BmcKindCleared() {
		_spec.ClearField(hostresource.FieldBmcKind, field.TypeEnum)
	}
	if value, ok := hruo.mutation.BmcIP(); ok {
		_spec.SetField(hostresource.FieldBmcIP, field.TypeString, value)
	}
	if hruo.mutation.BmcIPCleared() {
		_spec.ClearField(hostresource.FieldBmcIP, field.TypeString)
	}
	if value, ok := hruo.mutation.BmcUsername(); ok {
		_spec.SetField(hostresource.FieldBmcUsername, field.TypeString, value)
	}
	if hruo.mutation.BmcUsernameCleared() {
		_spec.ClearField(hostresource.FieldBmcUsername, field.TypeString)
	}
	if value, ok := hruo.mutation.BmcPassword(); ok {
		_spec.SetField(hostresource.FieldBmcPassword, field.TypeString, value)
	}
	if hruo.mutation.BmcPasswordCleared() {
		_spec.ClearField(hostresource.FieldBmcPassword, field.TypeString)
	}
	if value, ok := hruo.mutation.PxeMAC(); ok {
		_spec.SetField(hostresource.FieldPxeMAC, field.TypeString, value)
	}
	if hruo.mutation.PxeMACCleared() {
		_spec.ClearField(hostresource.FieldPxeMAC, field.TypeString)
	}
	if value, ok := hruo.mutation.Hostname(); ok {
		_spec.SetField(hostresource.FieldHostname, field.TypeString, value)
	}
	if hruo.mutation.HostnameCleared() {
		_spec.ClearField(hostresource.FieldHostname, field.TypeString)
	}
	if value, ok := hruo.mutation.ProductName(); ok {
		_spec.SetField(hostresource.FieldProductName, field.TypeString, value)
	}
	if hruo.mutation.ProductNameCleared() {
		_spec.ClearField(hostresource.FieldProductName, field.TypeString)
	}
	if value, ok := hruo.mutation.BiosVersion(); ok {
		_spec.SetField(hostresource.FieldBiosVersion, field.TypeString, value)
	}
	if hruo.mutation.BiosVersionCleared() {
		_spec.ClearField(hostresource.FieldBiosVersion, field.TypeString)
	}
	if value, ok := hruo.mutation.BiosReleaseDate(); ok {
		_spec.SetField(hostresource.FieldBiosReleaseDate, field.TypeString, value)
	}
	if hruo.mutation.BiosReleaseDateCleared() {
		_spec.ClearField(hostresource.FieldBiosReleaseDate, field.TypeString)
	}
	if value, ok := hruo.mutation.BiosVendor(); ok {
		_spec.SetField(hostresource.FieldBiosVendor, field.TypeString, value)
	}
	if hruo.mutation.BiosVendorCleared() {
		_spec.ClearField(hostresource.FieldBiosVendor, field.TypeString)
	}
	if value, ok := hruo.mutation.Metadata(); ok {
		_spec.SetField(hostresource.FieldMetadata, field.TypeString, value)
	}
	if hruo.mutation.MetadataCleared() {
		_spec.ClearField(hostresource.FieldMetadata, field.TypeString)
	}
	if value, ok := hruo.mutation.DesiredPowerState(); ok {
		_spec.SetField(hostresource.FieldDesiredPowerState, field.TypeEnum, value)
	}
	if hruo.mutation.DesiredPowerStateCleared() {
		_spec.ClearField(hostresource.FieldDesiredPowerState, field.TypeEnum)
	}
	if value, ok := hruo.mutation.CurrentPowerState(); ok {
		_spec.SetField(hostresource.FieldCurrentPowerState, field.TypeEnum, value)
	}
	if hruo.mutation.CurrentPowerStateCleared() {
		_spec.ClearField(hostresource.FieldCurrentPowerState, field.TypeEnum)
	}
	if hruo.mutation.SiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostresource.SiteTable,
			Columns: []string{hostresource.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hruo.mutation.SiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostresource.SiteTable,
			Columns: []string{hostresource.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hruo.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostresource.ProviderTable,
			Columns: []string{hostresource.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hruo.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostresource.ProviderTable,
			Columns: []string{hostresource.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hruo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostresource.ProjectTable,
			Columns: []string{hostresource.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hruo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostresource.ProjectTable,
			Columns: []string{hostresource.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostresource.UserTable,
			Columns: []string{hostresource.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostresource.UserTable,
			Columns: []string{hostresource.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hruo.mutation.HostStoragesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostStoragesTable,
			Columns: []string{hostresource.HostStoragesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hoststorageresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hruo.mutation.RemovedHostStoragesIDs(); len(nodes) > 0 && !hruo.mutation.HostStoragesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostStoragesTable,
			Columns: []string{hostresource.HostStoragesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hoststorageresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hruo.mutation.HostStoragesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostStoragesTable,
			Columns: []string{hostresource.HostStoragesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hoststorageresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hruo.mutation.HostNicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostNicsTable,
			Columns: []string{hostresource.HostNicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostnicresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hruo.mutation.RemovedHostNicsIDs(); len(nodes) > 0 && !hruo.mutation.HostNicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostNicsTable,
			Columns: []string{hostresource.HostNicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostnicresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hruo.mutation.HostNicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostNicsTable,
			Columns: []string{hostresource.HostNicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostnicresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hruo.mutation.HostUsbsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostUsbsTable,
			Columns: []string{hostresource.HostUsbsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostusbresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hruo.mutation.RemovedHostUsbsIDs(); len(nodes) > 0 && !hruo.mutation.HostUsbsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostUsbsTable,
			Columns: []string{hostresource.HostUsbsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostusbresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hruo.mutation.HostUsbsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostUsbsTable,
			Columns: []string{hostresource.HostUsbsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostusbresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hruo.mutation.HostGpusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostGpusTable,
			Columns: []string{hostresource.HostGpusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostgpuresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hruo.mutation.RemovedHostGpusIDs(); len(nodes) > 0 && !hruo.mutation.HostGpusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostGpusTable,
			Columns: []string{hostresource.HostGpusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostgpuresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hruo.mutation.HostGpusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostGpusTable,
			Columns: []string{hostresource.HostGpusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostgpuresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hruo.mutation.InstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   hostresource.InstanceTable,
			Columns: []string{hostresource.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hruo.mutation.InstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   hostresource.InstanceTable,
			Columns: []string{hostresource.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HostResource{config: hruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hostresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hruo.mutation.done = true
	return _node, nil
}
