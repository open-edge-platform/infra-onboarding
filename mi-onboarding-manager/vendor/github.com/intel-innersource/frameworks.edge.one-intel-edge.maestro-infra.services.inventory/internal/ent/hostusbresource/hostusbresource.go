// Code generated by ent, DO NOT EDIT.

package hostusbresource

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the hostusbresource type in the database.
	Label = "hostusb_resource"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldResourceID holds the string denoting the resource_id field in the database.
	FieldResourceID = "resource_id"
	// FieldKind holds the string denoting the kind field in the database.
	FieldKind = "kind"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCurrentState holds the string denoting the current_state field in the database.
	FieldCurrentState = "current_state"
	// FieldDesiredState holds the string denoting the desired_state field in the database.
	FieldDesiredState = "desired_state"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// FieldIdvendor holds the string denoting the idvendor field in the database.
	FieldIdvendor = "idvendor"
	// FieldIdproduct holds the string denoting the idproduct field in the database.
	FieldIdproduct = "idproduct"
	// FieldBus holds the string denoting the bus field in the database.
	FieldBus = "bus"
	// FieldAddr holds the string denoting the addr field in the database.
	FieldAddr = "addr"
	// FieldClass holds the string denoting the class field in the database.
	FieldClass = "class"
	// FieldSerial holds the string denoting the serial field in the database.
	FieldSerial = "serial"
	// EdgeHost holds the string denoting the host edge name in mutations.
	EdgeHost = "host"
	// Table holds the table name of the hostusbresource in the database.
	Table = "hostusb_resources"
	// HostTable is the table that holds the host relation/edge.
	HostTable = "hostusb_resources"
	// HostInverseTable is the table name for the HostResource entity.
	// It exists in this package in order to avoid circular dependency with the "hostresource" package.
	HostInverseTable = "host_resources"
	// HostColumn is the table column denoting the host relation/edge.
	HostColumn = "hostusb_resource_host"
)

// Columns holds all SQL columns for hostusbresource fields.
var Columns = []string{
	FieldID,
	FieldResourceID,
	FieldKind,
	FieldDescription,
	FieldCurrentState,
	FieldDesiredState,
	FieldOwnerID,
	FieldIdvendor,
	FieldIdproduct,
	FieldBus,
	FieldAddr,
	FieldClass,
	FieldSerial,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "hostusb_resources"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"hostusb_resource_host",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// CurrentState defines the type for the "current_state" enum field.
type CurrentState string

// CurrentState values.
const (
	CurrentStateHOST_COMPONENT_STATE_UNSPECIFIED CurrentState = "HOST_COMPONENT_STATE_UNSPECIFIED"
	CurrentStateHOST_COMPONENT_STATE_ERROR       CurrentState = "HOST_COMPONENT_STATE_ERROR"
	CurrentStateHOST_COMPONENT_STATE_DELETED     CurrentState = "HOST_COMPONENT_STATE_DELETED"
	CurrentStateHOST_COMPONENT_STATE_EXISTS      CurrentState = "HOST_COMPONENT_STATE_EXISTS"
)

func (cs CurrentState) String() string {
	return string(cs)
}

// CurrentStateValidator is a validator for the "current_state" field enum values. It is called by the builders before save.
func CurrentStateValidator(cs CurrentState) error {
	switch cs {
	case CurrentStateHOST_COMPONENT_STATE_UNSPECIFIED, CurrentStateHOST_COMPONENT_STATE_ERROR, CurrentStateHOST_COMPONENT_STATE_DELETED, CurrentStateHOST_COMPONENT_STATE_EXISTS:
		return nil
	default:
		return fmt.Errorf("hostusbresource: invalid enum value for current_state field: %q", cs)
	}
}

// DesiredState defines the type for the "desired_state" enum field.
type DesiredState string

// DesiredState values.
const (
	DesiredStateHOST_COMPONENT_STATE_UNSPECIFIED DesiredState = "HOST_COMPONENT_STATE_UNSPECIFIED"
	DesiredStateHOST_COMPONENT_STATE_ERROR       DesiredState = "HOST_COMPONENT_STATE_ERROR"
	DesiredStateHOST_COMPONENT_STATE_DELETED     DesiredState = "HOST_COMPONENT_STATE_DELETED"
	DesiredStateHOST_COMPONENT_STATE_EXISTS      DesiredState = "HOST_COMPONENT_STATE_EXISTS"
)

func (ds DesiredState) String() string {
	return string(ds)
}

// DesiredStateValidator is a validator for the "desired_state" field enum values. It is called by the builders before save.
func DesiredStateValidator(ds DesiredState) error {
	switch ds {
	case DesiredStateHOST_COMPONENT_STATE_UNSPECIFIED, DesiredStateHOST_COMPONENT_STATE_ERROR, DesiredStateHOST_COMPONENT_STATE_DELETED, DesiredStateHOST_COMPONENT_STATE_EXISTS:
		return nil
	default:
		return fmt.Errorf("hostusbresource: invalid enum value for desired_state field: %q", ds)
	}
}

// OrderOption defines the ordering options for the HostusbResource queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByResourceID orders the results by the resource_id field.
func ByResourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceID, opts...).ToFunc()
}

// ByKind orders the results by the kind field.
func ByKind(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKind, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCurrentState orders the results by the current_state field.
func ByCurrentState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentState, opts...).ToFunc()
}

// ByDesiredState orders the results by the desired_state field.
func ByDesiredState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesiredState, opts...).ToFunc()
}

// ByOwnerID orders the results by the owner_id field.
func ByOwnerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerID, opts...).ToFunc()
}

// ByIdvendor orders the results by the idvendor field.
func ByIdvendor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIdvendor, opts...).ToFunc()
}

// ByIdproduct orders the results by the idproduct field.
func ByIdproduct(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIdproduct, opts...).ToFunc()
}

// ByBus orders the results by the bus field.
func ByBus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBus, opts...).ToFunc()
}

// ByAddr orders the results by the addr field.
func ByAddr(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddr, opts...).ToFunc()
}

// ByClass orders the results by the class field.
func ByClass(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClass, opts...).ToFunc()
}

// BySerial orders the results by the serial field.
func BySerial(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSerial, opts...).ToFunc()
}

// ByHostField orders the results by host field.
func ByHostField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHostStep(), sql.OrderByField(field, opts...))
	}
}
func newHostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HostInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, HostTable, HostColumn),
	)
}
