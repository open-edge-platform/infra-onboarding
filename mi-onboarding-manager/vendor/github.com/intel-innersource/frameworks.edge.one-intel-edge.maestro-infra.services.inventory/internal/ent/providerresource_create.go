// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/providerresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/siteresource"
)

// ProviderResourceCreate is the builder for creating a ProviderResource entity.
type ProviderResourceCreate struct {
	config
	mutation *ProviderResourceMutation
	hooks    []Hook
}

// SetResourceID sets the "resource_id" field.
func (prc *ProviderResourceCreate) SetResourceID(s string) *ProviderResourceCreate {
	prc.mutation.SetResourceID(s)
	return prc
}

// SetKind sets the "kind" field.
func (prc *ProviderResourceCreate) SetKind(pr providerresource.Kind) *ProviderResourceCreate {
	prc.mutation.SetKind(pr)
	return prc
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (prc *ProviderResourceCreate) SetNillableKind(pr *providerresource.Kind) *ProviderResourceCreate {
	if pr != nil {
		prc.SetKind(*pr)
	}
	return prc
}

// SetDescription sets the "description" field.
func (prc *ProviderResourceCreate) SetDescription(s string) *ProviderResourceCreate {
	prc.mutation.SetDescription(s)
	return prc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (prc *ProviderResourceCreate) SetNillableDescription(s *string) *ProviderResourceCreate {
	if s != nil {
		prc.SetDescription(*s)
	}
	return prc
}

// SetDesiredState sets the "desired_state" field.
func (prc *ProviderResourceCreate) SetDesiredState(ps providerresource.DesiredState) *ProviderResourceCreate {
	prc.mutation.SetDesiredState(ps)
	return prc
}

// SetCurrentState sets the "current_state" field.
func (prc *ProviderResourceCreate) SetCurrentState(ps providerresource.CurrentState) *ProviderResourceCreate {
	prc.mutation.SetCurrentState(ps)
	return prc
}

// SetNillableCurrentState sets the "current_state" field if the given value is not nil.
func (prc *ProviderResourceCreate) SetNillableCurrentState(ps *providerresource.CurrentState) *ProviderResourceCreate {
	if ps != nil {
		prc.SetCurrentState(*ps)
	}
	return prc
}

// SetEndpoint sets the "endpoint" field.
func (prc *ProviderResourceCreate) SetEndpoint(s string) *ProviderResourceCreate {
	prc.mutation.SetEndpoint(s)
	return prc
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (prc *ProviderResourceCreate) SetNillableEndpoint(s *string) *ProviderResourceCreate {
	if s != nil {
		prc.SetEndpoint(*s)
	}
	return prc
}

// SetToken sets the "token" field.
func (prc *ProviderResourceCreate) SetToken(s string) *ProviderResourceCreate {
	prc.mutation.SetToken(s)
	return prc
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (prc *ProviderResourceCreate) SetNillableToken(s *string) *ProviderResourceCreate {
	if s != nil {
		prc.SetToken(*s)
	}
	return prc
}

// SetSiteID sets the "site" edge to the SiteResource entity by ID.
func (prc *ProviderResourceCreate) SetSiteID(id int) *ProviderResourceCreate {
	prc.mutation.SetSiteID(id)
	return prc
}

// SetNillableSiteID sets the "site" edge to the SiteResource entity by ID if the given value is not nil.
func (prc *ProviderResourceCreate) SetNillableSiteID(id *int) *ProviderResourceCreate {
	if id != nil {
		prc = prc.SetSiteID(*id)
	}
	return prc
}

// SetSite sets the "site" edge to the SiteResource entity.
func (prc *ProviderResourceCreate) SetSite(s *SiteResource) *ProviderResourceCreate {
	return prc.SetSiteID(s.ID)
}

// Mutation returns the ProviderResourceMutation object of the builder.
func (prc *ProviderResourceCreate) Mutation() *ProviderResourceMutation {
	return prc.mutation
}

// Save creates the ProviderResource in the database.
func (prc *ProviderResourceCreate) Save(ctx context.Context) (*ProviderResource, error) {
	return withHooks[*ProviderResource, ProviderResourceMutation](ctx, prc.sqlSave, prc.mutation, prc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (prc *ProviderResourceCreate) SaveX(ctx context.Context) *ProviderResource {
	v, err := prc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prc *ProviderResourceCreate) Exec(ctx context.Context) error {
	_, err := prc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prc *ProviderResourceCreate) ExecX(ctx context.Context) {
	if err := prc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prc *ProviderResourceCreate) check() error {
	if _, ok := prc.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource_id", err: errors.New(`ent: missing required field "ProviderResource.resource_id"`)}
	}
	if v, ok := prc.mutation.Kind(); ok {
		if err := providerresource.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "ProviderResource.kind": %w`, err)}
		}
	}
	if _, ok := prc.mutation.DesiredState(); !ok {
		return &ValidationError{Name: "desired_state", err: errors.New(`ent: missing required field "ProviderResource.desired_state"`)}
	}
	if v, ok := prc.mutation.DesiredState(); ok {
		if err := providerresource.DesiredStateValidator(v); err != nil {
			return &ValidationError{Name: "desired_state", err: fmt.Errorf(`ent: validator failed for field "ProviderResource.desired_state": %w`, err)}
		}
	}
	if v, ok := prc.mutation.CurrentState(); ok {
		if err := providerresource.CurrentStateValidator(v); err != nil {
			return &ValidationError{Name: "current_state", err: fmt.Errorf(`ent: validator failed for field "ProviderResource.current_state": %w`, err)}
		}
	}
	return nil
}

func (prc *ProviderResourceCreate) sqlSave(ctx context.Context) (*ProviderResource, error) {
	if err := prc.check(); err != nil {
		return nil, err
	}
	_node, _spec := prc.createSpec()
	if err := sqlgraph.CreateNode(ctx, prc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	prc.mutation.id = &_node.ID
	prc.mutation.done = true
	return _node, nil
}

func (prc *ProviderResourceCreate) createSpec() (*ProviderResource, *sqlgraph.CreateSpec) {
	var (
		_node = &ProviderResource{config: prc.config}
		_spec = sqlgraph.NewCreateSpec(providerresource.Table, sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt))
	)
	if value, ok := prc.mutation.ResourceID(); ok {
		_spec.SetField(providerresource.FieldResourceID, field.TypeString, value)
		_node.ResourceID = value
	}
	if value, ok := prc.mutation.Kind(); ok {
		_spec.SetField(providerresource.FieldKind, field.TypeEnum, value)
		_node.Kind = value
	}
	if value, ok := prc.mutation.Description(); ok {
		_spec.SetField(providerresource.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := prc.mutation.DesiredState(); ok {
		_spec.SetField(providerresource.FieldDesiredState, field.TypeEnum, value)
		_node.DesiredState = value
	}
	if value, ok := prc.mutation.CurrentState(); ok {
		_spec.SetField(providerresource.FieldCurrentState, field.TypeEnum, value)
		_node.CurrentState = value
	}
	if value, ok := prc.mutation.Endpoint(); ok {
		_spec.SetField(providerresource.FieldEndpoint, field.TypeString, value)
		_node.Endpoint = value
	}
	if value, ok := prc.mutation.Token(); ok {
		_spec.SetField(providerresource.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if nodes := prc.mutation.SiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   providerresource.SiteTable,
			Columns: []string{providerresource.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.provider_resource_site = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProviderResourceCreateBulk is the builder for creating many ProviderResource entities in bulk.
type ProviderResourceCreateBulk struct {
	config
	builders []*ProviderResourceCreate
}

// Save creates the ProviderResource entities in the database.
func (prcb *ProviderResourceCreateBulk) Save(ctx context.Context) ([]*ProviderResource, error) {
	specs := make([]*sqlgraph.CreateSpec, len(prcb.builders))
	nodes := make([]*ProviderResource, len(prcb.builders))
	mutators := make([]Mutator, len(prcb.builders))
	for i := range prcb.builders {
		func(i int, root context.Context) {
			builder := prcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProviderResourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, prcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, prcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, prcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (prcb *ProviderResourceCreateBulk) SaveX(ctx context.Context) []*ProviderResource {
	v, err := prcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prcb *ProviderResourceCreateBulk) Exec(ctx context.Context) error {
	_, err := prcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prcb *ProviderResourceCreateBulk) ExecX(ctx context.Context) {
	if err := prcb.Exec(ctx); err != nil {
		panic(err)
	}
}
