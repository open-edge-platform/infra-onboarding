// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/workloadresource"
)

// WorkloadResource is the model entity for the WorkloadResource schema.
type WorkloadResource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ResourceID holds the value of the "resource_id" field.
	ResourceID string `json:"resource_id,omitempty"`
	// Kind holds the value of the "kind" field.
	Kind workloadresource.Kind `json:"kind,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ExternalID holds the value of the "external_id" field.
	ExternalID string `json:"external_id,omitempty"`
	// DesiredState holds the value of the "desired_state" field.
	DesiredState workloadresource.DesiredState `json:"desired_state,omitempty"`
	// CurrentState holds the value of the "current_state" field.
	CurrentState workloadresource.CurrentState `json:"current_state,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata string `json:"metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkloadResourceQuery when eager-loading is set.
	Edges        WorkloadResourceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// WorkloadResourceEdges holds the relations/edges for other nodes in the graph.
type WorkloadResourceEdges struct {
	// Members holds the value of the members edge.
	Members []*WorkloadMember `json:"members,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MembersOrErr returns the Members value or an error if the edge
// was not loaded in eager-loading.
func (e WorkloadResourceEdges) MembersOrErr() ([]*WorkloadMember, error) {
	if e.loadedTypes[0] {
		return e.Members, nil
	}
	return nil, &NotLoadedError{edge: "members"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkloadResource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workloadresource.FieldID:
			values[i] = new(sql.NullInt64)
		case workloadresource.FieldResourceID, workloadresource.FieldKind, workloadresource.FieldName, workloadresource.FieldExternalID, workloadresource.FieldDesiredState, workloadresource.FieldCurrentState, workloadresource.FieldStatus, workloadresource.FieldMetadata:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkloadResource fields.
func (wr *WorkloadResource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workloadresource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wr.ID = int(value.Int64)
		case workloadresource.FieldResourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				wr.ResourceID = value.String
			}
		case workloadresource.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				wr.Kind = workloadresource.Kind(value.String)
			}
		case workloadresource.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				wr.Name = value.String
			}
		case workloadresource.FieldExternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_id", values[i])
			} else if value.Valid {
				wr.ExternalID = value.String
			}
		case workloadresource.FieldDesiredState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desired_state", values[i])
			} else if value.Valid {
				wr.DesiredState = workloadresource.DesiredState(value.String)
			}
		case workloadresource.FieldCurrentState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field current_state", values[i])
			} else if value.Valid {
				wr.CurrentState = workloadresource.CurrentState(value.String)
			}
		case workloadresource.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				wr.Status = value.String
			}
		case workloadresource.FieldMetadata:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value.Valid {
				wr.Metadata = value.String
			}
		default:
			wr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkloadResource.
// This includes values selected through modifiers, order, etc.
func (wr *WorkloadResource) Value(name string) (ent.Value, error) {
	return wr.selectValues.Get(name)
}

// QueryMembers queries the "members" edge of the WorkloadResource entity.
func (wr *WorkloadResource) QueryMembers() *WorkloadMemberQuery {
	return NewWorkloadResourceClient(wr.config).QueryMembers(wr)
}

// Update returns a builder for updating this WorkloadResource.
// Note that you need to call WorkloadResource.Unwrap() before calling this method if this WorkloadResource
// was returned from a transaction, and the transaction was committed or rolled back.
func (wr *WorkloadResource) Update() *WorkloadResourceUpdateOne {
	return NewWorkloadResourceClient(wr.config).UpdateOne(wr)
}

// Unwrap unwraps the WorkloadResource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wr *WorkloadResource) Unwrap() *WorkloadResource {
	_tx, ok := wr.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkloadResource is not a transactional entity")
	}
	wr.config.driver = _tx.drv
	return wr
}

// String implements the fmt.Stringer.
func (wr *WorkloadResource) String() string {
	var builder strings.Builder
	builder.WriteString("WorkloadResource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wr.ID))
	builder.WriteString("resource_id=")
	builder.WriteString(wr.ResourceID)
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(fmt.Sprintf("%v", wr.Kind))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(wr.Name)
	builder.WriteString(", ")
	builder.WriteString("external_id=")
	builder.WriteString(wr.ExternalID)
	builder.WriteString(", ")
	builder.WriteString("desired_state=")
	builder.WriteString(fmt.Sprintf("%v", wr.DesiredState))
	builder.WriteString(", ")
	builder.WriteString("current_state=")
	builder.WriteString(fmt.Sprintf("%v", wr.CurrentState))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(wr.Status)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(wr.Metadata)
	builder.WriteByte(')')
	return builder.String()
}

// WorkloadResources is a parsable slice of WorkloadResource.
type WorkloadResources []*WorkloadResource
