// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/networksegment"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/siteresource"
)

// NetworkSegmentUpdate is the builder for updating NetworkSegment entities.
type NetworkSegmentUpdate struct {
	config
	hooks    []Hook
	mutation *NetworkSegmentMutation
}

// Where appends a list predicates to the NetworkSegmentUpdate builder.
func (nsu *NetworkSegmentUpdate) Where(ps ...predicate.NetworkSegment) *NetworkSegmentUpdate {
	nsu.mutation.Where(ps...)
	return nsu
}

// SetResourceID sets the "resource_id" field.
func (nsu *NetworkSegmentUpdate) SetResourceID(s string) *NetworkSegmentUpdate {
	nsu.mutation.SetResourceID(s)
	return nsu
}

// SetName sets the "name" field.
func (nsu *NetworkSegmentUpdate) SetName(s string) *NetworkSegmentUpdate {
	nsu.mutation.SetName(s)
	return nsu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nsu *NetworkSegmentUpdate) SetNillableName(s *string) *NetworkSegmentUpdate {
	if s != nil {
		nsu.SetName(*s)
	}
	return nsu
}

// ClearName clears the value of the "name" field.
func (nsu *NetworkSegmentUpdate) ClearName() *NetworkSegmentUpdate {
	nsu.mutation.ClearName()
	return nsu
}

// SetVlanID sets the "vlan_id" field.
func (nsu *NetworkSegmentUpdate) SetVlanID(i int32) *NetworkSegmentUpdate {
	nsu.mutation.ResetVlanID()
	nsu.mutation.SetVlanID(i)
	return nsu
}

// SetNillableVlanID sets the "vlan_id" field if the given value is not nil.
func (nsu *NetworkSegmentUpdate) SetNillableVlanID(i *int32) *NetworkSegmentUpdate {
	if i != nil {
		nsu.SetVlanID(*i)
	}
	return nsu
}

// AddVlanID adds i to the "vlan_id" field.
func (nsu *NetworkSegmentUpdate) AddVlanID(i int32) *NetworkSegmentUpdate {
	nsu.mutation.AddVlanID(i)
	return nsu
}

// ClearVlanID clears the value of the "vlan_id" field.
func (nsu *NetworkSegmentUpdate) ClearVlanID() *NetworkSegmentUpdate {
	nsu.mutation.ClearVlanID()
	return nsu
}

// SetSiteID sets the "site" edge to the SiteResource entity by ID.
func (nsu *NetworkSegmentUpdate) SetSiteID(id int) *NetworkSegmentUpdate {
	nsu.mutation.SetSiteID(id)
	return nsu
}

// SetSite sets the "site" edge to the SiteResource entity.
func (nsu *NetworkSegmentUpdate) SetSite(s *SiteResource) *NetworkSegmentUpdate {
	return nsu.SetSiteID(s.ID)
}

// Mutation returns the NetworkSegmentMutation object of the builder.
func (nsu *NetworkSegmentUpdate) Mutation() *NetworkSegmentMutation {
	return nsu.mutation
}

// ClearSite clears the "site" edge to the SiteResource entity.
func (nsu *NetworkSegmentUpdate) ClearSite() *NetworkSegmentUpdate {
	nsu.mutation.ClearSite()
	return nsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nsu *NetworkSegmentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, NetworkSegmentMutation](ctx, nsu.sqlSave, nsu.mutation, nsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nsu *NetworkSegmentUpdate) SaveX(ctx context.Context) int {
	affected, err := nsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nsu *NetworkSegmentUpdate) Exec(ctx context.Context) error {
	_, err := nsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nsu *NetworkSegmentUpdate) ExecX(ctx context.Context) {
	if err := nsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nsu *NetworkSegmentUpdate) check() error {
	if _, ok := nsu.mutation.SiteID(); nsu.mutation.SiteCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "NetworkSegment.site"`)
	}
	return nil
}

func (nsu *NetworkSegmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(networksegment.Table, networksegment.Columns, sqlgraph.NewFieldSpec(networksegment.FieldID, field.TypeInt))
	if ps := nsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nsu.mutation.ResourceID(); ok {
		_spec.SetField(networksegment.FieldResourceID, field.TypeString, value)
	}
	if value, ok := nsu.mutation.Name(); ok {
		_spec.SetField(networksegment.FieldName, field.TypeString, value)
	}
	if nsu.mutation.NameCleared() {
		_spec.ClearField(networksegment.FieldName, field.TypeString)
	}
	if value, ok := nsu.mutation.VlanID(); ok {
		_spec.SetField(networksegment.FieldVlanID, field.TypeInt32, value)
	}
	if value, ok := nsu.mutation.AddedVlanID(); ok {
		_spec.AddField(networksegment.FieldVlanID, field.TypeInt32, value)
	}
	if nsu.mutation.VlanIDCleared() {
		_spec.ClearField(networksegment.FieldVlanID, field.TypeInt32)
	}
	if nsu.mutation.SiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   networksegment.SiteTable,
			Columns: []string{networksegment.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nsu.mutation.SiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   networksegment.SiteTable,
			Columns: []string{networksegment.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{networksegment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nsu.mutation.done = true
	return n, nil
}

// NetworkSegmentUpdateOne is the builder for updating a single NetworkSegment entity.
type NetworkSegmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NetworkSegmentMutation
}

// SetResourceID sets the "resource_id" field.
func (nsuo *NetworkSegmentUpdateOne) SetResourceID(s string) *NetworkSegmentUpdateOne {
	nsuo.mutation.SetResourceID(s)
	return nsuo
}

// SetName sets the "name" field.
func (nsuo *NetworkSegmentUpdateOne) SetName(s string) *NetworkSegmentUpdateOne {
	nsuo.mutation.SetName(s)
	return nsuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nsuo *NetworkSegmentUpdateOne) SetNillableName(s *string) *NetworkSegmentUpdateOne {
	if s != nil {
		nsuo.SetName(*s)
	}
	return nsuo
}

// ClearName clears the value of the "name" field.
func (nsuo *NetworkSegmentUpdateOne) ClearName() *NetworkSegmentUpdateOne {
	nsuo.mutation.ClearName()
	return nsuo
}

// SetVlanID sets the "vlan_id" field.
func (nsuo *NetworkSegmentUpdateOne) SetVlanID(i int32) *NetworkSegmentUpdateOne {
	nsuo.mutation.ResetVlanID()
	nsuo.mutation.SetVlanID(i)
	return nsuo
}

// SetNillableVlanID sets the "vlan_id" field if the given value is not nil.
func (nsuo *NetworkSegmentUpdateOne) SetNillableVlanID(i *int32) *NetworkSegmentUpdateOne {
	if i != nil {
		nsuo.SetVlanID(*i)
	}
	return nsuo
}

// AddVlanID adds i to the "vlan_id" field.
func (nsuo *NetworkSegmentUpdateOne) AddVlanID(i int32) *NetworkSegmentUpdateOne {
	nsuo.mutation.AddVlanID(i)
	return nsuo
}

// ClearVlanID clears the value of the "vlan_id" field.
func (nsuo *NetworkSegmentUpdateOne) ClearVlanID() *NetworkSegmentUpdateOne {
	nsuo.mutation.ClearVlanID()
	return nsuo
}

// SetSiteID sets the "site" edge to the SiteResource entity by ID.
func (nsuo *NetworkSegmentUpdateOne) SetSiteID(id int) *NetworkSegmentUpdateOne {
	nsuo.mutation.SetSiteID(id)
	return nsuo
}

// SetSite sets the "site" edge to the SiteResource entity.
func (nsuo *NetworkSegmentUpdateOne) SetSite(s *SiteResource) *NetworkSegmentUpdateOne {
	return nsuo.SetSiteID(s.ID)
}

// Mutation returns the NetworkSegmentMutation object of the builder.
func (nsuo *NetworkSegmentUpdateOne) Mutation() *NetworkSegmentMutation {
	return nsuo.mutation
}

// ClearSite clears the "site" edge to the SiteResource entity.
func (nsuo *NetworkSegmentUpdateOne) ClearSite() *NetworkSegmentUpdateOne {
	nsuo.mutation.ClearSite()
	return nsuo
}

// Where appends a list predicates to the NetworkSegmentUpdate builder.
func (nsuo *NetworkSegmentUpdateOne) Where(ps ...predicate.NetworkSegment) *NetworkSegmentUpdateOne {
	nsuo.mutation.Where(ps...)
	return nsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nsuo *NetworkSegmentUpdateOne) Select(field string, fields ...string) *NetworkSegmentUpdateOne {
	nsuo.fields = append([]string{field}, fields...)
	return nsuo
}

// Save executes the query and returns the updated NetworkSegment entity.
func (nsuo *NetworkSegmentUpdateOne) Save(ctx context.Context) (*NetworkSegment, error) {
	return withHooks[*NetworkSegment, NetworkSegmentMutation](ctx, nsuo.sqlSave, nsuo.mutation, nsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nsuo *NetworkSegmentUpdateOne) SaveX(ctx context.Context) *NetworkSegment {
	node, err := nsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nsuo *NetworkSegmentUpdateOne) Exec(ctx context.Context) error {
	_, err := nsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nsuo *NetworkSegmentUpdateOne) ExecX(ctx context.Context) {
	if err := nsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nsuo *NetworkSegmentUpdateOne) check() error {
	if _, ok := nsuo.mutation.SiteID(); nsuo.mutation.SiteCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "NetworkSegment.site"`)
	}
	return nil
}

func (nsuo *NetworkSegmentUpdateOne) sqlSave(ctx context.Context) (_node *NetworkSegment, err error) {
	if err := nsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(networksegment.Table, networksegment.Columns, sqlgraph.NewFieldSpec(networksegment.FieldID, field.TypeInt))
	id, ok := nsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NetworkSegment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, networksegment.FieldID)
		for _, f := range fields {
			if !networksegment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != networksegment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nsuo.mutation.ResourceID(); ok {
		_spec.SetField(networksegment.FieldResourceID, field.TypeString, value)
	}
	if value, ok := nsuo.mutation.Name(); ok {
		_spec.SetField(networksegment.FieldName, field.TypeString, value)
	}
	if nsuo.mutation.NameCleared() {
		_spec.ClearField(networksegment.FieldName, field.TypeString)
	}
	if value, ok := nsuo.mutation.VlanID(); ok {
		_spec.SetField(networksegment.FieldVlanID, field.TypeInt32, value)
	}
	if value, ok := nsuo.mutation.AddedVlanID(); ok {
		_spec.AddField(networksegment.FieldVlanID, field.TypeInt32, value)
	}
	if nsuo.mutation.VlanIDCleared() {
		_spec.ClearField(networksegment.FieldVlanID, field.TypeInt32)
	}
	if nsuo.mutation.SiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   networksegment.SiteTable,
			Columns: []string{networksegment.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nsuo.mutation.SiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   networksegment.SiteTable,
			Columns: []string{networksegment.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NetworkSegment{config: nsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{networksegment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nsuo.mutation.done = true
	return _node, nil
}
