// Code generated by ent, DO NOT EDIT.

package userresource

import (
	"entgo.io/ent/dialect/sql"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserResource {
	return predicate.UserResource(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserResource {
	return predicate.UserResource(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserResource {
	return predicate.UserResource(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserResource {
	return predicate.UserResource(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserResource {
	return predicate.UserResource(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserResource {
	return predicate.UserResource(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserResource {
	return predicate.UserResource(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserResource {
	return predicate.UserResource(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserResource {
	return predicate.UserResource(sql.FieldLTE(FieldID, id))
}

// ResourceID applies equality check predicate on the "resource_id" field. It's identical to ResourceIDEQ.
func ResourceID(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldEQ(FieldResourceID, v))
}

// Kind applies equality check predicate on the "kind" field. It's identical to KindEQ.
func Kind(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldEQ(FieldKind, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldEQ(FieldName, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldEQ(FieldUsername, v))
}

// SSHPubkey applies equality check predicate on the "ssh_pubkey" field. It's identical to SSHPubkeyEQ.
func SSHPubkey(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldEQ(FieldSSHPubkey, v))
}

// ResourceIDEQ applies the EQ predicate on the "resource_id" field.
func ResourceIDEQ(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldEQ(FieldResourceID, v))
}

// ResourceIDNEQ applies the NEQ predicate on the "resource_id" field.
func ResourceIDNEQ(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldNEQ(FieldResourceID, v))
}

// ResourceIDIn applies the In predicate on the "resource_id" field.
func ResourceIDIn(vs ...string) predicate.UserResource {
	return predicate.UserResource(sql.FieldIn(FieldResourceID, vs...))
}

// ResourceIDNotIn applies the NotIn predicate on the "resource_id" field.
func ResourceIDNotIn(vs ...string) predicate.UserResource {
	return predicate.UserResource(sql.FieldNotIn(FieldResourceID, vs...))
}

// ResourceIDGT applies the GT predicate on the "resource_id" field.
func ResourceIDGT(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldGT(FieldResourceID, v))
}

// ResourceIDGTE applies the GTE predicate on the "resource_id" field.
func ResourceIDGTE(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldGTE(FieldResourceID, v))
}

// ResourceIDLT applies the LT predicate on the "resource_id" field.
func ResourceIDLT(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldLT(FieldResourceID, v))
}

// ResourceIDLTE applies the LTE predicate on the "resource_id" field.
func ResourceIDLTE(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldLTE(FieldResourceID, v))
}

// ResourceIDContains applies the Contains predicate on the "resource_id" field.
func ResourceIDContains(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldContains(FieldResourceID, v))
}

// ResourceIDHasPrefix applies the HasPrefix predicate on the "resource_id" field.
func ResourceIDHasPrefix(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldHasPrefix(FieldResourceID, v))
}

// ResourceIDHasSuffix applies the HasSuffix predicate on the "resource_id" field.
func ResourceIDHasSuffix(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldHasSuffix(FieldResourceID, v))
}

// ResourceIDEqualFold applies the EqualFold predicate on the "resource_id" field.
func ResourceIDEqualFold(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldEqualFold(FieldResourceID, v))
}

// ResourceIDContainsFold applies the ContainsFold predicate on the "resource_id" field.
func ResourceIDContainsFold(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldContainsFold(FieldResourceID, v))
}

// KindEQ applies the EQ predicate on the "kind" field.
func KindEQ(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldEQ(FieldKind, v))
}

// KindNEQ applies the NEQ predicate on the "kind" field.
func KindNEQ(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldNEQ(FieldKind, v))
}

// KindIn applies the In predicate on the "kind" field.
func KindIn(vs ...string) predicate.UserResource {
	return predicate.UserResource(sql.FieldIn(FieldKind, vs...))
}

// KindNotIn applies the NotIn predicate on the "kind" field.
func KindNotIn(vs ...string) predicate.UserResource {
	return predicate.UserResource(sql.FieldNotIn(FieldKind, vs...))
}

// KindGT applies the GT predicate on the "kind" field.
func KindGT(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldGT(FieldKind, v))
}

// KindGTE applies the GTE predicate on the "kind" field.
func KindGTE(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldGTE(FieldKind, v))
}

// KindLT applies the LT predicate on the "kind" field.
func KindLT(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldLT(FieldKind, v))
}

// KindLTE applies the LTE predicate on the "kind" field.
func KindLTE(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldLTE(FieldKind, v))
}

// KindContains applies the Contains predicate on the "kind" field.
func KindContains(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldContains(FieldKind, v))
}

// KindHasPrefix applies the HasPrefix predicate on the "kind" field.
func KindHasPrefix(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldHasPrefix(FieldKind, v))
}

// KindHasSuffix applies the HasSuffix predicate on the "kind" field.
func KindHasSuffix(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldHasSuffix(FieldKind, v))
}

// KindIsNil applies the IsNil predicate on the "kind" field.
func KindIsNil() predicate.UserResource {
	return predicate.UserResource(sql.FieldIsNull(FieldKind))
}

// KindNotNil applies the NotNil predicate on the "kind" field.
func KindNotNil() predicate.UserResource {
	return predicate.UserResource(sql.FieldNotNull(FieldKind))
}

// KindEqualFold applies the EqualFold predicate on the "kind" field.
func KindEqualFold(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldEqualFold(FieldKind, v))
}

// KindContainsFold applies the ContainsFold predicate on the "kind" field.
func KindContainsFold(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldContainsFold(FieldKind, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.UserResource {
	return predicate.UserResource(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.UserResource {
	return predicate.UserResource(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.UserResource {
	return predicate.UserResource(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.UserResource {
	return predicate.UserResource(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldContainsFold(FieldName, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.UserResource {
	return predicate.UserResource(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.UserResource {
	return predicate.UserResource(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameIsNil applies the IsNil predicate on the "username" field.
func UsernameIsNil() predicate.UserResource {
	return predicate.UserResource(sql.FieldIsNull(FieldUsername))
}

// UsernameNotNil applies the NotNil predicate on the "username" field.
func UsernameNotNil() predicate.UserResource {
	return predicate.UserResource(sql.FieldNotNull(FieldUsername))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldContainsFold(FieldUsername, v))
}

// SSHPubkeyEQ applies the EQ predicate on the "ssh_pubkey" field.
func SSHPubkeyEQ(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldEQ(FieldSSHPubkey, v))
}

// SSHPubkeyNEQ applies the NEQ predicate on the "ssh_pubkey" field.
func SSHPubkeyNEQ(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldNEQ(FieldSSHPubkey, v))
}

// SSHPubkeyIn applies the In predicate on the "ssh_pubkey" field.
func SSHPubkeyIn(vs ...string) predicate.UserResource {
	return predicate.UserResource(sql.FieldIn(FieldSSHPubkey, vs...))
}

// SSHPubkeyNotIn applies the NotIn predicate on the "ssh_pubkey" field.
func SSHPubkeyNotIn(vs ...string) predicate.UserResource {
	return predicate.UserResource(sql.FieldNotIn(FieldSSHPubkey, vs...))
}

// SSHPubkeyGT applies the GT predicate on the "ssh_pubkey" field.
func SSHPubkeyGT(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldGT(FieldSSHPubkey, v))
}

// SSHPubkeyGTE applies the GTE predicate on the "ssh_pubkey" field.
func SSHPubkeyGTE(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldGTE(FieldSSHPubkey, v))
}

// SSHPubkeyLT applies the LT predicate on the "ssh_pubkey" field.
func SSHPubkeyLT(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldLT(FieldSSHPubkey, v))
}

// SSHPubkeyLTE applies the LTE predicate on the "ssh_pubkey" field.
func SSHPubkeyLTE(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldLTE(FieldSSHPubkey, v))
}

// SSHPubkeyContains applies the Contains predicate on the "ssh_pubkey" field.
func SSHPubkeyContains(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldContains(FieldSSHPubkey, v))
}

// SSHPubkeyHasPrefix applies the HasPrefix predicate on the "ssh_pubkey" field.
func SSHPubkeyHasPrefix(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldHasPrefix(FieldSSHPubkey, v))
}

// SSHPubkeyHasSuffix applies the HasSuffix predicate on the "ssh_pubkey" field.
func SSHPubkeyHasSuffix(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldHasSuffix(FieldSSHPubkey, v))
}

// SSHPubkeyIsNil applies the IsNil predicate on the "ssh_pubkey" field.
func SSHPubkeyIsNil() predicate.UserResource {
	return predicate.UserResource(sql.FieldIsNull(FieldSSHPubkey))
}

// SSHPubkeyNotNil applies the NotNil predicate on the "ssh_pubkey" field.
func SSHPubkeyNotNil() predicate.UserResource {
	return predicate.UserResource(sql.FieldNotNull(FieldSSHPubkey))
}

// SSHPubkeyEqualFold applies the EqualFold predicate on the "ssh_pubkey" field.
func SSHPubkeyEqualFold(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldEqualFold(FieldSSHPubkey, v))
}

// SSHPubkeyContainsFold applies the ContainsFold predicate on the "ssh_pubkey" field.
func SSHPubkeyContainsFold(v string) predicate.UserResource {
	return predicate.UserResource(sql.FieldContainsFold(FieldSSHPubkey, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserResource) predicate.UserResource {
	return predicate.UserResource(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserResource) predicate.UserResource {
	return predicate.UserResource(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserResource) predicate.UserResource {
	return predicate.UserResource(func(s *sql.Selector) {
		p(s.Not())
	})
}
