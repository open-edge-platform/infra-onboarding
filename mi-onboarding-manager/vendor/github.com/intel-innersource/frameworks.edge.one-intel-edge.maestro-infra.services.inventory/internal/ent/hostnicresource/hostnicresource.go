// Code generated by ent, DO NOT EDIT.

package hostnicresource

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the hostnicresource type in the database.
	Label = "hostnic_resource"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldResourceID holds the string denoting the resource_id field in the database.
	FieldResourceID = "resource_id"
	// FieldKind holds the string denoting the kind field in the database.
	FieldKind = "kind"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldDesiredState holds the string denoting the desired_state field in the database.
	FieldDesiredState = "desired_state"
	// FieldCurrentState holds the string denoting the current_state field in the database.
	FieldCurrentState = "current_state"
	// FieldProviderStatus holds the string denoting the provider_status field in the database.
	FieldProviderStatus = "provider_status"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPciIdentifier holds the string denoting the pci_identifier field in the database.
	FieldPciIdentifier = "pci_identifier"
	// FieldMACAddr holds the string denoting the mac_addr field in the database.
	FieldMACAddr = "mac_addr"
	// FieldSriovEnabled holds the string denoting the sriov_enabled field in the database.
	FieldSriovEnabled = "sriov_enabled"
	// FieldSriovVfsNum holds the string denoting the sriov_vfs_num field in the database.
	FieldSriovVfsNum = "sriov_vfs_num"
	// FieldSriovVfsTotal holds the string denoting the sriov_vfs_total field in the database.
	FieldSriovVfsTotal = "sriov_vfs_total"
	// FieldPeerName holds the string denoting the peer_name field in the database.
	FieldPeerName = "peer_name"
	// FieldPeerDescription holds the string denoting the peer_description field in the database.
	FieldPeerDescription = "peer_description"
	// FieldPeerMAC holds the string denoting the peer_mac field in the database.
	FieldPeerMAC = "peer_mac"
	// FieldPeerMgmtIP holds the string denoting the peer_mgmt_ip field in the database.
	FieldPeerMgmtIP = "peer_mgmt_ip"
	// FieldPeerPort holds the string denoting the peer_port field in the database.
	FieldPeerPort = "peer_port"
	// FieldSupportedLinkMode holds the string denoting the supported_link_mode field in the database.
	FieldSupportedLinkMode = "supported_link_mode"
	// FieldAdvertisingLinkMode holds the string denoting the advertising_link_mode field in the database.
	FieldAdvertisingLinkMode = "advertising_link_mode"
	// FieldCurrentSpeedBps holds the string denoting the current_speed_bps field in the database.
	FieldCurrentSpeedBps = "current_speed_bps"
	// FieldCurrentDuplex holds the string denoting the current_duplex field in the database.
	FieldCurrentDuplex = "current_duplex"
	// FieldFeatures holds the string denoting the features field in the database.
	FieldFeatures = "features"
	// FieldMtu holds the string denoting the mtu field in the database.
	FieldMtu = "mtu"
	// FieldLinkState holds the string denoting the link_state field in the database.
	FieldLinkState = "link_state"
	// FieldBmcInterface holds the string denoting the bmc_interface field in the database.
	FieldBmcInterface = "bmc_interface"
	// EdgeSite holds the string denoting the site edge name in mutations.
	EdgeSite = "site"
	// EdgeProvider holds the string denoting the provider edge name in mutations.
	EdgeProvider = "provider"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// EdgeHost holds the string denoting the host edge name in mutations.
	EdgeHost = "host"
	// Table holds the table name of the hostnicresource in the database.
	Table = "hostnic_resources"
	// SiteTable is the table that holds the site relation/edge.
	SiteTable = "hostnic_resources"
	// SiteInverseTable is the table name for the SiteResource entity.
	// It exists in this package in order to avoid circular dependency with the "siteresource" package.
	SiteInverseTable = "site_resources"
	// SiteColumn is the table column denoting the site relation/edge.
	SiteColumn = "hostnic_resource_site"
	// ProviderTable is the table that holds the provider relation/edge.
	ProviderTable = "hostnic_resources"
	// ProviderInverseTable is the table name for the ProviderResource entity.
	// It exists in this package in order to avoid circular dependency with the "providerresource" package.
	ProviderInverseTable = "provider_resources"
	// ProviderColumn is the table column denoting the provider relation/edge.
	ProviderColumn = "hostnic_resource_provider"
	// ProjectTable is the table that holds the project relation/edge.
	ProjectTable = "hostnic_resources"
	// ProjectInverseTable is the table name for the ProjectResource entity.
	// It exists in this package in order to avoid circular dependency with the "projectresource" package.
	ProjectInverseTable = "project_resources"
	// ProjectColumn is the table column denoting the project relation/edge.
	ProjectColumn = "hostnic_resource_project"
	// HostTable is the table that holds the host relation/edge.
	HostTable = "hostnic_resources"
	// HostInverseTable is the table name for the HostResource entity.
	// It exists in this package in order to avoid circular dependency with the "hostresource" package.
	HostInverseTable = "host_resources"
	// HostColumn is the table column denoting the host relation/edge.
	HostColumn = "hostnic_resource_host"
)

// Columns holds all SQL columns for hostnicresource fields.
var Columns = []string{
	FieldID,
	FieldResourceID,
	FieldKind,
	FieldDescription,
	FieldDesiredState,
	FieldCurrentState,
	FieldProviderStatus,
	FieldName,
	FieldPciIdentifier,
	FieldMACAddr,
	FieldSriovEnabled,
	FieldSriovVfsNum,
	FieldSriovVfsTotal,
	FieldPeerName,
	FieldPeerDescription,
	FieldPeerMAC,
	FieldPeerMgmtIP,
	FieldPeerPort,
	FieldSupportedLinkMode,
	FieldAdvertisingLinkMode,
	FieldCurrentSpeedBps,
	FieldCurrentDuplex,
	FieldFeatures,
	FieldMtu,
	FieldLinkState,
	FieldBmcInterface,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "hostnic_resources"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"hostnic_resource_site",
	"hostnic_resource_provider",
	"hostnic_resource_project",
	"hostnic_resource_host",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// DesiredState defines the type for the "desired_state" enum field.
type DesiredState string

// DesiredState values.
const (
	DesiredStateHOST_COMPONENT_STATE_UNSPECIFIED DesiredState = "HOST_COMPONENT_STATE_UNSPECIFIED"
	DesiredStateHOST_COMPONENT_STATE_ERROR       DesiredState = "HOST_COMPONENT_STATE_ERROR"
	DesiredStateHOST_COMPONENT_STATE_DELETED     DesiredState = "HOST_COMPONENT_STATE_DELETED"
	DesiredStateHOST_COMPONENT_STATE_EXISTS      DesiredState = "HOST_COMPONENT_STATE_EXISTS"
)

func (ds DesiredState) String() string {
	return string(ds)
}

// DesiredStateValidator is a validator for the "desired_state" field enum values. It is called by the builders before save.
func DesiredStateValidator(ds DesiredState) error {
	switch ds {
	case DesiredStateHOST_COMPONENT_STATE_UNSPECIFIED, DesiredStateHOST_COMPONENT_STATE_ERROR, DesiredStateHOST_COMPONENT_STATE_DELETED, DesiredStateHOST_COMPONENT_STATE_EXISTS:
		return nil
	default:
		return fmt.Errorf("hostnicresource: invalid enum value for desired_state field: %q", ds)
	}
}

// CurrentState defines the type for the "current_state" enum field.
type CurrentState string

// CurrentState values.
const (
	CurrentStateHOST_COMPONENT_STATE_UNSPECIFIED CurrentState = "HOST_COMPONENT_STATE_UNSPECIFIED"
	CurrentStateHOST_COMPONENT_STATE_ERROR       CurrentState = "HOST_COMPONENT_STATE_ERROR"
	CurrentStateHOST_COMPONENT_STATE_DELETED     CurrentState = "HOST_COMPONENT_STATE_DELETED"
	CurrentStateHOST_COMPONENT_STATE_EXISTS      CurrentState = "HOST_COMPONENT_STATE_EXISTS"
)

func (cs CurrentState) String() string {
	return string(cs)
}

// CurrentStateValidator is a validator for the "current_state" field enum values. It is called by the builders before save.
func CurrentStateValidator(cs CurrentState) error {
	switch cs {
	case CurrentStateHOST_COMPONENT_STATE_UNSPECIFIED, CurrentStateHOST_COMPONENT_STATE_ERROR, CurrentStateHOST_COMPONENT_STATE_DELETED, CurrentStateHOST_COMPONENT_STATE_EXISTS:
		return nil
	default:
		return fmt.Errorf("hostnicresource: invalid enum value for current_state field: %q", cs)
	}
}

// LinkState defines the type for the "link_state" enum field.
type LinkState string

// LinkState values.
const (
	LinkStateNETWORK_INTERFACE_LINK_STATE_UNSPECIFIED LinkState = "NETWORK_INTERFACE_LINK_STATE_UNSPECIFIED"
	LinkStateNETWORK_INTERFACE_LINK_STATE_UP          LinkState = "NETWORK_INTERFACE_LINK_STATE_UP"
	LinkStateNETWORK_INTERFACE_LINK_STATE_DOWN        LinkState = "NETWORK_INTERFACE_LINK_STATE_DOWN"
)

func (ls LinkState) String() string {
	return string(ls)
}

// LinkStateValidator is a validator for the "link_state" field enum values. It is called by the builders before save.
func LinkStateValidator(ls LinkState) error {
	switch ls {
	case LinkStateNETWORK_INTERFACE_LINK_STATE_UNSPECIFIED, LinkStateNETWORK_INTERFACE_LINK_STATE_UP, LinkStateNETWORK_INTERFACE_LINK_STATE_DOWN:
		return nil
	default:
		return fmt.Errorf("hostnicresource: invalid enum value for link_state field: %q", ls)
	}
}

// OrderOption defines the ordering options for the HostnicResource queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByResourceID orders the results by the resource_id field.
func ByResourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceID, opts...).ToFunc()
}

// ByKind orders the results by the kind field.
func ByKind(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKind, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByDesiredState orders the results by the desired_state field.
func ByDesiredState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesiredState, opts...).ToFunc()
}

// ByCurrentState orders the results by the current_state field.
func ByCurrentState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentState, opts...).ToFunc()
}

// ByProviderStatus orders the results by the provider_status field.
func ByProviderStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderStatus, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPciIdentifier orders the results by the pci_identifier field.
func ByPciIdentifier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPciIdentifier, opts...).ToFunc()
}

// ByMACAddr orders the results by the mac_addr field.
func ByMACAddr(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMACAddr, opts...).ToFunc()
}

// BySriovEnabled orders the results by the sriov_enabled field.
func BySriovEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSriovEnabled, opts...).ToFunc()
}

// BySriovVfsNum orders the results by the sriov_vfs_num field.
func BySriovVfsNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSriovVfsNum, opts...).ToFunc()
}

// BySriovVfsTotal orders the results by the sriov_vfs_total field.
func BySriovVfsTotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSriovVfsTotal, opts...).ToFunc()
}

// ByPeerName orders the results by the peer_name field.
func ByPeerName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPeerName, opts...).ToFunc()
}

// ByPeerDescription orders the results by the peer_description field.
func ByPeerDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPeerDescription, opts...).ToFunc()
}

// ByPeerMAC orders the results by the peer_mac field.
func ByPeerMAC(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPeerMAC, opts...).ToFunc()
}

// ByPeerMgmtIP orders the results by the peer_mgmt_ip field.
func ByPeerMgmtIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPeerMgmtIP, opts...).ToFunc()
}

// ByPeerPort orders the results by the peer_port field.
func ByPeerPort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPeerPort, opts...).ToFunc()
}

// BySupportedLinkMode orders the results by the supported_link_mode field.
func BySupportedLinkMode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSupportedLinkMode, opts...).ToFunc()
}

// ByAdvertisingLinkMode orders the results by the advertising_link_mode field.
func ByAdvertisingLinkMode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAdvertisingLinkMode, opts...).ToFunc()
}

// ByCurrentSpeedBps orders the results by the current_speed_bps field.
func ByCurrentSpeedBps(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentSpeedBps, opts...).ToFunc()
}

// ByCurrentDuplex orders the results by the current_duplex field.
func ByCurrentDuplex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentDuplex, opts...).ToFunc()
}

// ByFeatures orders the results by the features field.
func ByFeatures(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeatures, opts...).ToFunc()
}

// ByMtu orders the results by the mtu field.
func ByMtu(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMtu, opts...).ToFunc()
}

// ByLinkState orders the results by the link_state field.
func ByLinkState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLinkState, opts...).ToFunc()
}

// ByBmcInterface orders the results by the bmc_interface field.
func ByBmcInterface(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBmcInterface, opts...).ToFunc()
}

// BySiteField orders the results by site field.
func BySiteField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSiteStep(), sql.OrderByField(field, opts...))
	}
}

// ByProviderField orders the results by provider field.
func ByProviderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProviderStep(), sql.OrderByField(field, opts...))
	}
}

// ByProjectField orders the results by project field.
func ByProjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectStep(), sql.OrderByField(field, opts...))
	}
}

// ByHostField orders the results by host field.
func ByHostField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHostStep(), sql.OrderByField(field, opts...))
	}
}
func newSiteStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SiteInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SiteTable, SiteColumn),
	)
}
func newProviderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProviderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ProviderTable, ProviderColumn),
	)
}
func newProjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ProjectTable, ProjectColumn),
	)
}
func newHostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HostInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, HostTable, HostColumn),
	)
}
