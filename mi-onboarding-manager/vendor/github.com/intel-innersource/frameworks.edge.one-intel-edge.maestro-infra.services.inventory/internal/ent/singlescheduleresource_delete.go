// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/singlescheduleresource"
)

// SingleScheduleResourceDelete is the builder for deleting a SingleScheduleResource entity.
type SingleScheduleResourceDelete struct {
	config
	hooks    []Hook
	mutation *SingleScheduleResourceMutation
}

// Where appends a list predicates to the SingleScheduleResourceDelete builder.
func (ssrd *SingleScheduleResourceDelete) Where(ps ...predicate.SingleScheduleResource) *SingleScheduleResourceDelete {
	ssrd.mutation.Where(ps...)
	return ssrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ssrd *SingleScheduleResourceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, SingleScheduleResourceMutation](ctx, ssrd.sqlExec, ssrd.mutation, ssrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ssrd *SingleScheduleResourceDelete) ExecX(ctx context.Context) int {
	n, err := ssrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ssrd *SingleScheduleResourceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(singlescheduleresource.Table, sqlgraph.NewFieldSpec(singlescheduleresource.FieldID, field.TypeInt))
	if ps := ssrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ssrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ssrd.mutation.done = true
	return affected, err
}

// SingleScheduleResourceDeleteOne is the builder for deleting a single SingleScheduleResource entity.
type SingleScheduleResourceDeleteOne struct {
	ssrd *SingleScheduleResourceDelete
}

// Where appends a list predicates to the SingleScheduleResourceDelete builder.
func (ssrdo *SingleScheduleResourceDeleteOne) Where(ps ...predicate.SingleScheduleResource) *SingleScheduleResourceDeleteOne {
	ssrdo.ssrd.mutation.Where(ps...)
	return ssrdo
}

// Exec executes the deletion query.
func (ssrdo *SingleScheduleResourceDeleteOne) Exec(ctx context.Context) error {
	n, err := ssrdo.ssrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{singlescheduleresource.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ssrdo *SingleScheduleResourceDeleteOne) ExecX(ctx context.Context) {
	if err := ssrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
