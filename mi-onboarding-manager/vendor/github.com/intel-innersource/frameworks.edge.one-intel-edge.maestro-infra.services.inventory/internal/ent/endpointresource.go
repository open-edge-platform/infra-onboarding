// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/endpointresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hostresource"
)

// EndpointResource is the model entity for the EndpointResource schema.
type EndpointResource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ResourceID holds the value of the "resource_id" field.
	ResourceID string `json:"resource_id,omitempty"`
	// Kind holds the value of the "kind" field.
	Kind string `json:"kind,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EndpointResourceQuery when eager-loading is set.
	Edges                  EndpointResourceEdges `json:"edges"`
	endpoint_resource_host *int
	selectValues           sql.SelectValues
}

// EndpointResourceEdges holds the relations/edges for other nodes in the graph.
type EndpointResourceEdges struct {
	// Host holds the value of the host edge.
	Host *HostResource `json:"host,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// HostOrErr returns the Host value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EndpointResourceEdges) HostOrErr() (*HostResource, error) {
	if e.loadedTypes[0] {
		if e.Host == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: hostresource.Label}
		}
		return e.Host, nil
	}
	return nil, &NotLoadedError{edge: "host"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EndpointResource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case endpointresource.FieldID:
			values[i] = new(sql.NullInt64)
		case endpointresource.FieldResourceID, endpointresource.FieldKind, endpointresource.FieldDescription:
			values[i] = new(sql.NullString)
		case endpointresource.ForeignKeys[0]: // endpoint_resource_host
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EndpointResource fields.
func (er *EndpointResource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case endpointresource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			er.ID = int(value.Int64)
		case endpointresource.FieldResourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				er.ResourceID = value.String
			}
		case endpointresource.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				er.Kind = value.String
			}
		case endpointresource.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				er.Description = value.String
			}
		case endpointresource.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field endpoint_resource_host", value)
			} else if value.Valid {
				er.endpoint_resource_host = new(int)
				*er.endpoint_resource_host = int(value.Int64)
			}
		default:
			er.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EndpointResource.
// This includes values selected through modifiers, order, etc.
func (er *EndpointResource) Value(name string) (ent.Value, error) {
	return er.selectValues.Get(name)
}

// QueryHost queries the "host" edge of the EndpointResource entity.
func (er *EndpointResource) QueryHost() *HostResourceQuery {
	return NewEndpointResourceClient(er.config).QueryHost(er)
}

// Update returns a builder for updating this EndpointResource.
// Note that you need to call EndpointResource.Unwrap() before calling this method if this EndpointResource
// was returned from a transaction, and the transaction was committed or rolled back.
func (er *EndpointResource) Update() *EndpointResourceUpdateOne {
	return NewEndpointResourceClient(er.config).UpdateOne(er)
}

// Unwrap unwraps the EndpointResource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (er *EndpointResource) Unwrap() *EndpointResource {
	_tx, ok := er.config.driver.(*txDriver)
	if !ok {
		panic("ent: EndpointResource is not a transactional entity")
	}
	er.config.driver = _tx.drv
	return er
}

// String implements the fmt.Stringer.
func (er *EndpointResource) String() string {
	var builder strings.Builder
	builder.WriteString("EndpointResource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", er.ID))
	builder.WriteString("resource_id=")
	builder.WriteString(er.ResourceID)
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(er.Kind)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(er.Description)
	builder.WriteByte(')')
	return builder.String()
}

// EndpointResources is a parsable slice of EndpointResource.
type EndpointResources []*EndpointResource
