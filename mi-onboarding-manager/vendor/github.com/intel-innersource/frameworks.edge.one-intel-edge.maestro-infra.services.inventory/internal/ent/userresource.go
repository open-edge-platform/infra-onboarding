// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/userresource"
)

// UserResource is the model entity for the UserResource schema.
type UserResource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ResourceID holds the value of the "resource_id" field.
	ResourceID string `json:"resource_id,omitempty"`
	// Kind holds the value of the "kind" field.
	Kind string `json:"kind,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// SSHPubkey holds the value of the "ssh_pubkey" field.
	SSHPubkey    string `json:"ssh_pubkey,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserResource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userresource.FieldID:
			values[i] = new(sql.NullInt64)
		case userresource.FieldResourceID, userresource.FieldKind, userresource.FieldDescription, userresource.FieldUsername, userresource.FieldSSHPubkey:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserResource fields.
func (ur *UserResource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userresource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ur.ID = int(value.Int64)
		case userresource.FieldResourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				ur.ResourceID = value.String
			}
		case userresource.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				ur.Kind = value.String
			}
		case userresource.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ur.Description = value.String
			}
		case userresource.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				ur.Username = value.String
			}
		case userresource.FieldSSHPubkey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ssh_pubkey", values[i])
			} else if value.Valid {
				ur.SSHPubkey = value.String
			}
		default:
			ur.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserResource.
// This includes values selected through modifiers, order, etc.
func (ur *UserResource) Value(name string) (ent.Value, error) {
	return ur.selectValues.Get(name)
}

// Update returns a builder for updating this UserResource.
// Note that you need to call UserResource.Unwrap() before calling this method if this UserResource
// was returned from a transaction, and the transaction was committed or rolled back.
func (ur *UserResource) Update() *UserResourceUpdateOne {
	return NewUserResourceClient(ur.config).UpdateOne(ur)
}

// Unwrap unwraps the UserResource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ur *UserResource) Unwrap() *UserResource {
	_tx, ok := ur.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserResource is not a transactional entity")
	}
	ur.config.driver = _tx.drv
	return ur
}

// String implements the fmt.Stringer.
func (ur *UserResource) String() string {
	var builder strings.Builder
	builder.WriteString("UserResource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ur.ID))
	builder.WriteString("resource_id=")
	builder.WriteString(ur.ResourceID)
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(ur.Kind)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ur.Description)
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(ur.Username)
	builder.WriteString(", ")
	builder.WriteString("ssh_pubkey=")
	builder.WriteString(ur.SSHPubkey)
	builder.WriteByte(')')
	return builder.String()
}

// UserResources is a parsable slice of UserResource.
type UserResources []*UserResource
