// Code generated by ent, DO NOT EDIT.

package workloadresource

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the workloadresource type in the database.
	Label = "workload_resource"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldResourceID holds the string denoting the resource_id field in the database.
	FieldResourceID = "resource_id"
	// FieldKind holds the string denoting the kind field in the database.
	FieldKind = "kind"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldExternalID holds the string denoting the external_id field in the database.
	FieldExternalID = "external_id"
	// FieldDesiredState holds the string denoting the desired_state field in the database.
	FieldDesiredState = "desired_state"
	// FieldCurrentState holds the string denoting the current_state field in the database.
	FieldCurrentState = "current_state"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// EdgeMembers holds the string denoting the members edge name in mutations.
	EdgeMembers = "members"
	// Table holds the table name of the workloadresource in the database.
	Table = "workload_resources"
	// MembersTable is the table that holds the members relation/edge.
	MembersTable = "workload_members"
	// MembersInverseTable is the table name for the WorkloadMember entity.
	// It exists in this package in order to avoid circular dependency with the "workloadmember" package.
	MembersInverseTable = "workload_members"
	// MembersColumn is the table column denoting the members relation/edge.
	MembersColumn = "workload_member_workload"
)

// Columns holds all SQL columns for workloadresource fields.
var Columns = []string{
	FieldID,
	FieldResourceID,
	FieldKind,
	FieldName,
	FieldExternalID,
	FieldDesiredState,
	FieldCurrentState,
	FieldStatus,
	FieldMetadata,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Kind defines the type for the "kind" enum field.
type Kind string

// Kind values.
const (
	KindWORKLOAD_KIND_UNSPECIFIED Kind = "WORKLOAD_KIND_UNSPECIFIED"
	KindWORKLOAD_KIND_CLUSTER     Kind = "WORKLOAD_KIND_CLUSTER"
	KindWORKLOAD_KIND_DHCP        Kind = "WORKLOAD_KIND_DHCP"
)

func (k Kind) String() string {
	return string(k)
}

// KindValidator is a validator for the "kind" field enum values. It is called by the builders before save.
func KindValidator(k Kind) error {
	switch k {
	case KindWORKLOAD_KIND_UNSPECIFIED, KindWORKLOAD_KIND_CLUSTER, KindWORKLOAD_KIND_DHCP:
		return nil
	default:
		return fmt.Errorf("workloadresource: invalid enum value for kind field: %q", k)
	}
}

// DesiredState defines the type for the "desired_state" enum field.
type DesiredState string

// DesiredState values.
const (
	DesiredStateWORKLOAD_STATE_UNSPECIFIED DesiredState = "WORKLOAD_STATE_UNSPECIFIED"
	DesiredStateWORKLOAD_STATE_ERROR       DesiredState = "WORKLOAD_STATE_ERROR"
	DesiredStateWORKLOAD_STATE_DELETING    DesiredState = "WORKLOAD_STATE_DELETING"
	DesiredStateWORKLOAD_STATE_DELETED     DesiredState = "WORKLOAD_STATE_DELETED"
	DesiredStateWORKLOAD_STATE_PROVISIONED DesiredState = "WORKLOAD_STATE_PROVISIONED"
)

func (ds DesiredState) String() string {
	return string(ds)
}

// DesiredStateValidator is a validator for the "desired_state" field enum values. It is called by the builders before save.
func DesiredStateValidator(ds DesiredState) error {
	switch ds {
	case DesiredStateWORKLOAD_STATE_UNSPECIFIED, DesiredStateWORKLOAD_STATE_ERROR, DesiredStateWORKLOAD_STATE_DELETING, DesiredStateWORKLOAD_STATE_DELETED, DesiredStateWORKLOAD_STATE_PROVISIONED:
		return nil
	default:
		return fmt.Errorf("workloadresource: invalid enum value for desired_state field: %q", ds)
	}
}

// CurrentState defines the type for the "current_state" enum field.
type CurrentState string

// CurrentState values.
const (
	CurrentStateWORKLOAD_STATE_UNSPECIFIED CurrentState = "WORKLOAD_STATE_UNSPECIFIED"
	CurrentStateWORKLOAD_STATE_ERROR       CurrentState = "WORKLOAD_STATE_ERROR"
	CurrentStateWORKLOAD_STATE_DELETING    CurrentState = "WORKLOAD_STATE_DELETING"
	CurrentStateWORKLOAD_STATE_DELETED     CurrentState = "WORKLOAD_STATE_DELETED"
	CurrentStateWORKLOAD_STATE_PROVISIONED CurrentState = "WORKLOAD_STATE_PROVISIONED"
)

func (cs CurrentState) String() string {
	return string(cs)
}

// CurrentStateValidator is a validator for the "current_state" field enum values. It is called by the builders before save.
func CurrentStateValidator(cs CurrentState) error {
	switch cs {
	case CurrentStateWORKLOAD_STATE_UNSPECIFIED, CurrentStateWORKLOAD_STATE_ERROR, CurrentStateWORKLOAD_STATE_DELETING, CurrentStateWORKLOAD_STATE_DELETED, CurrentStateWORKLOAD_STATE_PROVISIONED:
		return nil
	default:
		return fmt.Errorf("workloadresource: invalid enum value for current_state field: %q", cs)
	}
}

// OrderOption defines the ordering options for the WorkloadResource queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByResourceID orders the results by the resource_id field.
func ByResourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceID, opts...).ToFunc()
}

// ByKind orders the results by the kind field.
func ByKind(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKind, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByExternalID orders the results by the external_id field.
func ByExternalID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExternalID, opts...).ToFunc()
}

// ByDesiredState orders the results by the desired_state field.
func ByDesiredState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesiredState, opts...).ToFunc()
}

// ByCurrentState orders the results by the current_state field.
func ByCurrentState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentState, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByMetadata orders the results by the metadata field.
func ByMetadata(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMetadata, opts...).ToFunc()
}

// ByMembersCount orders the results by members count.
func ByMembersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMembersStep(), opts...)
	}
}

// ByMembers orders the results by members terms.
func ByMembers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMembersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMembersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MembersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, MembersTable, MembersColumn),
	)
}
