// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hostresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/instanceresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/operatingsystemresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/providerresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/userresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/workloadmember"
)

// InstanceResourceUpdate is the builder for updating InstanceResource entities.
type InstanceResourceUpdate struct {
	config
	hooks    []Hook
	mutation *InstanceResourceMutation
}

// Where appends a list predicates to the InstanceResourceUpdate builder.
func (iru *InstanceResourceUpdate) Where(ps ...predicate.InstanceResource) *InstanceResourceUpdate {
	iru.mutation.Where(ps...)
	return iru
}

// SetResourceID sets the "resource_id" field.
func (iru *InstanceResourceUpdate) SetResourceID(s string) *InstanceResourceUpdate {
	iru.mutation.SetResourceID(s)
	return iru
}

// SetKind sets the "kind" field.
func (iru *InstanceResourceUpdate) SetKind(i instanceresource.Kind) *InstanceResourceUpdate {
	iru.mutation.SetKind(i)
	return iru
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableKind(i *instanceresource.Kind) *InstanceResourceUpdate {
	if i != nil {
		iru.SetKind(*i)
	}
	return iru
}

// ClearKind clears the value of the "kind" field.
func (iru *InstanceResourceUpdate) ClearKind() *InstanceResourceUpdate {
	iru.mutation.ClearKind()
	return iru
}

// SetName sets the "name" field.
func (iru *InstanceResourceUpdate) SetName(s string) *InstanceResourceUpdate {
	iru.mutation.SetName(s)
	return iru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableName(s *string) *InstanceResourceUpdate {
	if s != nil {
		iru.SetName(*s)
	}
	return iru
}

// ClearName clears the value of the "name" field.
func (iru *InstanceResourceUpdate) ClearName() *InstanceResourceUpdate {
	iru.mutation.ClearName()
	return iru
}

// SetDesiredState sets the "desired_state" field.
func (iru *InstanceResourceUpdate) SetDesiredState(is instanceresource.DesiredState) *InstanceResourceUpdate {
	iru.mutation.SetDesiredState(is)
	return iru
}

// SetNillableDesiredState sets the "desired_state" field if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableDesiredState(is *instanceresource.DesiredState) *InstanceResourceUpdate {
	if is != nil {
		iru.SetDesiredState(*is)
	}
	return iru
}

// ClearDesiredState clears the value of the "desired_state" field.
func (iru *InstanceResourceUpdate) ClearDesiredState() *InstanceResourceUpdate {
	iru.mutation.ClearDesiredState()
	return iru
}

// SetCurrentState sets the "current_state" field.
func (iru *InstanceResourceUpdate) SetCurrentState(is instanceresource.CurrentState) *InstanceResourceUpdate {
	iru.mutation.SetCurrentState(is)
	return iru
}

// SetNillableCurrentState sets the "current_state" field if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableCurrentState(is *instanceresource.CurrentState) *InstanceResourceUpdate {
	if is != nil {
		iru.SetCurrentState(*is)
	}
	return iru
}

// ClearCurrentState clears the value of the "current_state" field.
func (iru *InstanceResourceUpdate) ClearCurrentState() *InstanceResourceUpdate {
	iru.mutation.ClearCurrentState()
	return iru
}

// SetVMMemoryBytes sets the "vm_memory_bytes" field.
func (iru *InstanceResourceUpdate) SetVMMemoryBytes(u uint64) *InstanceResourceUpdate {
	iru.mutation.ResetVMMemoryBytes()
	iru.mutation.SetVMMemoryBytes(u)
	return iru
}

// SetNillableVMMemoryBytes sets the "vm_memory_bytes" field if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableVMMemoryBytes(u *uint64) *InstanceResourceUpdate {
	if u != nil {
		iru.SetVMMemoryBytes(*u)
	}
	return iru
}

// AddVMMemoryBytes adds u to the "vm_memory_bytes" field.
func (iru *InstanceResourceUpdate) AddVMMemoryBytes(u int64) *InstanceResourceUpdate {
	iru.mutation.AddVMMemoryBytes(u)
	return iru
}

// ClearVMMemoryBytes clears the value of the "vm_memory_bytes" field.
func (iru *InstanceResourceUpdate) ClearVMMemoryBytes() *InstanceResourceUpdate {
	iru.mutation.ClearVMMemoryBytes()
	return iru
}

// SetVMCPUCores sets the "vm_cpu_cores" field.
func (iru *InstanceResourceUpdate) SetVMCPUCores(u uint32) *InstanceResourceUpdate {
	iru.mutation.ResetVMCPUCores()
	iru.mutation.SetVMCPUCores(u)
	return iru
}

// SetNillableVMCPUCores sets the "vm_cpu_cores" field if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableVMCPUCores(u *uint32) *InstanceResourceUpdate {
	if u != nil {
		iru.SetVMCPUCores(*u)
	}
	return iru
}

// AddVMCPUCores adds u to the "vm_cpu_cores" field.
func (iru *InstanceResourceUpdate) AddVMCPUCores(u int32) *InstanceResourceUpdate {
	iru.mutation.AddVMCPUCores(u)
	return iru
}

// ClearVMCPUCores clears the value of the "vm_cpu_cores" field.
func (iru *InstanceResourceUpdate) ClearVMCPUCores() *InstanceResourceUpdate {
	iru.mutation.ClearVMCPUCores()
	return iru
}

// SetVMStorageBytes sets the "vm_storage_bytes" field.
func (iru *InstanceResourceUpdate) SetVMStorageBytes(u uint64) *InstanceResourceUpdate {
	iru.mutation.ResetVMStorageBytes()
	iru.mutation.SetVMStorageBytes(u)
	return iru
}

// SetNillableVMStorageBytes sets the "vm_storage_bytes" field if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableVMStorageBytes(u *uint64) *InstanceResourceUpdate {
	if u != nil {
		iru.SetVMStorageBytes(*u)
	}
	return iru
}

// AddVMStorageBytes adds u to the "vm_storage_bytes" field.
func (iru *InstanceResourceUpdate) AddVMStorageBytes(u int64) *InstanceResourceUpdate {
	iru.mutation.AddVMStorageBytes(u)
	return iru
}

// ClearVMStorageBytes clears the value of the "vm_storage_bytes" field.
func (iru *InstanceResourceUpdate) ClearVMStorageBytes() *InstanceResourceUpdate {
	iru.mutation.ClearVMStorageBytes()
	return iru
}

// SetStatus sets the "status" field.
func (iru *InstanceResourceUpdate) SetStatus(i instanceresource.Status) *InstanceResourceUpdate {
	iru.mutation.SetStatus(i)
	return iru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableStatus(i *instanceresource.Status) *InstanceResourceUpdate {
	if i != nil {
		iru.SetStatus(*i)
	}
	return iru
}

// ClearStatus clears the value of the "status" field.
func (iru *InstanceResourceUpdate) ClearStatus() *InstanceResourceUpdate {
	iru.mutation.ClearStatus()
	return iru
}

// SetStatusDetail sets the "status_detail" field.
func (iru *InstanceResourceUpdate) SetStatusDetail(s string) *InstanceResourceUpdate {
	iru.mutation.SetStatusDetail(s)
	return iru
}

// SetNillableStatusDetail sets the "status_detail" field if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableStatusDetail(s *string) *InstanceResourceUpdate {
	if s != nil {
		iru.SetStatusDetail(*s)
	}
	return iru
}

// ClearStatusDetail clears the value of the "status_detail" field.
func (iru *InstanceResourceUpdate) ClearStatusDetail() *InstanceResourceUpdate {
	iru.mutation.ClearStatusDetail()
	return iru
}

// SetHostID sets the "host" edge to the HostResource entity by ID.
func (iru *InstanceResourceUpdate) SetHostID(id int) *InstanceResourceUpdate {
	iru.mutation.SetHostID(id)
	return iru
}

// SetNillableHostID sets the "host" edge to the HostResource entity by ID if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableHostID(id *int) *InstanceResourceUpdate {
	if id != nil {
		iru = iru.SetHostID(*id)
	}
	return iru
}

// SetHost sets the "host" edge to the HostResource entity.
func (iru *InstanceResourceUpdate) SetHost(h *HostResource) *InstanceResourceUpdate {
	return iru.SetHostID(h.ID)
}

// SetUserID sets the "user" edge to the UserResource entity by ID.
func (iru *InstanceResourceUpdate) SetUserID(id int) *InstanceResourceUpdate {
	iru.mutation.SetUserID(id)
	return iru
}

// SetNillableUserID sets the "user" edge to the UserResource entity by ID if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableUserID(id *int) *InstanceResourceUpdate {
	if id != nil {
		iru = iru.SetUserID(*id)
	}
	return iru
}

// SetUser sets the "user" edge to the UserResource entity.
func (iru *InstanceResourceUpdate) SetUser(u *UserResource) *InstanceResourceUpdate {
	return iru.SetUserID(u.ID)
}

// SetOsID sets the "os" edge to the OperatingSystemResource entity by ID.
func (iru *InstanceResourceUpdate) SetOsID(id int) *InstanceResourceUpdate {
	iru.mutation.SetOsID(id)
	return iru
}

// SetOs sets the "os" edge to the OperatingSystemResource entity.
func (iru *InstanceResourceUpdate) SetOs(o *OperatingSystemResource) *InstanceResourceUpdate {
	return iru.SetOsID(o.ID)
}

// AddWorkloadMemberIDs adds the "workload_members" edge to the WorkloadMember entity by IDs.
func (iru *InstanceResourceUpdate) AddWorkloadMemberIDs(ids ...int) *InstanceResourceUpdate {
	iru.mutation.AddWorkloadMemberIDs(ids...)
	return iru
}

// AddWorkloadMembers adds the "workload_members" edges to the WorkloadMember entity.
func (iru *InstanceResourceUpdate) AddWorkloadMembers(w ...*WorkloadMember) *InstanceResourceUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return iru.AddWorkloadMemberIDs(ids...)
}

// SetProviderID sets the "provider" edge to the ProviderResource entity by ID.
func (iru *InstanceResourceUpdate) SetProviderID(id int) *InstanceResourceUpdate {
	iru.mutation.SetProviderID(id)
	return iru
}

// SetNillableProviderID sets the "provider" edge to the ProviderResource entity by ID if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableProviderID(id *int) *InstanceResourceUpdate {
	if id != nil {
		iru = iru.SetProviderID(*id)
	}
	return iru
}

// SetProvider sets the "provider" edge to the ProviderResource entity.
func (iru *InstanceResourceUpdate) SetProvider(p *ProviderResource) *InstanceResourceUpdate {
	return iru.SetProviderID(p.ID)
}

// Mutation returns the InstanceResourceMutation object of the builder.
func (iru *InstanceResourceUpdate) Mutation() *InstanceResourceMutation {
	return iru.mutation
}

// ClearHost clears the "host" edge to the HostResource entity.
func (iru *InstanceResourceUpdate) ClearHost() *InstanceResourceUpdate {
	iru.mutation.ClearHost()
	return iru
}

// ClearUser clears the "user" edge to the UserResource entity.
func (iru *InstanceResourceUpdate) ClearUser() *InstanceResourceUpdate {
	iru.mutation.ClearUser()
	return iru
}

// ClearOs clears the "os" edge to the OperatingSystemResource entity.
func (iru *InstanceResourceUpdate) ClearOs() *InstanceResourceUpdate {
	iru.mutation.ClearOs()
	return iru
}

// ClearWorkloadMembers clears all "workload_members" edges to the WorkloadMember entity.
func (iru *InstanceResourceUpdate) ClearWorkloadMembers() *InstanceResourceUpdate {
	iru.mutation.ClearWorkloadMembers()
	return iru
}

// RemoveWorkloadMemberIDs removes the "workload_members" edge to WorkloadMember entities by IDs.
func (iru *InstanceResourceUpdate) RemoveWorkloadMemberIDs(ids ...int) *InstanceResourceUpdate {
	iru.mutation.RemoveWorkloadMemberIDs(ids...)
	return iru
}

// RemoveWorkloadMembers removes "workload_members" edges to WorkloadMember entities.
func (iru *InstanceResourceUpdate) RemoveWorkloadMembers(w ...*WorkloadMember) *InstanceResourceUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return iru.RemoveWorkloadMemberIDs(ids...)
}

// ClearProvider clears the "provider" edge to the ProviderResource entity.
func (iru *InstanceResourceUpdate) ClearProvider() *InstanceResourceUpdate {
	iru.mutation.ClearProvider()
	return iru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iru *InstanceResourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, InstanceResourceMutation](ctx, iru.sqlSave, iru.mutation, iru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iru *InstanceResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := iru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iru *InstanceResourceUpdate) Exec(ctx context.Context) error {
	_, err := iru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iru *InstanceResourceUpdate) ExecX(ctx context.Context) {
	if err := iru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iru *InstanceResourceUpdate) check() error {
	if v, ok := iru.mutation.Kind(); ok {
		if err := instanceresource.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.kind": %w`, err)}
		}
	}
	if v, ok := iru.mutation.DesiredState(); ok {
		if err := instanceresource.DesiredStateValidator(v); err != nil {
			return &ValidationError{Name: "desired_state", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.desired_state": %w`, err)}
		}
	}
	if v, ok := iru.mutation.CurrentState(); ok {
		if err := instanceresource.CurrentStateValidator(v); err != nil {
			return &ValidationError{Name: "current_state", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.current_state": %w`, err)}
		}
	}
	if v, ok := iru.mutation.Status(); ok {
		if err := instanceresource.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.status": %w`, err)}
		}
	}
	if _, ok := iru.mutation.OsID(); iru.mutation.OsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "InstanceResource.os"`)
	}
	return nil
}

func (iru *InstanceResourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(instanceresource.Table, instanceresource.Columns, sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt))
	if ps := iru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iru.mutation.ResourceID(); ok {
		_spec.SetField(instanceresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := iru.mutation.Kind(); ok {
		_spec.SetField(instanceresource.FieldKind, field.TypeEnum, value)
	}
	if iru.mutation.KindCleared() {
		_spec.ClearField(instanceresource.FieldKind, field.TypeEnum)
	}
	if value, ok := iru.mutation.Name(); ok {
		_spec.SetField(instanceresource.FieldName, field.TypeString, value)
	}
	if iru.mutation.NameCleared() {
		_spec.ClearField(instanceresource.FieldName, field.TypeString)
	}
	if value, ok := iru.mutation.DesiredState(); ok {
		_spec.SetField(instanceresource.FieldDesiredState, field.TypeEnum, value)
	}
	if iru.mutation.DesiredStateCleared() {
		_spec.ClearField(instanceresource.FieldDesiredState, field.TypeEnum)
	}
	if value, ok := iru.mutation.CurrentState(); ok {
		_spec.SetField(instanceresource.FieldCurrentState, field.TypeEnum, value)
	}
	if iru.mutation.CurrentStateCleared() {
		_spec.ClearField(instanceresource.FieldCurrentState, field.TypeEnum)
	}
	if value, ok := iru.mutation.VMMemoryBytes(); ok {
		_spec.SetField(instanceresource.FieldVMMemoryBytes, field.TypeUint64, value)
	}
	if value, ok := iru.mutation.AddedVMMemoryBytes(); ok {
		_spec.AddField(instanceresource.FieldVMMemoryBytes, field.TypeUint64, value)
	}
	if iru.mutation.VMMemoryBytesCleared() {
		_spec.ClearField(instanceresource.FieldVMMemoryBytes, field.TypeUint64)
	}
	if value, ok := iru.mutation.VMCPUCores(); ok {
		_spec.SetField(instanceresource.FieldVMCPUCores, field.TypeUint32, value)
	}
	if value, ok := iru.mutation.AddedVMCPUCores(); ok {
		_spec.AddField(instanceresource.FieldVMCPUCores, field.TypeUint32, value)
	}
	if iru.mutation.VMCPUCoresCleared() {
		_spec.ClearField(instanceresource.FieldVMCPUCores, field.TypeUint32)
	}
	if value, ok := iru.mutation.VMStorageBytes(); ok {
		_spec.SetField(instanceresource.FieldVMStorageBytes, field.TypeUint64, value)
	}
	if value, ok := iru.mutation.AddedVMStorageBytes(); ok {
		_spec.AddField(instanceresource.FieldVMStorageBytes, field.TypeUint64, value)
	}
	if iru.mutation.VMStorageBytesCleared() {
		_spec.ClearField(instanceresource.FieldVMStorageBytes, field.TypeUint64)
	}
	if value, ok := iru.mutation.Status(); ok {
		_spec.SetField(instanceresource.FieldStatus, field.TypeEnum, value)
	}
	if iru.mutation.StatusCleared() {
		_spec.ClearField(instanceresource.FieldStatus, field.TypeEnum)
	}
	if value, ok := iru.mutation.StatusDetail(); ok {
		_spec.SetField(instanceresource.FieldStatusDetail, field.TypeString, value)
	}
	if iru.mutation.StatusDetailCleared() {
		_spec.ClearField(instanceresource.FieldStatusDetail, field.TypeString)
	}
	if iru.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   instanceresource.HostTable,
			Columns: []string{instanceresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iru.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   instanceresource.HostTable,
			Columns: []string{instanceresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.UserTable,
			Columns: []string{instanceresource.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.UserTable,
			Columns: []string{instanceresource.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iru.mutation.OsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.OsTable,
			Columns: []string{instanceresource.OsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iru.mutation.OsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.OsTable,
			Columns: []string{instanceresource.OsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iru.mutation.WorkloadMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   instanceresource.WorkloadMembersTable,
			Columns: []string{instanceresource.WorkloadMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadmember.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iru.mutation.RemovedWorkloadMembersIDs(); len(nodes) > 0 && !iru.mutation.WorkloadMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   instanceresource.WorkloadMembersTable,
			Columns: []string{instanceresource.WorkloadMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iru.mutation.WorkloadMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   instanceresource.WorkloadMembersTable,
			Columns: []string{instanceresource.WorkloadMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iru.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.ProviderTable,
			Columns: []string{instanceresource.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iru.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.ProviderTable,
			Columns: []string{instanceresource.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{instanceresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iru.mutation.done = true
	return n, nil
}

// InstanceResourceUpdateOne is the builder for updating a single InstanceResource entity.
type InstanceResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InstanceResourceMutation
}

// SetResourceID sets the "resource_id" field.
func (iruo *InstanceResourceUpdateOne) SetResourceID(s string) *InstanceResourceUpdateOne {
	iruo.mutation.SetResourceID(s)
	return iruo
}

// SetKind sets the "kind" field.
func (iruo *InstanceResourceUpdateOne) SetKind(i instanceresource.Kind) *InstanceResourceUpdateOne {
	iruo.mutation.SetKind(i)
	return iruo
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableKind(i *instanceresource.Kind) *InstanceResourceUpdateOne {
	if i != nil {
		iruo.SetKind(*i)
	}
	return iruo
}

// ClearKind clears the value of the "kind" field.
func (iruo *InstanceResourceUpdateOne) ClearKind() *InstanceResourceUpdateOne {
	iruo.mutation.ClearKind()
	return iruo
}

// SetName sets the "name" field.
func (iruo *InstanceResourceUpdateOne) SetName(s string) *InstanceResourceUpdateOne {
	iruo.mutation.SetName(s)
	return iruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableName(s *string) *InstanceResourceUpdateOne {
	if s != nil {
		iruo.SetName(*s)
	}
	return iruo
}

// ClearName clears the value of the "name" field.
func (iruo *InstanceResourceUpdateOne) ClearName() *InstanceResourceUpdateOne {
	iruo.mutation.ClearName()
	return iruo
}

// SetDesiredState sets the "desired_state" field.
func (iruo *InstanceResourceUpdateOne) SetDesiredState(is instanceresource.DesiredState) *InstanceResourceUpdateOne {
	iruo.mutation.SetDesiredState(is)
	return iruo
}

// SetNillableDesiredState sets the "desired_state" field if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableDesiredState(is *instanceresource.DesiredState) *InstanceResourceUpdateOne {
	if is != nil {
		iruo.SetDesiredState(*is)
	}
	return iruo
}

// ClearDesiredState clears the value of the "desired_state" field.
func (iruo *InstanceResourceUpdateOne) ClearDesiredState() *InstanceResourceUpdateOne {
	iruo.mutation.ClearDesiredState()
	return iruo
}

// SetCurrentState sets the "current_state" field.
func (iruo *InstanceResourceUpdateOne) SetCurrentState(is instanceresource.CurrentState) *InstanceResourceUpdateOne {
	iruo.mutation.SetCurrentState(is)
	return iruo
}

// SetNillableCurrentState sets the "current_state" field if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableCurrentState(is *instanceresource.CurrentState) *InstanceResourceUpdateOne {
	if is != nil {
		iruo.SetCurrentState(*is)
	}
	return iruo
}

// ClearCurrentState clears the value of the "current_state" field.
func (iruo *InstanceResourceUpdateOne) ClearCurrentState() *InstanceResourceUpdateOne {
	iruo.mutation.ClearCurrentState()
	return iruo
}

// SetVMMemoryBytes sets the "vm_memory_bytes" field.
func (iruo *InstanceResourceUpdateOne) SetVMMemoryBytes(u uint64) *InstanceResourceUpdateOne {
	iruo.mutation.ResetVMMemoryBytes()
	iruo.mutation.SetVMMemoryBytes(u)
	return iruo
}

// SetNillableVMMemoryBytes sets the "vm_memory_bytes" field if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableVMMemoryBytes(u *uint64) *InstanceResourceUpdateOne {
	if u != nil {
		iruo.SetVMMemoryBytes(*u)
	}
	return iruo
}

// AddVMMemoryBytes adds u to the "vm_memory_bytes" field.
func (iruo *InstanceResourceUpdateOne) AddVMMemoryBytes(u int64) *InstanceResourceUpdateOne {
	iruo.mutation.AddVMMemoryBytes(u)
	return iruo
}

// ClearVMMemoryBytes clears the value of the "vm_memory_bytes" field.
func (iruo *InstanceResourceUpdateOne) ClearVMMemoryBytes() *InstanceResourceUpdateOne {
	iruo.mutation.ClearVMMemoryBytes()
	return iruo
}

// SetVMCPUCores sets the "vm_cpu_cores" field.
func (iruo *InstanceResourceUpdateOne) SetVMCPUCores(u uint32) *InstanceResourceUpdateOne {
	iruo.mutation.ResetVMCPUCores()
	iruo.mutation.SetVMCPUCores(u)
	return iruo
}

// SetNillableVMCPUCores sets the "vm_cpu_cores" field if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableVMCPUCores(u *uint32) *InstanceResourceUpdateOne {
	if u != nil {
		iruo.SetVMCPUCores(*u)
	}
	return iruo
}

// AddVMCPUCores adds u to the "vm_cpu_cores" field.
func (iruo *InstanceResourceUpdateOne) AddVMCPUCores(u int32) *InstanceResourceUpdateOne {
	iruo.mutation.AddVMCPUCores(u)
	return iruo
}

// ClearVMCPUCores clears the value of the "vm_cpu_cores" field.
func (iruo *InstanceResourceUpdateOne) ClearVMCPUCores() *InstanceResourceUpdateOne {
	iruo.mutation.ClearVMCPUCores()
	return iruo
}

// SetVMStorageBytes sets the "vm_storage_bytes" field.
func (iruo *InstanceResourceUpdateOne) SetVMStorageBytes(u uint64) *InstanceResourceUpdateOne {
	iruo.mutation.ResetVMStorageBytes()
	iruo.mutation.SetVMStorageBytes(u)
	return iruo
}

// SetNillableVMStorageBytes sets the "vm_storage_bytes" field if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableVMStorageBytes(u *uint64) *InstanceResourceUpdateOne {
	if u != nil {
		iruo.SetVMStorageBytes(*u)
	}
	return iruo
}

// AddVMStorageBytes adds u to the "vm_storage_bytes" field.
func (iruo *InstanceResourceUpdateOne) AddVMStorageBytes(u int64) *InstanceResourceUpdateOne {
	iruo.mutation.AddVMStorageBytes(u)
	return iruo
}

// ClearVMStorageBytes clears the value of the "vm_storage_bytes" field.
func (iruo *InstanceResourceUpdateOne) ClearVMStorageBytes() *InstanceResourceUpdateOne {
	iruo.mutation.ClearVMStorageBytes()
	return iruo
}

// SetStatus sets the "status" field.
func (iruo *InstanceResourceUpdateOne) SetStatus(i instanceresource.Status) *InstanceResourceUpdateOne {
	iruo.mutation.SetStatus(i)
	return iruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableStatus(i *instanceresource.Status) *InstanceResourceUpdateOne {
	if i != nil {
		iruo.SetStatus(*i)
	}
	return iruo
}

// ClearStatus clears the value of the "status" field.
func (iruo *InstanceResourceUpdateOne) ClearStatus() *InstanceResourceUpdateOne {
	iruo.mutation.ClearStatus()
	return iruo
}

// SetStatusDetail sets the "status_detail" field.
func (iruo *InstanceResourceUpdateOne) SetStatusDetail(s string) *InstanceResourceUpdateOne {
	iruo.mutation.SetStatusDetail(s)
	return iruo
}

// SetNillableStatusDetail sets the "status_detail" field if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableStatusDetail(s *string) *InstanceResourceUpdateOne {
	if s != nil {
		iruo.SetStatusDetail(*s)
	}
	return iruo
}

// ClearStatusDetail clears the value of the "status_detail" field.
func (iruo *InstanceResourceUpdateOne) ClearStatusDetail() *InstanceResourceUpdateOne {
	iruo.mutation.ClearStatusDetail()
	return iruo
}

// SetHostID sets the "host" edge to the HostResource entity by ID.
func (iruo *InstanceResourceUpdateOne) SetHostID(id int) *InstanceResourceUpdateOne {
	iruo.mutation.SetHostID(id)
	return iruo
}

// SetNillableHostID sets the "host" edge to the HostResource entity by ID if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableHostID(id *int) *InstanceResourceUpdateOne {
	if id != nil {
		iruo = iruo.SetHostID(*id)
	}
	return iruo
}

// SetHost sets the "host" edge to the HostResource entity.
func (iruo *InstanceResourceUpdateOne) SetHost(h *HostResource) *InstanceResourceUpdateOne {
	return iruo.SetHostID(h.ID)
}

// SetUserID sets the "user" edge to the UserResource entity by ID.
func (iruo *InstanceResourceUpdateOne) SetUserID(id int) *InstanceResourceUpdateOne {
	iruo.mutation.SetUserID(id)
	return iruo
}

// SetNillableUserID sets the "user" edge to the UserResource entity by ID if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableUserID(id *int) *InstanceResourceUpdateOne {
	if id != nil {
		iruo = iruo.SetUserID(*id)
	}
	return iruo
}

// SetUser sets the "user" edge to the UserResource entity.
func (iruo *InstanceResourceUpdateOne) SetUser(u *UserResource) *InstanceResourceUpdateOne {
	return iruo.SetUserID(u.ID)
}

// SetOsID sets the "os" edge to the OperatingSystemResource entity by ID.
func (iruo *InstanceResourceUpdateOne) SetOsID(id int) *InstanceResourceUpdateOne {
	iruo.mutation.SetOsID(id)
	return iruo
}

// SetOs sets the "os" edge to the OperatingSystemResource entity.
func (iruo *InstanceResourceUpdateOne) SetOs(o *OperatingSystemResource) *InstanceResourceUpdateOne {
	return iruo.SetOsID(o.ID)
}

// AddWorkloadMemberIDs adds the "workload_members" edge to the WorkloadMember entity by IDs.
func (iruo *InstanceResourceUpdateOne) AddWorkloadMemberIDs(ids ...int) *InstanceResourceUpdateOne {
	iruo.mutation.AddWorkloadMemberIDs(ids...)
	return iruo
}

// AddWorkloadMembers adds the "workload_members" edges to the WorkloadMember entity.
func (iruo *InstanceResourceUpdateOne) AddWorkloadMembers(w ...*WorkloadMember) *InstanceResourceUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return iruo.AddWorkloadMemberIDs(ids...)
}

// SetProviderID sets the "provider" edge to the ProviderResource entity by ID.
func (iruo *InstanceResourceUpdateOne) SetProviderID(id int) *InstanceResourceUpdateOne {
	iruo.mutation.SetProviderID(id)
	return iruo
}

// SetNillableProviderID sets the "provider" edge to the ProviderResource entity by ID if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableProviderID(id *int) *InstanceResourceUpdateOne {
	if id != nil {
		iruo = iruo.SetProviderID(*id)
	}
	return iruo
}

// SetProvider sets the "provider" edge to the ProviderResource entity.
func (iruo *InstanceResourceUpdateOne) SetProvider(p *ProviderResource) *InstanceResourceUpdateOne {
	return iruo.SetProviderID(p.ID)
}

// Mutation returns the InstanceResourceMutation object of the builder.
func (iruo *InstanceResourceUpdateOne) Mutation() *InstanceResourceMutation {
	return iruo.mutation
}

// ClearHost clears the "host" edge to the HostResource entity.
func (iruo *InstanceResourceUpdateOne) ClearHost() *InstanceResourceUpdateOne {
	iruo.mutation.ClearHost()
	return iruo
}

// ClearUser clears the "user" edge to the UserResource entity.
func (iruo *InstanceResourceUpdateOne) ClearUser() *InstanceResourceUpdateOne {
	iruo.mutation.ClearUser()
	return iruo
}

// ClearOs clears the "os" edge to the OperatingSystemResource entity.
func (iruo *InstanceResourceUpdateOne) ClearOs() *InstanceResourceUpdateOne {
	iruo.mutation.ClearOs()
	return iruo
}

// ClearWorkloadMembers clears all "workload_members" edges to the WorkloadMember entity.
func (iruo *InstanceResourceUpdateOne) ClearWorkloadMembers() *InstanceResourceUpdateOne {
	iruo.mutation.ClearWorkloadMembers()
	return iruo
}

// RemoveWorkloadMemberIDs removes the "workload_members" edge to WorkloadMember entities by IDs.
func (iruo *InstanceResourceUpdateOne) RemoveWorkloadMemberIDs(ids ...int) *InstanceResourceUpdateOne {
	iruo.mutation.RemoveWorkloadMemberIDs(ids...)
	return iruo
}

// RemoveWorkloadMembers removes "workload_members" edges to WorkloadMember entities.
func (iruo *InstanceResourceUpdateOne) RemoveWorkloadMembers(w ...*WorkloadMember) *InstanceResourceUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return iruo.RemoveWorkloadMemberIDs(ids...)
}

// ClearProvider clears the "provider" edge to the ProviderResource entity.
func (iruo *InstanceResourceUpdateOne) ClearProvider() *InstanceResourceUpdateOne {
	iruo.mutation.ClearProvider()
	return iruo
}

// Where appends a list predicates to the InstanceResourceUpdate builder.
func (iruo *InstanceResourceUpdateOne) Where(ps ...predicate.InstanceResource) *InstanceResourceUpdateOne {
	iruo.mutation.Where(ps...)
	return iruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iruo *InstanceResourceUpdateOne) Select(field string, fields ...string) *InstanceResourceUpdateOne {
	iruo.fields = append([]string{field}, fields...)
	return iruo
}

// Save executes the query and returns the updated InstanceResource entity.
func (iruo *InstanceResourceUpdateOne) Save(ctx context.Context) (*InstanceResource, error) {
	return withHooks[*InstanceResource, InstanceResourceMutation](ctx, iruo.sqlSave, iruo.mutation, iruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iruo *InstanceResourceUpdateOne) SaveX(ctx context.Context) *InstanceResource {
	node, err := iruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iruo *InstanceResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := iruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iruo *InstanceResourceUpdateOne) ExecX(ctx context.Context) {
	if err := iruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iruo *InstanceResourceUpdateOne) check() error {
	if v, ok := iruo.mutation.Kind(); ok {
		if err := instanceresource.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.kind": %w`, err)}
		}
	}
	if v, ok := iruo.mutation.DesiredState(); ok {
		if err := instanceresource.DesiredStateValidator(v); err != nil {
			return &ValidationError{Name: "desired_state", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.desired_state": %w`, err)}
		}
	}
	if v, ok := iruo.mutation.CurrentState(); ok {
		if err := instanceresource.CurrentStateValidator(v); err != nil {
			return &ValidationError{Name: "current_state", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.current_state": %w`, err)}
		}
	}
	if v, ok := iruo.mutation.Status(); ok {
		if err := instanceresource.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.status": %w`, err)}
		}
	}
	if _, ok := iruo.mutation.OsID(); iruo.mutation.OsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "InstanceResource.os"`)
	}
	return nil
}

func (iruo *InstanceResourceUpdateOne) sqlSave(ctx context.Context) (_node *InstanceResource, err error) {
	if err := iruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(instanceresource.Table, instanceresource.Columns, sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt))
	id, ok := iruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "InstanceResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, instanceresource.FieldID)
		for _, f := range fields {
			if !instanceresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != instanceresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iruo.mutation.ResourceID(); ok {
		_spec.SetField(instanceresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := iruo.mutation.Kind(); ok {
		_spec.SetField(instanceresource.FieldKind, field.TypeEnum, value)
	}
	if iruo.mutation.KindCleared() {
		_spec.ClearField(instanceresource.FieldKind, field.TypeEnum)
	}
	if value, ok := iruo.mutation.Name(); ok {
		_spec.SetField(instanceresource.FieldName, field.TypeString, value)
	}
	if iruo.mutation.NameCleared() {
		_spec.ClearField(instanceresource.FieldName, field.TypeString)
	}
	if value, ok := iruo.mutation.DesiredState(); ok {
		_spec.SetField(instanceresource.FieldDesiredState, field.TypeEnum, value)
	}
	if iruo.mutation.DesiredStateCleared() {
		_spec.ClearField(instanceresource.FieldDesiredState, field.TypeEnum)
	}
	if value, ok := iruo.mutation.CurrentState(); ok {
		_spec.SetField(instanceresource.FieldCurrentState, field.TypeEnum, value)
	}
	if iruo.mutation.CurrentStateCleared() {
		_spec.ClearField(instanceresource.FieldCurrentState, field.TypeEnum)
	}
	if value, ok := iruo.mutation.VMMemoryBytes(); ok {
		_spec.SetField(instanceresource.FieldVMMemoryBytes, field.TypeUint64, value)
	}
	if value, ok := iruo.mutation.AddedVMMemoryBytes(); ok {
		_spec.AddField(instanceresource.FieldVMMemoryBytes, field.TypeUint64, value)
	}
	if iruo.mutation.VMMemoryBytesCleared() {
		_spec.ClearField(instanceresource.FieldVMMemoryBytes, field.TypeUint64)
	}
	if value, ok := iruo.mutation.VMCPUCores(); ok {
		_spec.SetField(instanceresource.FieldVMCPUCores, field.TypeUint32, value)
	}
	if value, ok := iruo.mutation.AddedVMCPUCores(); ok {
		_spec.AddField(instanceresource.FieldVMCPUCores, field.TypeUint32, value)
	}
	if iruo.mutation.VMCPUCoresCleared() {
		_spec.ClearField(instanceresource.FieldVMCPUCores, field.TypeUint32)
	}
	if value, ok := iruo.mutation.VMStorageBytes(); ok {
		_spec.SetField(instanceresource.FieldVMStorageBytes, field.TypeUint64, value)
	}
	if value, ok := iruo.mutation.AddedVMStorageBytes(); ok {
		_spec.AddField(instanceresource.FieldVMStorageBytes, field.TypeUint64, value)
	}
	if iruo.mutation.VMStorageBytesCleared() {
		_spec.ClearField(instanceresource.FieldVMStorageBytes, field.TypeUint64)
	}
	if value, ok := iruo.mutation.Status(); ok {
		_spec.SetField(instanceresource.FieldStatus, field.TypeEnum, value)
	}
	if iruo.mutation.StatusCleared() {
		_spec.ClearField(instanceresource.FieldStatus, field.TypeEnum)
	}
	if value, ok := iruo.mutation.StatusDetail(); ok {
		_spec.SetField(instanceresource.FieldStatusDetail, field.TypeString, value)
	}
	if iruo.mutation.StatusDetailCleared() {
		_spec.ClearField(instanceresource.FieldStatusDetail, field.TypeString)
	}
	if iruo.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   instanceresource.HostTable,
			Columns: []string{instanceresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iruo.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   instanceresource.HostTable,
			Columns: []string{instanceresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.UserTable,
			Columns: []string{instanceresource.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.UserTable,
			Columns: []string{instanceresource.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iruo.mutation.OsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.OsTable,
			Columns: []string{instanceresource.OsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iruo.mutation.OsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.OsTable,
			Columns: []string{instanceresource.OsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iruo.mutation.WorkloadMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   instanceresource.WorkloadMembersTable,
			Columns: []string{instanceresource.WorkloadMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadmember.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iruo.mutation.RemovedWorkloadMembersIDs(); len(nodes) > 0 && !iruo.mutation.WorkloadMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   instanceresource.WorkloadMembersTable,
			Columns: []string{instanceresource.WorkloadMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iruo.mutation.WorkloadMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   instanceresource.WorkloadMembersTable,
			Columns: []string{instanceresource.WorkloadMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iruo.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.ProviderTable,
			Columns: []string{instanceresource.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iruo.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.ProviderTable,
			Columns: []string{instanceresource.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &InstanceResource{config: iruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{instanceresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iruo.mutation.done = true
	return _node, nil
}
