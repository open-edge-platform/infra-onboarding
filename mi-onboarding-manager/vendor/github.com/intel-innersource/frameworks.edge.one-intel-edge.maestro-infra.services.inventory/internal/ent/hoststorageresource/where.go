// Code generated by ent, DO NOT EDIT.

package hoststorageresource

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldLTE(FieldID, id))
}

// ResourceID applies equality check predicate on the "resource_id" field. It's identical to ResourceIDEQ.
func ResourceID(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldEQ(FieldResourceID, v))
}

// Kind applies equality check predicate on the "kind" field. It's identical to KindEQ.
func Kind(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldEQ(FieldKind, v))
}

// ProviderStatus applies equality check predicate on the "provider_status" field. It's identical to ProviderStatusEQ.
func ProviderStatus(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldEQ(FieldProviderStatus, v))
}

// Wwid applies equality check predicate on the "wwid" field. It's identical to WwidEQ.
func Wwid(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldEQ(FieldWwid, v))
}

// Serial applies equality check predicate on the "serial" field. It's identical to SerialEQ.
func Serial(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldEQ(FieldSerial, v))
}

// Vendor applies equality check predicate on the "vendor" field. It's identical to VendorEQ.
func Vendor(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldEQ(FieldVendor, v))
}

// Model applies equality check predicate on the "model" field. It's identical to ModelEQ.
func Model(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldEQ(FieldModel, v))
}

// CapacityBytes applies equality check predicate on the "capacity_bytes" field. It's identical to CapacityBytesEQ.
func CapacityBytes(v uint64) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldEQ(FieldCapacityBytes, v))
}

// DeviceName applies equality check predicate on the "device_name" field. It's identical to DeviceNameEQ.
func DeviceName(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldEQ(FieldDeviceName, v))
}

// ResourceIDEQ applies the EQ predicate on the "resource_id" field.
func ResourceIDEQ(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldEQ(FieldResourceID, v))
}

// ResourceIDNEQ applies the NEQ predicate on the "resource_id" field.
func ResourceIDNEQ(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldNEQ(FieldResourceID, v))
}

// ResourceIDIn applies the In predicate on the "resource_id" field.
func ResourceIDIn(vs ...string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldIn(FieldResourceID, vs...))
}

// ResourceIDNotIn applies the NotIn predicate on the "resource_id" field.
func ResourceIDNotIn(vs ...string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldNotIn(FieldResourceID, vs...))
}

// ResourceIDGT applies the GT predicate on the "resource_id" field.
func ResourceIDGT(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldGT(FieldResourceID, v))
}

// ResourceIDGTE applies the GTE predicate on the "resource_id" field.
func ResourceIDGTE(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldGTE(FieldResourceID, v))
}

// ResourceIDLT applies the LT predicate on the "resource_id" field.
func ResourceIDLT(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldLT(FieldResourceID, v))
}

// ResourceIDLTE applies the LTE predicate on the "resource_id" field.
func ResourceIDLTE(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldLTE(FieldResourceID, v))
}

// ResourceIDContains applies the Contains predicate on the "resource_id" field.
func ResourceIDContains(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldContains(FieldResourceID, v))
}

// ResourceIDHasPrefix applies the HasPrefix predicate on the "resource_id" field.
func ResourceIDHasPrefix(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldHasPrefix(FieldResourceID, v))
}

// ResourceIDHasSuffix applies the HasSuffix predicate on the "resource_id" field.
func ResourceIDHasSuffix(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldHasSuffix(FieldResourceID, v))
}

// ResourceIDEqualFold applies the EqualFold predicate on the "resource_id" field.
func ResourceIDEqualFold(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldEqualFold(FieldResourceID, v))
}

// ResourceIDContainsFold applies the ContainsFold predicate on the "resource_id" field.
func ResourceIDContainsFold(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldContainsFold(FieldResourceID, v))
}

// KindEQ applies the EQ predicate on the "kind" field.
func KindEQ(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldEQ(FieldKind, v))
}

// KindNEQ applies the NEQ predicate on the "kind" field.
func KindNEQ(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldNEQ(FieldKind, v))
}

// KindIn applies the In predicate on the "kind" field.
func KindIn(vs ...string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldIn(FieldKind, vs...))
}

// KindNotIn applies the NotIn predicate on the "kind" field.
func KindNotIn(vs ...string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldNotIn(FieldKind, vs...))
}

// KindGT applies the GT predicate on the "kind" field.
func KindGT(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldGT(FieldKind, v))
}

// KindGTE applies the GTE predicate on the "kind" field.
func KindGTE(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldGTE(FieldKind, v))
}

// KindLT applies the LT predicate on the "kind" field.
func KindLT(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldLT(FieldKind, v))
}

// KindLTE applies the LTE predicate on the "kind" field.
func KindLTE(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldLTE(FieldKind, v))
}

// KindContains applies the Contains predicate on the "kind" field.
func KindContains(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldContains(FieldKind, v))
}

// KindHasPrefix applies the HasPrefix predicate on the "kind" field.
func KindHasPrefix(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldHasPrefix(FieldKind, v))
}

// KindHasSuffix applies the HasSuffix predicate on the "kind" field.
func KindHasSuffix(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldHasSuffix(FieldKind, v))
}

// KindIsNil applies the IsNil predicate on the "kind" field.
func KindIsNil() predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldIsNull(FieldKind))
}

// KindNotNil applies the NotNil predicate on the "kind" field.
func KindNotNil() predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldNotNull(FieldKind))
}

// KindEqualFold applies the EqualFold predicate on the "kind" field.
func KindEqualFold(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldEqualFold(FieldKind, v))
}

// KindContainsFold applies the ContainsFold predicate on the "kind" field.
func KindContainsFold(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldContainsFold(FieldKind, v))
}

// ProviderStatusEQ applies the EQ predicate on the "provider_status" field.
func ProviderStatusEQ(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldEQ(FieldProviderStatus, v))
}

// ProviderStatusNEQ applies the NEQ predicate on the "provider_status" field.
func ProviderStatusNEQ(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldNEQ(FieldProviderStatus, v))
}

// ProviderStatusIn applies the In predicate on the "provider_status" field.
func ProviderStatusIn(vs ...string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldIn(FieldProviderStatus, vs...))
}

// ProviderStatusNotIn applies the NotIn predicate on the "provider_status" field.
func ProviderStatusNotIn(vs ...string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldNotIn(FieldProviderStatus, vs...))
}

// ProviderStatusGT applies the GT predicate on the "provider_status" field.
func ProviderStatusGT(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldGT(FieldProviderStatus, v))
}

// ProviderStatusGTE applies the GTE predicate on the "provider_status" field.
func ProviderStatusGTE(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldGTE(FieldProviderStatus, v))
}

// ProviderStatusLT applies the LT predicate on the "provider_status" field.
func ProviderStatusLT(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldLT(FieldProviderStatus, v))
}

// ProviderStatusLTE applies the LTE predicate on the "provider_status" field.
func ProviderStatusLTE(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldLTE(FieldProviderStatus, v))
}

// ProviderStatusContains applies the Contains predicate on the "provider_status" field.
func ProviderStatusContains(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldContains(FieldProviderStatus, v))
}

// ProviderStatusHasPrefix applies the HasPrefix predicate on the "provider_status" field.
func ProviderStatusHasPrefix(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldHasPrefix(FieldProviderStatus, v))
}

// ProviderStatusHasSuffix applies the HasSuffix predicate on the "provider_status" field.
func ProviderStatusHasSuffix(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldHasSuffix(FieldProviderStatus, v))
}

// ProviderStatusIsNil applies the IsNil predicate on the "provider_status" field.
func ProviderStatusIsNil() predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldIsNull(FieldProviderStatus))
}

// ProviderStatusNotNil applies the NotNil predicate on the "provider_status" field.
func ProviderStatusNotNil() predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldNotNull(FieldProviderStatus))
}

// ProviderStatusEqualFold applies the EqualFold predicate on the "provider_status" field.
func ProviderStatusEqualFold(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldEqualFold(FieldProviderStatus, v))
}

// ProviderStatusContainsFold applies the ContainsFold predicate on the "provider_status" field.
func ProviderStatusContainsFold(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldContainsFold(FieldProviderStatus, v))
}

// WwidEQ applies the EQ predicate on the "wwid" field.
func WwidEQ(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldEQ(FieldWwid, v))
}

// WwidNEQ applies the NEQ predicate on the "wwid" field.
func WwidNEQ(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldNEQ(FieldWwid, v))
}

// WwidIn applies the In predicate on the "wwid" field.
func WwidIn(vs ...string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldIn(FieldWwid, vs...))
}

// WwidNotIn applies the NotIn predicate on the "wwid" field.
func WwidNotIn(vs ...string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldNotIn(FieldWwid, vs...))
}

// WwidGT applies the GT predicate on the "wwid" field.
func WwidGT(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldGT(FieldWwid, v))
}

// WwidGTE applies the GTE predicate on the "wwid" field.
func WwidGTE(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldGTE(FieldWwid, v))
}

// WwidLT applies the LT predicate on the "wwid" field.
func WwidLT(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldLT(FieldWwid, v))
}

// WwidLTE applies the LTE predicate on the "wwid" field.
func WwidLTE(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldLTE(FieldWwid, v))
}

// WwidContains applies the Contains predicate on the "wwid" field.
func WwidContains(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldContains(FieldWwid, v))
}

// WwidHasPrefix applies the HasPrefix predicate on the "wwid" field.
func WwidHasPrefix(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldHasPrefix(FieldWwid, v))
}

// WwidHasSuffix applies the HasSuffix predicate on the "wwid" field.
func WwidHasSuffix(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldHasSuffix(FieldWwid, v))
}

// WwidIsNil applies the IsNil predicate on the "wwid" field.
func WwidIsNil() predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldIsNull(FieldWwid))
}

// WwidNotNil applies the NotNil predicate on the "wwid" field.
func WwidNotNil() predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldNotNull(FieldWwid))
}

// WwidEqualFold applies the EqualFold predicate on the "wwid" field.
func WwidEqualFold(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldEqualFold(FieldWwid, v))
}

// WwidContainsFold applies the ContainsFold predicate on the "wwid" field.
func WwidContainsFold(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldContainsFold(FieldWwid, v))
}

// SerialEQ applies the EQ predicate on the "serial" field.
func SerialEQ(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldEQ(FieldSerial, v))
}

// SerialNEQ applies the NEQ predicate on the "serial" field.
func SerialNEQ(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldNEQ(FieldSerial, v))
}

// SerialIn applies the In predicate on the "serial" field.
func SerialIn(vs ...string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldIn(FieldSerial, vs...))
}

// SerialNotIn applies the NotIn predicate on the "serial" field.
func SerialNotIn(vs ...string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldNotIn(FieldSerial, vs...))
}

// SerialGT applies the GT predicate on the "serial" field.
func SerialGT(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldGT(FieldSerial, v))
}

// SerialGTE applies the GTE predicate on the "serial" field.
func SerialGTE(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldGTE(FieldSerial, v))
}

// SerialLT applies the LT predicate on the "serial" field.
func SerialLT(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldLT(FieldSerial, v))
}

// SerialLTE applies the LTE predicate on the "serial" field.
func SerialLTE(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldLTE(FieldSerial, v))
}

// SerialContains applies the Contains predicate on the "serial" field.
func SerialContains(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldContains(FieldSerial, v))
}

// SerialHasPrefix applies the HasPrefix predicate on the "serial" field.
func SerialHasPrefix(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldHasPrefix(FieldSerial, v))
}

// SerialHasSuffix applies the HasSuffix predicate on the "serial" field.
func SerialHasSuffix(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldHasSuffix(FieldSerial, v))
}

// SerialIsNil applies the IsNil predicate on the "serial" field.
func SerialIsNil() predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldIsNull(FieldSerial))
}

// SerialNotNil applies the NotNil predicate on the "serial" field.
func SerialNotNil() predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldNotNull(FieldSerial))
}

// SerialEqualFold applies the EqualFold predicate on the "serial" field.
func SerialEqualFold(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldEqualFold(FieldSerial, v))
}

// SerialContainsFold applies the ContainsFold predicate on the "serial" field.
func SerialContainsFold(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldContainsFold(FieldSerial, v))
}

// VendorEQ applies the EQ predicate on the "vendor" field.
func VendorEQ(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldEQ(FieldVendor, v))
}

// VendorNEQ applies the NEQ predicate on the "vendor" field.
func VendorNEQ(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldNEQ(FieldVendor, v))
}

// VendorIn applies the In predicate on the "vendor" field.
func VendorIn(vs ...string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldIn(FieldVendor, vs...))
}

// VendorNotIn applies the NotIn predicate on the "vendor" field.
func VendorNotIn(vs ...string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldNotIn(FieldVendor, vs...))
}

// VendorGT applies the GT predicate on the "vendor" field.
func VendorGT(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldGT(FieldVendor, v))
}

// VendorGTE applies the GTE predicate on the "vendor" field.
func VendorGTE(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldGTE(FieldVendor, v))
}

// VendorLT applies the LT predicate on the "vendor" field.
func VendorLT(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldLT(FieldVendor, v))
}

// VendorLTE applies the LTE predicate on the "vendor" field.
func VendorLTE(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldLTE(FieldVendor, v))
}

// VendorContains applies the Contains predicate on the "vendor" field.
func VendorContains(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldContains(FieldVendor, v))
}

// VendorHasPrefix applies the HasPrefix predicate on the "vendor" field.
func VendorHasPrefix(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldHasPrefix(FieldVendor, v))
}

// VendorHasSuffix applies the HasSuffix predicate on the "vendor" field.
func VendorHasSuffix(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldHasSuffix(FieldVendor, v))
}

// VendorIsNil applies the IsNil predicate on the "vendor" field.
func VendorIsNil() predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldIsNull(FieldVendor))
}

// VendorNotNil applies the NotNil predicate on the "vendor" field.
func VendorNotNil() predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldNotNull(FieldVendor))
}

// VendorEqualFold applies the EqualFold predicate on the "vendor" field.
func VendorEqualFold(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldEqualFold(FieldVendor, v))
}

// VendorContainsFold applies the ContainsFold predicate on the "vendor" field.
func VendorContainsFold(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldContainsFold(FieldVendor, v))
}

// ModelEQ applies the EQ predicate on the "model" field.
func ModelEQ(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldEQ(FieldModel, v))
}

// ModelNEQ applies the NEQ predicate on the "model" field.
func ModelNEQ(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldNEQ(FieldModel, v))
}

// ModelIn applies the In predicate on the "model" field.
func ModelIn(vs ...string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldIn(FieldModel, vs...))
}

// ModelNotIn applies the NotIn predicate on the "model" field.
func ModelNotIn(vs ...string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldNotIn(FieldModel, vs...))
}

// ModelGT applies the GT predicate on the "model" field.
func ModelGT(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldGT(FieldModel, v))
}

// ModelGTE applies the GTE predicate on the "model" field.
func ModelGTE(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldGTE(FieldModel, v))
}

// ModelLT applies the LT predicate on the "model" field.
func ModelLT(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldLT(FieldModel, v))
}

// ModelLTE applies the LTE predicate on the "model" field.
func ModelLTE(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldLTE(FieldModel, v))
}

// ModelContains applies the Contains predicate on the "model" field.
func ModelContains(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldContains(FieldModel, v))
}

// ModelHasPrefix applies the HasPrefix predicate on the "model" field.
func ModelHasPrefix(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldHasPrefix(FieldModel, v))
}

// ModelHasSuffix applies the HasSuffix predicate on the "model" field.
func ModelHasSuffix(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldHasSuffix(FieldModel, v))
}

// ModelIsNil applies the IsNil predicate on the "model" field.
func ModelIsNil() predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldIsNull(FieldModel))
}

// ModelNotNil applies the NotNil predicate on the "model" field.
func ModelNotNil() predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldNotNull(FieldModel))
}

// ModelEqualFold applies the EqualFold predicate on the "model" field.
func ModelEqualFold(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldEqualFold(FieldModel, v))
}

// ModelContainsFold applies the ContainsFold predicate on the "model" field.
func ModelContainsFold(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldContainsFold(FieldModel, v))
}

// CapacityBytesEQ applies the EQ predicate on the "capacity_bytes" field.
func CapacityBytesEQ(v uint64) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldEQ(FieldCapacityBytes, v))
}

// CapacityBytesNEQ applies the NEQ predicate on the "capacity_bytes" field.
func CapacityBytesNEQ(v uint64) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldNEQ(FieldCapacityBytes, v))
}

// CapacityBytesIn applies the In predicate on the "capacity_bytes" field.
func CapacityBytesIn(vs ...uint64) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldIn(FieldCapacityBytes, vs...))
}

// CapacityBytesNotIn applies the NotIn predicate on the "capacity_bytes" field.
func CapacityBytesNotIn(vs ...uint64) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldNotIn(FieldCapacityBytes, vs...))
}

// CapacityBytesGT applies the GT predicate on the "capacity_bytes" field.
func CapacityBytesGT(v uint64) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldGT(FieldCapacityBytes, v))
}

// CapacityBytesGTE applies the GTE predicate on the "capacity_bytes" field.
func CapacityBytesGTE(v uint64) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldGTE(FieldCapacityBytes, v))
}

// CapacityBytesLT applies the LT predicate on the "capacity_bytes" field.
func CapacityBytesLT(v uint64) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldLT(FieldCapacityBytes, v))
}

// CapacityBytesLTE applies the LTE predicate on the "capacity_bytes" field.
func CapacityBytesLTE(v uint64) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldLTE(FieldCapacityBytes, v))
}

// CapacityBytesIsNil applies the IsNil predicate on the "capacity_bytes" field.
func CapacityBytesIsNil() predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldIsNull(FieldCapacityBytes))
}

// CapacityBytesNotNil applies the NotNil predicate on the "capacity_bytes" field.
func CapacityBytesNotNil() predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldNotNull(FieldCapacityBytes))
}

// DeviceNameEQ applies the EQ predicate on the "device_name" field.
func DeviceNameEQ(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldEQ(FieldDeviceName, v))
}

// DeviceNameNEQ applies the NEQ predicate on the "device_name" field.
func DeviceNameNEQ(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldNEQ(FieldDeviceName, v))
}

// DeviceNameIn applies the In predicate on the "device_name" field.
func DeviceNameIn(vs ...string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldIn(FieldDeviceName, vs...))
}

// DeviceNameNotIn applies the NotIn predicate on the "device_name" field.
func DeviceNameNotIn(vs ...string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldNotIn(FieldDeviceName, vs...))
}

// DeviceNameGT applies the GT predicate on the "device_name" field.
func DeviceNameGT(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldGT(FieldDeviceName, v))
}

// DeviceNameGTE applies the GTE predicate on the "device_name" field.
func DeviceNameGTE(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldGTE(FieldDeviceName, v))
}

// DeviceNameLT applies the LT predicate on the "device_name" field.
func DeviceNameLT(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldLT(FieldDeviceName, v))
}

// DeviceNameLTE applies the LTE predicate on the "device_name" field.
func DeviceNameLTE(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldLTE(FieldDeviceName, v))
}

// DeviceNameContains applies the Contains predicate on the "device_name" field.
func DeviceNameContains(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldContains(FieldDeviceName, v))
}

// DeviceNameHasPrefix applies the HasPrefix predicate on the "device_name" field.
func DeviceNameHasPrefix(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldHasPrefix(FieldDeviceName, v))
}

// DeviceNameHasSuffix applies the HasSuffix predicate on the "device_name" field.
func DeviceNameHasSuffix(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldHasSuffix(FieldDeviceName, v))
}

// DeviceNameIsNil applies the IsNil predicate on the "device_name" field.
func DeviceNameIsNil() predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldIsNull(FieldDeviceName))
}

// DeviceNameNotNil applies the NotNil predicate on the "device_name" field.
func DeviceNameNotNil() predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldNotNull(FieldDeviceName))
}

// DeviceNameEqualFold applies the EqualFold predicate on the "device_name" field.
func DeviceNameEqualFold(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldEqualFold(FieldDeviceName, v))
}

// DeviceNameContainsFold applies the ContainsFold predicate on the "device_name" field.
func DeviceNameContainsFold(v string) predicate.HoststorageResource {
	return predicate.HoststorageResource(sql.FieldContainsFold(FieldDeviceName, v))
}

// HasSite applies the HasEdge predicate on the "site" edge.
func HasSite() predicate.HoststorageResource {
	return predicate.HoststorageResource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SiteTable, SiteColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSiteWith applies the HasEdge predicate on the "site" edge with a given conditions (other predicates).
func HasSiteWith(preds ...predicate.SiteResource) predicate.HoststorageResource {
	return predicate.HoststorageResource(func(s *sql.Selector) {
		step := newSiteStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvider applies the HasEdge predicate on the "provider" edge.
func HasProvider() predicate.HoststorageResource {
	return predicate.HoststorageResource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProviderTable, ProviderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProviderWith applies the HasEdge predicate on the "provider" edge with a given conditions (other predicates).
func HasProviderWith(preds ...predicate.ProviderResource) predicate.HoststorageResource {
	return predicate.HoststorageResource(func(s *sql.Selector) {
		step := newProviderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.HoststorageResource {
	return predicate.HoststorageResource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.ProjectResource) predicate.HoststorageResource {
	return predicate.HoststorageResource(func(s *sql.Selector) {
		step := newProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHost applies the HasEdge predicate on the "host" edge.
func HasHost() predicate.HoststorageResource {
	return predicate.HoststorageResource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, HostTable, HostColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHostWith applies the HasEdge predicate on the "host" edge with a given conditions (other predicates).
func HasHostWith(preds ...predicate.HostResource) predicate.HoststorageResource {
	return predicate.HoststorageResource(func(s *sql.Selector) {
		step := newHostStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.HoststorageResource) predicate.HoststorageResource {
	return predicate.HoststorageResource(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.HoststorageResource) predicate.HoststorageResource {
	return predicate.HoststorageResource(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.HoststorageResource) predicate.HoststorageResource {
	return predicate.HoststorageResource(func(s *sql.Selector) {
		p(s.Not())
	})
}
