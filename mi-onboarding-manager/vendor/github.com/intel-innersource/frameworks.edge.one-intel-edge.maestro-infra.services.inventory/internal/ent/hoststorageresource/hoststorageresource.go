// Code generated by ent, DO NOT EDIT.

package hoststorageresource

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the hoststorageresource type in the database.
	Label = "hoststorage_resource"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldResourceID holds the string denoting the resource_id field in the database.
	FieldResourceID = "resource_id"
	// FieldKind holds the string denoting the kind field in the database.
	FieldKind = "kind"
	// FieldProviderStatus holds the string denoting the provider_status field in the database.
	FieldProviderStatus = "provider_status"
	// FieldWwid holds the string denoting the wwid field in the database.
	FieldWwid = "wwid"
	// FieldSerial holds the string denoting the serial field in the database.
	FieldSerial = "serial"
	// FieldVendor holds the string denoting the vendor field in the database.
	FieldVendor = "vendor"
	// FieldModel holds the string denoting the model field in the database.
	FieldModel = "model"
	// FieldCapacityBytes holds the string denoting the capacity_bytes field in the database.
	FieldCapacityBytes = "capacity_bytes"
	// FieldDeviceName holds the string denoting the device_name field in the database.
	FieldDeviceName = "device_name"
	// EdgeSite holds the string denoting the site edge name in mutations.
	EdgeSite = "site"
	// EdgeProvider holds the string denoting the provider edge name in mutations.
	EdgeProvider = "provider"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// EdgeHost holds the string denoting the host edge name in mutations.
	EdgeHost = "host"
	// Table holds the table name of the hoststorageresource in the database.
	Table = "hoststorage_resources"
	// SiteTable is the table that holds the site relation/edge.
	SiteTable = "hoststorage_resources"
	// SiteInverseTable is the table name for the SiteResource entity.
	// It exists in this package in order to avoid circular dependency with the "siteresource" package.
	SiteInverseTable = "site_resources"
	// SiteColumn is the table column denoting the site relation/edge.
	SiteColumn = "hoststorage_resource_site"
	// ProviderTable is the table that holds the provider relation/edge.
	ProviderTable = "hoststorage_resources"
	// ProviderInverseTable is the table name for the ProviderResource entity.
	// It exists in this package in order to avoid circular dependency with the "providerresource" package.
	ProviderInverseTable = "provider_resources"
	// ProviderColumn is the table column denoting the provider relation/edge.
	ProviderColumn = "hoststorage_resource_provider"
	// ProjectTable is the table that holds the project relation/edge.
	ProjectTable = "hoststorage_resources"
	// ProjectInverseTable is the table name for the ProjectResource entity.
	// It exists in this package in order to avoid circular dependency with the "projectresource" package.
	ProjectInverseTable = "project_resources"
	// ProjectColumn is the table column denoting the project relation/edge.
	ProjectColumn = "hoststorage_resource_project"
	// HostTable is the table that holds the host relation/edge.
	HostTable = "hoststorage_resources"
	// HostInverseTable is the table name for the HostResource entity.
	// It exists in this package in order to avoid circular dependency with the "hostresource" package.
	HostInverseTable = "host_resources"
	// HostColumn is the table column denoting the host relation/edge.
	HostColumn = "hoststorage_resource_host"
)

// Columns holds all SQL columns for hoststorageresource fields.
var Columns = []string{
	FieldID,
	FieldResourceID,
	FieldKind,
	FieldProviderStatus,
	FieldWwid,
	FieldSerial,
	FieldVendor,
	FieldModel,
	FieldCapacityBytes,
	FieldDeviceName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "hoststorage_resources"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"hoststorage_resource_site",
	"hoststorage_resource_provider",
	"hoststorage_resource_project",
	"hoststorage_resource_host",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the HoststorageResource queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByResourceID orders the results by the resource_id field.
func ByResourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceID, opts...).ToFunc()
}

// ByKind orders the results by the kind field.
func ByKind(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKind, opts...).ToFunc()
}

// ByProviderStatus orders the results by the provider_status field.
func ByProviderStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderStatus, opts...).ToFunc()
}

// ByWwid orders the results by the wwid field.
func ByWwid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWwid, opts...).ToFunc()
}

// BySerial orders the results by the serial field.
func BySerial(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSerial, opts...).ToFunc()
}

// ByVendor orders the results by the vendor field.
func ByVendor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVendor, opts...).ToFunc()
}

// ByModel orders the results by the model field.
func ByModel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModel, opts...).ToFunc()
}

// ByCapacityBytes orders the results by the capacity_bytes field.
func ByCapacityBytes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCapacityBytes, opts...).ToFunc()
}

// ByDeviceName orders the results by the device_name field.
func ByDeviceName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceName, opts...).ToFunc()
}

// BySiteField orders the results by site field.
func BySiteField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSiteStep(), sql.OrderByField(field, opts...))
	}
}

// ByProviderField orders the results by provider field.
func ByProviderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProviderStep(), sql.OrderByField(field, opts...))
	}
}

// ByProjectField orders the results by project field.
func ByProjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectStep(), sql.OrderByField(field, opts...))
	}
}

// ByHostField orders the results by host field.
func ByHostField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHostStep(), sql.OrderByField(field, opts...))
	}
}
func newSiteStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SiteInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SiteTable, SiteColumn),
	)
}
func newProviderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProviderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ProviderTable, ProviderColumn),
	)
}
func newProjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ProjectTable, ProjectColumn),
	)
}
func newHostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HostInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, HostTable, HostColumn),
	)
}
