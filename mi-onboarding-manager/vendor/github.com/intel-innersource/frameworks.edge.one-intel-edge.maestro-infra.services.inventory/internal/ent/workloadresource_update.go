// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/workloadmember"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/workloadresource"
)

// WorkloadResourceUpdate is the builder for updating WorkloadResource entities.
type WorkloadResourceUpdate struct {
	config
	hooks    []Hook
	mutation *WorkloadResourceMutation
}

// Where appends a list predicates to the WorkloadResourceUpdate builder.
func (wru *WorkloadResourceUpdate) Where(ps ...predicate.WorkloadResource) *WorkloadResourceUpdate {
	wru.mutation.Where(ps...)
	return wru
}

// SetResourceID sets the "resource_id" field.
func (wru *WorkloadResourceUpdate) SetResourceID(s string) *WorkloadResourceUpdate {
	wru.mutation.SetResourceID(s)
	return wru
}

// SetKind sets the "kind" field.
func (wru *WorkloadResourceUpdate) SetKind(w workloadresource.Kind) *WorkloadResourceUpdate {
	wru.mutation.SetKind(w)
	return wru
}

// SetDescription sets the "description" field.
func (wru *WorkloadResourceUpdate) SetDescription(s string) *WorkloadResourceUpdate {
	wru.mutation.SetDescription(s)
	return wru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wru *WorkloadResourceUpdate) SetNillableDescription(s *string) *WorkloadResourceUpdate {
	if s != nil {
		wru.SetDescription(*s)
	}
	return wru
}

// ClearDescription clears the value of the "description" field.
func (wru *WorkloadResourceUpdate) ClearDescription() *WorkloadResourceUpdate {
	wru.mutation.ClearDescription()
	return wru
}

// SetExternalID sets the "external_id" field.
func (wru *WorkloadResourceUpdate) SetExternalID(s string) *WorkloadResourceUpdate {
	wru.mutation.SetExternalID(s)
	return wru
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (wru *WorkloadResourceUpdate) SetNillableExternalID(s *string) *WorkloadResourceUpdate {
	if s != nil {
		wru.SetExternalID(*s)
	}
	return wru
}

// ClearExternalID clears the value of the "external_id" field.
func (wru *WorkloadResourceUpdate) ClearExternalID() *WorkloadResourceUpdate {
	wru.mutation.ClearExternalID()
	return wru
}

// SetDesiredState sets the "desired_state" field.
func (wru *WorkloadResourceUpdate) SetDesiredState(ws workloadresource.DesiredState) *WorkloadResourceUpdate {
	wru.mutation.SetDesiredState(ws)
	return wru
}

// SetCurrentState sets the "current_state" field.
func (wru *WorkloadResourceUpdate) SetCurrentState(ws workloadresource.CurrentState) *WorkloadResourceUpdate {
	wru.mutation.SetCurrentState(ws)
	return wru
}

// SetNillableCurrentState sets the "current_state" field if the given value is not nil.
func (wru *WorkloadResourceUpdate) SetNillableCurrentState(ws *workloadresource.CurrentState) *WorkloadResourceUpdate {
	if ws != nil {
		wru.SetCurrentState(*ws)
	}
	return wru
}

// ClearCurrentState clears the value of the "current_state" field.
func (wru *WorkloadResourceUpdate) ClearCurrentState() *WorkloadResourceUpdate {
	wru.mutation.ClearCurrentState()
	return wru
}

// SetStatus sets the "status" field.
func (wru *WorkloadResourceUpdate) SetStatus(s string) *WorkloadResourceUpdate {
	wru.mutation.SetStatus(s)
	return wru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wru *WorkloadResourceUpdate) SetNillableStatus(s *string) *WorkloadResourceUpdate {
	if s != nil {
		wru.SetStatus(*s)
	}
	return wru
}

// ClearStatus clears the value of the "status" field.
func (wru *WorkloadResourceUpdate) ClearStatus() *WorkloadResourceUpdate {
	wru.mutation.ClearStatus()
	return wru
}

// SetMetadata sets the "metadata" field.
func (wru *WorkloadResourceUpdate) SetMetadata(s string) *WorkloadResourceUpdate {
	wru.mutation.SetMetadata(s)
	return wru
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (wru *WorkloadResourceUpdate) SetNillableMetadata(s *string) *WorkloadResourceUpdate {
	if s != nil {
		wru.SetMetadata(*s)
	}
	return wru
}

// ClearMetadata clears the value of the "metadata" field.
func (wru *WorkloadResourceUpdate) ClearMetadata() *WorkloadResourceUpdate {
	wru.mutation.ClearMetadata()
	return wru
}

// AddMemberIDs adds the "members" edge to the WorkloadMember entity by IDs.
func (wru *WorkloadResourceUpdate) AddMemberIDs(ids ...int) *WorkloadResourceUpdate {
	wru.mutation.AddMemberIDs(ids...)
	return wru
}

// AddMembers adds the "members" edges to the WorkloadMember entity.
func (wru *WorkloadResourceUpdate) AddMembers(w ...*WorkloadMember) *WorkloadResourceUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wru.AddMemberIDs(ids...)
}

// Mutation returns the WorkloadResourceMutation object of the builder.
func (wru *WorkloadResourceUpdate) Mutation() *WorkloadResourceMutation {
	return wru.mutation
}

// ClearMembers clears all "members" edges to the WorkloadMember entity.
func (wru *WorkloadResourceUpdate) ClearMembers() *WorkloadResourceUpdate {
	wru.mutation.ClearMembers()
	return wru
}

// RemoveMemberIDs removes the "members" edge to WorkloadMember entities by IDs.
func (wru *WorkloadResourceUpdate) RemoveMemberIDs(ids ...int) *WorkloadResourceUpdate {
	wru.mutation.RemoveMemberIDs(ids...)
	return wru
}

// RemoveMembers removes "members" edges to WorkloadMember entities.
func (wru *WorkloadResourceUpdate) RemoveMembers(w ...*WorkloadMember) *WorkloadResourceUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wru.RemoveMemberIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wru *WorkloadResourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, WorkloadResourceMutation](ctx, wru.sqlSave, wru.mutation, wru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wru *WorkloadResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := wru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wru *WorkloadResourceUpdate) Exec(ctx context.Context) error {
	_, err := wru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wru *WorkloadResourceUpdate) ExecX(ctx context.Context) {
	if err := wru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wru *WorkloadResourceUpdate) check() error {
	if v, ok := wru.mutation.Kind(); ok {
		if err := workloadresource.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "WorkloadResource.kind": %w`, err)}
		}
	}
	if v, ok := wru.mutation.DesiredState(); ok {
		if err := workloadresource.DesiredStateValidator(v); err != nil {
			return &ValidationError{Name: "desired_state", err: fmt.Errorf(`ent: validator failed for field "WorkloadResource.desired_state": %w`, err)}
		}
	}
	if v, ok := wru.mutation.CurrentState(); ok {
		if err := workloadresource.CurrentStateValidator(v); err != nil {
			return &ValidationError{Name: "current_state", err: fmt.Errorf(`ent: validator failed for field "WorkloadResource.current_state": %w`, err)}
		}
	}
	return nil
}

func (wru *WorkloadResourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(workloadresource.Table, workloadresource.Columns, sqlgraph.NewFieldSpec(workloadresource.FieldID, field.TypeInt))
	if ps := wru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wru.mutation.ResourceID(); ok {
		_spec.SetField(workloadresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := wru.mutation.Kind(); ok {
		_spec.SetField(workloadresource.FieldKind, field.TypeEnum, value)
	}
	if value, ok := wru.mutation.Description(); ok {
		_spec.SetField(workloadresource.FieldDescription, field.TypeString, value)
	}
	if wru.mutation.DescriptionCleared() {
		_spec.ClearField(workloadresource.FieldDescription, field.TypeString)
	}
	if value, ok := wru.mutation.ExternalID(); ok {
		_spec.SetField(workloadresource.FieldExternalID, field.TypeString, value)
	}
	if wru.mutation.ExternalIDCleared() {
		_spec.ClearField(workloadresource.FieldExternalID, field.TypeString)
	}
	if value, ok := wru.mutation.DesiredState(); ok {
		_spec.SetField(workloadresource.FieldDesiredState, field.TypeEnum, value)
	}
	if value, ok := wru.mutation.CurrentState(); ok {
		_spec.SetField(workloadresource.FieldCurrentState, field.TypeEnum, value)
	}
	if wru.mutation.CurrentStateCleared() {
		_spec.ClearField(workloadresource.FieldCurrentState, field.TypeEnum)
	}
	if value, ok := wru.mutation.Status(); ok {
		_spec.SetField(workloadresource.FieldStatus, field.TypeString, value)
	}
	if wru.mutation.StatusCleared() {
		_spec.ClearField(workloadresource.FieldStatus, field.TypeString)
	}
	if value, ok := wru.mutation.Metadata(); ok {
		_spec.SetField(workloadresource.FieldMetadata, field.TypeString, value)
	}
	if wru.mutation.MetadataCleared() {
		_spec.ClearField(workloadresource.FieldMetadata, field.TypeString)
	}
	if wru.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   workloadresource.MembersTable,
			Columns: []string{workloadresource.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadmember.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wru.mutation.RemovedMembersIDs(); len(nodes) > 0 && !wru.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   workloadresource.MembersTable,
			Columns: []string{workloadresource.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wru.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   workloadresource.MembersTable,
			Columns: []string{workloadresource.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workloadresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wru.mutation.done = true
	return n, nil
}

// WorkloadResourceUpdateOne is the builder for updating a single WorkloadResource entity.
type WorkloadResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkloadResourceMutation
}

// SetResourceID sets the "resource_id" field.
func (wruo *WorkloadResourceUpdateOne) SetResourceID(s string) *WorkloadResourceUpdateOne {
	wruo.mutation.SetResourceID(s)
	return wruo
}

// SetKind sets the "kind" field.
func (wruo *WorkloadResourceUpdateOne) SetKind(w workloadresource.Kind) *WorkloadResourceUpdateOne {
	wruo.mutation.SetKind(w)
	return wruo
}

// SetDescription sets the "description" field.
func (wruo *WorkloadResourceUpdateOne) SetDescription(s string) *WorkloadResourceUpdateOne {
	wruo.mutation.SetDescription(s)
	return wruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wruo *WorkloadResourceUpdateOne) SetNillableDescription(s *string) *WorkloadResourceUpdateOne {
	if s != nil {
		wruo.SetDescription(*s)
	}
	return wruo
}

// ClearDescription clears the value of the "description" field.
func (wruo *WorkloadResourceUpdateOne) ClearDescription() *WorkloadResourceUpdateOne {
	wruo.mutation.ClearDescription()
	return wruo
}

// SetExternalID sets the "external_id" field.
func (wruo *WorkloadResourceUpdateOne) SetExternalID(s string) *WorkloadResourceUpdateOne {
	wruo.mutation.SetExternalID(s)
	return wruo
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (wruo *WorkloadResourceUpdateOne) SetNillableExternalID(s *string) *WorkloadResourceUpdateOne {
	if s != nil {
		wruo.SetExternalID(*s)
	}
	return wruo
}

// ClearExternalID clears the value of the "external_id" field.
func (wruo *WorkloadResourceUpdateOne) ClearExternalID() *WorkloadResourceUpdateOne {
	wruo.mutation.ClearExternalID()
	return wruo
}

// SetDesiredState sets the "desired_state" field.
func (wruo *WorkloadResourceUpdateOne) SetDesiredState(ws workloadresource.DesiredState) *WorkloadResourceUpdateOne {
	wruo.mutation.SetDesiredState(ws)
	return wruo
}

// SetCurrentState sets the "current_state" field.
func (wruo *WorkloadResourceUpdateOne) SetCurrentState(ws workloadresource.CurrentState) *WorkloadResourceUpdateOne {
	wruo.mutation.SetCurrentState(ws)
	return wruo
}

// SetNillableCurrentState sets the "current_state" field if the given value is not nil.
func (wruo *WorkloadResourceUpdateOne) SetNillableCurrentState(ws *workloadresource.CurrentState) *WorkloadResourceUpdateOne {
	if ws != nil {
		wruo.SetCurrentState(*ws)
	}
	return wruo
}

// ClearCurrentState clears the value of the "current_state" field.
func (wruo *WorkloadResourceUpdateOne) ClearCurrentState() *WorkloadResourceUpdateOne {
	wruo.mutation.ClearCurrentState()
	return wruo
}

// SetStatus sets the "status" field.
func (wruo *WorkloadResourceUpdateOne) SetStatus(s string) *WorkloadResourceUpdateOne {
	wruo.mutation.SetStatus(s)
	return wruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wruo *WorkloadResourceUpdateOne) SetNillableStatus(s *string) *WorkloadResourceUpdateOne {
	if s != nil {
		wruo.SetStatus(*s)
	}
	return wruo
}

// ClearStatus clears the value of the "status" field.
func (wruo *WorkloadResourceUpdateOne) ClearStatus() *WorkloadResourceUpdateOne {
	wruo.mutation.ClearStatus()
	return wruo
}

// SetMetadata sets the "metadata" field.
func (wruo *WorkloadResourceUpdateOne) SetMetadata(s string) *WorkloadResourceUpdateOne {
	wruo.mutation.SetMetadata(s)
	return wruo
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (wruo *WorkloadResourceUpdateOne) SetNillableMetadata(s *string) *WorkloadResourceUpdateOne {
	if s != nil {
		wruo.SetMetadata(*s)
	}
	return wruo
}

// ClearMetadata clears the value of the "metadata" field.
func (wruo *WorkloadResourceUpdateOne) ClearMetadata() *WorkloadResourceUpdateOne {
	wruo.mutation.ClearMetadata()
	return wruo
}

// AddMemberIDs adds the "members" edge to the WorkloadMember entity by IDs.
func (wruo *WorkloadResourceUpdateOne) AddMemberIDs(ids ...int) *WorkloadResourceUpdateOne {
	wruo.mutation.AddMemberIDs(ids...)
	return wruo
}

// AddMembers adds the "members" edges to the WorkloadMember entity.
func (wruo *WorkloadResourceUpdateOne) AddMembers(w ...*WorkloadMember) *WorkloadResourceUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wruo.AddMemberIDs(ids...)
}

// Mutation returns the WorkloadResourceMutation object of the builder.
func (wruo *WorkloadResourceUpdateOne) Mutation() *WorkloadResourceMutation {
	return wruo.mutation
}

// ClearMembers clears all "members" edges to the WorkloadMember entity.
func (wruo *WorkloadResourceUpdateOne) ClearMembers() *WorkloadResourceUpdateOne {
	wruo.mutation.ClearMembers()
	return wruo
}

// RemoveMemberIDs removes the "members" edge to WorkloadMember entities by IDs.
func (wruo *WorkloadResourceUpdateOne) RemoveMemberIDs(ids ...int) *WorkloadResourceUpdateOne {
	wruo.mutation.RemoveMemberIDs(ids...)
	return wruo
}

// RemoveMembers removes "members" edges to WorkloadMember entities.
func (wruo *WorkloadResourceUpdateOne) RemoveMembers(w ...*WorkloadMember) *WorkloadResourceUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wruo.RemoveMemberIDs(ids...)
}

// Where appends a list predicates to the WorkloadResourceUpdate builder.
func (wruo *WorkloadResourceUpdateOne) Where(ps ...predicate.WorkloadResource) *WorkloadResourceUpdateOne {
	wruo.mutation.Where(ps...)
	return wruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wruo *WorkloadResourceUpdateOne) Select(field string, fields ...string) *WorkloadResourceUpdateOne {
	wruo.fields = append([]string{field}, fields...)
	return wruo
}

// Save executes the query and returns the updated WorkloadResource entity.
func (wruo *WorkloadResourceUpdateOne) Save(ctx context.Context) (*WorkloadResource, error) {
	return withHooks[*WorkloadResource, WorkloadResourceMutation](ctx, wruo.sqlSave, wruo.mutation, wruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wruo *WorkloadResourceUpdateOne) SaveX(ctx context.Context) *WorkloadResource {
	node, err := wruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wruo *WorkloadResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := wruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wruo *WorkloadResourceUpdateOne) ExecX(ctx context.Context) {
	if err := wruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wruo *WorkloadResourceUpdateOne) check() error {
	if v, ok := wruo.mutation.Kind(); ok {
		if err := workloadresource.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "WorkloadResource.kind": %w`, err)}
		}
	}
	if v, ok := wruo.mutation.DesiredState(); ok {
		if err := workloadresource.DesiredStateValidator(v); err != nil {
			return &ValidationError{Name: "desired_state", err: fmt.Errorf(`ent: validator failed for field "WorkloadResource.desired_state": %w`, err)}
		}
	}
	if v, ok := wruo.mutation.CurrentState(); ok {
		if err := workloadresource.CurrentStateValidator(v); err != nil {
			return &ValidationError{Name: "current_state", err: fmt.Errorf(`ent: validator failed for field "WorkloadResource.current_state": %w`, err)}
		}
	}
	return nil
}

func (wruo *WorkloadResourceUpdateOne) sqlSave(ctx context.Context) (_node *WorkloadResource, err error) {
	if err := wruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workloadresource.Table, workloadresource.Columns, sqlgraph.NewFieldSpec(workloadresource.FieldID, field.TypeInt))
	id, ok := wruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkloadResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workloadresource.FieldID)
		for _, f := range fields {
			if !workloadresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workloadresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wruo.mutation.ResourceID(); ok {
		_spec.SetField(workloadresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := wruo.mutation.Kind(); ok {
		_spec.SetField(workloadresource.FieldKind, field.TypeEnum, value)
	}
	if value, ok := wruo.mutation.Description(); ok {
		_spec.SetField(workloadresource.FieldDescription, field.TypeString, value)
	}
	if wruo.mutation.DescriptionCleared() {
		_spec.ClearField(workloadresource.FieldDescription, field.TypeString)
	}
	if value, ok := wruo.mutation.ExternalID(); ok {
		_spec.SetField(workloadresource.FieldExternalID, field.TypeString, value)
	}
	if wruo.mutation.ExternalIDCleared() {
		_spec.ClearField(workloadresource.FieldExternalID, field.TypeString)
	}
	if value, ok := wruo.mutation.DesiredState(); ok {
		_spec.SetField(workloadresource.FieldDesiredState, field.TypeEnum, value)
	}
	if value, ok := wruo.mutation.CurrentState(); ok {
		_spec.SetField(workloadresource.FieldCurrentState, field.TypeEnum, value)
	}
	if wruo.mutation.CurrentStateCleared() {
		_spec.ClearField(workloadresource.FieldCurrentState, field.TypeEnum)
	}
	if value, ok := wruo.mutation.Status(); ok {
		_spec.SetField(workloadresource.FieldStatus, field.TypeString, value)
	}
	if wruo.mutation.StatusCleared() {
		_spec.ClearField(workloadresource.FieldStatus, field.TypeString)
	}
	if value, ok := wruo.mutation.Metadata(); ok {
		_spec.SetField(workloadresource.FieldMetadata, field.TypeString, value)
	}
	if wruo.mutation.MetadataCleared() {
		_spec.ClearField(workloadresource.FieldMetadata, field.TypeString)
	}
	if wruo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   workloadresource.MembersTable,
			Columns: []string{workloadresource.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadmember.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wruo.mutation.RemovedMembersIDs(); len(nodes) > 0 && !wruo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   workloadresource.MembersTable,
			Columns: []string{workloadresource.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wruo.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   workloadresource.MembersTable,
			Columns: []string{workloadresource.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkloadResource{config: wruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workloadresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wruo.mutation.done = true
	return _node, nil
}
