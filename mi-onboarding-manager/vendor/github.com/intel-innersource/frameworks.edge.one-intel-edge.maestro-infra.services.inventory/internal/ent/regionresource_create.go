// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/regionresource"
)

// RegionResourceCreate is the builder for creating a RegionResource entity.
type RegionResourceCreate struct {
	config
	mutation *RegionResourceMutation
	hooks    []Hook
}

// SetResourceID sets the "resource_id" field.
func (rrc *RegionResourceCreate) SetResourceID(s string) *RegionResourceCreate {
	rrc.mutation.SetResourceID(s)
	return rrc
}

// SetDescription sets the "description" field.
func (rrc *RegionResourceCreate) SetDescription(s string) *RegionResourceCreate {
	rrc.mutation.SetDescription(s)
	return rrc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rrc *RegionResourceCreate) SetNillableDescription(s *string) *RegionResourceCreate {
	if s != nil {
		rrc.SetDescription(*s)
	}
	return rrc
}

// SetRegionKind sets the "region_kind" field.
func (rrc *RegionResourceCreate) SetRegionKind(s string) *RegionResourceCreate {
	rrc.mutation.SetRegionKind(s)
	return rrc
}

// SetNillableRegionKind sets the "region_kind" field if the given value is not nil.
func (rrc *RegionResourceCreate) SetNillableRegionKind(s *string) *RegionResourceCreate {
	if s != nil {
		rrc.SetRegionKind(*s)
	}
	return rrc
}

// SetMetadata sets the "metadata" field.
func (rrc *RegionResourceCreate) SetMetadata(s string) *RegionResourceCreate {
	rrc.mutation.SetMetadata(s)
	return rrc
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (rrc *RegionResourceCreate) SetNillableMetadata(s *string) *RegionResourceCreate {
	if s != nil {
		rrc.SetMetadata(*s)
	}
	return rrc
}

// SetParentRegionID sets the "parent_region" edge to the RegionResource entity by ID.
func (rrc *RegionResourceCreate) SetParentRegionID(id int) *RegionResourceCreate {
	rrc.mutation.SetParentRegionID(id)
	return rrc
}

// SetNillableParentRegionID sets the "parent_region" edge to the RegionResource entity by ID if the given value is not nil.
func (rrc *RegionResourceCreate) SetNillableParentRegionID(id *int) *RegionResourceCreate {
	if id != nil {
		rrc = rrc.SetParentRegionID(*id)
	}
	return rrc
}

// SetParentRegion sets the "parent_region" edge to the RegionResource entity.
func (rrc *RegionResourceCreate) SetParentRegion(r *RegionResource) *RegionResourceCreate {
	return rrc.SetParentRegionID(r.ID)
}

// AddChildIDs adds the "children" edge to the RegionResource entity by IDs.
func (rrc *RegionResourceCreate) AddChildIDs(ids ...int) *RegionResourceCreate {
	rrc.mutation.AddChildIDs(ids...)
	return rrc
}

// AddChildren adds the "children" edges to the RegionResource entity.
func (rrc *RegionResourceCreate) AddChildren(r ...*RegionResource) *RegionResourceCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rrc.AddChildIDs(ids...)
}

// Mutation returns the RegionResourceMutation object of the builder.
func (rrc *RegionResourceCreate) Mutation() *RegionResourceMutation {
	return rrc.mutation
}

// Save creates the RegionResource in the database.
func (rrc *RegionResourceCreate) Save(ctx context.Context) (*RegionResource, error) {
	return withHooks[*RegionResource, RegionResourceMutation](ctx, rrc.sqlSave, rrc.mutation, rrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rrc *RegionResourceCreate) SaveX(ctx context.Context) *RegionResource {
	v, err := rrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rrc *RegionResourceCreate) Exec(ctx context.Context) error {
	_, err := rrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rrc *RegionResourceCreate) ExecX(ctx context.Context) {
	if err := rrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rrc *RegionResourceCreate) check() error {
	if _, ok := rrc.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource_id", err: errors.New(`ent: missing required field "RegionResource.resource_id"`)}
	}
	return nil
}

func (rrc *RegionResourceCreate) sqlSave(ctx context.Context) (*RegionResource, error) {
	if err := rrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rrc.mutation.id = &_node.ID
	rrc.mutation.done = true
	return _node, nil
}

func (rrc *RegionResourceCreate) createSpec() (*RegionResource, *sqlgraph.CreateSpec) {
	var (
		_node = &RegionResource{config: rrc.config}
		_spec = sqlgraph.NewCreateSpec(regionresource.Table, sqlgraph.NewFieldSpec(regionresource.FieldID, field.TypeInt))
	)
	if value, ok := rrc.mutation.ResourceID(); ok {
		_spec.SetField(regionresource.FieldResourceID, field.TypeString, value)
		_node.ResourceID = value
	}
	if value, ok := rrc.mutation.Description(); ok {
		_spec.SetField(regionresource.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := rrc.mutation.RegionKind(); ok {
		_spec.SetField(regionresource.FieldRegionKind, field.TypeString, value)
		_node.RegionKind = value
	}
	if value, ok := rrc.mutation.Metadata(); ok {
		_spec.SetField(regionresource.FieldMetadata, field.TypeString, value)
		_node.Metadata = value
	}
	if nodes := rrc.mutation.ParentRegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   regionresource.ParentRegionTable,
			Columns: []string{regionresource.ParentRegionColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.region_resource_parent_region = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rrc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   regionresource.ChildrenTable,
			Columns: []string{regionresource.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RegionResourceCreateBulk is the builder for creating many RegionResource entities in bulk.
type RegionResourceCreateBulk struct {
	config
	builders []*RegionResourceCreate
}

// Save creates the RegionResource entities in the database.
func (rrcb *RegionResourceCreateBulk) Save(ctx context.Context) ([]*RegionResource, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rrcb.builders))
	nodes := make([]*RegionResource, len(rrcb.builders))
	mutators := make([]Mutator, len(rrcb.builders))
	for i := range rrcb.builders {
		func(i int, root context.Context) {
			builder := rrcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RegionResourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rrcb *RegionResourceCreateBulk) SaveX(ctx context.Context) []*RegionResource {
	v, err := rrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rrcb *RegionResourceCreateBulk) Exec(ctx context.Context) error {
	_, err := rrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rrcb *RegionResourceCreateBulk) ExecX(ctx context.Context) {
	if err := rrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
