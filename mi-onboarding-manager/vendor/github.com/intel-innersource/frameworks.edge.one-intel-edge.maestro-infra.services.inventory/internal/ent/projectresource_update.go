// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/projectresource"
)

// ProjectResourceUpdate is the builder for updating ProjectResource entities.
type ProjectResourceUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectResourceMutation
}

// Where appends a list predicates to the ProjectResourceUpdate builder.
func (pru *ProjectResourceUpdate) Where(ps ...predicate.ProjectResource) *ProjectResourceUpdate {
	pru.mutation.Where(ps...)
	return pru
}

// SetResourceID sets the "resource_id" field.
func (pru *ProjectResourceUpdate) SetResourceID(s string) *ProjectResourceUpdate {
	pru.mutation.SetResourceID(s)
	return pru
}

// SetKind sets the "kind" field.
func (pru *ProjectResourceUpdate) SetKind(s string) *ProjectResourceUpdate {
	pru.mutation.SetKind(s)
	return pru
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (pru *ProjectResourceUpdate) SetNillableKind(s *string) *ProjectResourceUpdate {
	if s != nil {
		pru.SetKind(*s)
	}
	return pru
}

// ClearKind clears the value of the "kind" field.
func (pru *ProjectResourceUpdate) ClearKind() *ProjectResourceUpdate {
	pru.mutation.ClearKind()
	return pru
}

// SetName sets the "name" field.
func (pru *ProjectResourceUpdate) SetName(s string) *ProjectResourceUpdate {
	pru.mutation.SetName(s)
	return pru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pru *ProjectResourceUpdate) SetNillableName(s *string) *ProjectResourceUpdate {
	if s != nil {
		pru.SetName(*s)
	}
	return pru
}

// ClearName clears the value of the "name" field.
func (pru *ProjectResourceUpdate) ClearName() *ProjectResourceUpdate {
	pru.mutation.ClearName()
	return pru
}

// Mutation returns the ProjectResourceMutation object of the builder.
func (pru *ProjectResourceUpdate) Mutation() *ProjectResourceMutation {
	return pru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pru *ProjectResourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ProjectResourceMutation](ctx, pru.sqlSave, pru.mutation, pru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pru *ProjectResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := pru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pru *ProjectResourceUpdate) Exec(ctx context.Context) error {
	_, err := pru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pru *ProjectResourceUpdate) ExecX(ctx context.Context) {
	if err := pru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pru *ProjectResourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(projectresource.Table, projectresource.Columns, sqlgraph.NewFieldSpec(projectresource.FieldID, field.TypeInt))
	if ps := pru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pru.mutation.ResourceID(); ok {
		_spec.SetField(projectresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := pru.mutation.Kind(); ok {
		_spec.SetField(projectresource.FieldKind, field.TypeString, value)
	}
	if pru.mutation.KindCleared() {
		_spec.ClearField(projectresource.FieldKind, field.TypeString)
	}
	if value, ok := pru.mutation.Name(); ok {
		_spec.SetField(projectresource.FieldName, field.TypeString, value)
	}
	if pru.mutation.NameCleared() {
		_spec.ClearField(projectresource.FieldName, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pru.mutation.done = true
	return n, nil
}

// ProjectResourceUpdateOne is the builder for updating a single ProjectResource entity.
type ProjectResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectResourceMutation
}

// SetResourceID sets the "resource_id" field.
func (pruo *ProjectResourceUpdateOne) SetResourceID(s string) *ProjectResourceUpdateOne {
	pruo.mutation.SetResourceID(s)
	return pruo
}

// SetKind sets the "kind" field.
func (pruo *ProjectResourceUpdateOne) SetKind(s string) *ProjectResourceUpdateOne {
	pruo.mutation.SetKind(s)
	return pruo
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (pruo *ProjectResourceUpdateOne) SetNillableKind(s *string) *ProjectResourceUpdateOne {
	if s != nil {
		pruo.SetKind(*s)
	}
	return pruo
}

// ClearKind clears the value of the "kind" field.
func (pruo *ProjectResourceUpdateOne) ClearKind() *ProjectResourceUpdateOne {
	pruo.mutation.ClearKind()
	return pruo
}

// SetName sets the "name" field.
func (pruo *ProjectResourceUpdateOne) SetName(s string) *ProjectResourceUpdateOne {
	pruo.mutation.SetName(s)
	return pruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pruo *ProjectResourceUpdateOne) SetNillableName(s *string) *ProjectResourceUpdateOne {
	if s != nil {
		pruo.SetName(*s)
	}
	return pruo
}

// ClearName clears the value of the "name" field.
func (pruo *ProjectResourceUpdateOne) ClearName() *ProjectResourceUpdateOne {
	pruo.mutation.ClearName()
	return pruo
}

// Mutation returns the ProjectResourceMutation object of the builder.
func (pruo *ProjectResourceUpdateOne) Mutation() *ProjectResourceMutation {
	return pruo.mutation
}

// Where appends a list predicates to the ProjectResourceUpdate builder.
func (pruo *ProjectResourceUpdateOne) Where(ps ...predicate.ProjectResource) *ProjectResourceUpdateOne {
	pruo.mutation.Where(ps...)
	return pruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pruo *ProjectResourceUpdateOne) Select(field string, fields ...string) *ProjectResourceUpdateOne {
	pruo.fields = append([]string{field}, fields...)
	return pruo
}

// Save executes the query and returns the updated ProjectResource entity.
func (pruo *ProjectResourceUpdateOne) Save(ctx context.Context) (*ProjectResource, error) {
	return withHooks[*ProjectResource, ProjectResourceMutation](ctx, pruo.sqlSave, pruo.mutation, pruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pruo *ProjectResourceUpdateOne) SaveX(ctx context.Context) *ProjectResource {
	node, err := pruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pruo *ProjectResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := pruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pruo *ProjectResourceUpdateOne) ExecX(ctx context.Context) {
	if err := pruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pruo *ProjectResourceUpdateOne) sqlSave(ctx context.Context) (_node *ProjectResource, err error) {
	_spec := sqlgraph.NewUpdateSpec(projectresource.Table, projectresource.Columns, sqlgraph.NewFieldSpec(projectresource.FieldID, field.TypeInt))
	id, ok := pruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProjectResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projectresource.FieldID)
		for _, f := range fields {
			if !projectresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != projectresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pruo.mutation.ResourceID(); ok {
		_spec.SetField(projectresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := pruo.mutation.Kind(); ok {
		_spec.SetField(projectresource.FieldKind, field.TypeString, value)
	}
	if pruo.mutation.KindCleared() {
		_spec.ClearField(projectresource.FieldKind, field.TypeString)
	}
	if value, ok := pruo.mutation.Name(); ok {
		_spec.SetField(projectresource.FieldName, field.TypeString, value)
	}
	if pruo.mutation.NameCleared() {
		_spec.ClearField(projectresource.FieldName, field.TypeString)
	}
	_node = &ProjectResource{config: pruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pruo.mutation.done = true
	return _node, nil
}
