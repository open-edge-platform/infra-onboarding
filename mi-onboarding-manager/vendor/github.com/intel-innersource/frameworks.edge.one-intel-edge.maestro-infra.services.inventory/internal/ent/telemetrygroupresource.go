// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/telemetrygroupresource"
)

// TelemetryGroupResource is the model entity for the TelemetryGroupResource schema.
type TelemetryGroupResource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ResourceID holds the value of the "resource_id" field.
	ResourceID string `json:"resource_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Kind holds the value of the "kind" field.
	Kind telemetrygroupresource.Kind `json:"kind,omitempty"`
	// CollectorKind holds the value of the "collector_kind" field.
	CollectorKind telemetrygroupresource.CollectorKind `json:"collector_kind,omitempty"`
	// Groups holds the value of the "groups" field.
	Groups string `json:"groups,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TelemetryGroupResourceQuery when eager-loading is set.
	Edges        TelemetryGroupResourceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TelemetryGroupResourceEdges holds the relations/edges for other nodes in the graph.
type TelemetryGroupResourceEdges struct {
	// Profiles holds the value of the profiles edge.
	Profiles []*TelemetryProfile `json:"profiles,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProfilesOrErr returns the Profiles value or an error if the edge
// was not loaded in eager-loading.
func (e TelemetryGroupResourceEdges) ProfilesOrErr() ([]*TelemetryProfile, error) {
	if e.loadedTypes[0] {
		return e.Profiles, nil
	}
	return nil, &NotLoadedError{edge: "profiles"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TelemetryGroupResource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case telemetrygroupresource.FieldID:
			values[i] = new(sql.NullInt64)
		case telemetrygroupresource.FieldResourceID, telemetrygroupresource.FieldName, telemetrygroupresource.FieldKind, telemetrygroupresource.FieldCollectorKind, telemetrygroupresource.FieldGroups:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TelemetryGroupResource fields.
func (tgr *TelemetryGroupResource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case telemetrygroupresource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tgr.ID = int(value.Int64)
		case telemetrygroupresource.FieldResourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				tgr.ResourceID = value.String
			}
		case telemetrygroupresource.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				tgr.Name = value.String
			}
		case telemetrygroupresource.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				tgr.Kind = telemetrygroupresource.Kind(value.String)
			}
		case telemetrygroupresource.FieldCollectorKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field collector_kind", values[i])
			} else if value.Valid {
				tgr.CollectorKind = telemetrygroupresource.CollectorKind(value.String)
			}
		case telemetrygroupresource.FieldGroups:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field groups", values[i])
			} else if value.Valid {
				tgr.Groups = value.String
			}
		default:
			tgr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TelemetryGroupResource.
// This includes values selected through modifiers, order, etc.
func (tgr *TelemetryGroupResource) Value(name string) (ent.Value, error) {
	return tgr.selectValues.Get(name)
}

// QueryProfiles queries the "profiles" edge of the TelemetryGroupResource entity.
func (tgr *TelemetryGroupResource) QueryProfiles() *TelemetryProfileQuery {
	return NewTelemetryGroupResourceClient(tgr.config).QueryProfiles(tgr)
}

// Update returns a builder for updating this TelemetryGroupResource.
// Note that you need to call TelemetryGroupResource.Unwrap() before calling this method if this TelemetryGroupResource
// was returned from a transaction, and the transaction was committed or rolled back.
func (tgr *TelemetryGroupResource) Update() *TelemetryGroupResourceUpdateOne {
	return NewTelemetryGroupResourceClient(tgr.config).UpdateOne(tgr)
}

// Unwrap unwraps the TelemetryGroupResource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tgr *TelemetryGroupResource) Unwrap() *TelemetryGroupResource {
	_tx, ok := tgr.config.driver.(*txDriver)
	if !ok {
		panic("ent: TelemetryGroupResource is not a transactional entity")
	}
	tgr.config.driver = _tx.drv
	return tgr
}

// String implements the fmt.Stringer.
func (tgr *TelemetryGroupResource) String() string {
	var builder strings.Builder
	builder.WriteString("TelemetryGroupResource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tgr.ID))
	builder.WriteString("resource_id=")
	builder.WriteString(tgr.ResourceID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(tgr.Name)
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(fmt.Sprintf("%v", tgr.Kind))
	builder.WriteString(", ")
	builder.WriteString("collector_kind=")
	builder.WriteString(fmt.Sprintf("%v", tgr.CollectorKind))
	builder.WriteString(", ")
	builder.WriteString("groups=")
	builder.WriteString(tgr.Groups)
	builder.WriteByte(')')
	return builder.String()
}

// TelemetryGroupResources is a parsable slice of TelemetryGroupResource.
type TelemetryGroupResources []*TelemetryGroupResource
