// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/ouresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
)

// OuResourceUpdate is the builder for updating OuResource entities.
type OuResourceUpdate struct {
	config
	hooks    []Hook
	mutation *OuResourceMutation
}

// Where appends a list predicates to the OuResourceUpdate builder.
func (oru *OuResourceUpdate) Where(ps ...predicate.OuResource) *OuResourceUpdate {
	oru.mutation.Where(ps...)
	return oru
}

// SetResourceID sets the "resource_id" field.
func (oru *OuResourceUpdate) SetResourceID(s string) *OuResourceUpdate {
	oru.mutation.SetResourceID(s)
	return oru
}

// SetDescription sets the "description" field.
func (oru *OuResourceUpdate) SetDescription(s string) *OuResourceUpdate {
	oru.mutation.SetDescription(s)
	return oru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (oru *OuResourceUpdate) SetNillableDescription(s *string) *OuResourceUpdate {
	if s != nil {
		oru.SetDescription(*s)
	}
	return oru
}

// ClearDescription clears the value of the "description" field.
func (oru *OuResourceUpdate) ClearDescription() *OuResourceUpdate {
	oru.mutation.ClearDescription()
	return oru
}

// SetOuKind sets the "ou_kind" field.
func (oru *OuResourceUpdate) SetOuKind(s string) *OuResourceUpdate {
	oru.mutation.SetOuKind(s)
	return oru
}

// SetNillableOuKind sets the "ou_kind" field if the given value is not nil.
func (oru *OuResourceUpdate) SetNillableOuKind(s *string) *OuResourceUpdate {
	if s != nil {
		oru.SetOuKind(*s)
	}
	return oru
}

// ClearOuKind clears the value of the "ou_kind" field.
func (oru *OuResourceUpdate) ClearOuKind() *OuResourceUpdate {
	oru.mutation.ClearOuKind()
	return oru
}

// SetMetadata sets the "metadata" field.
func (oru *OuResourceUpdate) SetMetadata(s string) *OuResourceUpdate {
	oru.mutation.SetMetadata(s)
	return oru
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (oru *OuResourceUpdate) SetNillableMetadata(s *string) *OuResourceUpdate {
	if s != nil {
		oru.SetMetadata(*s)
	}
	return oru
}

// ClearMetadata clears the value of the "metadata" field.
func (oru *OuResourceUpdate) ClearMetadata() *OuResourceUpdate {
	oru.mutation.ClearMetadata()
	return oru
}

// SetParentOuID sets the "parent_ou" edge to the OuResource entity by ID.
func (oru *OuResourceUpdate) SetParentOuID(id int) *OuResourceUpdate {
	oru.mutation.SetParentOuID(id)
	return oru
}

// SetNillableParentOuID sets the "parent_ou" edge to the OuResource entity by ID if the given value is not nil.
func (oru *OuResourceUpdate) SetNillableParentOuID(id *int) *OuResourceUpdate {
	if id != nil {
		oru = oru.SetParentOuID(*id)
	}
	return oru
}

// SetParentOu sets the "parent_ou" edge to the OuResource entity.
func (oru *OuResourceUpdate) SetParentOu(o *OuResource) *OuResourceUpdate {
	return oru.SetParentOuID(o.ID)
}

// AddChildIDs adds the "children" edge to the OuResource entity by IDs.
func (oru *OuResourceUpdate) AddChildIDs(ids ...int) *OuResourceUpdate {
	oru.mutation.AddChildIDs(ids...)
	return oru
}

// AddChildren adds the "children" edges to the OuResource entity.
func (oru *OuResourceUpdate) AddChildren(o ...*OuResource) *OuResourceUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oru.AddChildIDs(ids...)
}

// Mutation returns the OuResourceMutation object of the builder.
func (oru *OuResourceUpdate) Mutation() *OuResourceMutation {
	return oru.mutation
}

// ClearParentOu clears the "parent_ou" edge to the OuResource entity.
func (oru *OuResourceUpdate) ClearParentOu() *OuResourceUpdate {
	oru.mutation.ClearParentOu()
	return oru
}

// ClearChildren clears all "children" edges to the OuResource entity.
func (oru *OuResourceUpdate) ClearChildren() *OuResourceUpdate {
	oru.mutation.ClearChildren()
	return oru
}

// RemoveChildIDs removes the "children" edge to OuResource entities by IDs.
func (oru *OuResourceUpdate) RemoveChildIDs(ids ...int) *OuResourceUpdate {
	oru.mutation.RemoveChildIDs(ids...)
	return oru
}

// RemoveChildren removes "children" edges to OuResource entities.
func (oru *OuResourceUpdate) RemoveChildren(o ...*OuResource) *OuResourceUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oru.RemoveChildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oru *OuResourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, OuResourceMutation](ctx, oru.sqlSave, oru.mutation, oru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oru *OuResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := oru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oru *OuResourceUpdate) Exec(ctx context.Context) error {
	_, err := oru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oru *OuResourceUpdate) ExecX(ctx context.Context) {
	if err := oru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (oru *OuResourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(ouresource.Table, ouresource.Columns, sqlgraph.NewFieldSpec(ouresource.FieldID, field.TypeInt))
	if ps := oru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oru.mutation.ResourceID(); ok {
		_spec.SetField(ouresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := oru.mutation.Description(); ok {
		_spec.SetField(ouresource.FieldDescription, field.TypeString, value)
	}
	if oru.mutation.DescriptionCleared() {
		_spec.ClearField(ouresource.FieldDescription, field.TypeString)
	}
	if value, ok := oru.mutation.OuKind(); ok {
		_spec.SetField(ouresource.FieldOuKind, field.TypeString, value)
	}
	if oru.mutation.OuKindCleared() {
		_spec.ClearField(ouresource.FieldOuKind, field.TypeString)
	}
	if value, ok := oru.mutation.Metadata(); ok {
		_spec.SetField(ouresource.FieldMetadata, field.TypeString, value)
	}
	if oru.mutation.MetadataCleared() {
		_spec.ClearField(ouresource.FieldMetadata, field.TypeString)
	}
	if oru.mutation.ParentOuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ouresource.ParentOuTable,
			Columns: []string{ouresource.ParentOuColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ouresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oru.mutation.ParentOuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ouresource.ParentOuTable,
			Columns: []string{ouresource.ParentOuColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ouresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oru.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ouresource.ChildrenTable,
			Columns: []string{ouresource.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ouresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oru.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !oru.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ouresource.ChildrenTable,
			Columns: []string{ouresource.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ouresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oru.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ouresource.ChildrenTable,
			Columns: []string{ouresource.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ouresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ouresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oru.mutation.done = true
	return n, nil
}

// OuResourceUpdateOne is the builder for updating a single OuResource entity.
type OuResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OuResourceMutation
}

// SetResourceID sets the "resource_id" field.
func (oruo *OuResourceUpdateOne) SetResourceID(s string) *OuResourceUpdateOne {
	oruo.mutation.SetResourceID(s)
	return oruo
}

// SetDescription sets the "description" field.
func (oruo *OuResourceUpdateOne) SetDescription(s string) *OuResourceUpdateOne {
	oruo.mutation.SetDescription(s)
	return oruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (oruo *OuResourceUpdateOne) SetNillableDescription(s *string) *OuResourceUpdateOne {
	if s != nil {
		oruo.SetDescription(*s)
	}
	return oruo
}

// ClearDescription clears the value of the "description" field.
func (oruo *OuResourceUpdateOne) ClearDescription() *OuResourceUpdateOne {
	oruo.mutation.ClearDescription()
	return oruo
}

// SetOuKind sets the "ou_kind" field.
func (oruo *OuResourceUpdateOne) SetOuKind(s string) *OuResourceUpdateOne {
	oruo.mutation.SetOuKind(s)
	return oruo
}

// SetNillableOuKind sets the "ou_kind" field if the given value is not nil.
func (oruo *OuResourceUpdateOne) SetNillableOuKind(s *string) *OuResourceUpdateOne {
	if s != nil {
		oruo.SetOuKind(*s)
	}
	return oruo
}

// ClearOuKind clears the value of the "ou_kind" field.
func (oruo *OuResourceUpdateOne) ClearOuKind() *OuResourceUpdateOne {
	oruo.mutation.ClearOuKind()
	return oruo
}

// SetMetadata sets the "metadata" field.
func (oruo *OuResourceUpdateOne) SetMetadata(s string) *OuResourceUpdateOne {
	oruo.mutation.SetMetadata(s)
	return oruo
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (oruo *OuResourceUpdateOne) SetNillableMetadata(s *string) *OuResourceUpdateOne {
	if s != nil {
		oruo.SetMetadata(*s)
	}
	return oruo
}

// ClearMetadata clears the value of the "metadata" field.
func (oruo *OuResourceUpdateOne) ClearMetadata() *OuResourceUpdateOne {
	oruo.mutation.ClearMetadata()
	return oruo
}

// SetParentOuID sets the "parent_ou" edge to the OuResource entity by ID.
func (oruo *OuResourceUpdateOne) SetParentOuID(id int) *OuResourceUpdateOne {
	oruo.mutation.SetParentOuID(id)
	return oruo
}

// SetNillableParentOuID sets the "parent_ou" edge to the OuResource entity by ID if the given value is not nil.
func (oruo *OuResourceUpdateOne) SetNillableParentOuID(id *int) *OuResourceUpdateOne {
	if id != nil {
		oruo = oruo.SetParentOuID(*id)
	}
	return oruo
}

// SetParentOu sets the "parent_ou" edge to the OuResource entity.
func (oruo *OuResourceUpdateOne) SetParentOu(o *OuResource) *OuResourceUpdateOne {
	return oruo.SetParentOuID(o.ID)
}

// AddChildIDs adds the "children" edge to the OuResource entity by IDs.
func (oruo *OuResourceUpdateOne) AddChildIDs(ids ...int) *OuResourceUpdateOne {
	oruo.mutation.AddChildIDs(ids...)
	return oruo
}

// AddChildren adds the "children" edges to the OuResource entity.
func (oruo *OuResourceUpdateOne) AddChildren(o ...*OuResource) *OuResourceUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oruo.AddChildIDs(ids...)
}

// Mutation returns the OuResourceMutation object of the builder.
func (oruo *OuResourceUpdateOne) Mutation() *OuResourceMutation {
	return oruo.mutation
}

// ClearParentOu clears the "parent_ou" edge to the OuResource entity.
func (oruo *OuResourceUpdateOne) ClearParentOu() *OuResourceUpdateOne {
	oruo.mutation.ClearParentOu()
	return oruo
}

// ClearChildren clears all "children" edges to the OuResource entity.
func (oruo *OuResourceUpdateOne) ClearChildren() *OuResourceUpdateOne {
	oruo.mutation.ClearChildren()
	return oruo
}

// RemoveChildIDs removes the "children" edge to OuResource entities by IDs.
func (oruo *OuResourceUpdateOne) RemoveChildIDs(ids ...int) *OuResourceUpdateOne {
	oruo.mutation.RemoveChildIDs(ids...)
	return oruo
}

// RemoveChildren removes "children" edges to OuResource entities.
func (oruo *OuResourceUpdateOne) RemoveChildren(o ...*OuResource) *OuResourceUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oruo.RemoveChildIDs(ids...)
}

// Where appends a list predicates to the OuResourceUpdate builder.
func (oruo *OuResourceUpdateOne) Where(ps ...predicate.OuResource) *OuResourceUpdateOne {
	oruo.mutation.Where(ps...)
	return oruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oruo *OuResourceUpdateOne) Select(field string, fields ...string) *OuResourceUpdateOne {
	oruo.fields = append([]string{field}, fields...)
	return oruo
}

// Save executes the query and returns the updated OuResource entity.
func (oruo *OuResourceUpdateOne) Save(ctx context.Context) (*OuResource, error) {
	return withHooks[*OuResource, OuResourceMutation](ctx, oruo.sqlSave, oruo.mutation, oruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oruo *OuResourceUpdateOne) SaveX(ctx context.Context) *OuResource {
	node, err := oruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oruo *OuResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := oruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oruo *OuResourceUpdateOne) ExecX(ctx context.Context) {
	if err := oruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (oruo *OuResourceUpdateOne) sqlSave(ctx context.Context) (_node *OuResource, err error) {
	_spec := sqlgraph.NewUpdateSpec(ouresource.Table, ouresource.Columns, sqlgraph.NewFieldSpec(ouresource.FieldID, field.TypeInt))
	id, ok := oruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OuResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ouresource.FieldID)
		for _, f := range fields {
			if !ouresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ouresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oruo.mutation.ResourceID(); ok {
		_spec.SetField(ouresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := oruo.mutation.Description(); ok {
		_spec.SetField(ouresource.FieldDescription, field.TypeString, value)
	}
	if oruo.mutation.DescriptionCleared() {
		_spec.ClearField(ouresource.FieldDescription, field.TypeString)
	}
	if value, ok := oruo.mutation.OuKind(); ok {
		_spec.SetField(ouresource.FieldOuKind, field.TypeString, value)
	}
	if oruo.mutation.OuKindCleared() {
		_spec.ClearField(ouresource.FieldOuKind, field.TypeString)
	}
	if value, ok := oruo.mutation.Metadata(); ok {
		_spec.SetField(ouresource.FieldMetadata, field.TypeString, value)
	}
	if oruo.mutation.MetadataCleared() {
		_spec.ClearField(ouresource.FieldMetadata, field.TypeString)
	}
	if oruo.mutation.ParentOuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ouresource.ParentOuTable,
			Columns: []string{ouresource.ParentOuColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ouresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oruo.mutation.ParentOuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ouresource.ParentOuTable,
			Columns: []string{ouresource.ParentOuColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ouresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oruo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ouresource.ChildrenTable,
			Columns: []string{ouresource.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ouresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oruo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !oruo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ouresource.ChildrenTable,
			Columns: []string{ouresource.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ouresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oruo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ouresource.ChildrenTable,
			Columns: []string{ouresource.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ouresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OuResource{config: oruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ouresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oruo.mutation.done = true
	return _node, nil
}
