// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hostnicresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hostresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/projectresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/providerresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/siteresource"
)

// HostnicResourceUpdate is the builder for updating HostnicResource entities.
type HostnicResourceUpdate struct {
	config
	hooks    []Hook
	mutation *HostnicResourceMutation
}

// Where appends a list predicates to the HostnicResourceUpdate builder.
func (hru *HostnicResourceUpdate) Where(ps ...predicate.HostnicResource) *HostnicResourceUpdate {
	hru.mutation.Where(ps...)
	return hru
}

// SetResourceID sets the "resource_id" field.
func (hru *HostnicResourceUpdate) SetResourceID(s string) *HostnicResourceUpdate {
	hru.mutation.SetResourceID(s)
	return hru
}

// SetKind sets the "kind" field.
func (hru *HostnicResourceUpdate) SetKind(s string) *HostnicResourceUpdate {
	hru.mutation.SetKind(s)
	return hru
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (hru *HostnicResourceUpdate) SetNillableKind(s *string) *HostnicResourceUpdate {
	if s != nil {
		hru.SetKind(*s)
	}
	return hru
}

// ClearKind clears the value of the "kind" field.
func (hru *HostnicResourceUpdate) ClearKind() *HostnicResourceUpdate {
	hru.mutation.ClearKind()
	return hru
}

// SetDescription sets the "description" field.
func (hru *HostnicResourceUpdate) SetDescription(s string) *HostnicResourceUpdate {
	hru.mutation.SetDescription(s)
	return hru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (hru *HostnicResourceUpdate) SetNillableDescription(s *string) *HostnicResourceUpdate {
	if s != nil {
		hru.SetDescription(*s)
	}
	return hru
}

// ClearDescription clears the value of the "description" field.
func (hru *HostnicResourceUpdate) ClearDescription() *HostnicResourceUpdate {
	hru.mutation.ClearDescription()
	return hru
}

// SetDesiredState sets the "desired_state" field.
func (hru *HostnicResourceUpdate) SetDesiredState(hs hostnicresource.DesiredState) *HostnicResourceUpdate {
	hru.mutation.SetDesiredState(hs)
	return hru
}

// SetNillableDesiredState sets the "desired_state" field if the given value is not nil.
func (hru *HostnicResourceUpdate) SetNillableDesiredState(hs *hostnicresource.DesiredState) *HostnicResourceUpdate {
	if hs != nil {
		hru.SetDesiredState(*hs)
	}
	return hru
}

// ClearDesiredState clears the value of the "desired_state" field.
func (hru *HostnicResourceUpdate) ClearDesiredState() *HostnicResourceUpdate {
	hru.mutation.ClearDesiredState()
	return hru
}

// SetCurrentState sets the "current_state" field.
func (hru *HostnicResourceUpdate) SetCurrentState(hs hostnicresource.CurrentState) *HostnicResourceUpdate {
	hru.mutation.SetCurrentState(hs)
	return hru
}

// SetNillableCurrentState sets the "current_state" field if the given value is not nil.
func (hru *HostnicResourceUpdate) SetNillableCurrentState(hs *hostnicresource.CurrentState) *HostnicResourceUpdate {
	if hs != nil {
		hru.SetCurrentState(*hs)
	}
	return hru
}

// ClearCurrentState clears the value of the "current_state" field.
func (hru *HostnicResourceUpdate) ClearCurrentState() *HostnicResourceUpdate {
	hru.mutation.ClearCurrentState()
	return hru
}

// SetProviderStatus sets the "provider_status" field.
func (hru *HostnicResourceUpdate) SetProviderStatus(s string) *HostnicResourceUpdate {
	hru.mutation.SetProviderStatus(s)
	return hru
}

// SetNillableProviderStatus sets the "provider_status" field if the given value is not nil.
func (hru *HostnicResourceUpdate) SetNillableProviderStatus(s *string) *HostnicResourceUpdate {
	if s != nil {
		hru.SetProviderStatus(*s)
	}
	return hru
}

// ClearProviderStatus clears the value of the "provider_status" field.
func (hru *HostnicResourceUpdate) ClearProviderStatus() *HostnicResourceUpdate {
	hru.mutation.ClearProviderStatus()
	return hru
}

// SetName sets the "name" field.
func (hru *HostnicResourceUpdate) SetName(s string) *HostnicResourceUpdate {
	hru.mutation.SetName(s)
	return hru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (hru *HostnicResourceUpdate) SetNillableName(s *string) *HostnicResourceUpdate {
	if s != nil {
		hru.SetName(*s)
	}
	return hru
}

// ClearName clears the value of the "name" field.
func (hru *HostnicResourceUpdate) ClearName() *HostnicResourceUpdate {
	hru.mutation.ClearName()
	return hru
}

// SetPciIdentifier sets the "pci_identifier" field.
func (hru *HostnicResourceUpdate) SetPciIdentifier(s string) *HostnicResourceUpdate {
	hru.mutation.SetPciIdentifier(s)
	return hru
}

// SetNillablePciIdentifier sets the "pci_identifier" field if the given value is not nil.
func (hru *HostnicResourceUpdate) SetNillablePciIdentifier(s *string) *HostnicResourceUpdate {
	if s != nil {
		hru.SetPciIdentifier(*s)
	}
	return hru
}

// ClearPciIdentifier clears the value of the "pci_identifier" field.
func (hru *HostnicResourceUpdate) ClearPciIdentifier() *HostnicResourceUpdate {
	hru.mutation.ClearPciIdentifier()
	return hru
}

// SetMACAddr sets the "mac_addr" field.
func (hru *HostnicResourceUpdate) SetMACAddr(s string) *HostnicResourceUpdate {
	hru.mutation.SetMACAddr(s)
	return hru
}

// SetNillableMACAddr sets the "mac_addr" field if the given value is not nil.
func (hru *HostnicResourceUpdate) SetNillableMACAddr(s *string) *HostnicResourceUpdate {
	if s != nil {
		hru.SetMACAddr(*s)
	}
	return hru
}

// ClearMACAddr clears the value of the "mac_addr" field.
func (hru *HostnicResourceUpdate) ClearMACAddr() *HostnicResourceUpdate {
	hru.mutation.ClearMACAddr()
	return hru
}

// SetSriovEnabled sets the "sriov_enabled" field.
func (hru *HostnicResourceUpdate) SetSriovEnabled(b bool) *HostnicResourceUpdate {
	hru.mutation.SetSriovEnabled(b)
	return hru
}

// SetNillableSriovEnabled sets the "sriov_enabled" field if the given value is not nil.
func (hru *HostnicResourceUpdate) SetNillableSriovEnabled(b *bool) *HostnicResourceUpdate {
	if b != nil {
		hru.SetSriovEnabled(*b)
	}
	return hru
}

// ClearSriovEnabled clears the value of the "sriov_enabled" field.
func (hru *HostnicResourceUpdate) ClearSriovEnabled() *HostnicResourceUpdate {
	hru.mutation.ClearSriovEnabled()
	return hru
}

// SetSriovVfsNum sets the "sriov_vfs_num" field.
func (hru *HostnicResourceUpdate) SetSriovVfsNum(u uint32) *HostnicResourceUpdate {
	hru.mutation.ResetSriovVfsNum()
	hru.mutation.SetSriovVfsNum(u)
	return hru
}

// SetNillableSriovVfsNum sets the "sriov_vfs_num" field if the given value is not nil.
func (hru *HostnicResourceUpdate) SetNillableSriovVfsNum(u *uint32) *HostnicResourceUpdate {
	if u != nil {
		hru.SetSriovVfsNum(*u)
	}
	return hru
}

// AddSriovVfsNum adds u to the "sriov_vfs_num" field.
func (hru *HostnicResourceUpdate) AddSriovVfsNum(u int32) *HostnicResourceUpdate {
	hru.mutation.AddSriovVfsNum(u)
	return hru
}

// ClearSriovVfsNum clears the value of the "sriov_vfs_num" field.
func (hru *HostnicResourceUpdate) ClearSriovVfsNum() *HostnicResourceUpdate {
	hru.mutation.ClearSriovVfsNum()
	return hru
}

// SetSriovVfsTotal sets the "sriov_vfs_total" field.
func (hru *HostnicResourceUpdate) SetSriovVfsTotal(u uint32) *HostnicResourceUpdate {
	hru.mutation.ResetSriovVfsTotal()
	hru.mutation.SetSriovVfsTotal(u)
	return hru
}

// SetNillableSriovVfsTotal sets the "sriov_vfs_total" field if the given value is not nil.
func (hru *HostnicResourceUpdate) SetNillableSriovVfsTotal(u *uint32) *HostnicResourceUpdate {
	if u != nil {
		hru.SetSriovVfsTotal(*u)
	}
	return hru
}

// AddSriovVfsTotal adds u to the "sriov_vfs_total" field.
func (hru *HostnicResourceUpdate) AddSriovVfsTotal(u int32) *HostnicResourceUpdate {
	hru.mutation.AddSriovVfsTotal(u)
	return hru
}

// ClearSriovVfsTotal clears the value of the "sriov_vfs_total" field.
func (hru *HostnicResourceUpdate) ClearSriovVfsTotal() *HostnicResourceUpdate {
	hru.mutation.ClearSriovVfsTotal()
	return hru
}

// SetPeerName sets the "peer_name" field.
func (hru *HostnicResourceUpdate) SetPeerName(s string) *HostnicResourceUpdate {
	hru.mutation.SetPeerName(s)
	return hru
}

// SetNillablePeerName sets the "peer_name" field if the given value is not nil.
func (hru *HostnicResourceUpdate) SetNillablePeerName(s *string) *HostnicResourceUpdate {
	if s != nil {
		hru.SetPeerName(*s)
	}
	return hru
}

// ClearPeerName clears the value of the "peer_name" field.
func (hru *HostnicResourceUpdate) ClearPeerName() *HostnicResourceUpdate {
	hru.mutation.ClearPeerName()
	return hru
}

// SetPeerDescription sets the "peer_description" field.
func (hru *HostnicResourceUpdate) SetPeerDescription(s string) *HostnicResourceUpdate {
	hru.mutation.SetPeerDescription(s)
	return hru
}

// SetNillablePeerDescription sets the "peer_description" field if the given value is not nil.
func (hru *HostnicResourceUpdate) SetNillablePeerDescription(s *string) *HostnicResourceUpdate {
	if s != nil {
		hru.SetPeerDescription(*s)
	}
	return hru
}

// ClearPeerDescription clears the value of the "peer_description" field.
func (hru *HostnicResourceUpdate) ClearPeerDescription() *HostnicResourceUpdate {
	hru.mutation.ClearPeerDescription()
	return hru
}

// SetPeerMAC sets the "peer_mac" field.
func (hru *HostnicResourceUpdate) SetPeerMAC(s string) *HostnicResourceUpdate {
	hru.mutation.SetPeerMAC(s)
	return hru
}

// SetNillablePeerMAC sets the "peer_mac" field if the given value is not nil.
func (hru *HostnicResourceUpdate) SetNillablePeerMAC(s *string) *HostnicResourceUpdate {
	if s != nil {
		hru.SetPeerMAC(*s)
	}
	return hru
}

// ClearPeerMAC clears the value of the "peer_mac" field.
func (hru *HostnicResourceUpdate) ClearPeerMAC() *HostnicResourceUpdate {
	hru.mutation.ClearPeerMAC()
	return hru
}

// SetPeerMgmtIP sets the "peer_mgmt_ip" field.
func (hru *HostnicResourceUpdate) SetPeerMgmtIP(s string) *HostnicResourceUpdate {
	hru.mutation.SetPeerMgmtIP(s)
	return hru
}

// SetNillablePeerMgmtIP sets the "peer_mgmt_ip" field if the given value is not nil.
func (hru *HostnicResourceUpdate) SetNillablePeerMgmtIP(s *string) *HostnicResourceUpdate {
	if s != nil {
		hru.SetPeerMgmtIP(*s)
	}
	return hru
}

// ClearPeerMgmtIP clears the value of the "peer_mgmt_ip" field.
func (hru *HostnicResourceUpdate) ClearPeerMgmtIP() *HostnicResourceUpdate {
	hru.mutation.ClearPeerMgmtIP()
	return hru
}

// SetPeerPort sets the "peer_port" field.
func (hru *HostnicResourceUpdate) SetPeerPort(s string) *HostnicResourceUpdate {
	hru.mutation.SetPeerPort(s)
	return hru
}

// SetNillablePeerPort sets the "peer_port" field if the given value is not nil.
func (hru *HostnicResourceUpdate) SetNillablePeerPort(s *string) *HostnicResourceUpdate {
	if s != nil {
		hru.SetPeerPort(*s)
	}
	return hru
}

// ClearPeerPort clears the value of the "peer_port" field.
func (hru *HostnicResourceUpdate) ClearPeerPort() *HostnicResourceUpdate {
	hru.mutation.ClearPeerPort()
	return hru
}

// SetSupportedLinkMode sets the "supported_link_mode" field.
func (hru *HostnicResourceUpdate) SetSupportedLinkMode(s string) *HostnicResourceUpdate {
	hru.mutation.SetSupportedLinkMode(s)
	return hru
}

// SetNillableSupportedLinkMode sets the "supported_link_mode" field if the given value is not nil.
func (hru *HostnicResourceUpdate) SetNillableSupportedLinkMode(s *string) *HostnicResourceUpdate {
	if s != nil {
		hru.SetSupportedLinkMode(*s)
	}
	return hru
}

// ClearSupportedLinkMode clears the value of the "supported_link_mode" field.
func (hru *HostnicResourceUpdate) ClearSupportedLinkMode() *HostnicResourceUpdate {
	hru.mutation.ClearSupportedLinkMode()
	return hru
}

// SetAdvertisingLinkMode sets the "advertising_link_mode" field.
func (hru *HostnicResourceUpdate) SetAdvertisingLinkMode(s string) *HostnicResourceUpdate {
	hru.mutation.SetAdvertisingLinkMode(s)
	return hru
}

// SetNillableAdvertisingLinkMode sets the "advertising_link_mode" field if the given value is not nil.
func (hru *HostnicResourceUpdate) SetNillableAdvertisingLinkMode(s *string) *HostnicResourceUpdate {
	if s != nil {
		hru.SetAdvertisingLinkMode(*s)
	}
	return hru
}

// ClearAdvertisingLinkMode clears the value of the "advertising_link_mode" field.
func (hru *HostnicResourceUpdate) ClearAdvertisingLinkMode() *HostnicResourceUpdate {
	hru.mutation.ClearAdvertisingLinkMode()
	return hru
}

// SetCurrentSpeedBps sets the "current_speed_bps" field.
func (hru *HostnicResourceUpdate) SetCurrentSpeedBps(u uint64) *HostnicResourceUpdate {
	hru.mutation.ResetCurrentSpeedBps()
	hru.mutation.SetCurrentSpeedBps(u)
	return hru
}

// SetNillableCurrentSpeedBps sets the "current_speed_bps" field if the given value is not nil.
func (hru *HostnicResourceUpdate) SetNillableCurrentSpeedBps(u *uint64) *HostnicResourceUpdate {
	if u != nil {
		hru.SetCurrentSpeedBps(*u)
	}
	return hru
}

// AddCurrentSpeedBps adds u to the "current_speed_bps" field.
func (hru *HostnicResourceUpdate) AddCurrentSpeedBps(u int64) *HostnicResourceUpdate {
	hru.mutation.AddCurrentSpeedBps(u)
	return hru
}

// ClearCurrentSpeedBps clears the value of the "current_speed_bps" field.
func (hru *HostnicResourceUpdate) ClearCurrentSpeedBps() *HostnicResourceUpdate {
	hru.mutation.ClearCurrentSpeedBps()
	return hru
}

// SetCurrentDuplex sets the "current_duplex" field.
func (hru *HostnicResourceUpdate) SetCurrentDuplex(s string) *HostnicResourceUpdate {
	hru.mutation.SetCurrentDuplex(s)
	return hru
}

// SetNillableCurrentDuplex sets the "current_duplex" field if the given value is not nil.
func (hru *HostnicResourceUpdate) SetNillableCurrentDuplex(s *string) *HostnicResourceUpdate {
	if s != nil {
		hru.SetCurrentDuplex(*s)
	}
	return hru
}

// ClearCurrentDuplex clears the value of the "current_duplex" field.
func (hru *HostnicResourceUpdate) ClearCurrentDuplex() *HostnicResourceUpdate {
	hru.mutation.ClearCurrentDuplex()
	return hru
}

// SetFeatures sets the "features" field.
func (hru *HostnicResourceUpdate) SetFeatures(s string) *HostnicResourceUpdate {
	hru.mutation.SetFeatures(s)
	return hru
}

// SetNillableFeatures sets the "features" field if the given value is not nil.
func (hru *HostnicResourceUpdate) SetNillableFeatures(s *string) *HostnicResourceUpdate {
	if s != nil {
		hru.SetFeatures(*s)
	}
	return hru
}

// ClearFeatures clears the value of the "features" field.
func (hru *HostnicResourceUpdate) ClearFeatures() *HostnicResourceUpdate {
	hru.mutation.ClearFeatures()
	return hru
}

// SetMtu sets the "mtu" field.
func (hru *HostnicResourceUpdate) SetMtu(u uint32) *HostnicResourceUpdate {
	hru.mutation.ResetMtu()
	hru.mutation.SetMtu(u)
	return hru
}

// SetNillableMtu sets the "mtu" field if the given value is not nil.
func (hru *HostnicResourceUpdate) SetNillableMtu(u *uint32) *HostnicResourceUpdate {
	if u != nil {
		hru.SetMtu(*u)
	}
	return hru
}

// AddMtu adds u to the "mtu" field.
func (hru *HostnicResourceUpdate) AddMtu(u int32) *HostnicResourceUpdate {
	hru.mutation.AddMtu(u)
	return hru
}

// ClearMtu clears the value of the "mtu" field.
func (hru *HostnicResourceUpdate) ClearMtu() *HostnicResourceUpdate {
	hru.mutation.ClearMtu()
	return hru
}

// SetLinkState sets the "link_state" field.
func (hru *HostnicResourceUpdate) SetLinkState(hs hostnicresource.LinkState) *HostnicResourceUpdate {
	hru.mutation.SetLinkState(hs)
	return hru
}

// SetNillableLinkState sets the "link_state" field if the given value is not nil.
func (hru *HostnicResourceUpdate) SetNillableLinkState(hs *hostnicresource.LinkState) *HostnicResourceUpdate {
	if hs != nil {
		hru.SetLinkState(*hs)
	}
	return hru
}

// ClearLinkState clears the value of the "link_state" field.
func (hru *HostnicResourceUpdate) ClearLinkState() *HostnicResourceUpdate {
	hru.mutation.ClearLinkState()
	return hru
}

// SetBmcInterface sets the "bmc_interface" field.
func (hru *HostnicResourceUpdate) SetBmcInterface(b bool) *HostnicResourceUpdate {
	hru.mutation.SetBmcInterface(b)
	return hru
}

// SetNillableBmcInterface sets the "bmc_interface" field if the given value is not nil.
func (hru *HostnicResourceUpdate) SetNillableBmcInterface(b *bool) *HostnicResourceUpdate {
	if b != nil {
		hru.SetBmcInterface(*b)
	}
	return hru
}

// ClearBmcInterface clears the value of the "bmc_interface" field.
func (hru *HostnicResourceUpdate) ClearBmcInterface() *HostnicResourceUpdate {
	hru.mutation.ClearBmcInterface()
	return hru
}

// SetSiteID sets the "site" edge to the SiteResource entity by ID.
func (hru *HostnicResourceUpdate) SetSiteID(id int) *HostnicResourceUpdate {
	hru.mutation.SetSiteID(id)
	return hru
}

// SetNillableSiteID sets the "site" edge to the SiteResource entity by ID if the given value is not nil.
func (hru *HostnicResourceUpdate) SetNillableSiteID(id *int) *HostnicResourceUpdate {
	if id != nil {
		hru = hru.SetSiteID(*id)
	}
	return hru
}

// SetSite sets the "site" edge to the SiteResource entity.
func (hru *HostnicResourceUpdate) SetSite(s *SiteResource) *HostnicResourceUpdate {
	return hru.SetSiteID(s.ID)
}

// SetProviderID sets the "provider" edge to the ProviderResource entity by ID.
func (hru *HostnicResourceUpdate) SetProviderID(id int) *HostnicResourceUpdate {
	hru.mutation.SetProviderID(id)
	return hru
}

// SetNillableProviderID sets the "provider" edge to the ProviderResource entity by ID if the given value is not nil.
func (hru *HostnicResourceUpdate) SetNillableProviderID(id *int) *HostnicResourceUpdate {
	if id != nil {
		hru = hru.SetProviderID(*id)
	}
	return hru
}

// SetProvider sets the "provider" edge to the ProviderResource entity.
func (hru *HostnicResourceUpdate) SetProvider(p *ProviderResource) *HostnicResourceUpdate {
	return hru.SetProviderID(p.ID)
}

// SetProjectID sets the "project" edge to the ProjectResource entity by ID.
func (hru *HostnicResourceUpdate) SetProjectID(id int) *HostnicResourceUpdate {
	hru.mutation.SetProjectID(id)
	return hru
}

// SetNillableProjectID sets the "project" edge to the ProjectResource entity by ID if the given value is not nil.
func (hru *HostnicResourceUpdate) SetNillableProjectID(id *int) *HostnicResourceUpdate {
	if id != nil {
		hru = hru.SetProjectID(*id)
	}
	return hru
}

// SetProject sets the "project" edge to the ProjectResource entity.
func (hru *HostnicResourceUpdate) SetProject(p *ProjectResource) *HostnicResourceUpdate {
	return hru.SetProjectID(p.ID)
}

// SetHostID sets the "host" edge to the HostResource entity by ID.
func (hru *HostnicResourceUpdate) SetHostID(id int) *HostnicResourceUpdate {
	hru.mutation.SetHostID(id)
	return hru
}

// SetHost sets the "host" edge to the HostResource entity.
func (hru *HostnicResourceUpdate) SetHost(h *HostResource) *HostnicResourceUpdate {
	return hru.SetHostID(h.ID)
}

// Mutation returns the HostnicResourceMutation object of the builder.
func (hru *HostnicResourceUpdate) Mutation() *HostnicResourceMutation {
	return hru.mutation
}

// ClearSite clears the "site" edge to the SiteResource entity.
func (hru *HostnicResourceUpdate) ClearSite() *HostnicResourceUpdate {
	hru.mutation.ClearSite()
	return hru
}

// ClearProvider clears the "provider" edge to the ProviderResource entity.
func (hru *HostnicResourceUpdate) ClearProvider() *HostnicResourceUpdate {
	hru.mutation.ClearProvider()
	return hru
}

// ClearProject clears the "project" edge to the ProjectResource entity.
func (hru *HostnicResourceUpdate) ClearProject() *HostnicResourceUpdate {
	hru.mutation.ClearProject()
	return hru
}

// ClearHost clears the "host" edge to the HostResource entity.
func (hru *HostnicResourceUpdate) ClearHost() *HostnicResourceUpdate {
	hru.mutation.ClearHost()
	return hru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hru *HostnicResourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, HostnicResourceMutation](ctx, hru.sqlSave, hru.mutation, hru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hru *HostnicResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := hru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hru *HostnicResourceUpdate) Exec(ctx context.Context) error {
	_, err := hru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hru *HostnicResourceUpdate) ExecX(ctx context.Context) {
	if err := hru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hru *HostnicResourceUpdate) check() error {
	if v, ok := hru.mutation.DesiredState(); ok {
		if err := hostnicresource.DesiredStateValidator(v); err != nil {
			return &ValidationError{Name: "desired_state", err: fmt.Errorf(`ent: validator failed for field "HostnicResource.desired_state": %w`, err)}
		}
	}
	if v, ok := hru.mutation.CurrentState(); ok {
		if err := hostnicresource.CurrentStateValidator(v); err != nil {
			return &ValidationError{Name: "current_state", err: fmt.Errorf(`ent: validator failed for field "HostnicResource.current_state": %w`, err)}
		}
	}
	if v, ok := hru.mutation.LinkState(); ok {
		if err := hostnicresource.LinkStateValidator(v); err != nil {
			return &ValidationError{Name: "link_state", err: fmt.Errorf(`ent: validator failed for field "HostnicResource.link_state": %w`, err)}
		}
	}
	if _, ok := hru.mutation.HostID(); hru.mutation.HostCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HostnicResource.host"`)
	}
	return nil
}

func (hru *HostnicResourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(hostnicresource.Table, hostnicresource.Columns, sqlgraph.NewFieldSpec(hostnicresource.FieldID, field.TypeInt))
	if ps := hru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hru.mutation.ResourceID(); ok {
		_spec.SetField(hostnicresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := hru.mutation.Kind(); ok {
		_spec.SetField(hostnicresource.FieldKind, field.TypeString, value)
	}
	if hru.mutation.KindCleared() {
		_spec.ClearField(hostnicresource.FieldKind, field.TypeString)
	}
	if value, ok := hru.mutation.Description(); ok {
		_spec.SetField(hostnicresource.FieldDescription, field.TypeString, value)
	}
	if hru.mutation.DescriptionCleared() {
		_spec.ClearField(hostnicresource.FieldDescription, field.TypeString)
	}
	if value, ok := hru.mutation.DesiredState(); ok {
		_spec.SetField(hostnicresource.FieldDesiredState, field.TypeEnum, value)
	}
	if hru.mutation.DesiredStateCleared() {
		_spec.ClearField(hostnicresource.FieldDesiredState, field.TypeEnum)
	}
	if value, ok := hru.mutation.CurrentState(); ok {
		_spec.SetField(hostnicresource.FieldCurrentState, field.TypeEnum, value)
	}
	if hru.mutation.CurrentStateCleared() {
		_spec.ClearField(hostnicresource.FieldCurrentState, field.TypeEnum)
	}
	if value, ok := hru.mutation.ProviderStatus(); ok {
		_spec.SetField(hostnicresource.FieldProviderStatus, field.TypeString, value)
	}
	if hru.mutation.ProviderStatusCleared() {
		_spec.ClearField(hostnicresource.FieldProviderStatus, field.TypeString)
	}
	if value, ok := hru.mutation.Name(); ok {
		_spec.SetField(hostnicresource.FieldName, field.TypeString, value)
	}
	if hru.mutation.NameCleared() {
		_spec.ClearField(hostnicresource.FieldName, field.TypeString)
	}
	if value, ok := hru.mutation.PciIdentifier(); ok {
		_spec.SetField(hostnicresource.FieldPciIdentifier, field.TypeString, value)
	}
	if hru.mutation.PciIdentifierCleared() {
		_spec.ClearField(hostnicresource.FieldPciIdentifier, field.TypeString)
	}
	if value, ok := hru.mutation.MACAddr(); ok {
		_spec.SetField(hostnicresource.FieldMACAddr, field.TypeString, value)
	}
	if hru.mutation.MACAddrCleared() {
		_spec.ClearField(hostnicresource.FieldMACAddr, field.TypeString)
	}
	if value, ok := hru.mutation.SriovEnabled(); ok {
		_spec.SetField(hostnicresource.FieldSriovEnabled, field.TypeBool, value)
	}
	if hru.mutation.SriovEnabledCleared() {
		_spec.ClearField(hostnicresource.FieldSriovEnabled, field.TypeBool)
	}
	if value, ok := hru.mutation.SriovVfsNum(); ok {
		_spec.SetField(hostnicresource.FieldSriovVfsNum, field.TypeUint32, value)
	}
	if value, ok := hru.mutation.AddedSriovVfsNum(); ok {
		_spec.AddField(hostnicresource.FieldSriovVfsNum, field.TypeUint32, value)
	}
	if hru.mutation.SriovVfsNumCleared() {
		_spec.ClearField(hostnicresource.FieldSriovVfsNum, field.TypeUint32)
	}
	if value, ok := hru.mutation.SriovVfsTotal(); ok {
		_spec.SetField(hostnicresource.FieldSriovVfsTotal, field.TypeUint32, value)
	}
	if value, ok := hru.mutation.AddedSriovVfsTotal(); ok {
		_spec.AddField(hostnicresource.FieldSriovVfsTotal, field.TypeUint32, value)
	}
	if hru.mutation.SriovVfsTotalCleared() {
		_spec.ClearField(hostnicresource.FieldSriovVfsTotal, field.TypeUint32)
	}
	if value, ok := hru.mutation.PeerName(); ok {
		_spec.SetField(hostnicresource.FieldPeerName, field.TypeString, value)
	}
	if hru.mutation.PeerNameCleared() {
		_spec.ClearField(hostnicresource.FieldPeerName, field.TypeString)
	}
	if value, ok := hru.mutation.PeerDescription(); ok {
		_spec.SetField(hostnicresource.FieldPeerDescription, field.TypeString, value)
	}
	if hru.mutation.PeerDescriptionCleared() {
		_spec.ClearField(hostnicresource.FieldPeerDescription, field.TypeString)
	}
	if value, ok := hru.mutation.PeerMAC(); ok {
		_spec.SetField(hostnicresource.FieldPeerMAC, field.TypeString, value)
	}
	if hru.mutation.PeerMACCleared() {
		_spec.ClearField(hostnicresource.FieldPeerMAC, field.TypeString)
	}
	if value, ok := hru.mutation.PeerMgmtIP(); ok {
		_spec.SetField(hostnicresource.FieldPeerMgmtIP, field.TypeString, value)
	}
	if hru.mutation.PeerMgmtIPCleared() {
		_spec.ClearField(hostnicresource.FieldPeerMgmtIP, field.TypeString)
	}
	if value, ok := hru.mutation.PeerPort(); ok {
		_spec.SetField(hostnicresource.FieldPeerPort, field.TypeString, value)
	}
	if hru.mutation.PeerPortCleared() {
		_spec.ClearField(hostnicresource.FieldPeerPort, field.TypeString)
	}
	if value, ok := hru.mutation.SupportedLinkMode(); ok {
		_spec.SetField(hostnicresource.FieldSupportedLinkMode, field.TypeString, value)
	}
	if hru.mutation.SupportedLinkModeCleared() {
		_spec.ClearField(hostnicresource.FieldSupportedLinkMode, field.TypeString)
	}
	if value, ok := hru.mutation.AdvertisingLinkMode(); ok {
		_spec.SetField(hostnicresource.FieldAdvertisingLinkMode, field.TypeString, value)
	}
	if hru.mutation.AdvertisingLinkModeCleared() {
		_spec.ClearField(hostnicresource.FieldAdvertisingLinkMode, field.TypeString)
	}
	if value, ok := hru.mutation.CurrentSpeedBps(); ok {
		_spec.SetField(hostnicresource.FieldCurrentSpeedBps, field.TypeUint64, value)
	}
	if value, ok := hru.mutation.AddedCurrentSpeedBps(); ok {
		_spec.AddField(hostnicresource.FieldCurrentSpeedBps, field.TypeUint64, value)
	}
	if hru.mutation.CurrentSpeedBpsCleared() {
		_spec.ClearField(hostnicresource.FieldCurrentSpeedBps, field.TypeUint64)
	}
	if value, ok := hru.mutation.CurrentDuplex(); ok {
		_spec.SetField(hostnicresource.FieldCurrentDuplex, field.TypeString, value)
	}
	if hru.mutation.CurrentDuplexCleared() {
		_spec.ClearField(hostnicresource.FieldCurrentDuplex, field.TypeString)
	}
	if value, ok := hru.mutation.Features(); ok {
		_spec.SetField(hostnicresource.FieldFeatures, field.TypeString, value)
	}
	if hru.mutation.FeaturesCleared() {
		_spec.ClearField(hostnicresource.FieldFeatures, field.TypeString)
	}
	if value, ok := hru.mutation.Mtu(); ok {
		_spec.SetField(hostnicresource.FieldMtu, field.TypeUint32, value)
	}
	if value, ok := hru.mutation.AddedMtu(); ok {
		_spec.AddField(hostnicresource.FieldMtu, field.TypeUint32, value)
	}
	if hru.mutation.MtuCleared() {
		_spec.ClearField(hostnicresource.FieldMtu, field.TypeUint32)
	}
	if value, ok := hru.mutation.LinkState(); ok {
		_spec.SetField(hostnicresource.FieldLinkState, field.TypeEnum, value)
	}
	if hru.mutation.LinkStateCleared() {
		_spec.ClearField(hostnicresource.FieldLinkState, field.TypeEnum)
	}
	if value, ok := hru.mutation.BmcInterface(); ok {
		_spec.SetField(hostnicresource.FieldBmcInterface, field.TypeBool, value)
	}
	if hru.mutation.BmcInterfaceCleared() {
		_spec.ClearField(hostnicresource.FieldBmcInterface, field.TypeBool)
	}
	if hru.mutation.SiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostnicresource.SiteTable,
			Columns: []string{hostnicresource.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hru.mutation.SiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostnicresource.SiteTable,
			Columns: []string{hostnicresource.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hru.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostnicresource.ProviderTable,
			Columns: []string{hostnicresource.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hru.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostnicresource.ProviderTable,
			Columns: []string{hostnicresource.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hru.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostnicresource.ProjectTable,
			Columns: []string{hostnicresource.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hru.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostnicresource.ProjectTable,
			Columns: []string{hostnicresource.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hru.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostnicresource.HostTable,
			Columns: []string{hostnicresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hru.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostnicresource.HostTable,
			Columns: []string{hostnicresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hostnicresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hru.mutation.done = true
	return n, nil
}

// HostnicResourceUpdateOne is the builder for updating a single HostnicResource entity.
type HostnicResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HostnicResourceMutation
}

// SetResourceID sets the "resource_id" field.
func (hruo *HostnicResourceUpdateOne) SetResourceID(s string) *HostnicResourceUpdateOne {
	hruo.mutation.SetResourceID(s)
	return hruo
}

// SetKind sets the "kind" field.
func (hruo *HostnicResourceUpdateOne) SetKind(s string) *HostnicResourceUpdateOne {
	hruo.mutation.SetKind(s)
	return hruo
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (hruo *HostnicResourceUpdateOne) SetNillableKind(s *string) *HostnicResourceUpdateOne {
	if s != nil {
		hruo.SetKind(*s)
	}
	return hruo
}

// ClearKind clears the value of the "kind" field.
func (hruo *HostnicResourceUpdateOne) ClearKind() *HostnicResourceUpdateOne {
	hruo.mutation.ClearKind()
	return hruo
}

// SetDescription sets the "description" field.
func (hruo *HostnicResourceUpdateOne) SetDescription(s string) *HostnicResourceUpdateOne {
	hruo.mutation.SetDescription(s)
	return hruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (hruo *HostnicResourceUpdateOne) SetNillableDescription(s *string) *HostnicResourceUpdateOne {
	if s != nil {
		hruo.SetDescription(*s)
	}
	return hruo
}

// ClearDescription clears the value of the "description" field.
func (hruo *HostnicResourceUpdateOne) ClearDescription() *HostnicResourceUpdateOne {
	hruo.mutation.ClearDescription()
	return hruo
}

// SetDesiredState sets the "desired_state" field.
func (hruo *HostnicResourceUpdateOne) SetDesiredState(hs hostnicresource.DesiredState) *HostnicResourceUpdateOne {
	hruo.mutation.SetDesiredState(hs)
	return hruo
}

// SetNillableDesiredState sets the "desired_state" field if the given value is not nil.
func (hruo *HostnicResourceUpdateOne) SetNillableDesiredState(hs *hostnicresource.DesiredState) *HostnicResourceUpdateOne {
	if hs != nil {
		hruo.SetDesiredState(*hs)
	}
	return hruo
}

// ClearDesiredState clears the value of the "desired_state" field.
func (hruo *HostnicResourceUpdateOne) ClearDesiredState() *HostnicResourceUpdateOne {
	hruo.mutation.ClearDesiredState()
	return hruo
}

// SetCurrentState sets the "current_state" field.
func (hruo *HostnicResourceUpdateOne) SetCurrentState(hs hostnicresource.CurrentState) *HostnicResourceUpdateOne {
	hruo.mutation.SetCurrentState(hs)
	return hruo
}

// SetNillableCurrentState sets the "current_state" field if the given value is not nil.
func (hruo *HostnicResourceUpdateOne) SetNillableCurrentState(hs *hostnicresource.CurrentState) *HostnicResourceUpdateOne {
	if hs != nil {
		hruo.SetCurrentState(*hs)
	}
	return hruo
}

// ClearCurrentState clears the value of the "current_state" field.
func (hruo *HostnicResourceUpdateOne) ClearCurrentState() *HostnicResourceUpdateOne {
	hruo.mutation.ClearCurrentState()
	return hruo
}

// SetProviderStatus sets the "provider_status" field.
func (hruo *HostnicResourceUpdateOne) SetProviderStatus(s string) *HostnicResourceUpdateOne {
	hruo.mutation.SetProviderStatus(s)
	return hruo
}

// SetNillableProviderStatus sets the "provider_status" field if the given value is not nil.
func (hruo *HostnicResourceUpdateOne) SetNillableProviderStatus(s *string) *HostnicResourceUpdateOne {
	if s != nil {
		hruo.SetProviderStatus(*s)
	}
	return hruo
}

// ClearProviderStatus clears the value of the "provider_status" field.
func (hruo *HostnicResourceUpdateOne) ClearProviderStatus() *HostnicResourceUpdateOne {
	hruo.mutation.ClearProviderStatus()
	return hruo
}

// SetName sets the "name" field.
func (hruo *HostnicResourceUpdateOne) SetName(s string) *HostnicResourceUpdateOne {
	hruo.mutation.SetName(s)
	return hruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (hruo *HostnicResourceUpdateOne) SetNillableName(s *string) *HostnicResourceUpdateOne {
	if s != nil {
		hruo.SetName(*s)
	}
	return hruo
}

// ClearName clears the value of the "name" field.
func (hruo *HostnicResourceUpdateOne) ClearName() *HostnicResourceUpdateOne {
	hruo.mutation.ClearName()
	return hruo
}

// SetPciIdentifier sets the "pci_identifier" field.
func (hruo *HostnicResourceUpdateOne) SetPciIdentifier(s string) *HostnicResourceUpdateOne {
	hruo.mutation.SetPciIdentifier(s)
	return hruo
}

// SetNillablePciIdentifier sets the "pci_identifier" field if the given value is not nil.
func (hruo *HostnicResourceUpdateOne) SetNillablePciIdentifier(s *string) *HostnicResourceUpdateOne {
	if s != nil {
		hruo.SetPciIdentifier(*s)
	}
	return hruo
}

// ClearPciIdentifier clears the value of the "pci_identifier" field.
func (hruo *HostnicResourceUpdateOne) ClearPciIdentifier() *HostnicResourceUpdateOne {
	hruo.mutation.ClearPciIdentifier()
	return hruo
}

// SetMACAddr sets the "mac_addr" field.
func (hruo *HostnicResourceUpdateOne) SetMACAddr(s string) *HostnicResourceUpdateOne {
	hruo.mutation.SetMACAddr(s)
	return hruo
}

// SetNillableMACAddr sets the "mac_addr" field if the given value is not nil.
func (hruo *HostnicResourceUpdateOne) SetNillableMACAddr(s *string) *HostnicResourceUpdateOne {
	if s != nil {
		hruo.SetMACAddr(*s)
	}
	return hruo
}

// ClearMACAddr clears the value of the "mac_addr" field.
func (hruo *HostnicResourceUpdateOne) ClearMACAddr() *HostnicResourceUpdateOne {
	hruo.mutation.ClearMACAddr()
	return hruo
}

// SetSriovEnabled sets the "sriov_enabled" field.
func (hruo *HostnicResourceUpdateOne) SetSriovEnabled(b bool) *HostnicResourceUpdateOne {
	hruo.mutation.SetSriovEnabled(b)
	return hruo
}

// SetNillableSriovEnabled sets the "sriov_enabled" field if the given value is not nil.
func (hruo *HostnicResourceUpdateOne) SetNillableSriovEnabled(b *bool) *HostnicResourceUpdateOne {
	if b != nil {
		hruo.SetSriovEnabled(*b)
	}
	return hruo
}

// ClearSriovEnabled clears the value of the "sriov_enabled" field.
func (hruo *HostnicResourceUpdateOne) ClearSriovEnabled() *HostnicResourceUpdateOne {
	hruo.mutation.ClearSriovEnabled()
	return hruo
}

// SetSriovVfsNum sets the "sriov_vfs_num" field.
func (hruo *HostnicResourceUpdateOne) SetSriovVfsNum(u uint32) *HostnicResourceUpdateOne {
	hruo.mutation.ResetSriovVfsNum()
	hruo.mutation.SetSriovVfsNum(u)
	return hruo
}

// SetNillableSriovVfsNum sets the "sriov_vfs_num" field if the given value is not nil.
func (hruo *HostnicResourceUpdateOne) SetNillableSriovVfsNum(u *uint32) *HostnicResourceUpdateOne {
	if u != nil {
		hruo.SetSriovVfsNum(*u)
	}
	return hruo
}

// AddSriovVfsNum adds u to the "sriov_vfs_num" field.
func (hruo *HostnicResourceUpdateOne) AddSriovVfsNum(u int32) *HostnicResourceUpdateOne {
	hruo.mutation.AddSriovVfsNum(u)
	return hruo
}

// ClearSriovVfsNum clears the value of the "sriov_vfs_num" field.
func (hruo *HostnicResourceUpdateOne) ClearSriovVfsNum() *HostnicResourceUpdateOne {
	hruo.mutation.ClearSriovVfsNum()
	return hruo
}

// SetSriovVfsTotal sets the "sriov_vfs_total" field.
func (hruo *HostnicResourceUpdateOne) SetSriovVfsTotal(u uint32) *HostnicResourceUpdateOne {
	hruo.mutation.ResetSriovVfsTotal()
	hruo.mutation.SetSriovVfsTotal(u)
	return hruo
}

// SetNillableSriovVfsTotal sets the "sriov_vfs_total" field if the given value is not nil.
func (hruo *HostnicResourceUpdateOne) SetNillableSriovVfsTotal(u *uint32) *HostnicResourceUpdateOne {
	if u != nil {
		hruo.SetSriovVfsTotal(*u)
	}
	return hruo
}

// AddSriovVfsTotal adds u to the "sriov_vfs_total" field.
func (hruo *HostnicResourceUpdateOne) AddSriovVfsTotal(u int32) *HostnicResourceUpdateOne {
	hruo.mutation.AddSriovVfsTotal(u)
	return hruo
}

// ClearSriovVfsTotal clears the value of the "sriov_vfs_total" field.
func (hruo *HostnicResourceUpdateOne) ClearSriovVfsTotal() *HostnicResourceUpdateOne {
	hruo.mutation.ClearSriovVfsTotal()
	return hruo
}

// SetPeerName sets the "peer_name" field.
func (hruo *HostnicResourceUpdateOne) SetPeerName(s string) *HostnicResourceUpdateOne {
	hruo.mutation.SetPeerName(s)
	return hruo
}

// SetNillablePeerName sets the "peer_name" field if the given value is not nil.
func (hruo *HostnicResourceUpdateOne) SetNillablePeerName(s *string) *HostnicResourceUpdateOne {
	if s != nil {
		hruo.SetPeerName(*s)
	}
	return hruo
}

// ClearPeerName clears the value of the "peer_name" field.
func (hruo *HostnicResourceUpdateOne) ClearPeerName() *HostnicResourceUpdateOne {
	hruo.mutation.ClearPeerName()
	return hruo
}

// SetPeerDescription sets the "peer_description" field.
func (hruo *HostnicResourceUpdateOne) SetPeerDescription(s string) *HostnicResourceUpdateOne {
	hruo.mutation.SetPeerDescription(s)
	return hruo
}

// SetNillablePeerDescription sets the "peer_description" field if the given value is not nil.
func (hruo *HostnicResourceUpdateOne) SetNillablePeerDescription(s *string) *HostnicResourceUpdateOne {
	if s != nil {
		hruo.SetPeerDescription(*s)
	}
	return hruo
}

// ClearPeerDescription clears the value of the "peer_description" field.
func (hruo *HostnicResourceUpdateOne) ClearPeerDescription() *HostnicResourceUpdateOne {
	hruo.mutation.ClearPeerDescription()
	return hruo
}

// SetPeerMAC sets the "peer_mac" field.
func (hruo *HostnicResourceUpdateOne) SetPeerMAC(s string) *HostnicResourceUpdateOne {
	hruo.mutation.SetPeerMAC(s)
	return hruo
}

// SetNillablePeerMAC sets the "peer_mac" field if the given value is not nil.
func (hruo *HostnicResourceUpdateOne) SetNillablePeerMAC(s *string) *HostnicResourceUpdateOne {
	if s != nil {
		hruo.SetPeerMAC(*s)
	}
	return hruo
}

// ClearPeerMAC clears the value of the "peer_mac" field.
func (hruo *HostnicResourceUpdateOne) ClearPeerMAC() *HostnicResourceUpdateOne {
	hruo.mutation.ClearPeerMAC()
	return hruo
}

// SetPeerMgmtIP sets the "peer_mgmt_ip" field.
func (hruo *HostnicResourceUpdateOne) SetPeerMgmtIP(s string) *HostnicResourceUpdateOne {
	hruo.mutation.SetPeerMgmtIP(s)
	return hruo
}

// SetNillablePeerMgmtIP sets the "peer_mgmt_ip" field if the given value is not nil.
func (hruo *HostnicResourceUpdateOne) SetNillablePeerMgmtIP(s *string) *HostnicResourceUpdateOne {
	if s != nil {
		hruo.SetPeerMgmtIP(*s)
	}
	return hruo
}

// ClearPeerMgmtIP clears the value of the "peer_mgmt_ip" field.
func (hruo *HostnicResourceUpdateOne) ClearPeerMgmtIP() *HostnicResourceUpdateOne {
	hruo.mutation.ClearPeerMgmtIP()
	return hruo
}

// SetPeerPort sets the "peer_port" field.
func (hruo *HostnicResourceUpdateOne) SetPeerPort(s string) *HostnicResourceUpdateOne {
	hruo.mutation.SetPeerPort(s)
	return hruo
}

// SetNillablePeerPort sets the "peer_port" field if the given value is not nil.
func (hruo *HostnicResourceUpdateOne) SetNillablePeerPort(s *string) *HostnicResourceUpdateOne {
	if s != nil {
		hruo.SetPeerPort(*s)
	}
	return hruo
}

// ClearPeerPort clears the value of the "peer_port" field.
func (hruo *HostnicResourceUpdateOne) ClearPeerPort() *HostnicResourceUpdateOne {
	hruo.mutation.ClearPeerPort()
	return hruo
}

// SetSupportedLinkMode sets the "supported_link_mode" field.
func (hruo *HostnicResourceUpdateOne) SetSupportedLinkMode(s string) *HostnicResourceUpdateOne {
	hruo.mutation.SetSupportedLinkMode(s)
	return hruo
}

// SetNillableSupportedLinkMode sets the "supported_link_mode" field if the given value is not nil.
func (hruo *HostnicResourceUpdateOne) SetNillableSupportedLinkMode(s *string) *HostnicResourceUpdateOne {
	if s != nil {
		hruo.SetSupportedLinkMode(*s)
	}
	return hruo
}

// ClearSupportedLinkMode clears the value of the "supported_link_mode" field.
func (hruo *HostnicResourceUpdateOne) ClearSupportedLinkMode() *HostnicResourceUpdateOne {
	hruo.mutation.ClearSupportedLinkMode()
	return hruo
}

// SetAdvertisingLinkMode sets the "advertising_link_mode" field.
func (hruo *HostnicResourceUpdateOne) SetAdvertisingLinkMode(s string) *HostnicResourceUpdateOne {
	hruo.mutation.SetAdvertisingLinkMode(s)
	return hruo
}

// SetNillableAdvertisingLinkMode sets the "advertising_link_mode" field if the given value is not nil.
func (hruo *HostnicResourceUpdateOne) SetNillableAdvertisingLinkMode(s *string) *HostnicResourceUpdateOne {
	if s != nil {
		hruo.SetAdvertisingLinkMode(*s)
	}
	return hruo
}

// ClearAdvertisingLinkMode clears the value of the "advertising_link_mode" field.
func (hruo *HostnicResourceUpdateOne) ClearAdvertisingLinkMode() *HostnicResourceUpdateOne {
	hruo.mutation.ClearAdvertisingLinkMode()
	return hruo
}

// SetCurrentSpeedBps sets the "current_speed_bps" field.
func (hruo *HostnicResourceUpdateOne) SetCurrentSpeedBps(u uint64) *HostnicResourceUpdateOne {
	hruo.mutation.ResetCurrentSpeedBps()
	hruo.mutation.SetCurrentSpeedBps(u)
	return hruo
}

// SetNillableCurrentSpeedBps sets the "current_speed_bps" field if the given value is not nil.
func (hruo *HostnicResourceUpdateOne) SetNillableCurrentSpeedBps(u *uint64) *HostnicResourceUpdateOne {
	if u != nil {
		hruo.SetCurrentSpeedBps(*u)
	}
	return hruo
}

// AddCurrentSpeedBps adds u to the "current_speed_bps" field.
func (hruo *HostnicResourceUpdateOne) AddCurrentSpeedBps(u int64) *HostnicResourceUpdateOne {
	hruo.mutation.AddCurrentSpeedBps(u)
	return hruo
}

// ClearCurrentSpeedBps clears the value of the "current_speed_bps" field.
func (hruo *HostnicResourceUpdateOne) ClearCurrentSpeedBps() *HostnicResourceUpdateOne {
	hruo.mutation.ClearCurrentSpeedBps()
	return hruo
}

// SetCurrentDuplex sets the "current_duplex" field.
func (hruo *HostnicResourceUpdateOne) SetCurrentDuplex(s string) *HostnicResourceUpdateOne {
	hruo.mutation.SetCurrentDuplex(s)
	return hruo
}

// SetNillableCurrentDuplex sets the "current_duplex" field if the given value is not nil.
func (hruo *HostnicResourceUpdateOne) SetNillableCurrentDuplex(s *string) *HostnicResourceUpdateOne {
	if s != nil {
		hruo.SetCurrentDuplex(*s)
	}
	return hruo
}

// ClearCurrentDuplex clears the value of the "current_duplex" field.
func (hruo *HostnicResourceUpdateOne) ClearCurrentDuplex() *HostnicResourceUpdateOne {
	hruo.mutation.ClearCurrentDuplex()
	return hruo
}

// SetFeatures sets the "features" field.
func (hruo *HostnicResourceUpdateOne) SetFeatures(s string) *HostnicResourceUpdateOne {
	hruo.mutation.SetFeatures(s)
	return hruo
}

// SetNillableFeatures sets the "features" field if the given value is not nil.
func (hruo *HostnicResourceUpdateOne) SetNillableFeatures(s *string) *HostnicResourceUpdateOne {
	if s != nil {
		hruo.SetFeatures(*s)
	}
	return hruo
}

// ClearFeatures clears the value of the "features" field.
func (hruo *HostnicResourceUpdateOne) ClearFeatures() *HostnicResourceUpdateOne {
	hruo.mutation.ClearFeatures()
	return hruo
}

// SetMtu sets the "mtu" field.
func (hruo *HostnicResourceUpdateOne) SetMtu(u uint32) *HostnicResourceUpdateOne {
	hruo.mutation.ResetMtu()
	hruo.mutation.SetMtu(u)
	return hruo
}

// SetNillableMtu sets the "mtu" field if the given value is not nil.
func (hruo *HostnicResourceUpdateOne) SetNillableMtu(u *uint32) *HostnicResourceUpdateOne {
	if u != nil {
		hruo.SetMtu(*u)
	}
	return hruo
}

// AddMtu adds u to the "mtu" field.
func (hruo *HostnicResourceUpdateOne) AddMtu(u int32) *HostnicResourceUpdateOne {
	hruo.mutation.AddMtu(u)
	return hruo
}

// ClearMtu clears the value of the "mtu" field.
func (hruo *HostnicResourceUpdateOne) ClearMtu() *HostnicResourceUpdateOne {
	hruo.mutation.ClearMtu()
	return hruo
}

// SetLinkState sets the "link_state" field.
func (hruo *HostnicResourceUpdateOne) SetLinkState(hs hostnicresource.LinkState) *HostnicResourceUpdateOne {
	hruo.mutation.SetLinkState(hs)
	return hruo
}

// SetNillableLinkState sets the "link_state" field if the given value is not nil.
func (hruo *HostnicResourceUpdateOne) SetNillableLinkState(hs *hostnicresource.LinkState) *HostnicResourceUpdateOne {
	if hs != nil {
		hruo.SetLinkState(*hs)
	}
	return hruo
}

// ClearLinkState clears the value of the "link_state" field.
func (hruo *HostnicResourceUpdateOne) ClearLinkState() *HostnicResourceUpdateOne {
	hruo.mutation.ClearLinkState()
	return hruo
}

// SetBmcInterface sets the "bmc_interface" field.
func (hruo *HostnicResourceUpdateOne) SetBmcInterface(b bool) *HostnicResourceUpdateOne {
	hruo.mutation.SetBmcInterface(b)
	return hruo
}

// SetNillableBmcInterface sets the "bmc_interface" field if the given value is not nil.
func (hruo *HostnicResourceUpdateOne) SetNillableBmcInterface(b *bool) *HostnicResourceUpdateOne {
	if b != nil {
		hruo.SetBmcInterface(*b)
	}
	return hruo
}

// ClearBmcInterface clears the value of the "bmc_interface" field.
func (hruo *HostnicResourceUpdateOne) ClearBmcInterface() *HostnicResourceUpdateOne {
	hruo.mutation.ClearBmcInterface()
	return hruo
}

// SetSiteID sets the "site" edge to the SiteResource entity by ID.
func (hruo *HostnicResourceUpdateOne) SetSiteID(id int) *HostnicResourceUpdateOne {
	hruo.mutation.SetSiteID(id)
	return hruo
}

// SetNillableSiteID sets the "site" edge to the SiteResource entity by ID if the given value is not nil.
func (hruo *HostnicResourceUpdateOne) SetNillableSiteID(id *int) *HostnicResourceUpdateOne {
	if id != nil {
		hruo = hruo.SetSiteID(*id)
	}
	return hruo
}

// SetSite sets the "site" edge to the SiteResource entity.
func (hruo *HostnicResourceUpdateOne) SetSite(s *SiteResource) *HostnicResourceUpdateOne {
	return hruo.SetSiteID(s.ID)
}

// SetProviderID sets the "provider" edge to the ProviderResource entity by ID.
func (hruo *HostnicResourceUpdateOne) SetProviderID(id int) *HostnicResourceUpdateOne {
	hruo.mutation.SetProviderID(id)
	return hruo
}

// SetNillableProviderID sets the "provider" edge to the ProviderResource entity by ID if the given value is not nil.
func (hruo *HostnicResourceUpdateOne) SetNillableProviderID(id *int) *HostnicResourceUpdateOne {
	if id != nil {
		hruo = hruo.SetProviderID(*id)
	}
	return hruo
}

// SetProvider sets the "provider" edge to the ProviderResource entity.
func (hruo *HostnicResourceUpdateOne) SetProvider(p *ProviderResource) *HostnicResourceUpdateOne {
	return hruo.SetProviderID(p.ID)
}

// SetProjectID sets the "project" edge to the ProjectResource entity by ID.
func (hruo *HostnicResourceUpdateOne) SetProjectID(id int) *HostnicResourceUpdateOne {
	hruo.mutation.SetProjectID(id)
	return hruo
}

// SetNillableProjectID sets the "project" edge to the ProjectResource entity by ID if the given value is not nil.
func (hruo *HostnicResourceUpdateOne) SetNillableProjectID(id *int) *HostnicResourceUpdateOne {
	if id != nil {
		hruo = hruo.SetProjectID(*id)
	}
	return hruo
}

// SetProject sets the "project" edge to the ProjectResource entity.
func (hruo *HostnicResourceUpdateOne) SetProject(p *ProjectResource) *HostnicResourceUpdateOne {
	return hruo.SetProjectID(p.ID)
}

// SetHostID sets the "host" edge to the HostResource entity by ID.
func (hruo *HostnicResourceUpdateOne) SetHostID(id int) *HostnicResourceUpdateOne {
	hruo.mutation.SetHostID(id)
	return hruo
}

// SetHost sets the "host" edge to the HostResource entity.
func (hruo *HostnicResourceUpdateOne) SetHost(h *HostResource) *HostnicResourceUpdateOne {
	return hruo.SetHostID(h.ID)
}

// Mutation returns the HostnicResourceMutation object of the builder.
func (hruo *HostnicResourceUpdateOne) Mutation() *HostnicResourceMutation {
	return hruo.mutation
}

// ClearSite clears the "site" edge to the SiteResource entity.
func (hruo *HostnicResourceUpdateOne) ClearSite() *HostnicResourceUpdateOne {
	hruo.mutation.ClearSite()
	return hruo
}

// ClearProvider clears the "provider" edge to the ProviderResource entity.
func (hruo *HostnicResourceUpdateOne) ClearProvider() *HostnicResourceUpdateOne {
	hruo.mutation.ClearProvider()
	return hruo
}

// ClearProject clears the "project" edge to the ProjectResource entity.
func (hruo *HostnicResourceUpdateOne) ClearProject() *HostnicResourceUpdateOne {
	hruo.mutation.ClearProject()
	return hruo
}

// ClearHost clears the "host" edge to the HostResource entity.
func (hruo *HostnicResourceUpdateOne) ClearHost() *HostnicResourceUpdateOne {
	hruo.mutation.ClearHost()
	return hruo
}

// Where appends a list predicates to the HostnicResourceUpdate builder.
func (hruo *HostnicResourceUpdateOne) Where(ps ...predicate.HostnicResource) *HostnicResourceUpdateOne {
	hruo.mutation.Where(ps...)
	return hruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hruo *HostnicResourceUpdateOne) Select(field string, fields ...string) *HostnicResourceUpdateOne {
	hruo.fields = append([]string{field}, fields...)
	return hruo
}

// Save executes the query and returns the updated HostnicResource entity.
func (hruo *HostnicResourceUpdateOne) Save(ctx context.Context) (*HostnicResource, error) {
	return withHooks[*HostnicResource, HostnicResourceMutation](ctx, hruo.sqlSave, hruo.mutation, hruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hruo *HostnicResourceUpdateOne) SaveX(ctx context.Context) *HostnicResource {
	node, err := hruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hruo *HostnicResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := hruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hruo *HostnicResourceUpdateOne) ExecX(ctx context.Context) {
	if err := hruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hruo *HostnicResourceUpdateOne) check() error {
	if v, ok := hruo.mutation.DesiredState(); ok {
		if err := hostnicresource.DesiredStateValidator(v); err != nil {
			return &ValidationError{Name: "desired_state", err: fmt.Errorf(`ent: validator failed for field "HostnicResource.desired_state": %w`, err)}
		}
	}
	if v, ok := hruo.mutation.CurrentState(); ok {
		if err := hostnicresource.CurrentStateValidator(v); err != nil {
			return &ValidationError{Name: "current_state", err: fmt.Errorf(`ent: validator failed for field "HostnicResource.current_state": %w`, err)}
		}
	}
	if v, ok := hruo.mutation.LinkState(); ok {
		if err := hostnicresource.LinkStateValidator(v); err != nil {
			return &ValidationError{Name: "link_state", err: fmt.Errorf(`ent: validator failed for field "HostnicResource.link_state": %w`, err)}
		}
	}
	if _, ok := hruo.mutation.HostID(); hruo.mutation.HostCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HostnicResource.host"`)
	}
	return nil
}

func (hruo *HostnicResourceUpdateOne) sqlSave(ctx context.Context) (_node *HostnicResource, err error) {
	if err := hruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hostnicresource.Table, hostnicresource.Columns, sqlgraph.NewFieldSpec(hostnicresource.FieldID, field.TypeInt))
	id, ok := hruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HostnicResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hostnicresource.FieldID)
		for _, f := range fields {
			if !hostnicresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hostnicresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hruo.mutation.ResourceID(); ok {
		_spec.SetField(hostnicresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := hruo.mutation.Kind(); ok {
		_spec.SetField(hostnicresource.FieldKind, field.TypeString, value)
	}
	if hruo.mutation.KindCleared() {
		_spec.ClearField(hostnicresource.FieldKind, field.TypeString)
	}
	if value, ok := hruo.mutation.Description(); ok {
		_spec.SetField(hostnicresource.FieldDescription, field.TypeString, value)
	}
	if hruo.mutation.DescriptionCleared() {
		_spec.ClearField(hostnicresource.FieldDescription, field.TypeString)
	}
	if value, ok := hruo.mutation.DesiredState(); ok {
		_spec.SetField(hostnicresource.FieldDesiredState, field.TypeEnum, value)
	}
	if hruo.mutation.DesiredStateCleared() {
		_spec.ClearField(hostnicresource.FieldDesiredState, field.TypeEnum)
	}
	if value, ok := hruo.mutation.CurrentState(); ok {
		_spec.SetField(hostnicresource.FieldCurrentState, field.TypeEnum, value)
	}
	if hruo.mutation.CurrentStateCleared() {
		_spec.ClearField(hostnicresource.FieldCurrentState, field.TypeEnum)
	}
	if value, ok := hruo.mutation.ProviderStatus(); ok {
		_spec.SetField(hostnicresource.FieldProviderStatus, field.TypeString, value)
	}
	if hruo.mutation.ProviderStatusCleared() {
		_spec.ClearField(hostnicresource.FieldProviderStatus, field.TypeString)
	}
	if value, ok := hruo.mutation.Name(); ok {
		_spec.SetField(hostnicresource.FieldName, field.TypeString, value)
	}
	if hruo.mutation.NameCleared() {
		_spec.ClearField(hostnicresource.FieldName, field.TypeString)
	}
	if value, ok := hruo.mutation.PciIdentifier(); ok {
		_spec.SetField(hostnicresource.FieldPciIdentifier, field.TypeString, value)
	}
	if hruo.mutation.PciIdentifierCleared() {
		_spec.ClearField(hostnicresource.FieldPciIdentifier, field.TypeString)
	}
	if value, ok := hruo.mutation.MACAddr(); ok {
		_spec.SetField(hostnicresource.FieldMACAddr, field.TypeString, value)
	}
	if hruo.mutation.MACAddrCleared() {
		_spec.ClearField(hostnicresource.FieldMACAddr, field.TypeString)
	}
	if value, ok := hruo.mutation.SriovEnabled(); ok {
		_spec.SetField(hostnicresource.FieldSriovEnabled, field.TypeBool, value)
	}
	if hruo.mutation.SriovEnabledCleared() {
		_spec.ClearField(hostnicresource.FieldSriovEnabled, field.TypeBool)
	}
	if value, ok := hruo.mutation.SriovVfsNum(); ok {
		_spec.SetField(hostnicresource.FieldSriovVfsNum, field.TypeUint32, value)
	}
	if value, ok := hruo.mutation.AddedSriovVfsNum(); ok {
		_spec.AddField(hostnicresource.FieldSriovVfsNum, field.TypeUint32, value)
	}
	if hruo.mutation.SriovVfsNumCleared() {
		_spec.ClearField(hostnicresource.FieldSriovVfsNum, field.TypeUint32)
	}
	if value, ok := hruo.mutation.SriovVfsTotal(); ok {
		_spec.SetField(hostnicresource.FieldSriovVfsTotal, field.TypeUint32, value)
	}
	if value, ok := hruo.mutation.AddedSriovVfsTotal(); ok {
		_spec.AddField(hostnicresource.FieldSriovVfsTotal, field.TypeUint32, value)
	}
	if hruo.mutation.SriovVfsTotalCleared() {
		_spec.ClearField(hostnicresource.FieldSriovVfsTotal, field.TypeUint32)
	}
	if value, ok := hruo.mutation.PeerName(); ok {
		_spec.SetField(hostnicresource.FieldPeerName, field.TypeString, value)
	}
	if hruo.mutation.PeerNameCleared() {
		_spec.ClearField(hostnicresource.FieldPeerName, field.TypeString)
	}
	if value, ok := hruo.mutation.PeerDescription(); ok {
		_spec.SetField(hostnicresource.FieldPeerDescription, field.TypeString, value)
	}
	if hruo.mutation.PeerDescriptionCleared() {
		_spec.ClearField(hostnicresource.FieldPeerDescription, field.TypeString)
	}
	if value, ok := hruo.mutation.PeerMAC(); ok {
		_spec.SetField(hostnicresource.FieldPeerMAC, field.TypeString, value)
	}
	if hruo.mutation.PeerMACCleared() {
		_spec.ClearField(hostnicresource.FieldPeerMAC, field.TypeString)
	}
	if value, ok := hruo.mutation.PeerMgmtIP(); ok {
		_spec.SetField(hostnicresource.FieldPeerMgmtIP, field.TypeString, value)
	}
	if hruo.mutation.PeerMgmtIPCleared() {
		_spec.ClearField(hostnicresource.FieldPeerMgmtIP, field.TypeString)
	}
	if value, ok := hruo.mutation.PeerPort(); ok {
		_spec.SetField(hostnicresource.FieldPeerPort, field.TypeString, value)
	}
	if hruo.mutation.PeerPortCleared() {
		_spec.ClearField(hostnicresource.FieldPeerPort, field.TypeString)
	}
	if value, ok := hruo.mutation.SupportedLinkMode(); ok {
		_spec.SetField(hostnicresource.FieldSupportedLinkMode, field.TypeString, value)
	}
	if hruo.mutation.SupportedLinkModeCleared() {
		_spec.ClearField(hostnicresource.FieldSupportedLinkMode, field.TypeString)
	}
	if value, ok := hruo.mutation.AdvertisingLinkMode(); ok {
		_spec.SetField(hostnicresource.FieldAdvertisingLinkMode, field.TypeString, value)
	}
	if hruo.mutation.AdvertisingLinkModeCleared() {
		_spec.ClearField(hostnicresource.FieldAdvertisingLinkMode, field.TypeString)
	}
	if value, ok := hruo.mutation.CurrentSpeedBps(); ok {
		_spec.SetField(hostnicresource.FieldCurrentSpeedBps, field.TypeUint64, value)
	}
	if value, ok := hruo.mutation.AddedCurrentSpeedBps(); ok {
		_spec.AddField(hostnicresource.FieldCurrentSpeedBps, field.TypeUint64, value)
	}
	if hruo.mutation.CurrentSpeedBpsCleared() {
		_spec.ClearField(hostnicresource.FieldCurrentSpeedBps, field.TypeUint64)
	}
	if value, ok := hruo.mutation.CurrentDuplex(); ok {
		_spec.SetField(hostnicresource.FieldCurrentDuplex, field.TypeString, value)
	}
	if hruo.mutation.CurrentDuplexCleared() {
		_spec.ClearField(hostnicresource.FieldCurrentDuplex, field.TypeString)
	}
	if value, ok := hruo.mutation.Features(); ok {
		_spec.SetField(hostnicresource.FieldFeatures, field.TypeString, value)
	}
	if hruo.mutation.FeaturesCleared() {
		_spec.ClearField(hostnicresource.FieldFeatures, field.TypeString)
	}
	if value, ok := hruo.mutation.Mtu(); ok {
		_spec.SetField(hostnicresource.FieldMtu, field.TypeUint32, value)
	}
	if value, ok := hruo.mutation.AddedMtu(); ok {
		_spec.AddField(hostnicresource.FieldMtu, field.TypeUint32, value)
	}
	if hruo.mutation.MtuCleared() {
		_spec.ClearField(hostnicresource.FieldMtu, field.TypeUint32)
	}
	if value, ok := hruo.mutation.LinkState(); ok {
		_spec.SetField(hostnicresource.FieldLinkState, field.TypeEnum, value)
	}
	if hruo.mutation.LinkStateCleared() {
		_spec.ClearField(hostnicresource.FieldLinkState, field.TypeEnum)
	}
	if value, ok := hruo.mutation.BmcInterface(); ok {
		_spec.SetField(hostnicresource.FieldBmcInterface, field.TypeBool, value)
	}
	if hruo.mutation.BmcInterfaceCleared() {
		_spec.ClearField(hostnicresource.FieldBmcInterface, field.TypeBool)
	}
	if hruo.mutation.SiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostnicresource.SiteTable,
			Columns: []string{hostnicresource.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hruo.mutation.SiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostnicresource.SiteTable,
			Columns: []string{hostnicresource.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hruo.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostnicresource.ProviderTable,
			Columns: []string{hostnicresource.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hruo.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostnicresource.ProviderTable,
			Columns: []string{hostnicresource.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hruo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostnicresource.ProjectTable,
			Columns: []string{hostnicresource.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hruo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostnicresource.ProjectTable,
			Columns: []string{hostnicresource.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hruo.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostnicresource.HostTable,
			Columns: []string{hostnicresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hruo.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostnicresource.HostTable,
			Columns: []string{hostnicresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HostnicResource{config: hruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hostnicresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hruo.mutation.done = true
	return _node, nil
}
