// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hostresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/repeatedscheduleresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/siteresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/workloadresource"
)

// RepeatedScheduleResourceCreate is the builder for creating a RepeatedScheduleResource entity.
type RepeatedScheduleResourceCreate struct {
	config
	mutation *RepeatedScheduleResourceMutation
	hooks    []Hook
}

// SetResourceID sets the "resource_id" field.
func (rsrc *RepeatedScheduleResourceCreate) SetResourceID(s string) *RepeatedScheduleResourceCreate {
	rsrc.mutation.SetResourceID(s)
	return rsrc
}

// SetScheduleStatus sets the "schedule_status" field.
func (rsrc *RepeatedScheduleResourceCreate) SetScheduleStatus(rs repeatedscheduleresource.ScheduleStatus) *RepeatedScheduleResourceCreate {
	rsrc.mutation.SetScheduleStatus(rs)
	return rsrc
}

// SetNillableScheduleStatus sets the "schedule_status" field if the given value is not nil.
func (rsrc *RepeatedScheduleResourceCreate) SetNillableScheduleStatus(rs *repeatedscheduleresource.ScheduleStatus) *RepeatedScheduleResourceCreate {
	if rs != nil {
		rsrc.SetScheduleStatus(*rs)
	}
	return rsrc
}

// SetName sets the "name" field.
func (rsrc *RepeatedScheduleResourceCreate) SetName(s string) *RepeatedScheduleResourceCreate {
	rsrc.mutation.SetName(s)
	return rsrc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rsrc *RepeatedScheduleResourceCreate) SetNillableName(s *string) *RepeatedScheduleResourceCreate {
	if s != nil {
		rsrc.SetName(*s)
	}
	return rsrc
}

// SetDurationSeconds sets the "duration_seconds" field.
func (rsrc *RepeatedScheduleResourceCreate) SetDurationSeconds(u uint32) *RepeatedScheduleResourceCreate {
	rsrc.mutation.SetDurationSeconds(u)
	return rsrc
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (rsrc *RepeatedScheduleResourceCreate) SetNillableDurationSeconds(u *uint32) *RepeatedScheduleResourceCreate {
	if u != nil {
		rsrc.SetDurationSeconds(*u)
	}
	return rsrc
}

// SetCronMinutes sets the "cron_minutes" field.
func (rsrc *RepeatedScheduleResourceCreate) SetCronMinutes(s string) *RepeatedScheduleResourceCreate {
	rsrc.mutation.SetCronMinutes(s)
	return rsrc
}

// SetCronHours sets the "cron_hours" field.
func (rsrc *RepeatedScheduleResourceCreate) SetCronHours(s string) *RepeatedScheduleResourceCreate {
	rsrc.mutation.SetCronHours(s)
	return rsrc
}

// SetCronDayMonth sets the "cron_day_month" field.
func (rsrc *RepeatedScheduleResourceCreate) SetCronDayMonth(s string) *RepeatedScheduleResourceCreate {
	rsrc.mutation.SetCronDayMonth(s)
	return rsrc
}

// SetCronMonth sets the "cron_month" field.
func (rsrc *RepeatedScheduleResourceCreate) SetCronMonth(s string) *RepeatedScheduleResourceCreate {
	rsrc.mutation.SetCronMonth(s)
	return rsrc
}

// SetCronDayWeek sets the "cron_day_week" field.
func (rsrc *RepeatedScheduleResourceCreate) SetCronDayWeek(s string) *RepeatedScheduleResourceCreate {
	rsrc.mutation.SetCronDayWeek(s)
	return rsrc
}

// SetTargetSiteID sets the "target_site" edge to the SiteResource entity by ID.
func (rsrc *RepeatedScheduleResourceCreate) SetTargetSiteID(id int) *RepeatedScheduleResourceCreate {
	rsrc.mutation.SetTargetSiteID(id)
	return rsrc
}

// SetNillableTargetSiteID sets the "target_site" edge to the SiteResource entity by ID if the given value is not nil.
func (rsrc *RepeatedScheduleResourceCreate) SetNillableTargetSiteID(id *int) *RepeatedScheduleResourceCreate {
	if id != nil {
		rsrc = rsrc.SetTargetSiteID(*id)
	}
	return rsrc
}

// SetTargetSite sets the "target_site" edge to the SiteResource entity.
func (rsrc *RepeatedScheduleResourceCreate) SetTargetSite(s *SiteResource) *RepeatedScheduleResourceCreate {
	return rsrc.SetTargetSiteID(s.ID)
}

// SetTargetHostID sets the "target_host" edge to the HostResource entity by ID.
func (rsrc *RepeatedScheduleResourceCreate) SetTargetHostID(id int) *RepeatedScheduleResourceCreate {
	rsrc.mutation.SetTargetHostID(id)
	return rsrc
}

// SetNillableTargetHostID sets the "target_host" edge to the HostResource entity by ID if the given value is not nil.
func (rsrc *RepeatedScheduleResourceCreate) SetNillableTargetHostID(id *int) *RepeatedScheduleResourceCreate {
	if id != nil {
		rsrc = rsrc.SetTargetHostID(*id)
	}
	return rsrc
}

// SetTargetHost sets the "target_host" edge to the HostResource entity.
func (rsrc *RepeatedScheduleResourceCreate) SetTargetHost(h *HostResource) *RepeatedScheduleResourceCreate {
	return rsrc.SetTargetHostID(h.ID)
}

// SetTargetWorkloadID sets the "target_workload" edge to the WorkloadResource entity by ID.
func (rsrc *RepeatedScheduleResourceCreate) SetTargetWorkloadID(id int) *RepeatedScheduleResourceCreate {
	rsrc.mutation.SetTargetWorkloadID(id)
	return rsrc
}

// SetNillableTargetWorkloadID sets the "target_workload" edge to the WorkloadResource entity by ID if the given value is not nil.
func (rsrc *RepeatedScheduleResourceCreate) SetNillableTargetWorkloadID(id *int) *RepeatedScheduleResourceCreate {
	if id != nil {
		rsrc = rsrc.SetTargetWorkloadID(*id)
	}
	return rsrc
}

// SetTargetWorkload sets the "target_workload" edge to the WorkloadResource entity.
func (rsrc *RepeatedScheduleResourceCreate) SetTargetWorkload(w *WorkloadResource) *RepeatedScheduleResourceCreate {
	return rsrc.SetTargetWorkloadID(w.ID)
}

// Mutation returns the RepeatedScheduleResourceMutation object of the builder.
func (rsrc *RepeatedScheduleResourceCreate) Mutation() *RepeatedScheduleResourceMutation {
	return rsrc.mutation
}

// Save creates the RepeatedScheduleResource in the database.
func (rsrc *RepeatedScheduleResourceCreate) Save(ctx context.Context) (*RepeatedScheduleResource, error) {
	return withHooks[*RepeatedScheduleResource, RepeatedScheduleResourceMutation](ctx, rsrc.sqlSave, rsrc.mutation, rsrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rsrc *RepeatedScheduleResourceCreate) SaveX(ctx context.Context) *RepeatedScheduleResource {
	v, err := rsrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rsrc *RepeatedScheduleResourceCreate) Exec(ctx context.Context) error {
	_, err := rsrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsrc *RepeatedScheduleResourceCreate) ExecX(ctx context.Context) {
	if err := rsrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rsrc *RepeatedScheduleResourceCreate) check() error {
	if _, ok := rsrc.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource_id", err: errors.New(`ent: missing required field "RepeatedScheduleResource.resource_id"`)}
	}
	if v, ok := rsrc.mutation.ScheduleStatus(); ok {
		if err := repeatedscheduleresource.ScheduleStatusValidator(v); err != nil {
			return &ValidationError{Name: "schedule_status", err: fmt.Errorf(`ent: validator failed for field "RepeatedScheduleResource.schedule_status": %w`, err)}
		}
	}
	if _, ok := rsrc.mutation.CronMinutes(); !ok {
		return &ValidationError{Name: "cron_minutes", err: errors.New(`ent: missing required field "RepeatedScheduleResource.cron_minutes"`)}
	}
	if _, ok := rsrc.mutation.CronHours(); !ok {
		return &ValidationError{Name: "cron_hours", err: errors.New(`ent: missing required field "RepeatedScheduleResource.cron_hours"`)}
	}
	if _, ok := rsrc.mutation.CronDayMonth(); !ok {
		return &ValidationError{Name: "cron_day_month", err: errors.New(`ent: missing required field "RepeatedScheduleResource.cron_day_month"`)}
	}
	if _, ok := rsrc.mutation.CronMonth(); !ok {
		return &ValidationError{Name: "cron_month", err: errors.New(`ent: missing required field "RepeatedScheduleResource.cron_month"`)}
	}
	if _, ok := rsrc.mutation.CronDayWeek(); !ok {
		return &ValidationError{Name: "cron_day_week", err: errors.New(`ent: missing required field "RepeatedScheduleResource.cron_day_week"`)}
	}
	return nil
}

func (rsrc *RepeatedScheduleResourceCreate) sqlSave(ctx context.Context) (*RepeatedScheduleResource, error) {
	if err := rsrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rsrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rsrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rsrc.mutation.id = &_node.ID
	rsrc.mutation.done = true
	return _node, nil
}

func (rsrc *RepeatedScheduleResourceCreate) createSpec() (*RepeatedScheduleResource, *sqlgraph.CreateSpec) {
	var (
		_node = &RepeatedScheduleResource{config: rsrc.config}
		_spec = sqlgraph.NewCreateSpec(repeatedscheduleresource.Table, sqlgraph.NewFieldSpec(repeatedscheduleresource.FieldID, field.TypeInt))
	)
	if value, ok := rsrc.mutation.ResourceID(); ok {
		_spec.SetField(repeatedscheduleresource.FieldResourceID, field.TypeString, value)
		_node.ResourceID = value
	}
	if value, ok := rsrc.mutation.ScheduleStatus(); ok {
		_spec.SetField(repeatedscheduleresource.FieldScheduleStatus, field.TypeEnum, value)
		_node.ScheduleStatus = value
	}
	if value, ok := rsrc.mutation.Name(); ok {
		_spec.SetField(repeatedscheduleresource.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rsrc.mutation.DurationSeconds(); ok {
		_spec.SetField(repeatedscheduleresource.FieldDurationSeconds, field.TypeUint32, value)
		_node.DurationSeconds = value
	}
	if value, ok := rsrc.mutation.CronMinutes(); ok {
		_spec.SetField(repeatedscheduleresource.FieldCronMinutes, field.TypeString, value)
		_node.CronMinutes = value
	}
	if value, ok := rsrc.mutation.CronHours(); ok {
		_spec.SetField(repeatedscheduleresource.FieldCronHours, field.TypeString, value)
		_node.CronHours = value
	}
	if value, ok := rsrc.mutation.CronDayMonth(); ok {
		_spec.SetField(repeatedscheduleresource.FieldCronDayMonth, field.TypeString, value)
		_node.CronDayMonth = value
	}
	if value, ok := rsrc.mutation.CronMonth(); ok {
		_spec.SetField(repeatedscheduleresource.FieldCronMonth, field.TypeString, value)
		_node.CronMonth = value
	}
	if value, ok := rsrc.mutation.CronDayWeek(); ok {
		_spec.SetField(repeatedscheduleresource.FieldCronDayWeek, field.TypeString, value)
		_node.CronDayWeek = value
	}
	if nodes := rsrc.mutation.TargetSiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repeatedscheduleresource.TargetSiteTable,
			Columns: []string{repeatedscheduleresource.TargetSiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.repeated_schedule_resource_target_site = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rsrc.mutation.TargetHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repeatedscheduleresource.TargetHostTable,
			Columns: []string{repeatedscheduleresource.TargetHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.repeated_schedule_resource_target_host = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rsrc.mutation.TargetWorkloadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repeatedscheduleresource.TargetWorkloadTable,
			Columns: []string{repeatedscheduleresource.TargetWorkloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.repeated_schedule_resource_target_workload = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RepeatedScheduleResourceCreateBulk is the builder for creating many RepeatedScheduleResource entities in bulk.
type RepeatedScheduleResourceCreateBulk struct {
	config
	builders []*RepeatedScheduleResourceCreate
}

// Save creates the RepeatedScheduleResource entities in the database.
func (rsrcb *RepeatedScheduleResourceCreateBulk) Save(ctx context.Context) ([]*RepeatedScheduleResource, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rsrcb.builders))
	nodes := make([]*RepeatedScheduleResource, len(rsrcb.builders))
	mutators := make([]Mutator, len(rsrcb.builders))
	for i := range rsrcb.builders {
		func(i int, root context.Context) {
			builder := rsrcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RepeatedScheduleResourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rsrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rsrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rsrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rsrcb *RepeatedScheduleResourceCreateBulk) SaveX(ctx context.Context) []*RepeatedScheduleResource {
	v, err := rsrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rsrcb *RepeatedScheduleResourceCreateBulk) Exec(ctx context.Context) error {
	_, err := rsrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsrcb *RepeatedScheduleResourceCreateBulk) ExecX(ctx context.Context) {
	if err := rsrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
