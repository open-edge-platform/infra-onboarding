// Code generated by ent, DO NOT EDIT.

package regionresource

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the regionresource type in the database.
	Label = "region_resource"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldResourceID holds the string denoting the resource_id field in the database.
	FieldResourceID = "resource_id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldRegionKind holds the string denoting the region_kind field in the database.
	FieldRegionKind = "region_kind"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// EdgeParentRegion holds the string denoting the parent_region edge name in mutations.
	EdgeParentRegion = "parent_region"
	// EdgeChildren holds the string denoting the children edge name in mutations.
	EdgeChildren = "children"
	// Table holds the table name of the regionresource in the database.
	Table = "region_resources"
	// ParentRegionTable is the table that holds the parent_region relation/edge.
	ParentRegionTable = "region_resources"
	// ParentRegionColumn is the table column denoting the parent_region relation/edge.
	ParentRegionColumn = "region_resource_parent_region"
	// ChildrenTable is the table that holds the children relation/edge.
	ChildrenTable = "region_resources"
	// ChildrenColumn is the table column denoting the children relation/edge.
	ChildrenColumn = "region_resource_parent_region"
)

// Columns holds all SQL columns for regionresource fields.
var Columns = []string{
	FieldID,
	FieldResourceID,
	FieldDescription,
	FieldRegionKind,
	FieldMetadata,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "region_resources"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"region_resource_parent_region",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the RegionResource queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByResourceID orders the results by the resource_id field.
func ByResourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceID, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByRegionKind orders the results by the region_kind field.
func ByRegionKind(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegionKind, opts...).ToFunc()
}

// ByMetadata orders the results by the metadata field.
func ByMetadata(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMetadata, opts...).ToFunc()
}

// ByParentRegionField orders the results by parent_region field.
func ByParentRegionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParentRegionStep(), sql.OrderByField(field, opts...))
	}
}

// ByChildrenCount orders the results by children count.
func ByChildrenCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChildrenStep(), opts...)
	}
}

// ByChildren orders the results by children terms.
func ByChildren(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChildrenStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newParentRegionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ParentRegionTable, ParentRegionColumn),
	)
}
func newChildrenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ChildrenTable, ChildrenColumn),
	)
}
