// Code generated by ent, DO NOT EDIT.

package regionresource

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldLTE(FieldID, id))
}

// ResourceID applies equality check predicate on the "resource_id" field. It's identical to ResourceIDEQ.
func ResourceID(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldEQ(FieldResourceID, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldEQ(FieldDescription, v))
}

// RegionKind applies equality check predicate on the "region_kind" field. It's identical to RegionKindEQ.
func RegionKind(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldEQ(FieldRegionKind, v))
}

// Metadata applies equality check predicate on the "metadata" field. It's identical to MetadataEQ.
func Metadata(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldEQ(FieldMetadata, v))
}

// ResourceIDEQ applies the EQ predicate on the "resource_id" field.
func ResourceIDEQ(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldEQ(FieldResourceID, v))
}

// ResourceIDNEQ applies the NEQ predicate on the "resource_id" field.
func ResourceIDNEQ(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldNEQ(FieldResourceID, v))
}

// ResourceIDIn applies the In predicate on the "resource_id" field.
func ResourceIDIn(vs ...string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldIn(FieldResourceID, vs...))
}

// ResourceIDNotIn applies the NotIn predicate on the "resource_id" field.
func ResourceIDNotIn(vs ...string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldNotIn(FieldResourceID, vs...))
}

// ResourceIDGT applies the GT predicate on the "resource_id" field.
func ResourceIDGT(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldGT(FieldResourceID, v))
}

// ResourceIDGTE applies the GTE predicate on the "resource_id" field.
func ResourceIDGTE(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldGTE(FieldResourceID, v))
}

// ResourceIDLT applies the LT predicate on the "resource_id" field.
func ResourceIDLT(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldLT(FieldResourceID, v))
}

// ResourceIDLTE applies the LTE predicate on the "resource_id" field.
func ResourceIDLTE(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldLTE(FieldResourceID, v))
}

// ResourceIDContains applies the Contains predicate on the "resource_id" field.
func ResourceIDContains(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldContains(FieldResourceID, v))
}

// ResourceIDHasPrefix applies the HasPrefix predicate on the "resource_id" field.
func ResourceIDHasPrefix(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldHasPrefix(FieldResourceID, v))
}

// ResourceIDHasSuffix applies the HasSuffix predicate on the "resource_id" field.
func ResourceIDHasSuffix(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldHasSuffix(FieldResourceID, v))
}

// ResourceIDEqualFold applies the EqualFold predicate on the "resource_id" field.
func ResourceIDEqualFold(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldEqualFold(FieldResourceID, v))
}

// ResourceIDContainsFold applies the ContainsFold predicate on the "resource_id" field.
func ResourceIDContainsFold(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldContainsFold(FieldResourceID, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.RegionResource {
	return predicate.RegionResource(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.RegionResource {
	return predicate.RegionResource(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldContainsFold(FieldDescription, v))
}

// RegionKindEQ applies the EQ predicate on the "region_kind" field.
func RegionKindEQ(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldEQ(FieldRegionKind, v))
}

// RegionKindNEQ applies the NEQ predicate on the "region_kind" field.
func RegionKindNEQ(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldNEQ(FieldRegionKind, v))
}

// RegionKindIn applies the In predicate on the "region_kind" field.
func RegionKindIn(vs ...string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldIn(FieldRegionKind, vs...))
}

// RegionKindNotIn applies the NotIn predicate on the "region_kind" field.
func RegionKindNotIn(vs ...string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldNotIn(FieldRegionKind, vs...))
}

// RegionKindGT applies the GT predicate on the "region_kind" field.
func RegionKindGT(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldGT(FieldRegionKind, v))
}

// RegionKindGTE applies the GTE predicate on the "region_kind" field.
func RegionKindGTE(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldGTE(FieldRegionKind, v))
}

// RegionKindLT applies the LT predicate on the "region_kind" field.
func RegionKindLT(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldLT(FieldRegionKind, v))
}

// RegionKindLTE applies the LTE predicate on the "region_kind" field.
func RegionKindLTE(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldLTE(FieldRegionKind, v))
}

// RegionKindContains applies the Contains predicate on the "region_kind" field.
func RegionKindContains(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldContains(FieldRegionKind, v))
}

// RegionKindHasPrefix applies the HasPrefix predicate on the "region_kind" field.
func RegionKindHasPrefix(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldHasPrefix(FieldRegionKind, v))
}

// RegionKindHasSuffix applies the HasSuffix predicate on the "region_kind" field.
func RegionKindHasSuffix(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldHasSuffix(FieldRegionKind, v))
}

// RegionKindIsNil applies the IsNil predicate on the "region_kind" field.
func RegionKindIsNil() predicate.RegionResource {
	return predicate.RegionResource(sql.FieldIsNull(FieldRegionKind))
}

// RegionKindNotNil applies the NotNil predicate on the "region_kind" field.
func RegionKindNotNil() predicate.RegionResource {
	return predicate.RegionResource(sql.FieldNotNull(FieldRegionKind))
}

// RegionKindEqualFold applies the EqualFold predicate on the "region_kind" field.
func RegionKindEqualFold(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldEqualFold(FieldRegionKind, v))
}

// RegionKindContainsFold applies the ContainsFold predicate on the "region_kind" field.
func RegionKindContainsFold(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldContainsFold(FieldRegionKind, v))
}

// MetadataEQ applies the EQ predicate on the "metadata" field.
func MetadataEQ(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldEQ(FieldMetadata, v))
}

// MetadataNEQ applies the NEQ predicate on the "metadata" field.
func MetadataNEQ(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldNEQ(FieldMetadata, v))
}

// MetadataIn applies the In predicate on the "metadata" field.
func MetadataIn(vs ...string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldIn(FieldMetadata, vs...))
}

// MetadataNotIn applies the NotIn predicate on the "metadata" field.
func MetadataNotIn(vs ...string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldNotIn(FieldMetadata, vs...))
}

// MetadataGT applies the GT predicate on the "metadata" field.
func MetadataGT(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldGT(FieldMetadata, v))
}

// MetadataGTE applies the GTE predicate on the "metadata" field.
func MetadataGTE(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldGTE(FieldMetadata, v))
}

// MetadataLT applies the LT predicate on the "metadata" field.
func MetadataLT(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldLT(FieldMetadata, v))
}

// MetadataLTE applies the LTE predicate on the "metadata" field.
func MetadataLTE(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldLTE(FieldMetadata, v))
}

// MetadataContains applies the Contains predicate on the "metadata" field.
func MetadataContains(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldContains(FieldMetadata, v))
}

// MetadataHasPrefix applies the HasPrefix predicate on the "metadata" field.
func MetadataHasPrefix(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldHasPrefix(FieldMetadata, v))
}

// MetadataHasSuffix applies the HasSuffix predicate on the "metadata" field.
func MetadataHasSuffix(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldHasSuffix(FieldMetadata, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.RegionResource {
	return predicate.RegionResource(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.RegionResource {
	return predicate.RegionResource(sql.FieldNotNull(FieldMetadata))
}

// MetadataEqualFold applies the EqualFold predicate on the "metadata" field.
func MetadataEqualFold(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldEqualFold(FieldMetadata, v))
}

// MetadataContainsFold applies the ContainsFold predicate on the "metadata" field.
func MetadataContainsFold(v string) predicate.RegionResource {
	return predicate.RegionResource(sql.FieldContainsFold(FieldMetadata, v))
}

// HasParentRegion applies the HasEdge predicate on the "parent_region" edge.
func HasParentRegion() predicate.RegionResource {
	return predicate.RegionResource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ParentRegionTable, ParentRegionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentRegionWith applies the HasEdge predicate on the "parent_region" edge with a given conditions (other predicates).
func HasParentRegionWith(preds ...predicate.RegionResource) predicate.RegionResource {
	return predicate.RegionResource(func(s *sql.Selector) {
		step := newParentRegionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.RegionResource {
	return predicate.RegionResource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.RegionResource) predicate.RegionResource {
	return predicate.RegionResource(func(s *sql.Selector) {
		step := newChildrenStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RegionResource) predicate.RegionResource {
	return predicate.RegionResource(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RegionResource) predicate.RegionResource {
	return predicate.RegionResource(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RegionResource) predicate.RegionResource {
	return predicate.RegionResource(func(s *sql.Selector) {
		p(s.Not())
	})
}
