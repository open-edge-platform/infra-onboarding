// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/operatingsystemresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
)

// OperatingSystemResourceDelete is the builder for deleting a OperatingSystemResource entity.
type OperatingSystemResourceDelete struct {
	config
	hooks    []Hook
	mutation *OperatingSystemResourceMutation
}

// Where appends a list predicates to the OperatingSystemResourceDelete builder.
func (osrd *OperatingSystemResourceDelete) Where(ps ...predicate.OperatingSystemResource) *OperatingSystemResourceDelete {
	osrd.mutation.Where(ps...)
	return osrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (osrd *OperatingSystemResourceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, OperatingSystemResourceMutation](ctx, osrd.sqlExec, osrd.mutation, osrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (osrd *OperatingSystemResourceDelete) ExecX(ctx context.Context) int {
	n, err := osrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (osrd *OperatingSystemResourceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(operatingsystemresource.Table, sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt))
	if ps := osrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, osrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	osrd.mutation.done = true
	return affected, err
}

// OperatingSystemResourceDeleteOne is the builder for deleting a single OperatingSystemResource entity.
type OperatingSystemResourceDeleteOne struct {
	osrd *OperatingSystemResourceDelete
}

// Where appends a list predicates to the OperatingSystemResourceDelete builder.
func (osrdo *OperatingSystemResourceDeleteOne) Where(ps ...predicate.OperatingSystemResource) *OperatingSystemResourceDeleteOne {
	osrdo.osrd.mutation.Where(ps...)
	return osrdo
}

// Exec executes the deletion query.
func (osrdo *OperatingSystemResourceDeleteOne) Exec(ctx context.Context) error {
	n, err := osrdo.osrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{operatingsystemresource.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (osrdo *OperatingSystemResourceDeleteOne) ExecX(ctx context.Context) {
	if err := osrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
