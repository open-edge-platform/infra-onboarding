// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/endpointresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/netlinkresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
)

// NetlinkResourceQuery is the builder for querying NetlinkResource entities.
type NetlinkResourceQuery struct {
	config
	ctx        *QueryContext
	order      []netlinkresource.OrderOption
	inters     []Interceptor
	predicates []predicate.NetlinkResource
	withSrc    *EndpointResourceQuery
	withDst    *EndpointResourceQuery
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the NetlinkResourceQuery builder.
func (nrq *NetlinkResourceQuery) Where(ps ...predicate.NetlinkResource) *NetlinkResourceQuery {
	nrq.predicates = append(nrq.predicates, ps...)
	return nrq
}

// Limit the number of records to be returned by this query.
func (nrq *NetlinkResourceQuery) Limit(limit int) *NetlinkResourceQuery {
	nrq.ctx.Limit = &limit
	return nrq
}

// Offset to start from.
func (nrq *NetlinkResourceQuery) Offset(offset int) *NetlinkResourceQuery {
	nrq.ctx.Offset = &offset
	return nrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (nrq *NetlinkResourceQuery) Unique(unique bool) *NetlinkResourceQuery {
	nrq.ctx.Unique = &unique
	return nrq
}

// Order specifies how the records should be ordered.
func (nrq *NetlinkResourceQuery) Order(o ...netlinkresource.OrderOption) *NetlinkResourceQuery {
	nrq.order = append(nrq.order, o...)
	return nrq
}

// QuerySrc chains the current query on the "src" edge.
func (nrq *NetlinkResourceQuery) QuerySrc() *EndpointResourceQuery {
	query := (&EndpointResourceClient{config: nrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := nrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := nrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(netlinkresource.Table, netlinkresource.FieldID, selector),
			sqlgraph.To(endpointresource.Table, endpointresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, netlinkresource.SrcTable, netlinkresource.SrcColumn),
		)
		fromU = sqlgraph.SetNeighbors(nrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDst chains the current query on the "dst" edge.
func (nrq *NetlinkResourceQuery) QueryDst() *EndpointResourceQuery {
	query := (&EndpointResourceClient{config: nrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := nrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := nrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(netlinkresource.Table, netlinkresource.FieldID, selector),
			sqlgraph.To(endpointresource.Table, endpointresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, netlinkresource.DstTable, netlinkresource.DstColumn),
		)
		fromU = sqlgraph.SetNeighbors(nrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first NetlinkResource entity from the query.
// Returns a *NotFoundError when no NetlinkResource was found.
func (nrq *NetlinkResourceQuery) First(ctx context.Context) (*NetlinkResource, error) {
	nodes, err := nrq.Limit(1).All(setContextOp(ctx, nrq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{netlinkresource.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (nrq *NetlinkResourceQuery) FirstX(ctx context.Context) *NetlinkResource {
	node, err := nrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first NetlinkResource ID from the query.
// Returns a *NotFoundError when no NetlinkResource ID was found.
func (nrq *NetlinkResourceQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = nrq.Limit(1).IDs(setContextOp(ctx, nrq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{netlinkresource.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (nrq *NetlinkResourceQuery) FirstIDX(ctx context.Context) int {
	id, err := nrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single NetlinkResource entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one NetlinkResource entity is found.
// Returns a *NotFoundError when no NetlinkResource entities are found.
func (nrq *NetlinkResourceQuery) Only(ctx context.Context) (*NetlinkResource, error) {
	nodes, err := nrq.Limit(2).All(setContextOp(ctx, nrq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{netlinkresource.Label}
	default:
		return nil, &NotSingularError{netlinkresource.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (nrq *NetlinkResourceQuery) OnlyX(ctx context.Context) *NetlinkResource {
	node, err := nrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only NetlinkResource ID in the query.
// Returns a *NotSingularError when more than one NetlinkResource ID is found.
// Returns a *NotFoundError when no entities are found.
func (nrq *NetlinkResourceQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = nrq.Limit(2).IDs(setContextOp(ctx, nrq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{netlinkresource.Label}
	default:
		err = &NotSingularError{netlinkresource.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (nrq *NetlinkResourceQuery) OnlyIDX(ctx context.Context) int {
	id, err := nrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of NetlinkResources.
func (nrq *NetlinkResourceQuery) All(ctx context.Context) ([]*NetlinkResource, error) {
	ctx = setContextOp(ctx, nrq.ctx, "All")
	if err := nrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*NetlinkResource, *NetlinkResourceQuery]()
	return withInterceptors[[]*NetlinkResource](ctx, nrq, qr, nrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (nrq *NetlinkResourceQuery) AllX(ctx context.Context) []*NetlinkResource {
	nodes, err := nrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of NetlinkResource IDs.
func (nrq *NetlinkResourceQuery) IDs(ctx context.Context) (ids []int, err error) {
	if nrq.ctx.Unique == nil && nrq.path != nil {
		nrq.Unique(true)
	}
	ctx = setContextOp(ctx, nrq.ctx, "IDs")
	if err = nrq.Select(netlinkresource.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (nrq *NetlinkResourceQuery) IDsX(ctx context.Context) []int {
	ids, err := nrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (nrq *NetlinkResourceQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, nrq.ctx, "Count")
	if err := nrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, nrq, querierCount[*NetlinkResourceQuery](), nrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (nrq *NetlinkResourceQuery) CountX(ctx context.Context) int {
	count, err := nrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (nrq *NetlinkResourceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, nrq.ctx, "Exist")
	switch _, err := nrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (nrq *NetlinkResourceQuery) ExistX(ctx context.Context) bool {
	exist, err := nrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the NetlinkResourceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (nrq *NetlinkResourceQuery) Clone() *NetlinkResourceQuery {
	if nrq == nil {
		return nil
	}
	return &NetlinkResourceQuery{
		config:     nrq.config,
		ctx:        nrq.ctx.Clone(),
		order:      append([]netlinkresource.OrderOption{}, nrq.order...),
		inters:     append([]Interceptor{}, nrq.inters...),
		predicates: append([]predicate.NetlinkResource{}, nrq.predicates...),
		withSrc:    nrq.withSrc.Clone(),
		withDst:    nrq.withDst.Clone(),
		// clone intermediate query.
		sql:  nrq.sql.Clone(),
		path: nrq.path,
	}
}

// WithSrc tells the query-builder to eager-load the nodes that are connected to
// the "src" edge. The optional arguments are used to configure the query builder of the edge.
func (nrq *NetlinkResourceQuery) WithSrc(opts ...func(*EndpointResourceQuery)) *NetlinkResourceQuery {
	query := (&EndpointResourceClient{config: nrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	nrq.withSrc = query
	return nrq
}

// WithDst tells the query-builder to eager-load the nodes that are connected to
// the "dst" edge. The optional arguments are used to configure the query builder of the edge.
func (nrq *NetlinkResourceQuery) WithDst(opts ...func(*EndpointResourceQuery)) *NetlinkResourceQuery {
	query := (&EndpointResourceClient{config: nrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	nrq.withDst = query
	return nrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ResourceID string `json:"resource_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.NetlinkResource.Query().
//		GroupBy(netlinkresource.FieldResourceID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (nrq *NetlinkResourceQuery) GroupBy(field string, fields ...string) *NetlinkResourceGroupBy {
	nrq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &NetlinkResourceGroupBy{build: nrq}
	grbuild.flds = &nrq.ctx.Fields
	grbuild.label = netlinkresource.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ResourceID string `json:"resource_id,omitempty"`
//	}
//
//	client.NetlinkResource.Query().
//		Select(netlinkresource.FieldResourceID).
//		Scan(ctx, &v)
func (nrq *NetlinkResourceQuery) Select(fields ...string) *NetlinkResourceSelect {
	nrq.ctx.Fields = append(nrq.ctx.Fields, fields...)
	sbuild := &NetlinkResourceSelect{NetlinkResourceQuery: nrq}
	sbuild.label = netlinkresource.Label
	sbuild.flds, sbuild.scan = &nrq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a NetlinkResourceSelect configured with the given aggregations.
func (nrq *NetlinkResourceQuery) Aggregate(fns ...AggregateFunc) *NetlinkResourceSelect {
	return nrq.Select().Aggregate(fns...)
}

func (nrq *NetlinkResourceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range nrq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, nrq); err != nil {
				return err
			}
		}
	}
	for _, f := range nrq.ctx.Fields {
		if !netlinkresource.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if nrq.path != nil {
		prev, err := nrq.path(ctx)
		if err != nil {
			return err
		}
		nrq.sql = prev
	}
	return nil
}

func (nrq *NetlinkResourceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*NetlinkResource, error) {
	var (
		nodes       = []*NetlinkResource{}
		withFKs     = nrq.withFKs
		_spec       = nrq.querySpec()
		loadedTypes = [2]bool{
			nrq.withSrc != nil,
			nrq.withDst != nil,
		}
	)
	if nrq.withSrc != nil || nrq.withDst != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, netlinkresource.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*NetlinkResource).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &NetlinkResource{config: nrq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, nrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := nrq.withSrc; query != nil {
		if err := nrq.loadSrc(ctx, query, nodes, nil,
			func(n *NetlinkResource, e *EndpointResource) { n.Edges.Src = e }); err != nil {
			return nil, err
		}
	}
	if query := nrq.withDst; query != nil {
		if err := nrq.loadDst(ctx, query, nodes, nil,
			func(n *NetlinkResource, e *EndpointResource) { n.Edges.Dst = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (nrq *NetlinkResourceQuery) loadSrc(ctx context.Context, query *EndpointResourceQuery, nodes []*NetlinkResource, init func(*NetlinkResource), assign func(*NetlinkResource, *EndpointResource)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*NetlinkResource)
	for i := range nodes {
		if nodes[i].netlink_resource_src == nil {
			continue
		}
		fk := *nodes[i].netlink_resource_src
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(endpointresource.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "netlink_resource_src" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (nrq *NetlinkResourceQuery) loadDst(ctx context.Context, query *EndpointResourceQuery, nodes []*NetlinkResource, init func(*NetlinkResource), assign func(*NetlinkResource, *EndpointResource)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*NetlinkResource)
	for i := range nodes {
		if nodes[i].netlink_resource_dst == nil {
			continue
		}
		fk := *nodes[i].netlink_resource_dst
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(endpointresource.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "netlink_resource_dst" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (nrq *NetlinkResourceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := nrq.querySpec()
	_spec.Node.Columns = nrq.ctx.Fields
	if len(nrq.ctx.Fields) > 0 {
		_spec.Unique = nrq.ctx.Unique != nil && *nrq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, nrq.driver, _spec)
}

func (nrq *NetlinkResourceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(netlinkresource.Table, netlinkresource.Columns, sqlgraph.NewFieldSpec(netlinkresource.FieldID, field.TypeInt))
	_spec.From = nrq.sql
	if unique := nrq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if nrq.path != nil {
		_spec.Unique = true
	}
	if fields := nrq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, netlinkresource.FieldID)
		for i := range fields {
			if fields[i] != netlinkresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := nrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := nrq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := nrq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := nrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (nrq *NetlinkResourceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(nrq.driver.Dialect())
	t1 := builder.Table(netlinkresource.Table)
	columns := nrq.ctx.Fields
	if len(columns) == 0 {
		columns = netlinkresource.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if nrq.sql != nil {
		selector = nrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if nrq.ctx.Unique != nil && *nrq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range nrq.predicates {
		p(selector)
	}
	for _, p := range nrq.order {
		p(selector)
	}
	if offset := nrq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := nrq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// NetlinkResourceGroupBy is the group-by builder for NetlinkResource entities.
type NetlinkResourceGroupBy struct {
	selector
	build *NetlinkResourceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (nrgb *NetlinkResourceGroupBy) Aggregate(fns ...AggregateFunc) *NetlinkResourceGroupBy {
	nrgb.fns = append(nrgb.fns, fns...)
	return nrgb
}

// Scan applies the selector query and scans the result into the given value.
func (nrgb *NetlinkResourceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, nrgb.build.ctx, "GroupBy")
	if err := nrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*NetlinkResourceQuery, *NetlinkResourceGroupBy](ctx, nrgb.build, nrgb, nrgb.build.inters, v)
}

func (nrgb *NetlinkResourceGroupBy) sqlScan(ctx context.Context, root *NetlinkResourceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(nrgb.fns))
	for _, fn := range nrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*nrgb.flds)+len(nrgb.fns))
		for _, f := range *nrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*nrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := nrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// NetlinkResourceSelect is the builder for selecting fields of NetlinkResource entities.
type NetlinkResourceSelect struct {
	*NetlinkResourceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (nrs *NetlinkResourceSelect) Aggregate(fns ...AggregateFunc) *NetlinkResourceSelect {
	nrs.fns = append(nrs.fns, fns...)
	return nrs
}

// Scan applies the selector query and scans the result into the given value.
func (nrs *NetlinkResourceSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, nrs.ctx, "Select")
	if err := nrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*NetlinkResourceQuery, *NetlinkResourceSelect](ctx, nrs.NetlinkResourceQuery, nrs, nrs.inters, v)
}

func (nrs *NetlinkResourceSelect) sqlScan(ctx context.Context, root *NetlinkResourceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(nrs.fns))
	for _, fn := range nrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*nrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := nrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
