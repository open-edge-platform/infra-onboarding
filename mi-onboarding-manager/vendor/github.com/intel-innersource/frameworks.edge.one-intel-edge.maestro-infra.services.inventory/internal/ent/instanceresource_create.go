// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hostresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/instanceresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/operatingsystemresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/userresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/workloadmember"
)

// InstanceResourceCreate is the builder for creating a InstanceResource entity.
type InstanceResourceCreate struct {
	config
	mutation *InstanceResourceMutation
	hooks    []Hook
}

// SetResourceID sets the "resource_id" field.
func (irc *InstanceResourceCreate) SetResourceID(s string) *InstanceResourceCreate {
	irc.mutation.SetResourceID(s)
	return irc
}

// SetKind sets the "kind" field.
func (irc *InstanceResourceCreate) SetKind(i instanceresource.Kind) *InstanceResourceCreate {
	irc.mutation.SetKind(i)
	return irc
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableKind(i *instanceresource.Kind) *InstanceResourceCreate {
	if i != nil {
		irc.SetKind(*i)
	}
	return irc
}

// SetDescription sets the "description" field.
func (irc *InstanceResourceCreate) SetDescription(s string) *InstanceResourceCreate {
	irc.mutation.SetDescription(s)
	return irc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableDescription(s *string) *InstanceResourceCreate {
	if s != nil {
		irc.SetDescription(*s)
	}
	return irc
}

// SetDesiredState sets the "desired_state" field.
func (irc *InstanceResourceCreate) SetDesiredState(is instanceresource.DesiredState) *InstanceResourceCreate {
	irc.mutation.SetDesiredState(is)
	return irc
}

// SetNillableDesiredState sets the "desired_state" field if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableDesiredState(is *instanceresource.DesiredState) *InstanceResourceCreate {
	if is != nil {
		irc.SetDesiredState(*is)
	}
	return irc
}

// SetCurrentState sets the "current_state" field.
func (irc *InstanceResourceCreate) SetCurrentState(is instanceresource.CurrentState) *InstanceResourceCreate {
	irc.mutation.SetCurrentState(is)
	return irc
}

// SetNillableCurrentState sets the "current_state" field if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableCurrentState(is *instanceresource.CurrentState) *InstanceResourceCreate {
	if is != nil {
		irc.SetCurrentState(*is)
	}
	return irc
}

// SetVMMemoryBytes sets the "vm_memory_bytes" field.
func (irc *InstanceResourceCreate) SetVMMemoryBytes(u uint64) *InstanceResourceCreate {
	irc.mutation.SetVMMemoryBytes(u)
	return irc
}

// SetNillableVMMemoryBytes sets the "vm_memory_bytes" field if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableVMMemoryBytes(u *uint64) *InstanceResourceCreate {
	if u != nil {
		irc.SetVMMemoryBytes(*u)
	}
	return irc
}

// SetVMCPUCores sets the "vm_cpu_cores" field.
func (irc *InstanceResourceCreate) SetVMCPUCores(u uint32) *InstanceResourceCreate {
	irc.mutation.SetVMCPUCores(u)
	return irc
}

// SetNillableVMCPUCores sets the "vm_cpu_cores" field if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableVMCPUCores(u *uint32) *InstanceResourceCreate {
	if u != nil {
		irc.SetVMCPUCores(*u)
	}
	return irc
}

// SetVMStorageBytes sets the "vm_storage_bytes" field.
func (irc *InstanceResourceCreate) SetVMStorageBytes(u uint64) *InstanceResourceCreate {
	irc.mutation.SetVMStorageBytes(u)
	return irc
}

// SetNillableVMStorageBytes sets the "vm_storage_bytes" field if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableVMStorageBytes(u *uint64) *InstanceResourceCreate {
	if u != nil {
		irc.SetVMStorageBytes(*u)
	}
	return irc
}

// SetStatus sets the "status" field.
func (irc *InstanceResourceCreate) SetStatus(i instanceresource.Status) *InstanceResourceCreate {
	irc.mutation.SetStatus(i)
	return irc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableStatus(i *instanceresource.Status) *InstanceResourceCreate {
	if i != nil {
		irc.SetStatus(*i)
	}
	return irc
}

// SetStatusDetail sets the "status_detail" field.
func (irc *InstanceResourceCreate) SetStatusDetail(s string) *InstanceResourceCreate {
	irc.mutation.SetStatusDetail(s)
	return irc
}

// SetNillableStatusDetail sets the "status_detail" field if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableStatusDetail(s *string) *InstanceResourceCreate {
	if s != nil {
		irc.SetStatusDetail(*s)
	}
	return irc
}

// SetHostID sets the "host" edge to the HostResource entity by ID.
func (irc *InstanceResourceCreate) SetHostID(id int) *InstanceResourceCreate {
	irc.mutation.SetHostID(id)
	return irc
}

// SetNillableHostID sets the "host" edge to the HostResource entity by ID if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableHostID(id *int) *InstanceResourceCreate {
	if id != nil {
		irc = irc.SetHostID(*id)
	}
	return irc
}

// SetHost sets the "host" edge to the HostResource entity.
func (irc *InstanceResourceCreate) SetHost(h *HostResource) *InstanceResourceCreate {
	return irc.SetHostID(h.ID)
}

// SetUserID sets the "user" edge to the UserResource entity by ID.
func (irc *InstanceResourceCreate) SetUserID(id int) *InstanceResourceCreate {
	irc.mutation.SetUserID(id)
	return irc
}

// SetNillableUserID sets the "user" edge to the UserResource entity by ID if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableUserID(id *int) *InstanceResourceCreate {
	if id != nil {
		irc = irc.SetUserID(*id)
	}
	return irc
}

// SetUser sets the "user" edge to the UserResource entity.
func (irc *InstanceResourceCreate) SetUser(u *UserResource) *InstanceResourceCreate {
	return irc.SetUserID(u.ID)
}

// SetOsID sets the "os" edge to the OperatingSystemResource entity by ID.
func (irc *InstanceResourceCreate) SetOsID(id int) *InstanceResourceCreate {
	irc.mutation.SetOsID(id)
	return irc
}

// SetNillableOsID sets the "os" edge to the OperatingSystemResource entity by ID if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableOsID(id *int) *InstanceResourceCreate {
	if id != nil {
		irc = irc.SetOsID(*id)
	}
	return irc
}

// SetOs sets the "os" edge to the OperatingSystemResource entity.
func (irc *InstanceResourceCreate) SetOs(o *OperatingSystemResource) *InstanceResourceCreate {
	return irc.SetOsID(o.ID)
}

// AddWorkloadMemberIDs adds the "workload_members" edge to the WorkloadMember entity by IDs.
func (irc *InstanceResourceCreate) AddWorkloadMemberIDs(ids ...int) *InstanceResourceCreate {
	irc.mutation.AddWorkloadMemberIDs(ids...)
	return irc
}

// AddWorkloadMembers adds the "workload_members" edges to the WorkloadMember entity.
func (irc *InstanceResourceCreate) AddWorkloadMembers(w ...*WorkloadMember) *InstanceResourceCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return irc.AddWorkloadMemberIDs(ids...)
}

// Mutation returns the InstanceResourceMutation object of the builder.
func (irc *InstanceResourceCreate) Mutation() *InstanceResourceMutation {
	return irc.mutation
}

// Save creates the InstanceResource in the database.
func (irc *InstanceResourceCreate) Save(ctx context.Context) (*InstanceResource, error) {
	return withHooks[*InstanceResource, InstanceResourceMutation](ctx, irc.sqlSave, irc.mutation, irc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (irc *InstanceResourceCreate) SaveX(ctx context.Context) *InstanceResource {
	v, err := irc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (irc *InstanceResourceCreate) Exec(ctx context.Context) error {
	_, err := irc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (irc *InstanceResourceCreate) ExecX(ctx context.Context) {
	if err := irc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (irc *InstanceResourceCreate) check() error {
	if _, ok := irc.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource_id", err: errors.New(`ent: missing required field "InstanceResource.resource_id"`)}
	}
	if v, ok := irc.mutation.Kind(); ok {
		if err := instanceresource.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.kind": %w`, err)}
		}
	}
	if v, ok := irc.mutation.DesiredState(); ok {
		if err := instanceresource.DesiredStateValidator(v); err != nil {
			return &ValidationError{Name: "desired_state", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.desired_state": %w`, err)}
		}
	}
	if v, ok := irc.mutation.CurrentState(); ok {
		if err := instanceresource.CurrentStateValidator(v); err != nil {
			return &ValidationError{Name: "current_state", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.current_state": %w`, err)}
		}
	}
	if v, ok := irc.mutation.Status(); ok {
		if err := instanceresource.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.status": %w`, err)}
		}
	}
	return nil
}

func (irc *InstanceResourceCreate) sqlSave(ctx context.Context) (*InstanceResource, error) {
	if err := irc.check(); err != nil {
		return nil, err
	}
	_node, _spec := irc.createSpec()
	if err := sqlgraph.CreateNode(ctx, irc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	irc.mutation.id = &_node.ID
	irc.mutation.done = true
	return _node, nil
}

func (irc *InstanceResourceCreate) createSpec() (*InstanceResource, *sqlgraph.CreateSpec) {
	var (
		_node = &InstanceResource{config: irc.config}
		_spec = sqlgraph.NewCreateSpec(instanceresource.Table, sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt))
	)
	if value, ok := irc.mutation.ResourceID(); ok {
		_spec.SetField(instanceresource.FieldResourceID, field.TypeString, value)
		_node.ResourceID = value
	}
	if value, ok := irc.mutation.Kind(); ok {
		_spec.SetField(instanceresource.FieldKind, field.TypeEnum, value)
		_node.Kind = value
	}
	if value, ok := irc.mutation.Description(); ok {
		_spec.SetField(instanceresource.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := irc.mutation.DesiredState(); ok {
		_spec.SetField(instanceresource.FieldDesiredState, field.TypeEnum, value)
		_node.DesiredState = value
	}
	if value, ok := irc.mutation.CurrentState(); ok {
		_spec.SetField(instanceresource.FieldCurrentState, field.TypeEnum, value)
		_node.CurrentState = value
	}
	if value, ok := irc.mutation.VMMemoryBytes(); ok {
		_spec.SetField(instanceresource.FieldVMMemoryBytes, field.TypeUint64, value)
		_node.VMMemoryBytes = value
	}
	if value, ok := irc.mutation.VMCPUCores(); ok {
		_spec.SetField(instanceresource.FieldVMCPUCores, field.TypeUint32, value)
		_node.VMCPUCores = value
	}
	if value, ok := irc.mutation.VMStorageBytes(); ok {
		_spec.SetField(instanceresource.FieldVMStorageBytes, field.TypeUint64, value)
		_node.VMStorageBytes = value
	}
	if value, ok := irc.mutation.Status(); ok {
		_spec.SetField(instanceresource.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := irc.mutation.StatusDetail(); ok {
		_spec.SetField(instanceresource.FieldStatusDetail, field.TypeString, value)
		_node.StatusDetail = value
	}
	if nodes := irc.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   instanceresource.HostTable,
			Columns: []string{instanceresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := irc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.UserTable,
			Columns: []string{instanceresource.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.instance_resource_user = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := irc.mutation.OsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.OsTable,
			Columns: []string{instanceresource.OsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.instance_resource_os = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := irc.mutation.WorkloadMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   instanceresource.WorkloadMembersTable,
			Columns: []string{instanceresource.WorkloadMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InstanceResourceCreateBulk is the builder for creating many InstanceResource entities in bulk.
type InstanceResourceCreateBulk struct {
	config
	builders []*InstanceResourceCreate
}

// Save creates the InstanceResource entities in the database.
func (ircb *InstanceResourceCreateBulk) Save(ctx context.Context) ([]*InstanceResource, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ircb.builders))
	nodes := make([]*InstanceResource, len(ircb.builders))
	mutators := make([]Mutator, len(ircb.builders))
	for i := range ircb.builders {
		func(i int, root context.Context) {
			builder := ircb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InstanceResourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ircb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ircb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ircb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ircb *InstanceResourceCreateBulk) SaveX(ctx context.Context) []*InstanceResource {
	v, err := ircb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ircb *InstanceResourceCreateBulk) Exec(ctx context.Context) error {
	_, err := ircb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ircb *InstanceResourceCreateBulk) ExecX(ctx context.Context) {
	if err := ircb.Exec(ctx); err != nil {
		panic(err)
	}
}
