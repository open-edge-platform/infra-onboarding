// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hostresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/singlescheduleresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/siteresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/workloadresource"
)

// SingleScheduleResourceQuery is the builder for querying SingleScheduleResource entities.
type SingleScheduleResourceQuery struct {
	config
	ctx                *QueryContext
	order              []singlescheduleresource.OrderOption
	inters             []Interceptor
	predicates         []predicate.SingleScheduleResource
	withTargetSite     *SiteResourceQuery
	withTargetHost     *HostResourceQuery
	withTargetWorkload *WorkloadResourceQuery
	withFKs            bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SingleScheduleResourceQuery builder.
func (ssrq *SingleScheduleResourceQuery) Where(ps ...predicate.SingleScheduleResource) *SingleScheduleResourceQuery {
	ssrq.predicates = append(ssrq.predicates, ps...)
	return ssrq
}

// Limit the number of records to be returned by this query.
func (ssrq *SingleScheduleResourceQuery) Limit(limit int) *SingleScheduleResourceQuery {
	ssrq.ctx.Limit = &limit
	return ssrq
}

// Offset to start from.
func (ssrq *SingleScheduleResourceQuery) Offset(offset int) *SingleScheduleResourceQuery {
	ssrq.ctx.Offset = &offset
	return ssrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ssrq *SingleScheduleResourceQuery) Unique(unique bool) *SingleScheduleResourceQuery {
	ssrq.ctx.Unique = &unique
	return ssrq
}

// Order specifies how the records should be ordered.
func (ssrq *SingleScheduleResourceQuery) Order(o ...singlescheduleresource.OrderOption) *SingleScheduleResourceQuery {
	ssrq.order = append(ssrq.order, o...)
	return ssrq
}

// QueryTargetSite chains the current query on the "target_site" edge.
func (ssrq *SingleScheduleResourceQuery) QueryTargetSite() *SiteResourceQuery {
	query := (&SiteResourceClient{config: ssrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ssrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ssrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(singlescheduleresource.Table, singlescheduleresource.FieldID, selector),
			sqlgraph.To(siteresource.Table, siteresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, singlescheduleresource.TargetSiteTable, singlescheduleresource.TargetSiteColumn),
		)
		fromU = sqlgraph.SetNeighbors(ssrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTargetHost chains the current query on the "target_host" edge.
func (ssrq *SingleScheduleResourceQuery) QueryTargetHost() *HostResourceQuery {
	query := (&HostResourceClient{config: ssrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ssrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ssrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(singlescheduleresource.Table, singlescheduleresource.FieldID, selector),
			sqlgraph.To(hostresource.Table, hostresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, singlescheduleresource.TargetHostTable, singlescheduleresource.TargetHostColumn),
		)
		fromU = sqlgraph.SetNeighbors(ssrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTargetWorkload chains the current query on the "target_workload" edge.
func (ssrq *SingleScheduleResourceQuery) QueryTargetWorkload() *WorkloadResourceQuery {
	query := (&WorkloadResourceClient{config: ssrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ssrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ssrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(singlescheduleresource.Table, singlescheduleresource.FieldID, selector),
			sqlgraph.To(workloadresource.Table, workloadresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, singlescheduleresource.TargetWorkloadTable, singlescheduleresource.TargetWorkloadColumn),
		)
		fromU = sqlgraph.SetNeighbors(ssrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SingleScheduleResource entity from the query.
// Returns a *NotFoundError when no SingleScheduleResource was found.
func (ssrq *SingleScheduleResourceQuery) First(ctx context.Context) (*SingleScheduleResource, error) {
	nodes, err := ssrq.Limit(1).All(setContextOp(ctx, ssrq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{singlescheduleresource.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ssrq *SingleScheduleResourceQuery) FirstX(ctx context.Context) *SingleScheduleResource {
	node, err := ssrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SingleScheduleResource ID from the query.
// Returns a *NotFoundError when no SingleScheduleResource ID was found.
func (ssrq *SingleScheduleResourceQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ssrq.Limit(1).IDs(setContextOp(ctx, ssrq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{singlescheduleresource.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ssrq *SingleScheduleResourceQuery) FirstIDX(ctx context.Context) int {
	id, err := ssrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SingleScheduleResource entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SingleScheduleResource entity is found.
// Returns a *NotFoundError when no SingleScheduleResource entities are found.
func (ssrq *SingleScheduleResourceQuery) Only(ctx context.Context) (*SingleScheduleResource, error) {
	nodes, err := ssrq.Limit(2).All(setContextOp(ctx, ssrq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{singlescheduleresource.Label}
	default:
		return nil, &NotSingularError{singlescheduleresource.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ssrq *SingleScheduleResourceQuery) OnlyX(ctx context.Context) *SingleScheduleResource {
	node, err := ssrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SingleScheduleResource ID in the query.
// Returns a *NotSingularError when more than one SingleScheduleResource ID is found.
// Returns a *NotFoundError when no entities are found.
func (ssrq *SingleScheduleResourceQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ssrq.Limit(2).IDs(setContextOp(ctx, ssrq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{singlescheduleresource.Label}
	default:
		err = &NotSingularError{singlescheduleresource.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ssrq *SingleScheduleResourceQuery) OnlyIDX(ctx context.Context) int {
	id, err := ssrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SingleScheduleResources.
func (ssrq *SingleScheduleResourceQuery) All(ctx context.Context) ([]*SingleScheduleResource, error) {
	ctx = setContextOp(ctx, ssrq.ctx, "All")
	if err := ssrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SingleScheduleResource, *SingleScheduleResourceQuery]()
	return withInterceptors[[]*SingleScheduleResource](ctx, ssrq, qr, ssrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ssrq *SingleScheduleResourceQuery) AllX(ctx context.Context) []*SingleScheduleResource {
	nodes, err := ssrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SingleScheduleResource IDs.
func (ssrq *SingleScheduleResourceQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ssrq.ctx.Unique == nil && ssrq.path != nil {
		ssrq.Unique(true)
	}
	ctx = setContextOp(ctx, ssrq.ctx, "IDs")
	if err = ssrq.Select(singlescheduleresource.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ssrq *SingleScheduleResourceQuery) IDsX(ctx context.Context) []int {
	ids, err := ssrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ssrq *SingleScheduleResourceQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ssrq.ctx, "Count")
	if err := ssrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ssrq, querierCount[*SingleScheduleResourceQuery](), ssrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ssrq *SingleScheduleResourceQuery) CountX(ctx context.Context) int {
	count, err := ssrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ssrq *SingleScheduleResourceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ssrq.ctx, "Exist")
	switch _, err := ssrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ssrq *SingleScheduleResourceQuery) ExistX(ctx context.Context) bool {
	exist, err := ssrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SingleScheduleResourceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ssrq *SingleScheduleResourceQuery) Clone() *SingleScheduleResourceQuery {
	if ssrq == nil {
		return nil
	}
	return &SingleScheduleResourceQuery{
		config:             ssrq.config,
		ctx:                ssrq.ctx.Clone(),
		order:              append([]singlescheduleresource.OrderOption{}, ssrq.order...),
		inters:             append([]Interceptor{}, ssrq.inters...),
		predicates:         append([]predicate.SingleScheduleResource{}, ssrq.predicates...),
		withTargetSite:     ssrq.withTargetSite.Clone(),
		withTargetHost:     ssrq.withTargetHost.Clone(),
		withTargetWorkload: ssrq.withTargetWorkload.Clone(),
		// clone intermediate query.
		sql:  ssrq.sql.Clone(),
		path: ssrq.path,
	}
}

// WithTargetSite tells the query-builder to eager-load the nodes that are connected to
// the "target_site" edge. The optional arguments are used to configure the query builder of the edge.
func (ssrq *SingleScheduleResourceQuery) WithTargetSite(opts ...func(*SiteResourceQuery)) *SingleScheduleResourceQuery {
	query := (&SiteResourceClient{config: ssrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ssrq.withTargetSite = query
	return ssrq
}

// WithTargetHost tells the query-builder to eager-load the nodes that are connected to
// the "target_host" edge. The optional arguments are used to configure the query builder of the edge.
func (ssrq *SingleScheduleResourceQuery) WithTargetHost(opts ...func(*HostResourceQuery)) *SingleScheduleResourceQuery {
	query := (&HostResourceClient{config: ssrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ssrq.withTargetHost = query
	return ssrq
}

// WithTargetWorkload tells the query-builder to eager-load the nodes that are connected to
// the "target_workload" edge. The optional arguments are used to configure the query builder of the edge.
func (ssrq *SingleScheduleResourceQuery) WithTargetWorkload(opts ...func(*WorkloadResourceQuery)) *SingleScheduleResourceQuery {
	query := (&WorkloadResourceClient{config: ssrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ssrq.withTargetWorkload = query
	return ssrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ResourceID string `json:"resource_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SingleScheduleResource.Query().
//		GroupBy(singlescheduleresource.FieldResourceID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ssrq *SingleScheduleResourceQuery) GroupBy(field string, fields ...string) *SingleScheduleResourceGroupBy {
	ssrq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SingleScheduleResourceGroupBy{build: ssrq}
	grbuild.flds = &ssrq.ctx.Fields
	grbuild.label = singlescheduleresource.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ResourceID string `json:"resource_id,omitempty"`
//	}
//
//	client.SingleScheduleResource.Query().
//		Select(singlescheduleresource.FieldResourceID).
//		Scan(ctx, &v)
func (ssrq *SingleScheduleResourceQuery) Select(fields ...string) *SingleScheduleResourceSelect {
	ssrq.ctx.Fields = append(ssrq.ctx.Fields, fields...)
	sbuild := &SingleScheduleResourceSelect{SingleScheduleResourceQuery: ssrq}
	sbuild.label = singlescheduleresource.Label
	sbuild.flds, sbuild.scan = &ssrq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SingleScheduleResourceSelect configured with the given aggregations.
func (ssrq *SingleScheduleResourceQuery) Aggregate(fns ...AggregateFunc) *SingleScheduleResourceSelect {
	return ssrq.Select().Aggregate(fns...)
}

func (ssrq *SingleScheduleResourceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ssrq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ssrq); err != nil {
				return err
			}
		}
	}
	for _, f := range ssrq.ctx.Fields {
		if !singlescheduleresource.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ssrq.path != nil {
		prev, err := ssrq.path(ctx)
		if err != nil {
			return err
		}
		ssrq.sql = prev
	}
	return nil
}

func (ssrq *SingleScheduleResourceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SingleScheduleResource, error) {
	var (
		nodes       = []*SingleScheduleResource{}
		withFKs     = ssrq.withFKs
		_spec       = ssrq.querySpec()
		loadedTypes = [3]bool{
			ssrq.withTargetSite != nil,
			ssrq.withTargetHost != nil,
			ssrq.withTargetWorkload != nil,
		}
	)
	if ssrq.withTargetSite != nil || ssrq.withTargetHost != nil || ssrq.withTargetWorkload != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, singlescheduleresource.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SingleScheduleResource).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SingleScheduleResource{config: ssrq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ssrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ssrq.withTargetSite; query != nil {
		if err := ssrq.loadTargetSite(ctx, query, nodes, nil,
			func(n *SingleScheduleResource, e *SiteResource) { n.Edges.TargetSite = e }); err != nil {
			return nil, err
		}
	}
	if query := ssrq.withTargetHost; query != nil {
		if err := ssrq.loadTargetHost(ctx, query, nodes, nil,
			func(n *SingleScheduleResource, e *HostResource) { n.Edges.TargetHost = e }); err != nil {
			return nil, err
		}
	}
	if query := ssrq.withTargetWorkload; query != nil {
		if err := ssrq.loadTargetWorkload(ctx, query, nodes, nil,
			func(n *SingleScheduleResource, e *WorkloadResource) { n.Edges.TargetWorkload = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ssrq *SingleScheduleResourceQuery) loadTargetSite(ctx context.Context, query *SiteResourceQuery, nodes []*SingleScheduleResource, init func(*SingleScheduleResource), assign func(*SingleScheduleResource, *SiteResource)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*SingleScheduleResource)
	for i := range nodes {
		if nodes[i].single_schedule_resource_target_site == nil {
			continue
		}
		fk := *nodes[i].single_schedule_resource_target_site
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(siteresource.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "single_schedule_resource_target_site" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ssrq *SingleScheduleResourceQuery) loadTargetHost(ctx context.Context, query *HostResourceQuery, nodes []*SingleScheduleResource, init func(*SingleScheduleResource), assign func(*SingleScheduleResource, *HostResource)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*SingleScheduleResource)
	for i := range nodes {
		if nodes[i].single_schedule_resource_target_host == nil {
			continue
		}
		fk := *nodes[i].single_schedule_resource_target_host
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(hostresource.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "single_schedule_resource_target_host" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ssrq *SingleScheduleResourceQuery) loadTargetWorkload(ctx context.Context, query *WorkloadResourceQuery, nodes []*SingleScheduleResource, init func(*SingleScheduleResource), assign func(*SingleScheduleResource, *WorkloadResource)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*SingleScheduleResource)
	for i := range nodes {
		if nodes[i].single_schedule_resource_target_workload == nil {
			continue
		}
		fk := *nodes[i].single_schedule_resource_target_workload
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(workloadresource.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "single_schedule_resource_target_workload" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ssrq *SingleScheduleResourceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ssrq.querySpec()
	_spec.Node.Columns = ssrq.ctx.Fields
	if len(ssrq.ctx.Fields) > 0 {
		_spec.Unique = ssrq.ctx.Unique != nil && *ssrq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ssrq.driver, _spec)
}

func (ssrq *SingleScheduleResourceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(singlescheduleresource.Table, singlescheduleresource.Columns, sqlgraph.NewFieldSpec(singlescheduleresource.FieldID, field.TypeInt))
	_spec.From = ssrq.sql
	if unique := ssrq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ssrq.path != nil {
		_spec.Unique = true
	}
	if fields := ssrq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, singlescheduleresource.FieldID)
		for i := range fields {
			if fields[i] != singlescheduleresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ssrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ssrq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ssrq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ssrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ssrq *SingleScheduleResourceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ssrq.driver.Dialect())
	t1 := builder.Table(singlescheduleresource.Table)
	columns := ssrq.ctx.Fields
	if len(columns) == 0 {
		columns = singlescheduleresource.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ssrq.sql != nil {
		selector = ssrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ssrq.ctx.Unique != nil && *ssrq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ssrq.predicates {
		p(selector)
	}
	for _, p := range ssrq.order {
		p(selector)
	}
	if offset := ssrq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ssrq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SingleScheduleResourceGroupBy is the group-by builder for SingleScheduleResource entities.
type SingleScheduleResourceGroupBy struct {
	selector
	build *SingleScheduleResourceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ssrgb *SingleScheduleResourceGroupBy) Aggregate(fns ...AggregateFunc) *SingleScheduleResourceGroupBy {
	ssrgb.fns = append(ssrgb.fns, fns...)
	return ssrgb
}

// Scan applies the selector query and scans the result into the given value.
func (ssrgb *SingleScheduleResourceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ssrgb.build.ctx, "GroupBy")
	if err := ssrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SingleScheduleResourceQuery, *SingleScheduleResourceGroupBy](ctx, ssrgb.build, ssrgb, ssrgb.build.inters, v)
}

func (ssrgb *SingleScheduleResourceGroupBy) sqlScan(ctx context.Context, root *SingleScheduleResourceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ssrgb.fns))
	for _, fn := range ssrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ssrgb.flds)+len(ssrgb.fns))
		for _, f := range *ssrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ssrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ssrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SingleScheduleResourceSelect is the builder for selecting fields of SingleScheduleResource entities.
type SingleScheduleResourceSelect struct {
	*SingleScheduleResourceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ssrs *SingleScheduleResourceSelect) Aggregate(fns ...AggregateFunc) *SingleScheduleResourceSelect {
	ssrs.fns = append(ssrs.fns, fns...)
	return ssrs
}

// Scan applies the selector query and scans the result into the given value.
func (ssrs *SingleScheduleResourceSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ssrs.ctx, "Select")
	if err := ssrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SingleScheduleResourceQuery, *SingleScheduleResourceSelect](ctx, ssrs.SingleScheduleResourceQuery, ssrs, ssrs.inters, v)
}

func (ssrs *SingleScheduleResourceSelect) sqlScan(ctx context.Context, root *SingleScheduleResourceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ssrs.fns))
	for _, fn := range ssrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ssrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ssrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
