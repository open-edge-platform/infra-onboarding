// Code generated by ent, DO NOT EDIT.

package workloadmember

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the workloadmember type in the database.
	Label = "workload_member"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldResourceID holds the string denoting the resource_id field in the database.
	FieldResourceID = "resource_id"
	// FieldKind holds the string denoting the kind field in the database.
	FieldKind = "kind"
	// EdgeWorkload holds the string denoting the workload edge name in mutations.
	EdgeWorkload = "workload"
	// EdgeInstance holds the string denoting the instance edge name in mutations.
	EdgeInstance = "instance"
	// Table holds the table name of the workloadmember in the database.
	Table = "workload_members"
	// WorkloadTable is the table that holds the workload relation/edge.
	WorkloadTable = "workload_members"
	// WorkloadInverseTable is the table name for the WorkloadResource entity.
	// It exists in this package in order to avoid circular dependency with the "workloadresource" package.
	WorkloadInverseTable = "workload_resources"
	// WorkloadColumn is the table column denoting the workload relation/edge.
	WorkloadColumn = "workload_member_workload"
	// InstanceTable is the table that holds the instance relation/edge.
	InstanceTable = "workload_members"
	// InstanceInverseTable is the table name for the InstanceResource entity.
	// It exists in this package in order to avoid circular dependency with the "instanceresource" package.
	InstanceInverseTable = "instance_resources"
	// InstanceColumn is the table column denoting the instance relation/edge.
	InstanceColumn = "workload_member_instance"
)

// Columns holds all SQL columns for workloadmember fields.
var Columns = []string{
	FieldID,
	FieldResourceID,
	FieldKind,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "workload_members"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"workload_member_workload",
	"workload_member_instance",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Kind defines the type for the "kind" enum field.
type Kind string

// Kind values.
const (
	KindWORKLOAD_MEMBER_KIND_UNSPECIFIED  Kind = "WORKLOAD_MEMBER_KIND_UNSPECIFIED"
	KindWORKLOAD_MEMBER_KIND_CLUSTER_NODE Kind = "WORKLOAD_MEMBER_KIND_CLUSTER_NODE"
)

func (k Kind) String() string {
	return string(k)
}

// KindValidator is a validator for the "kind" field enum values. It is called by the builders before save.
func KindValidator(k Kind) error {
	switch k {
	case KindWORKLOAD_MEMBER_KIND_UNSPECIFIED, KindWORKLOAD_MEMBER_KIND_CLUSTER_NODE:
		return nil
	default:
		return fmt.Errorf("workloadmember: invalid enum value for kind field: %q", k)
	}
}

// OrderOption defines the ordering options for the WorkloadMember queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByResourceID orders the results by the resource_id field.
func ByResourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceID, opts...).ToFunc()
}

// ByKind orders the results by the kind field.
func ByKind(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKind, opts...).ToFunc()
}

// ByWorkloadField orders the results by workload field.
func ByWorkloadField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkloadStep(), sql.OrderByField(field, opts...))
	}
}

// ByInstanceField orders the results by instance field.
func ByInstanceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInstanceStep(), sql.OrderByField(field, opts...))
	}
}
func newWorkloadStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkloadInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, WorkloadTable, WorkloadColumn),
	)
}
func newInstanceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InstanceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, InstanceTable, InstanceColumn),
	)
}
