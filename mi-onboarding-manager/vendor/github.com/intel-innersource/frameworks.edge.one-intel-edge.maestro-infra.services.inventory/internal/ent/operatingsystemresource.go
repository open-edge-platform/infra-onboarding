// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/operatingsystemresource"
)

// OperatingSystemResource is the model entity for the OperatingSystemResource schema.
type OperatingSystemResource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ResourceID holds the value of the "resource_id" field.
	ResourceID string `json:"resource_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Architecture holds the value of the "architecture" field.
	Architecture string `json:"architecture,omitempty"`
	// KernelCommand holds the value of the "kernel_command" field.
	KernelCommand string `json:"kernel_command,omitempty"`
	// UpdateSources holds the value of the "update_sources" field.
	UpdateSources string `json:"update_sources,omitempty"`
	// RepoURL holds the value of the "repo_url" field.
	RepoURL string `json:"repo_url,omitempty"`
	// Sha256 holds the value of the "sha256" field.
	Sha256 string `json:"sha256,omitempty"`
	// ProfileName holds the value of the "profile_name" field.
	ProfileName  string `json:"profile_name,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OperatingSystemResource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case operatingsystemresource.FieldID:
			values[i] = new(sql.NullInt64)
		case operatingsystemresource.FieldResourceID, operatingsystemresource.FieldName, operatingsystemresource.FieldArchitecture, operatingsystemresource.FieldKernelCommand, operatingsystemresource.FieldUpdateSources, operatingsystemresource.FieldRepoURL, operatingsystemresource.FieldSha256, operatingsystemresource.FieldProfileName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OperatingSystemResource fields.
func (osr *OperatingSystemResource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case operatingsystemresource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			osr.ID = int(value.Int64)
		case operatingsystemresource.FieldResourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				osr.ResourceID = value.String
			}
		case operatingsystemresource.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				osr.Name = value.String
			}
		case operatingsystemresource.FieldArchitecture:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field architecture", values[i])
			} else if value.Valid {
				osr.Architecture = value.String
			}
		case operatingsystemresource.FieldKernelCommand:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kernel_command", values[i])
			} else if value.Valid {
				osr.KernelCommand = value.String
			}
		case operatingsystemresource.FieldUpdateSources:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field update_sources", values[i])
			} else if value.Valid {
				osr.UpdateSources = value.String
			}
		case operatingsystemresource.FieldRepoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field repo_url", values[i])
			} else if value.Valid {
				osr.RepoURL = value.String
			}
		case operatingsystemresource.FieldSha256:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sha256", values[i])
			} else if value.Valid {
				osr.Sha256 = value.String
			}
		case operatingsystemresource.FieldProfileName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field profile_name", values[i])
			} else if value.Valid {
				osr.ProfileName = value.String
			}
		default:
			osr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OperatingSystemResource.
// This includes values selected through modifiers, order, etc.
func (osr *OperatingSystemResource) Value(name string) (ent.Value, error) {
	return osr.selectValues.Get(name)
}

// Update returns a builder for updating this OperatingSystemResource.
// Note that you need to call OperatingSystemResource.Unwrap() before calling this method if this OperatingSystemResource
// was returned from a transaction, and the transaction was committed or rolled back.
func (osr *OperatingSystemResource) Update() *OperatingSystemResourceUpdateOne {
	return NewOperatingSystemResourceClient(osr.config).UpdateOne(osr)
}

// Unwrap unwraps the OperatingSystemResource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (osr *OperatingSystemResource) Unwrap() *OperatingSystemResource {
	_tx, ok := osr.config.driver.(*txDriver)
	if !ok {
		panic("ent: OperatingSystemResource is not a transactional entity")
	}
	osr.config.driver = _tx.drv
	return osr
}

// String implements the fmt.Stringer.
func (osr *OperatingSystemResource) String() string {
	var builder strings.Builder
	builder.WriteString("OperatingSystemResource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", osr.ID))
	builder.WriteString("resource_id=")
	builder.WriteString(osr.ResourceID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(osr.Name)
	builder.WriteString(", ")
	builder.WriteString("architecture=")
	builder.WriteString(osr.Architecture)
	builder.WriteString(", ")
	builder.WriteString("kernel_command=")
	builder.WriteString(osr.KernelCommand)
	builder.WriteString(", ")
	builder.WriteString("update_sources=")
	builder.WriteString(osr.UpdateSources)
	builder.WriteString(", ")
	builder.WriteString("repo_url=")
	builder.WriteString(osr.RepoURL)
	builder.WriteString(", ")
	builder.WriteString("sha256=")
	builder.WriteString(osr.Sha256)
	builder.WriteString(", ")
	builder.WriteString("profile_name=")
	builder.WriteString(osr.ProfileName)
	builder.WriteByte(')')
	return builder.String()
}

// OperatingSystemResources is a parsable slice of OperatingSystemResource.
type OperatingSystemResources []*OperatingSystemResource
