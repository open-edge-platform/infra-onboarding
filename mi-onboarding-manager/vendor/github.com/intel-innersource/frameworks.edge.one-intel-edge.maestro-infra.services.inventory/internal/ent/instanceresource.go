// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hostresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/instanceresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/operatingsystemresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/userresource"
)

// InstanceResource is the model entity for the InstanceResource schema.
type InstanceResource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ResourceID holds the value of the "resource_id" field.
	ResourceID string `json:"resource_id,omitempty"`
	// Kind holds the value of the "kind" field.
	Kind instanceresource.Kind `json:"kind,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// DesiredState holds the value of the "desired_state" field.
	DesiredState instanceresource.DesiredState `json:"desired_state,omitempty"`
	// CurrentState holds the value of the "current_state" field.
	CurrentState instanceresource.CurrentState `json:"current_state,omitempty"`
	// VMMemoryBytes holds the value of the "vm_memory_bytes" field.
	VMMemoryBytes uint64 `json:"vm_memory_bytes,omitempty"`
	// VMCPUCores holds the value of the "vm_cpu_cores" field.
	VMCPUCores uint32 `json:"vm_cpu_cores,omitempty"`
	// VMStorageBytes holds the value of the "vm_storage_bytes" field.
	VMStorageBytes uint64 `json:"vm_storage_bytes,omitempty"`
	// Status holds the value of the "status" field.
	Status instanceresource.Status `json:"status,omitempty"`
	// StatusDetail holds the value of the "status_detail" field.
	StatusDetail string `json:"status_detail,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InstanceResourceQuery when eager-loading is set.
	Edges                  InstanceResourceEdges `json:"edges"`
	instance_resource_user *int
	instance_resource_os   *int
	selectValues           sql.SelectValues
}

// InstanceResourceEdges holds the relations/edges for other nodes in the graph.
type InstanceResourceEdges struct {
	// Host holds the value of the host edge.
	Host *HostResource `json:"host,omitempty"`
	// User holds the value of the user edge.
	User *UserResource `json:"user,omitempty"`
	// Os holds the value of the os edge.
	Os *OperatingSystemResource `json:"os,omitempty"`
	// WorkloadMembers holds the value of the workload_members edge.
	WorkloadMembers []*WorkloadMember `json:"workload_members,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// HostOrErr returns the Host value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InstanceResourceEdges) HostOrErr() (*HostResource, error) {
	if e.loadedTypes[0] {
		if e.Host == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: hostresource.Label}
		}
		return e.Host, nil
	}
	return nil, &NotLoadedError{edge: "host"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InstanceResourceEdges) UserOrErr() (*UserResource, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: userresource.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// OsOrErr returns the Os value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InstanceResourceEdges) OsOrErr() (*OperatingSystemResource, error) {
	if e.loadedTypes[2] {
		if e.Os == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: operatingsystemresource.Label}
		}
		return e.Os, nil
	}
	return nil, &NotLoadedError{edge: "os"}
}

// WorkloadMembersOrErr returns the WorkloadMembers value or an error if the edge
// was not loaded in eager-loading.
func (e InstanceResourceEdges) WorkloadMembersOrErr() ([]*WorkloadMember, error) {
	if e.loadedTypes[3] {
		return e.WorkloadMembers, nil
	}
	return nil, &NotLoadedError{edge: "workload_members"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InstanceResource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case instanceresource.FieldID, instanceresource.FieldVMMemoryBytes, instanceresource.FieldVMCPUCores, instanceresource.FieldVMStorageBytes:
			values[i] = new(sql.NullInt64)
		case instanceresource.FieldResourceID, instanceresource.FieldKind, instanceresource.FieldDescription, instanceresource.FieldDesiredState, instanceresource.FieldCurrentState, instanceresource.FieldStatus, instanceresource.FieldStatusDetail:
			values[i] = new(sql.NullString)
		case instanceresource.ForeignKeys[0]: // instance_resource_user
			values[i] = new(sql.NullInt64)
		case instanceresource.ForeignKeys[1]: // instance_resource_os
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InstanceResource fields.
func (ir *InstanceResource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case instanceresource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ir.ID = int(value.Int64)
		case instanceresource.FieldResourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				ir.ResourceID = value.String
			}
		case instanceresource.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				ir.Kind = instanceresource.Kind(value.String)
			}
		case instanceresource.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ir.Description = value.String
			}
		case instanceresource.FieldDesiredState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desired_state", values[i])
			} else if value.Valid {
				ir.DesiredState = instanceresource.DesiredState(value.String)
			}
		case instanceresource.FieldCurrentState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field current_state", values[i])
			} else if value.Valid {
				ir.CurrentState = instanceresource.CurrentState(value.String)
			}
		case instanceresource.FieldVMMemoryBytes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field vm_memory_bytes", values[i])
			} else if value.Valid {
				ir.VMMemoryBytes = uint64(value.Int64)
			}
		case instanceresource.FieldVMCPUCores:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field vm_cpu_cores", values[i])
			} else if value.Valid {
				ir.VMCPUCores = uint32(value.Int64)
			}
		case instanceresource.FieldVMStorageBytes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field vm_storage_bytes", values[i])
			} else if value.Valid {
				ir.VMStorageBytes = uint64(value.Int64)
			}
		case instanceresource.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ir.Status = instanceresource.Status(value.String)
			}
		case instanceresource.FieldStatusDetail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status_detail", values[i])
			} else if value.Valid {
				ir.StatusDetail = value.String
			}
		case instanceresource.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field instance_resource_user", value)
			} else if value.Valid {
				ir.instance_resource_user = new(int)
				*ir.instance_resource_user = int(value.Int64)
			}
		case instanceresource.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field instance_resource_os", value)
			} else if value.Valid {
				ir.instance_resource_os = new(int)
				*ir.instance_resource_os = int(value.Int64)
			}
		default:
			ir.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the InstanceResource.
// This includes values selected through modifiers, order, etc.
func (ir *InstanceResource) Value(name string) (ent.Value, error) {
	return ir.selectValues.Get(name)
}

// QueryHost queries the "host" edge of the InstanceResource entity.
func (ir *InstanceResource) QueryHost() *HostResourceQuery {
	return NewInstanceResourceClient(ir.config).QueryHost(ir)
}

// QueryUser queries the "user" edge of the InstanceResource entity.
func (ir *InstanceResource) QueryUser() *UserResourceQuery {
	return NewInstanceResourceClient(ir.config).QueryUser(ir)
}

// QueryOs queries the "os" edge of the InstanceResource entity.
func (ir *InstanceResource) QueryOs() *OperatingSystemResourceQuery {
	return NewInstanceResourceClient(ir.config).QueryOs(ir)
}

// QueryWorkloadMembers queries the "workload_members" edge of the InstanceResource entity.
func (ir *InstanceResource) QueryWorkloadMembers() *WorkloadMemberQuery {
	return NewInstanceResourceClient(ir.config).QueryWorkloadMembers(ir)
}

// Update returns a builder for updating this InstanceResource.
// Note that you need to call InstanceResource.Unwrap() before calling this method if this InstanceResource
// was returned from a transaction, and the transaction was committed or rolled back.
func (ir *InstanceResource) Update() *InstanceResourceUpdateOne {
	return NewInstanceResourceClient(ir.config).UpdateOne(ir)
}

// Unwrap unwraps the InstanceResource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ir *InstanceResource) Unwrap() *InstanceResource {
	_tx, ok := ir.config.driver.(*txDriver)
	if !ok {
		panic("ent: InstanceResource is not a transactional entity")
	}
	ir.config.driver = _tx.drv
	return ir
}

// String implements the fmt.Stringer.
func (ir *InstanceResource) String() string {
	var builder strings.Builder
	builder.WriteString("InstanceResource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ir.ID))
	builder.WriteString("resource_id=")
	builder.WriteString(ir.ResourceID)
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(fmt.Sprintf("%v", ir.Kind))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ir.Description)
	builder.WriteString(", ")
	builder.WriteString("desired_state=")
	builder.WriteString(fmt.Sprintf("%v", ir.DesiredState))
	builder.WriteString(", ")
	builder.WriteString("current_state=")
	builder.WriteString(fmt.Sprintf("%v", ir.CurrentState))
	builder.WriteString(", ")
	builder.WriteString("vm_memory_bytes=")
	builder.WriteString(fmt.Sprintf("%v", ir.VMMemoryBytes))
	builder.WriteString(", ")
	builder.WriteString("vm_cpu_cores=")
	builder.WriteString(fmt.Sprintf("%v", ir.VMCPUCores))
	builder.WriteString(", ")
	builder.WriteString("vm_storage_bytes=")
	builder.WriteString(fmt.Sprintf("%v", ir.VMStorageBytes))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ir.Status))
	builder.WriteString(", ")
	builder.WriteString("status_detail=")
	builder.WriteString(ir.StatusDetail)
	builder.WriteByte(')')
	return builder.String()
}

// InstanceResources is a parsable slice of InstanceResource.
type InstanceResources []*InstanceResource
