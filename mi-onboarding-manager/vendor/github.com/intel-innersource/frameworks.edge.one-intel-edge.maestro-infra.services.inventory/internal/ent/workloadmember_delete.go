// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/workloadmember"
)

// WorkloadMemberDelete is the builder for deleting a WorkloadMember entity.
type WorkloadMemberDelete struct {
	config
	hooks    []Hook
	mutation *WorkloadMemberMutation
}

// Where appends a list predicates to the WorkloadMemberDelete builder.
func (wmd *WorkloadMemberDelete) Where(ps ...predicate.WorkloadMember) *WorkloadMemberDelete {
	wmd.mutation.Where(ps...)
	return wmd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (wmd *WorkloadMemberDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, WorkloadMemberMutation](ctx, wmd.sqlExec, wmd.mutation, wmd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (wmd *WorkloadMemberDelete) ExecX(ctx context.Context) int {
	n, err := wmd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (wmd *WorkloadMemberDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(workloadmember.Table, sqlgraph.NewFieldSpec(workloadmember.FieldID, field.TypeInt))
	if ps := wmd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, wmd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	wmd.mutation.done = true
	return affected, err
}

// WorkloadMemberDeleteOne is the builder for deleting a single WorkloadMember entity.
type WorkloadMemberDeleteOne struct {
	wmd *WorkloadMemberDelete
}

// Where appends a list predicates to the WorkloadMemberDelete builder.
func (wmdo *WorkloadMemberDeleteOne) Where(ps ...predicate.WorkloadMember) *WorkloadMemberDeleteOne {
	wmdo.wmd.mutation.Where(ps...)
	return wmdo
}

// Exec executes the deletion query.
func (wmdo *WorkloadMemberDeleteOne) Exec(ctx context.Context) error {
	n, err := wmdo.wmd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{workloadmember.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (wmdo *WorkloadMemberDeleteOne) ExecX(ctx context.Context) {
	if err := wmdo.Exec(ctx); err != nil {
		panic(err)
	}
}
