// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/instanceresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/workloadmember"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/workloadresource"
)

// WorkloadMemberUpdate is the builder for updating WorkloadMember entities.
type WorkloadMemberUpdate struct {
	config
	hooks    []Hook
	mutation *WorkloadMemberMutation
}

// Where appends a list predicates to the WorkloadMemberUpdate builder.
func (wmu *WorkloadMemberUpdate) Where(ps ...predicate.WorkloadMember) *WorkloadMemberUpdate {
	wmu.mutation.Where(ps...)
	return wmu
}

// SetResourceID sets the "resource_id" field.
func (wmu *WorkloadMemberUpdate) SetResourceID(s string) *WorkloadMemberUpdate {
	wmu.mutation.SetResourceID(s)
	return wmu
}

// SetKind sets the "kind" field.
func (wmu *WorkloadMemberUpdate) SetKind(w workloadmember.Kind) *WorkloadMemberUpdate {
	wmu.mutation.SetKind(w)
	return wmu
}

// SetWorkloadID sets the "workload" edge to the WorkloadResource entity by ID.
func (wmu *WorkloadMemberUpdate) SetWorkloadID(id int) *WorkloadMemberUpdate {
	wmu.mutation.SetWorkloadID(id)
	return wmu
}

// SetWorkload sets the "workload" edge to the WorkloadResource entity.
func (wmu *WorkloadMemberUpdate) SetWorkload(w *WorkloadResource) *WorkloadMemberUpdate {
	return wmu.SetWorkloadID(w.ID)
}

// SetInstanceID sets the "instance" edge to the InstanceResource entity by ID.
func (wmu *WorkloadMemberUpdate) SetInstanceID(id int) *WorkloadMemberUpdate {
	wmu.mutation.SetInstanceID(id)
	return wmu
}

// SetInstance sets the "instance" edge to the InstanceResource entity.
func (wmu *WorkloadMemberUpdate) SetInstance(i *InstanceResource) *WorkloadMemberUpdate {
	return wmu.SetInstanceID(i.ID)
}

// Mutation returns the WorkloadMemberMutation object of the builder.
func (wmu *WorkloadMemberUpdate) Mutation() *WorkloadMemberMutation {
	return wmu.mutation
}

// ClearWorkload clears the "workload" edge to the WorkloadResource entity.
func (wmu *WorkloadMemberUpdate) ClearWorkload() *WorkloadMemberUpdate {
	wmu.mutation.ClearWorkload()
	return wmu
}

// ClearInstance clears the "instance" edge to the InstanceResource entity.
func (wmu *WorkloadMemberUpdate) ClearInstance() *WorkloadMemberUpdate {
	wmu.mutation.ClearInstance()
	return wmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wmu *WorkloadMemberUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, WorkloadMemberMutation](ctx, wmu.sqlSave, wmu.mutation, wmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wmu *WorkloadMemberUpdate) SaveX(ctx context.Context) int {
	affected, err := wmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wmu *WorkloadMemberUpdate) Exec(ctx context.Context) error {
	_, err := wmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wmu *WorkloadMemberUpdate) ExecX(ctx context.Context) {
	if err := wmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wmu *WorkloadMemberUpdate) check() error {
	if v, ok := wmu.mutation.Kind(); ok {
		if err := workloadmember.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "WorkloadMember.kind": %w`, err)}
		}
	}
	if _, ok := wmu.mutation.WorkloadID(); wmu.mutation.WorkloadCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "WorkloadMember.workload"`)
	}
	if _, ok := wmu.mutation.InstanceID(); wmu.mutation.InstanceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "WorkloadMember.instance"`)
	}
	return nil
}

func (wmu *WorkloadMemberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(workloadmember.Table, workloadmember.Columns, sqlgraph.NewFieldSpec(workloadmember.FieldID, field.TypeInt))
	if ps := wmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wmu.mutation.ResourceID(); ok {
		_spec.SetField(workloadmember.FieldResourceID, field.TypeString, value)
	}
	if value, ok := wmu.mutation.Kind(); ok {
		_spec.SetField(workloadmember.FieldKind, field.TypeEnum, value)
	}
	if wmu.mutation.WorkloadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workloadmember.WorkloadTable,
			Columns: []string{workloadmember.WorkloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wmu.mutation.WorkloadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workloadmember.WorkloadTable,
			Columns: []string{workloadmember.WorkloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wmu.mutation.InstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workloadmember.InstanceTable,
			Columns: []string{workloadmember.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wmu.mutation.InstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workloadmember.InstanceTable,
			Columns: []string{workloadmember.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workloadmember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wmu.mutation.done = true
	return n, nil
}

// WorkloadMemberUpdateOne is the builder for updating a single WorkloadMember entity.
type WorkloadMemberUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkloadMemberMutation
}

// SetResourceID sets the "resource_id" field.
func (wmuo *WorkloadMemberUpdateOne) SetResourceID(s string) *WorkloadMemberUpdateOne {
	wmuo.mutation.SetResourceID(s)
	return wmuo
}

// SetKind sets the "kind" field.
func (wmuo *WorkloadMemberUpdateOne) SetKind(w workloadmember.Kind) *WorkloadMemberUpdateOne {
	wmuo.mutation.SetKind(w)
	return wmuo
}

// SetWorkloadID sets the "workload" edge to the WorkloadResource entity by ID.
func (wmuo *WorkloadMemberUpdateOne) SetWorkloadID(id int) *WorkloadMemberUpdateOne {
	wmuo.mutation.SetWorkloadID(id)
	return wmuo
}

// SetWorkload sets the "workload" edge to the WorkloadResource entity.
func (wmuo *WorkloadMemberUpdateOne) SetWorkload(w *WorkloadResource) *WorkloadMemberUpdateOne {
	return wmuo.SetWorkloadID(w.ID)
}

// SetInstanceID sets the "instance" edge to the InstanceResource entity by ID.
func (wmuo *WorkloadMemberUpdateOne) SetInstanceID(id int) *WorkloadMemberUpdateOne {
	wmuo.mutation.SetInstanceID(id)
	return wmuo
}

// SetInstance sets the "instance" edge to the InstanceResource entity.
func (wmuo *WorkloadMemberUpdateOne) SetInstance(i *InstanceResource) *WorkloadMemberUpdateOne {
	return wmuo.SetInstanceID(i.ID)
}

// Mutation returns the WorkloadMemberMutation object of the builder.
func (wmuo *WorkloadMemberUpdateOne) Mutation() *WorkloadMemberMutation {
	return wmuo.mutation
}

// ClearWorkload clears the "workload" edge to the WorkloadResource entity.
func (wmuo *WorkloadMemberUpdateOne) ClearWorkload() *WorkloadMemberUpdateOne {
	wmuo.mutation.ClearWorkload()
	return wmuo
}

// ClearInstance clears the "instance" edge to the InstanceResource entity.
func (wmuo *WorkloadMemberUpdateOne) ClearInstance() *WorkloadMemberUpdateOne {
	wmuo.mutation.ClearInstance()
	return wmuo
}

// Where appends a list predicates to the WorkloadMemberUpdate builder.
func (wmuo *WorkloadMemberUpdateOne) Where(ps ...predicate.WorkloadMember) *WorkloadMemberUpdateOne {
	wmuo.mutation.Where(ps...)
	return wmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wmuo *WorkloadMemberUpdateOne) Select(field string, fields ...string) *WorkloadMemberUpdateOne {
	wmuo.fields = append([]string{field}, fields...)
	return wmuo
}

// Save executes the query and returns the updated WorkloadMember entity.
func (wmuo *WorkloadMemberUpdateOne) Save(ctx context.Context) (*WorkloadMember, error) {
	return withHooks[*WorkloadMember, WorkloadMemberMutation](ctx, wmuo.sqlSave, wmuo.mutation, wmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wmuo *WorkloadMemberUpdateOne) SaveX(ctx context.Context) *WorkloadMember {
	node, err := wmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wmuo *WorkloadMemberUpdateOne) Exec(ctx context.Context) error {
	_, err := wmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wmuo *WorkloadMemberUpdateOne) ExecX(ctx context.Context) {
	if err := wmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wmuo *WorkloadMemberUpdateOne) check() error {
	if v, ok := wmuo.mutation.Kind(); ok {
		if err := workloadmember.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "WorkloadMember.kind": %w`, err)}
		}
	}
	if _, ok := wmuo.mutation.WorkloadID(); wmuo.mutation.WorkloadCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "WorkloadMember.workload"`)
	}
	if _, ok := wmuo.mutation.InstanceID(); wmuo.mutation.InstanceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "WorkloadMember.instance"`)
	}
	return nil
}

func (wmuo *WorkloadMemberUpdateOne) sqlSave(ctx context.Context) (_node *WorkloadMember, err error) {
	if err := wmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workloadmember.Table, workloadmember.Columns, sqlgraph.NewFieldSpec(workloadmember.FieldID, field.TypeInt))
	id, ok := wmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkloadMember.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workloadmember.FieldID)
		for _, f := range fields {
			if !workloadmember.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workloadmember.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wmuo.mutation.ResourceID(); ok {
		_spec.SetField(workloadmember.FieldResourceID, field.TypeString, value)
	}
	if value, ok := wmuo.mutation.Kind(); ok {
		_spec.SetField(workloadmember.FieldKind, field.TypeEnum, value)
	}
	if wmuo.mutation.WorkloadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workloadmember.WorkloadTable,
			Columns: []string{workloadmember.WorkloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wmuo.mutation.WorkloadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workloadmember.WorkloadTable,
			Columns: []string{workloadmember.WorkloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wmuo.mutation.InstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workloadmember.InstanceTable,
			Columns: []string{workloadmember.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wmuo.mutation.InstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workloadmember.InstanceTable,
			Columns: []string{workloadmember.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkloadMember{config: wmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workloadmember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wmuo.mutation.done = true
	return _node, nil
}
