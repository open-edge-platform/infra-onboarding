// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hostresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/repeatedscheduleresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/siteresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/workloadresource"
)

// RepeatedScheduleResourceQuery is the builder for querying RepeatedScheduleResource entities.
type RepeatedScheduleResourceQuery struct {
	config
	ctx                *QueryContext
	order              []repeatedscheduleresource.OrderOption
	inters             []Interceptor
	predicates         []predicate.RepeatedScheduleResource
	withTargetSite     *SiteResourceQuery
	withTargetHost     *HostResourceQuery
	withTargetWorkload *WorkloadResourceQuery
	withFKs            bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RepeatedScheduleResourceQuery builder.
func (rsrq *RepeatedScheduleResourceQuery) Where(ps ...predicate.RepeatedScheduleResource) *RepeatedScheduleResourceQuery {
	rsrq.predicates = append(rsrq.predicates, ps...)
	return rsrq
}

// Limit the number of records to be returned by this query.
func (rsrq *RepeatedScheduleResourceQuery) Limit(limit int) *RepeatedScheduleResourceQuery {
	rsrq.ctx.Limit = &limit
	return rsrq
}

// Offset to start from.
func (rsrq *RepeatedScheduleResourceQuery) Offset(offset int) *RepeatedScheduleResourceQuery {
	rsrq.ctx.Offset = &offset
	return rsrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rsrq *RepeatedScheduleResourceQuery) Unique(unique bool) *RepeatedScheduleResourceQuery {
	rsrq.ctx.Unique = &unique
	return rsrq
}

// Order specifies how the records should be ordered.
func (rsrq *RepeatedScheduleResourceQuery) Order(o ...repeatedscheduleresource.OrderOption) *RepeatedScheduleResourceQuery {
	rsrq.order = append(rsrq.order, o...)
	return rsrq
}

// QueryTargetSite chains the current query on the "target_site" edge.
func (rsrq *RepeatedScheduleResourceQuery) QueryTargetSite() *SiteResourceQuery {
	query := (&SiteResourceClient{config: rsrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rsrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rsrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(repeatedscheduleresource.Table, repeatedscheduleresource.FieldID, selector),
			sqlgraph.To(siteresource.Table, siteresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, repeatedscheduleresource.TargetSiteTable, repeatedscheduleresource.TargetSiteColumn),
		)
		fromU = sqlgraph.SetNeighbors(rsrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTargetHost chains the current query on the "target_host" edge.
func (rsrq *RepeatedScheduleResourceQuery) QueryTargetHost() *HostResourceQuery {
	query := (&HostResourceClient{config: rsrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rsrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rsrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(repeatedscheduleresource.Table, repeatedscheduleresource.FieldID, selector),
			sqlgraph.To(hostresource.Table, hostresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, repeatedscheduleresource.TargetHostTable, repeatedscheduleresource.TargetHostColumn),
		)
		fromU = sqlgraph.SetNeighbors(rsrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTargetWorkload chains the current query on the "target_workload" edge.
func (rsrq *RepeatedScheduleResourceQuery) QueryTargetWorkload() *WorkloadResourceQuery {
	query := (&WorkloadResourceClient{config: rsrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rsrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rsrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(repeatedscheduleresource.Table, repeatedscheduleresource.FieldID, selector),
			sqlgraph.To(workloadresource.Table, workloadresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, repeatedscheduleresource.TargetWorkloadTable, repeatedscheduleresource.TargetWorkloadColumn),
		)
		fromU = sqlgraph.SetNeighbors(rsrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first RepeatedScheduleResource entity from the query.
// Returns a *NotFoundError when no RepeatedScheduleResource was found.
func (rsrq *RepeatedScheduleResourceQuery) First(ctx context.Context) (*RepeatedScheduleResource, error) {
	nodes, err := rsrq.Limit(1).All(setContextOp(ctx, rsrq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{repeatedscheduleresource.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rsrq *RepeatedScheduleResourceQuery) FirstX(ctx context.Context) *RepeatedScheduleResource {
	node, err := rsrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first RepeatedScheduleResource ID from the query.
// Returns a *NotFoundError when no RepeatedScheduleResource ID was found.
func (rsrq *RepeatedScheduleResourceQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rsrq.Limit(1).IDs(setContextOp(ctx, rsrq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{repeatedscheduleresource.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rsrq *RepeatedScheduleResourceQuery) FirstIDX(ctx context.Context) int {
	id, err := rsrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single RepeatedScheduleResource entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one RepeatedScheduleResource entity is found.
// Returns a *NotFoundError when no RepeatedScheduleResource entities are found.
func (rsrq *RepeatedScheduleResourceQuery) Only(ctx context.Context) (*RepeatedScheduleResource, error) {
	nodes, err := rsrq.Limit(2).All(setContextOp(ctx, rsrq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{repeatedscheduleresource.Label}
	default:
		return nil, &NotSingularError{repeatedscheduleresource.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rsrq *RepeatedScheduleResourceQuery) OnlyX(ctx context.Context) *RepeatedScheduleResource {
	node, err := rsrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only RepeatedScheduleResource ID in the query.
// Returns a *NotSingularError when more than one RepeatedScheduleResource ID is found.
// Returns a *NotFoundError when no entities are found.
func (rsrq *RepeatedScheduleResourceQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rsrq.Limit(2).IDs(setContextOp(ctx, rsrq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{repeatedscheduleresource.Label}
	default:
		err = &NotSingularError{repeatedscheduleresource.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rsrq *RepeatedScheduleResourceQuery) OnlyIDX(ctx context.Context) int {
	id, err := rsrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of RepeatedScheduleResources.
func (rsrq *RepeatedScheduleResourceQuery) All(ctx context.Context) ([]*RepeatedScheduleResource, error) {
	ctx = setContextOp(ctx, rsrq.ctx, "All")
	if err := rsrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*RepeatedScheduleResource, *RepeatedScheduleResourceQuery]()
	return withInterceptors[[]*RepeatedScheduleResource](ctx, rsrq, qr, rsrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (rsrq *RepeatedScheduleResourceQuery) AllX(ctx context.Context) []*RepeatedScheduleResource {
	nodes, err := rsrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of RepeatedScheduleResource IDs.
func (rsrq *RepeatedScheduleResourceQuery) IDs(ctx context.Context) (ids []int, err error) {
	if rsrq.ctx.Unique == nil && rsrq.path != nil {
		rsrq.Unique(true)
	}
	ctx = setContextOp(ctx, rsrq.ctx, "IDs")
	if err = rsrq.Select(repeatedscheduleresource.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rsrq *RepeatedScheduleResourceQuery) IDsX(ctx context.Context) []int {
	ids, err := rsrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rsrq *RepeatedScheduleResourceQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, rsrq.ctx, "Count")
	if err := rsrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, rsrq, querierCount[*RepeatedScheduleResourceQuery](), rsrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (rsrq *RepeatedScheduleResourceQuery) CountX(ctx context.Context) int {
	count, err := rsrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rsrq *RepeatedScheduleResourceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, rsrq.ctx, "Exist")
	switch _, err := rsrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (rsrq *RepeatedScheduleResourceQuery) ExistX(ctx context.Context) bool {
	exist, err := rsrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RepeatedScheduleResourceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rsrq *RepeatedScheduleResourceQuery) Clone() *RepeatedScheduleResourceQuery {
	if rsrq == nil {
		return nil
	}
	return &RepeatedScheduleResourceQuery{
		config:             rsrq.config,
		ctx:                rsrq.ctx.Clone(),
		order:              append([]repeatedscheduleresource.OrderOption{}, rsrq.order...),
		inters:             append([]Interceptor{}, rsrq.inters...),
		predicates:         append([]predicate.RepeatedScheduleResource{}, rsrq.predicates...),
		withTargetSite:     rsrq.withTargetSite.Clone(),
		withTargetHost:     rsrq.withTargetHost.Clone(),
		withTargetWorkload: rsrq.withTargetWorkload.Clone(),
		// clone intermediate query.
		sql:  rsrq.sql.Clone(),
		path: rsrq.path,
	}
}

// WithTargetSite tells the query-builder to eager-load the nodes that are connected to
// the "target_site" edge. The optional arguments are used to configure the query builder of the edge.
func (rsrq *RepeatedScheduleResourceQuery) WithTargetSite(opts ...func(*SiteResourceQuery)) *RepeatedScheduleResourceQuery {
	query := (&SiteResourceClient{config: rsrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rsrq.withTargetSite = query
	return rsrq
}

// WithTargetHost tells the query-builder to eager-load the nodes that are connected to
// the "target_host" edge. The optional arguments are used to configure the query builder of the edge.
func (rsrq *RepeatedScheduleResourceQuery) WithTargetHost(opts ...func(*HostResourceQuery)) *RepeatedScheduleResourceQuery {
	query := (&HostResourceClient{config: rsrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rsrq.withTargetHost = query
	return rsrq
}

// WithTargetWorkload tells the query-builder to eager-load the nodes that are connected to
// the "target_workload" edge. The optional arguments are used to configure the query builder of the edge.
func (rsrq *RepeatedScheduleResourceQuery) WithTargetWorkload(opts ...func(*WorkloadResourceQuery)) *RepeatedScheduleResourceQuery {
	query := (&WorkloadResourceClient{config: rsrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rsrq.withTargetWorkload = query
	return rsrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ResourceID string `json:"resource_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RepeatedScheduleResource.Query().
//		GroupBy(repeatedscheduleresource.FieldResourceID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (rsrq *RepeatedScheduleResourceQuery) GroupBy(field string, fields ...string) *RepeatedScheduleResourceGroupBy {
	rsrq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &RepeatedScheduleResourceGroupBy{build: rsrq}
	grbuild.flds = &rsrq.ctx.Fields
	grbuild.label = repeatedscheduleresource.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ResourceID string `json:"resource_id,omitempty"`
//	}
//
//	client.RepeatedScheduleResource.Query().
//		Select(repeatedscheduleresource.FieldResourceID).
//		Scan(ctx, &v)
func (rsrq *RepeatedScheduleResourceQuery) Select(fields ...string) *RepeatedScheduleResourceSelect {
	rsrq.ctx.Fields = append(rsrq.ctx.Fields, fields...)
	sbuild := &RepeatedScheduleResourceSelect{RepeatedScheduleResourceQuery: rsrq}
	sbuild.label = repeatedscheduleresource.Label
	sbuild.flds, sbuild.scan = &rsrq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a RepeatedScheduleResourceSelect configured with the given aggregations.
func (rsrq *RepeatedScheduleResourceQuery) Aggregate(fns ...AggregateFunc) *RepeatedScheduleResourceSelect {
	return rsrq.Select().Aggregate(fns...)
}

func (rsrq *RepeatedScheduleResourceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range rsrq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, rsrq); err != nil {
				return err
			}
		}
	}
	for _, f := range rsrq.ctx.Fields {
		if !repeatedscheduleresource.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rsrq.path != nil {
		prev, err := rsrq.path(ctx)
		if err != nil {
			return err
		}
		rsrq.sql = prev
	}
	return nil
}

func (rsrq *RepeatedScheduleResourceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*RepeatedScheduleResource, error) {
	var (
		nodes       = []*RepeatedScheduleResource{}
		withFKs     = rsrq.withFKs
		_spec       = rsrq.querySpec()
		loadedTypes = [3]bool{
			rsrq.withTargetSite != nil,
			rsrq.withTargetHost != nil,
			rsrq.withTargetWorkload != nil,
		}
	)
	if rsrq.withTargetSite != nil || rsrq.withTargetHost != nil || rsrq.withTargetWorkload != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, repeatedscheduleresource.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*RepeatedScheduleResource).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &RepeatedScheduleResource{config: rsrq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rsrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := rsrq.withTargetSite; query != nil {
		if err := rsrq.loadTargetSite(ctx, query, nodes, nil,
			func(n *RepeatedScheduleResource, e *SiteResource) { n.Edges.TargetSite = e }); err != nil {
			return nil, err
		}
	}
	if query := rsrq.withTargetHost; query != nil {
		if err := rsrq.loadTargetHost(ctx, query, nodes, nil,
			func(n *RepeatedScheduleResource, e *HostResource) { n.Edges.TargetHost = e }); err != nil {
			return nil, err
		}
	}
	if query := rsrq.withTargetWorkload; query != nil {
		if err := rsrq.loadTargetWorkload(ctx, query, nodes, nil,
			func(n *RepeatedScheduleResource, e *WorkloadResource) { n.Edges.TargetWorkload = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (rsrq *RepeatedScheduleResourceQuery) loadTargetSite(ctx context.Context, query *SiteResourceQuery, nodes []*RepeatedScheduleResource, init func(*RepeatedScheduleResource), assign func(*RepeatedScheduleResource, *SiteResource)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*RepeatedScheduleResource)
	for i := range nodes {
		if nodes[i].repeated_schedule_resource_target_site == nil {
			continue
		}
		fk := *nodes[i].repeated_schedule_resource_target_site
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(siteresource.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "repeated_schedule_resource_target_site" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rsrq *RepeatedScheduleResourceQuery) loadTargetHost(ctx context.Context, query *HostResourceQuery, nodes []*RepeatedScheduleResource, init func(*RepeatedScheduleResource), assign func(*RepeatedScheduleResource, *HostResource)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*RepeatedScheduleResource)
	for i := range nodes {
		if nodes[i].repeated_schedule_resource_target_host == nil {
			continue
		}
		fk := *nodes[i].repeated_schedule_resource_target_host
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(hostresource.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "repeated_schedule_resource_target_host" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rsrq *RepeatedScheduleResourceQuery) loadTargetWorkload(ctx context.Context, query *WorkloadResourceQuery, nodes []*RepeatedScheduleResource, init func(*RepeatedScheduleResource), assign func(*RepeatedScheduleResource, *WorkloadResource)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*RepeatedScheduleResource)
	for i := range nodes {
		if nodes[i].repeated_schedule_resource_target_workload == nil {
			continue
		}
		fk := *nodes[i].repeated_schedule_resource_target_workload
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(workloadresource.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "repeated_schedule_resource_target_workload" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (rsrq *RepeatedScheduleResourceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rsrq.querySpec()
	_spec.Node.Columns = rsrq.ctx.Fields
	if len(rsrq.ctx.Fields) > 0 {
		_spec.Unique = rsrq.ctx.Unique != nil && *rsrq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, rsrq.driver, _spec)
}

func (rsrq *RepeatedScheduleResourceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(repeatedscheduleresource.Table, repeatedscheduleresource.Columns, sqlgraph.NewFieldSpec(repeatedscheduleresource.FieldID, field.TypeInt))
	_spec.From = rsrq.sql
	if unique := rsrq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if rsrq.path != nil {
		_spec.Unique = true
	}
	if fields := rsrq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, repeatedscheduleresource.FieldID)
		for i := range fields {
			if fields[i] != repeatedscheduleresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := rsrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rsrq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rsrq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rsrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rsrq *RepeatedScheduleResourceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rsrq.driver.Dialect())
	t1 := builder.Table(repeatedscheduleresource.Table)
	columns := rsrq.ctx.Fields
	if len(columns) == 0 {
		columns = repeatedscheduleresource.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rsrq.sql != nil {
		selector = rsrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rsrq.ctx.Unique != nil && *rsrq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range rsrq.predicates {
		p(selector)
	}
	for _, p := range rsrq.order {
		p(selector)
	}
	if offset := rsrq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rsrq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// RepeatedScheduleResourceGroupBy is the group-by builder for RepeatedScheduleResource entities.
type RepeatedScheduleResourceGroupBy struct {
	selector
	build *RepeatedScheduleResourceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rsrgb *RepeatedScheduleResourceGroupBy) Aggregate(fns ...AggregateFunc) *RepeatedScheduleResourceGroupBy {
	rsrgb.fns = append(rsrgb.fns, fns...)
	return rsrgb
}

// Scan applies the selector query and scans the result into the given value.
func (rsrgb *RepeatedScheduleResourceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rsrgb.build.ctx, "GroupBy")
	if err := rsrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RepeatedScheduleResourceQuery, *RepeatedScheduleResourceGroupBy](ctx, rsrgb.build, rsrgb, rsrgb.build.inters, v)
}

func (rsrgb *RepeatedScheduleResourceGroupBy) sqlScan(ctx context.Context, root *RepeatedScheduleResourceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rsrgb.fns))
	for _, fn := range rsrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rsrgb.flds)+len(rsrgb.fns))
		for _, f := range *rsrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rsrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rsrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// RepeatedScheduleResourceSelect is the builder for selecting fields of RepeatedScheduleResource entities.
type RepeatedScheduleResourceSelect struct {
	*RepeatedScheduleResourceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rsrs *RepeatedScheduleResourceSelect) Aggregate(fns ...AggregateFunc) *RepeatedScheduleResourceSelect {
	rsrs.fns = append(rsrs.fns, fns...)
	return rsrs
}

// Scan applies the selector query and scans the result into the given value.
func (rsrs *RepeatedScheduleResourceSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rsrs.ctx, "Select")
	if err := rsrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RepeatedScheduleResourceQuery, *RepeatedScheduleResourceSelect](ctx, rsrs.RepeatedScheduleResourceQuery, rsrs, rsrs.inters, v)
}

func (rsrs *RepeatedScheduleResourceSelect) sqlScan(ctx context.Context, root *RepeatedScheduleResourceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rsrs.fns))
	for _, fn := range rsrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rsrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rsrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
