// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/telemetrygroupresource"
)

// TelemetryGroupResourceDelete is the builder for deleting a TelemetryGroupResource entity.
type TelemetryGroupResourceDelete struct {
	config
	hooks    []Hook
	mutation *TelemetryGroupResourceMutation
}

// Where appends a list predicates to the TelemetryGroupResourceDelete builder.
func (tgrd *TelemetryGroupResourceDelete) Where(ps ...predicate.TelemetryGroupResource) *TelemetryGroupResourceDelete {
	tgrd.mutation.Where(ps...)
	return tgrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tgrd *TelemetryGroupResourceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, TelemetryGroupResourceMutation](ctx, tgrd.sqlExec, tgrd.mutation, tgrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tgrd *TelemetryGroupResourceDelete) ExecX(ctx context.Context) int {
	n, err := tgrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tgrd *TelemetryGroupResourceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(telemetrygroupresource.Table, sqlgraph.NewFieldSpec(telemetrygroupresource.FieldID, field.TypeInt))
	if ps := tgrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tgrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tgrd.mutation.done = true
	return affected, err
}

// TelemetryGroupResourceDeleteOne is the builder for deleting a single TelemetryGroupResource entity.
type TelemetryGroupResourceDeleteOne struct {
	tgrd *TelemetryGroupResourceDelete
}

// Where appends a list predicates to the TelemetryGroupResourceDelete builder.
func (tgrdo *TelemetryGroupResourceDeleteOne) Where(ps ...predicate.TelemetryGroupResource) *TelemetryGroupResourceDeleteOne {
	tgrdo.tgrd.mutation.Where(ps...)
	return tgrdo
}

// Exec executes the deletion query.
func (tgrdo *TelemetryGroupResourceDeleteOne) Exec(ctx context.Context) error {
	n, err := tgrdo.tgrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{telemetrygroupresource.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tgrdo *TelemetryGroupResourceDeleteOne) ExecX(ctx context.Context) {
	if err := tgrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
