// Code generated by ent, DO NOT EDIT.

package repeatedscheduleresource

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the repeatedscheduleresource type in the database.
	Label = "repeated_schedule_resource"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldResourceID holds the string denoting the resource_id field in the database.
	FieldResourceID = "resource_id"
	// FieldScheduleStatus holds the string denoting the schedule_status field in the database.
	FieldScheduleStatus = "schedule_status"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldDurationSeconds holds the string denoting the duration_seconds field in the database.
	FieldDurationSeconds = "duration_seconds"
	// FieldCronMinutes holds the string denoting the cron_minutes field in the database.
	FieldCronMinutes = "cron_minutes"
	// FieldCronHours holds the string denoting the cron_hours field in the database.
	FieldCronHours = "cron_hours"
	// FieldCronDayMonth holds the string denoting the cron_day_month field in the database.
	FieldCronDayMonth = "cron_day_month"
	// FieldCronMonth holds the string denoting the cron_month field in the database.
	FieldCronMonth = "cron_month"
	// FieldCronDayWeek holds the string denoting the cron_day_week field in the database.
	FieldCronDayWeek = "cron_day_week"
	// EdgeTargetSite holds the string denoting the target_site edge name in mutations.
	EdgeTargetSite = "target_site"
	// EdgeTargetHost holds the string denoting the target_host edge name in mutations.
	EdgeTargetHost = "target_host"
	// EdgeTargetWorkload holds the string denoting the target_workload edge name in mutations.
	EdgeTargetWorkload = "target_workload"
	// Table holds the table name of the repeatedscheduleresource in the database.
	Table = "repeated_schedule_resources"
	// TargetSiteTable is the table that holds the target_site relation/edge.
	TargetSiteTable = "repeated_schedule_resources"
	// TargetSiteInverseTable is the table name for the SiteResource entity.
	// It exists in this package in order to avoid circular dependency with the "siteresource" package.
	TargetSiteInverseTable = "site_resources"
	// TargetSiteColumn is the table column denoting the target_site relation/edge.
	TargetSiteColumn = "repeated_schedule_resource_target_site"
	// TargetHostTable is the table that holds the target_host relation/edge.
	TargetHostTable = "repeated_schedule_resources"
	// TargetHostInverseTable is the table name for the HostResource entity.
	// It exists in this package in order to avoid circular dependency with the "hostresource" package.
	TargetHostInverseTable = "host_resources"
	// TargetHostColumn is the table column denoting the target_host relation/edge.
	TargetHostColumn = "repeated_schedule_resource_target_host"
	// TargetWorkloadTable is the table that holds the target_workload relation/edge.
	TargetWorkloadTable = "repeated_schedule_resources"
	// TargetWorkloadInverseTable is the table name for the WorkloadResource entity.
	// It exists in this package in order to avoid circular dependency with the "workloadresource" package.
	TargetWorkloadInverseTable = "workload_resources"
	// TargetWorkloadColumn is the table column denoting the target_workload relation/edge.
	TargetWorkloadColumn = "repeated_schedule_resource_target_workload"
)

// Columns holds all SQL columns for repeatedscheduleresource fields.
var Columns = []string{
	FieldID,
	FieldResourceID,
	FieldScheduleStatus,
	FieldDescription,
	FieldDurationSeconds,
	FieldCronMinutes,
	FieldCronHours,
	FieldCronDayMonth,
	FieldCronMonth,
	FieldCronDayWeek,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "repeated_schedule_resources"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"repeated_schedule_resource_target_site",
	"repeated_schedule_resource_target_host",
	"repeated_schedule_resource_target_workload",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// ScheduleStatus defines the type for the "schedule_status" enum field.
type ScheduleStatus string

// ScheduleStatus values.
const (
	ScheduleStatusSCHEDULE_STATUS_UNSPECIFIED     ScheduleStatus = "SCHEDULE_STATUS_UNSPECIFIED"
	ScheduleStatusSCHEDULE_STATUS_MAINTENANCE     ScheduleStatus = "SCHEDULE_STATUS_MAINTENANCE"
	ScheduleStatusSCHEDULE_STATUS_SHIPPING        ScheduleStatus = "SCHEDULE_STATUS_SHIPPING"
	ScheduleStatusSCHEDULE_STATUS_OS_UPDATE       ScheduleStatus = "SCHEDULE_STATUS_OS_UPDATE"
	ScheduleStatusSCHEDULE_STATUS_FIRMWARE_UPDATE ScheduleStatus = "SCHEDULE_STATUS_FIRMWARE_UPDATE"
	ScheduleStatusSCHEDULE_STATUS_CLUSTER_UPDATE  ScheduleStatus = "SCHEDULE_STATUS_CLUSTER_UPDATE"
)

func (ss ScheduleStatus) String() string {
	return string(ss)
}

// ScheduleStatusValidator is a validator for the "schedule_status" field enum values. It is called by the builders before save.
func ScheduleStatusValidator(ss ScheduleStatus) error {
	switch ss {
	case ScheduleStatusSCHEDULE_STATUS_UNSPECIFIED, ScheduleStatusSCHEDULE_STATUS_MAINTENANCE, ScheduleStatusSCHEDULE_STATUS_SHIPPING, ScheduleStatusSCHEDULE_STATUS_OS_UPDATE, ScheduleStatusSCHEDULE_STATUS_FIRMWARE_UPDATE, ScheduleStatusSCHEDULE_STATUS_CLUSTER_UPDATE:
		return nil
	default:
		return fmt.Errorf("repeatedscheduleresource: invalid enum value for schedule_status field: %q", ss)
	}
}

// OrderOption defines the ordering options for the RepeatedScheduleResource queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByResourceID orders the results by the resource_id field.
func ByResourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceID, opts...).ToFunc()
}

// ByScheduleStatus orders the results by the schedule_status field.
func ByScheduleStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScheduleStatus, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByDurationSeconds orders the results by the duration_seconds field.
func ByDurationSeconds(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDurationSeconds, opts...).ToFunc()
}

// ByCronMinutes orders the results by the cron_minutes field.
func ByCronMinutes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCronMinutes, opts...).ToFunc()
}

// ByCronHours orders the results by the cron_hours field.
func ByCronHours(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCronHours, opts...).ToFunc()
}

// ByCronDayMonth orders the results by the cron_day_month field.
func ByCronDayMonth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCronDayMonth, opts...).ToFunc()
}

// ByCronMonth orders the results by the cron_month field.
func ByCronMonth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCronMonth, opts...).ToFunc()
}

// ByCronDayWeek orders the results by the cron_day_week field.
func ByCronDayWeek(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCronDayWeek, opts...).ToFunc()
}

// ByTargetSiteField orders the results by target_site field.
func ByTargetSiteField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTargetSiteStep(), sql.OrderByField(field, opts...))
	}
}

// ByTargetHostField orders the results by target_host field.
func ByTargetHostField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTargetHostStep(), sql.OrderByField(field, opts...))
	}
}

// ByTargetWorkloadField orders the results by target_workload field.
func ByTargetWorkloadField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTargetWorkloadStep(), sql.OrderByField(field, opts...))
	}
}
func newTargetSiteStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TargetSiteInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TargetSiteTable, TargetSiteColumn),
	)
}
func newTargetHostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TargetHostInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TargetHostTable, TargetHostColumn),
	)
}
func newTargetWorkloadStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TargetWorkloadInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TargetWorkloadTable, TargetWorkloadColumn),
	)
}
