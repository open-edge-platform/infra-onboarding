// Code generated by ent, DO NOT EDIT.

package repeatedscheduleresource

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldLTE(FieldID, id))
}

// ResourceID applies equality check predicate on the "resource_id" field. It's identical to ResourceIDEQ.
func ResourceID(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldEQ(FieldResourceID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldEQ(FieldName, v))
}

// DurationSeconds applies equality check predicate on the "duration_seconds" field. It's identical to DurationSecondsEQ.
func DurationSeconds(v uint32) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldEQ(FieldDurationSeconds, v))
}

// CronMinutes applies equality check predicate on the "cron_minutes" field. It's identical to CronMinutesEQ.
func CronMinutes(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldEQ(FieldCronMinutes, v))
}

// CronHours applies equality check predicate on the "cron_hours" field. It's identical to CronHoursEQ.
func CronHours(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldEQ(FieldCronHours, v))
}

// CronDayMonth applies equality check predicate on the "cron_day_month" field. It's identical to CronDayMonthEQ.
func CronDayMonth(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldEQ(FieldCronDayMonth, v))
}

// CronMonth applies equality check predicate on the "cron_month" field. It's identical to CronMonthEQ.
func CronMonth(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldEQ(FieldCronMonth, v))
}

// CronDayWeek applies equality check predicate on the "cron_day_week" field. It's identical to CronDayWeekEQ.
func CronDayWeek(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldEQ(FieldCronDayWeek, v))
}

// ResourceIDEQ applies the EQ predicate on the "resource_id" field.
func ResourceIDEQ(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldEQ(FieldResourceID, v))
}

// ResourceIDNEQ applies the NEQ predicate on the "resource_id" field.
func ResourceIDNEQ(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldNEQ(FieldResourceID, v))
}

// ResourceIDIn applies the In predicate on the "resource_id" field.
func ResourceIDIn(vs ...string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldIn(FieldResourceID, vs...))
}

// ResourceIDNotIn applies the NotIn predicate on the "resource_id" field.
func ResourceIDNotIn(vs ...string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldNotIn(FieldResourceID, vs...))
}

// ResourceIDGT applies the GT predicate on the "resource_id" field.
func ResourceIDGT(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldGT(FieldResourceID, v))
}

// ResourceIDGTE applies the GTE predicate on the "resource_id" field.
func ResourceIDGTE(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldGTE(FieldResourceID, v))
}

// ResourceIDLT applies the LT predicate on the "resource_id" field.
func ResourceIDLT(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldLT(FieldResourceID, v))
}

// ResourceIDLTE applies the LTE predicate on the "resource_id" field.
func ResourceIDLTE(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldLTE(FieldResourceID, v))
}

// ResourceIDContains applies the Contains predicate on the "resource_id" field.
func ResourceIDContains(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldContains(FieldResourceID, v))
}

// ResourceIDHasPrefix applies the HasPrefix predicate on the "resource_id" field.
func ResourceIDHasPrefix(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldHasPrefix(FieldResourceID, v))
}

// ResourceIDHasSuffix applies the HasSuffix predicate on the "resource_id" field.
func ResourceIDHasSuffix(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldHasSuffix(FieldResourceID, v))
}

// ResourceIDEqualFold applies the EqualFold predicate on the "resource_id" field.
func ResourceIDEqualFold(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldEqualFold(FieldResourceID, v))
}

// ResourceIDContainsFold applies the ContainsFold predicate on the "resource_id" field.
func ResourceIDContainsFold(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldContainsFold(FieldResourceID, v))
}

// ScheduleStatusEQ applies the EQ predicate on the "schedule_status" field.
func ScheduleStatusEQ(v ScheduleStatus) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldEQ(FieldScheduleStatus, v))
}

// ScheduleStatusNEQ applies the NEQ predicate on the "schedule_status" field.
func ScheduleStatusNEQ(v ScheduleStatus) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldNEQ(FieldScheduleStatus, v))
}

// ScheduleStatusIn applies the In predicate on the "schedule_status" field.
func ScheduleStatusIn(vs ...ScheduleStatus) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldIn(FieldScheduleStatus, vs...))
}

// ScheduleStatusNotIn applies the NotIn predicate on the "schedule_status" field.
func ScheduleStatusNotIn(vs ...ScheduleStatus) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldNotIn(FieldScheduleStatus, vs...))
}

// ScheduleStatusIsNil applies the IsNil predicate on the "schedule_status" field.
func ScheduleStatusIsNil() predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldIsNull(FieldScheduleStatus))
}

// ScheduleStatusNotNil applies the NotNil predicate on the "schedule_status" field.
func ScheduleStatusNotNil() predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldNotNull(FieldScheduleStatus))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldContainsFold(FieldName, v))
}

// DurationSecondsEQ applies the EQ predicate on the "duration_seconds" field.
func DurationSecondsEQ(v uint32) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldEQ(FieldDurationSeconds, v))
}

// DurationSecondsNEQ applies the NEQ predicate on the "duration_seconds" field.
func DurationSecondsNEQ(v uint32) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldNEQ(FieldDurationSeconds, v))
}

// DurationSecondsIn applies the In predicate on the "duration_seconds" field.
func DurationSecondsIn(vs ...uint32) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldIn(FieldDurationSeconds, vs...))
}

// DurationSecondsNotIn applies the NotIn predicate on the "duration_seconds" field.
func DurationSecondsNotIn(vs ...uint32) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldNotIn(FieldDurationSeconds, vs...))
}

// DurationSecondsGT applies the GT predicate on the "duration_seconds" field.
func DurationSecondsGT(v uint32) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldGT(FieldDurationSeconds, v))
}

// DurationSecondsGTE applies the GTE predicate on the "duration_seconds" field.
func DurationSecondsGTE(v uint32) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldGTE(FieldDurationSeconds, v))
}

// DurationSecondsLT applies the LT predicate on the "duration_seconds" field.
func DurationSecondsLT(v uint32) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldLT(FieldDurationSeconds, v))
}

// DurationSecondsLTE applies the LTE predicate on the "duration_seconds" field.
func DurationSecondsLTE(v uint32) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldLTE(FieldDurationSeconds, v))
}

// DurationSecondsIsNil applies the IsNil predicate on the "duration_seconds" field.
func DurationSecondsIsNil() predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldIsNull(FieldDurationSeconds))
}

// DurationSecondsNotNil applies the NotNil predicate on the "duration_seconds" field.
func DurationSecondsNotNil() predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldNotNull(FieldDurationSeconds))
}

// CronMinutesEQ applies the EQ predicate on the "cron_minutes" field.
func CronMinutesEQ(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldEQ(FieldCronMinutes, v))
}

// CronMinutesNEQ applies the NEQ predicate on the "cron_minutes" field.
func CronMinutesNEQ(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldNEQ(FieldCronMinutes, v))
}

// CronMinutesIn applies the In predicate on the "cron_minutes" field.
func CronMinutesIn(vs ...string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldIn(FieldCronMinutes, vs...))
}

// CronMinutesNotIn applies the NotIn predicate on the "cron_minutes" field.
func CronMinutesNotIn(vs ...string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldNotIn(FieldCronMinutes, vs...))
}

// CronMinutesGT applies the GT predicate on the "cron_minutes" field.
func CronMinutesGT(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldGT(FieldCronMinutes, v))
}

// CronMinutesGTE applies the GTE predicate on the "cron_minutes" field.
func CronMinutesGTE(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldGTE(FieldCronMinutes, v))
}

// CronMinutesLT applies the LT predicate on the "cron_minutes" field.
func CronMinutesLT(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldLT(FieldCronMinutes, v))
}

// CronMinutesLTE applies the LTE predicate on the "cron_minutes" field.
func CronMinutesLTE(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldLTE(FieldCronMinutes, v))
}

// CronMinutesContains applies the Contains predicate on the "cron_minutes" field.
func CronMinutesContains(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldContains(FieldCronMinutes, v))
}

// CronMinutesHasPrefix applies the HasPrefix predicate on the "cron_minutes" field.
func CronMinutesHasPrefix(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldHasPrefix(FieldCronMinutes, v))
}

// CronMinutesHasSuffix applies the HasSuffix predicate on the "cron_minutes" field.
func CronMinutesHasSuffix(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldHasSuffix(FieldCronMinutes, v))
}

// CronMinutesEqualFold applies the EqualFold predicate on the "cron_minutes" field.
func CronMinutesEqualFold(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldEqualFold(FieldCronMinutes, v))
}

// CronMinutesContainsFold applies the ContainsFold predicate on the "cron_minutes" field.
func CronMinutesContainsFold(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldContainsFold(FieldCronMinutes, v))
}

// CronHoursEQ applies the EQ predicate on the "cron_hours" field.
func CronHoursEQ(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldEQ(FieldCronHours, v))
}

// CronHoursNEQ applies the NEQ predicate on the "cron_hours" field.
func CronHoursNEQ(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldNEQ(FieldCronHours, v))
}

// CronHoursIn applies the In predicate on the "cron_hours" field.
func CronHoursIn(vs ...string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldIn(FieldCronHours, vs...))
}

// CronHoursNotIn applies the NotIn predicate on the "cron_hours" field.
func CronHoursNotIn(vs ...string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldNotIn(FieldCronHours, vs...))
}

// CronHoursGT applies the GT predicate on the "cron_hours" field.
func CronHoursGT(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldGT(FieldCronHours, v))
}

// CronHoursGTE applies the GTE predicate on the "cron_hours" field.
func CronHoursGTE(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldGTE(FieldCronHours, v))
}

// CronHoursLT applies the LT predicate on the "cron_hours" field.
func CronHoursLT(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldLT(FieldCronHours, v))
}

// CronHoursLTE applies the LTE predicate on the "cron_hours" field.
func CronHoursLTE(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldLTE(FieldCronHours, v))
}

// CronHoursContains applies the Contains predicate on the "cron_hours" field.
func CronHoursContains(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldContains(FieldCronHours, v))
}

// CronHoursHasPrefix applies the HasPrefix predicate on the "cron_hours" field.
func CronHoursHasPrefix(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldHasPrefix(FieldCronHours, v))
}

// CronHoursHasSuffix applies the HasSuffix predicate on the "cron_hours" field.
func CronHoursHasSuffix(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldHasSuffix(FieldCronHours, v))
}

// CronHoursEqualFold applies the EqualFold predicate on the "cron_hours" field.
func CronHoursEqualFold(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldEqualFold(FieldCronHours, v))
}

// CronHoursContainsFold applies the ContainsFold predicate on the "cron_hours" field.
func CronHoursContainsFold(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldContainsFold(FieldCronHours, v))
}

// CronDayMonthEQ applies the EQ predicate on the "cron_day_month" field.
func CronDayMonthEQ(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldEQ(FieldCronDayMonth, v))
}

// CronDayMonthNEQ applies the NEQ predicate on the "cron_day_month" field.
func CronDayMonthNEQ(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldNEQ(FieldCronDayMonth, v))
}

// CronDayMonthIn applies the In predicate on the "cron_day_month" field.
func CronDayMonthIn(vs ...string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldIn(FieldCronDayMonth, vs...))
}

// CronDayMonthNotIn applies the NotIn predicate on the "cron_day_month" field.
func CronDayMonthNotIn(vs ...string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldNotIn(FieldCronDayMonth, vs...))
}

// CronDayMonthGT applies the GT predicate on the "cron_day_month" field.
func CronDayMonthGT(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldGT(FieldCronDayMonth, v))
}

// CronDayMonthGTE applies the GTE predicate on the "cron_day_month" field.
func CronDayMonthGTE(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldGTE(FieldCronDayMonth, v))
}

// CronDayMonthLT applies the LT predicate on the "cron_day_month" field.
func CronDayMonthLT(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldLT(FieldCronDayMonth, v))
}

// CronDayMonthLTE applies the LTE predicate on the "cron_day_month" field.
func CronDayMonthLTE(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldLTE(FieldCronDayMonth, v))
}

// CronDayMonthContains applies the Contains predicate on the "cron_day_month" field.
func CronDayMonthContains(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldContains(FieldCronDayMonth, v))
}

// CronDayMonthHasPrefix applies the HasPrefix predicate on the "cron_day_month" field.
func CronDayMonthHasPrefix(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldHasPrefix(FieldCronDayMonth, v))
}

// CronDayMonthHasSuffix applies the HasSuffix predicate on the "cron_day_month" field.
func CronDayMonthHasSuffix(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldHasSuffix(FieldCronDayMonth, v))
}

// CronDayMonthEqualFold applies the EqualFold predicate on the "cron_day_month" field.
func CronDayMonthEqualFold(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldEqualFold(FieldCronDayMonth, v))
}

// CronDayMonthContainsFold applies the ContainsFold predicate on the "cron_day_month" field.
func CronDayMonthContainsFold(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldContainsFold(FieldCronDayMonth, v))
}

// CronMonthEQ applies the EQ predicate on the "cron_month" field.
func CronMonthEQ(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldEQ(FieldCronMonth, v))
}

// CronMonthNEQ applies the NEQ predicate on the "cron_month" field.
func CronMonthNEQ(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldNEQ(FieldCronMonth, v))
}

// CronMonthIn applies the In predicate on the "cron_month" field.
func CronMonthIn(vs ...string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldIn(FieldCronMonth, vs...))
}

// CronMonthNotIn applies the NotIn predicate on the "cron_month" field.
func CronMonthNotIn(vs ...string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldNotIn(FieldCronMonth, vs...))
}

// CronMonthGT applies the GT predicate on the "cron_month" field.
func CronMonthGT(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldGT(FieldCronMonth, v))
}

// CronMonthGTE applies the GTE predicate on the "cron_month" field.
func CronMonthGTE(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldGTE(FieldCronMonth, v))
}

// CronMonthLT applies the LT predicate on the "cron_month" field.
func CronMonthLT(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldLT(FieldCronMonth, v))
}

// CronMonthLTE applies the LTE predicate on the "cron_month" field.
func CronMonthLTE(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldLTE(FieldCronMonth, v))
}

// CronMonthContains applies the Contains predicate on the "cron_month" field.
func CronMonthContains(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldContains(FieldCronMonth, v))
}

// CronMonthHasPrefix applies the HasPrefix predicate on the "cron_month" field.
func CronMonthHasPrefix(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldHasPrefix(FieldCronMonth, v))
}

// CronMonthHasSuffix applies the HasSuffix predicate on the "cron_month" field.
func CronMonthHasSuffix(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldHasSuffix(FieldCronMonth, v))
}

// CronMonthEqualFold applies the EqualFold predicate on the "cron_month" field.
func CronMonthEqualFold(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldEqualFold(FieldCronMonth, v))
}

// CronMonthContainsFold applies the ContainsFold predicate on the "cron_month" field.
func CronMonthContainsFold(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldContainsFold(FieldCronMonth, v))
}

// CronDayWeekEQ applies the EQ predicate on the "cron_day_week" field.
func CronDayWeekEQ(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldEQ(FieldCronDayWeek, v))
}

// CronDayWeekNEQ applies the NEQ predicate on the "cron_day_week" field.
func CronDayWeekNEQ(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldNEQ(FieldCronDayWeek, v))
}

// CronDayWeekIn applies the In predicate on the "cron_day_week" field.
func CronDayWeekIn(vs ...string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldIn(FieldCronDayWeek, vs...))
}

// CronDayWeekNotIn applies the NotIn predicate on the "cron_day_week" field.
func CronDayWeekNotIn(vs ...string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldNotIn(FieldCronDayWeek, vs...))
}

// CronDayWeekGT applies the GT predicate on the "cron_day_week" field.
func CronDayWeekGT(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldGT(FieldCronDayWeek, v))
}

// CronDayWeekGTE applies the GTE predicate on the "cron_day_week" field.
func CronDayWeekGTE(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldGTE(FieldCronDayWeek, v))
}

// CronDayWeekLT applies the LT predicate on the "cron_day_week" field.
func CronDayWeekLT(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldLT(FieldCronDayWeek, v))
}

// CronDayWeekLTE applies the LTE predicate on the "cron_day_week" field.
func CronDayWeekLTE(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldLTE(FieldCronDayWeek, v))
}

// CronDayWeekContains applies the Contains predicate on the "cron_day_week" field.
func CronDayWeekContains(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldContains(FieldCronDayWeek, v))
}

// CronDayWeekHasPrefix applies the HasPrefix predicate on the "cron_day_week" field.
func CronDayWeekHasPrefix(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldHasPrefix(FieldCronDayWeek, v))
}

// CronDayWeekHasSuffix applies the HasSuffix predicate on the "cron_day_week" field.
func CronDayWeekHasSuffix(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldHasSuffix(FieldCronDayWeek, v))
}

// CronDayWeekEqualFold applies the EqualFold predicate on the "cron_day_week" field.
func CronDayWeekEqualFold(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldEqualFold(FieldCronDayWeek, v))
}

// CronDayWeekContainsFold applies the ContainsFold predicate on the "cron_day_week" field.
func CronDayWeekContainsFold(v string) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(sql.FieldContainsFold(FieldCronDayWeek, v))
}

// HasTargetSite applies the HasEdge predicate on the "target_site" edge.
func HasTargetSite() predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TargetSiteTable, TargetSiteColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTargetSiteWith applies the HasEdge predicate on the "target_site" edge with a given conditions (other predicates).
func HasTargetSiteWith(preds ...predicate.SiteResource) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(func(s *sql.Selector) {
		step := newTargetSiteStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTargetHost applies the HasEdge predicate on the "target_host" edge.
func HasTargetHost() predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TargetHostTable, TargetHostColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTargetHostWith applies the HasEdge predicate on the "target_host" edge with a given conditions (other predicates).
func HasTargetHostWith(preds ...predicate.HostResource) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(func(s *sql.Selector) {
		step := newTargetHostStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTargetWorkload applies the HasEdge predicate on the "target_workload" edge.
func HasTargetWorkload() predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TargetWorkloadTable, TargetWorkloadColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTargetWorkloadWith applies the HasEdge predicate on the "target_workload" edge with a given conditions (other predicates).
func HasTargetWorkloadWith(preds ...predicate.WorkloadResource) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(func(s *sql.Selector) {
		step := newTargetWorkloadStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RepeatedScheduleResource) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RepeatedScheduleResource) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RepeatedScheduleResource) predicate.RepeatedScheduleResource {
	return predicate.RepeatedScheduleResource(func(s *sql.Selector) {
		p(s.Not())
	})
}
