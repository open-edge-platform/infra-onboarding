// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/siteresource"
)

// SiteResourceDelete is the builder for deleting a SiteResource entity.
type SiteResourceDelete struct {
	config
	hooks    []Hook
	mutation *SiteResourceMutation
}

// Where appends a list predicates to the SiteResourceDelete builder.
func (srd *SiteResourceDelete) Where(ps ...predicate.SiteResource) *SiteResourceDelete {
	srd.mutation.Where(ps...)
	return srd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (srd *SiteResourceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, SiteResourceMutation](ctx, srd.sqlExec, srd.mutation, srd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (srd *SiteResourceDelete) ExecX(ctx context.Context) int {
	n, err := srd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (srd *SiteResourceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(siteresource.Table, sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt))
	if ps := srd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, srd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	srd.mutation.done = true
	return affected, err
}

// SiteResourceDeleteOne is the builder for deleting a single SiteResource entity.
type SiteResourceDeleteOne struct {
	srd *SiteResourceDelete
}

// Where appends a list predicates to the SiteResourceDelete builder.
func (srdo *SiteResourceDeleteOne) Where(ps ...predicate.SiteResource) *SiteResourceDeleteOne {
	srdo.srd.mutation.Where(ps...)
	return srdo
}

// Exec executes the deletion query.
func (srdo *SiteResourceDeleteOne) Exec(ctx context.Context) error {
	n, err := srdo.srd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{siteresource.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (srdo *SiteResourceDeleteOne) ExecX(ctx context.Context) {
	if err := srdo.Exec(ctx); err != nil {
		panic(err)
	}
}
