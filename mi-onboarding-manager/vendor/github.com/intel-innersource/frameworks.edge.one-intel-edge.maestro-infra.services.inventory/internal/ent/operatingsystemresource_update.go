// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/operatingsystemresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
)

// OperatingSystemResourceUpdate is the builder for updating OperatingSystemResource entities.
type OperatingSystemResourceUpdate struct {
	config
	hooks    []Hook
	mutation *OperatingSystemResourceMutation
}

// Where appends a list predicates to the OperatingSystemResourceUpdate builder.
func (osru *OperatingSystemResourceUpdate) Where(ps ...predicate.OperatingSystemResource) *OperatingSystemResourceUpdate {
	osru.mutation.Where(ps...)
	return osru
}

// SetResourceID sets the "resource_id" field.
func (osru *OperatingSystemResourceUpdate) SetResourceID(s string) *OperatingSystemResourceUpdate {
	osru.mutation.SetResourceID(s)
	return osru
}

// SetName sets the "name" field.
func (osru *OperatingSystemResourceUpdate) SetName(s string) *OperatingSystemResourceUpdate {
	osru.mutation.SetName(s)
	return osru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (osru *OperatingSystemResourceUpdate) SetNillableName(s *string) *OperatingSystemResourceUpdate {
	if s != nil {
		osru.SetName(*s)
	}
	return osru
}

// ClearName clears the value of the "name" field.
func (osru *OperatingSystemResourceUpdate) ClearName() *OperatingSystemResourceUpdate {
	osru.mutation.ClearName()
	return osru
}

// SetArchitecture sets the "architecture" field.
func (osru *OperatingSystemResourceUpdate) SetArchitecture(s string) *OperatingSystemResourceUpdate {
	osru.mutation.SetArchitecture(s)
	return osru
}

// SetNillableArchitecture sets the "architecture" field if the given value is not nil.
func (osru *OperatingSystemResourceUpdate) SetNillableArchitecture(s *string) *OperatingSystemResourceUpdate {
	if s != nil {
		osru.SetArchitecture(*s)
	}
	return osru
}

// ClearArchitecture clears the value of the "architecture" field.
func (osru *OperatingSystemResourceUpdate) ClearArchitecture() *OperatingSystemResourceUpdate {
	osru.mutation.ClearArchitecture()
	return osru
}

// SetKernelCommand sets the "kernel_command" field.
func (osru *OperatingSystemResourceUpdate) SetKernelCommand(s string) *OperatingSystemResourceUpdate {
	osru.mutation.SetKernelCommand(s)
	return osru
}

// SetNillableKernelCommand sets the "kernel_command" field if the given value is not nil.
func (osru *OperatingSystemResourceUpdate) SetNillableKernelCommand(s *string) *OperatingSystemResourceUpdate {
	if s != nil {
		osru.SetKernelCommand(*s)
	}
	return osru
}

// ClearKernelCommand clears the value of the "kernel_command" field.
func (osru *OperatingSystemResourceUpdate) ClearKernelCommand() *OperatingSystemResourceUpdate {
	osru.mutation.ClearKernelCommand()
	return osru
}

// SetUpdateSources sets the "update_sources" field.
func (osru *OperatingSystemResourceUpdate) SetUpdateSources(s string) *OperatingSystemResourceUpdate {
	osru.mutation.SetUpdateSources(s)
	return osru
}

// SetRepoURL sets the "repo_url" field.
func (osru *OperatingSystemResourceUpdate) SetRepoURL(s string) *OperatingSystemResourceUpdate {
	osru.mutation.SetRepoURL(s)
	return osru
}

// SetSha256 sets the "sha256" field.
func (osru *OperatingSystemResourceUpdate) SetSha256(s string) *OperatingSystemResourceUpdate {
	osru.mutation.SetSha256(s)
	return osru
}

// SetProfileName sets the "profile_name" field.
func (osru *OperatingSystemResourceUpdate) SetProfileName(s string) *OperatingSystemResourceUpdate {
	osru.mutation.SetProfileName(s)
	return osru
}

// SetNillableProfileName sets the "profile_name" field if the given value is not nil.
func (osru *OperatingSystemResourceUpdate) SetNillableProfileName(s *string) *OperatingSystemResourceUpdate {
	if s != nil {
		osru.SetProfileName(*s)
	}
	return osru
}

// ClearProfileName clears the value of the "profile_name" field.
func (osru *OperatingSystemResourceUpdate) ClearProfileName() *OperatingSystemResourceUpdate {
	osru.mutation.ClearProfileName()
	return osru
}

// Mutation returns the OperatingSystemResourceMutation object of the builder.
func (osru *OperatingSystemResourceUpdate) Mutation() *OperatingSystemResourceMutation {
	return osru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (osru *OperatingSystemResourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, OperatingSystemResourceMutation](ctx, osru.sqlSave, osru.mutation, osru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (osru *OperatingSystemResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := osru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (osru *OperatingSystemResourceUpdate) Exec(ctx context.Context) error {
	_, err := osru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osru *OperatingSystemResourceUpdate) ExecX(ctx context.Context) {
	if err := osru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (osru *OperatingSystemResourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(operatingsystemresource.Table, operatingsystemresource.Columns, sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt))
	if ps := osru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := osru.mutation.ResourceID(); ok {
		_spec.SetField(operatingsystemresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := osru.mutation.Name(); ok {
		_spec.SetField(operatingsystemresource.FieldName, field.TypeString, value)
	}
	if osru.mutation.NameCleared() {
		_spec.ClearField(operatingsystemresource.FieldName, field.TypeString)
	}
	if value, ok := osru.mutation.Architecture(); ok {
		_spec.SetField(operatingsystemresource.FieldArchitecture, field.TypeString, value)
	}
	if osru.mutation.ArchitectureCleared() {
		_spec.ClearField(operatingsystemresource.FieldArchitecture, field.TypeString)
	}
	if value, ok := osru.mutation.KernelCommand(); ok {
		_spec.SetField(operatingsystemresource.FieldKernelCommand, field.TypeString, value)
	}
	if osru.mutation.KernelCommandCleared() {
		_spec.ClearField(operatingsystemresource.FieldKernelCommand, field.TypeString)
	}
	if value, ok := osru.mutation.UpdateSources(); ok {
		_spec.SetField(operatingsystemresource.FieldUpdateSources, field.TypeString, value)
	}
	if value, ok := osru.mutation.RepoURL(); ok {
		_spec.SetField(operatingsystemresource.FieldRepoURL, field.TypeString, value)
	}
	if value, ok := osru.mutation.Sha256(); ok {
		_spec.SetField(operatingsystemresource.FieldSha256, field.TypeString, value)
	}
	if value, ok := osru.mutation.ProfileName(); ok {
		_spec.SetField(operatingsystemresource.FieldProfileName, field.TypeString, value)
	}
	if osru.mutation.ProfileNameCleared() {
		_spec.ClearField(operatingsystemresource.FieldProfileName, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, osru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operatingsystemresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	osru.mutation.done = true
	return n, nil
}

// OperatingSystemResourceUpdateOne is the builder for updating a single OperatingSystemResource entity.
type OperatingSystemResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OperatingSystemResourceMutation
}

// SetResourceID sets the "resource_id" field.
func (osruo *OperatingSystemResourceUpdateOne) SetResourceID(s string) *OperatingSystemResourceUpdateOne {
	osruo.mutation.SetResourceID(s)
	return osruo
}

// SetName sets the "name" field.
func (osruo *OperatingSystemResourceUpdateOne) SetName(s string) *OperatingSystemResourceUpdateOne {
	osruo.mutation.SetName(s)
	return osruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (osruo *OperatingSystemResourceUpdateOne) SetNillableName(s *string) *OperatingSystemResourceUpdateOne {
	if s != nil {
		osruo.SetName(*s)
	}
	return osruo
}

// ClearName clears the value of the "name" field.
func (osruo *OperatingSystemResourceUpdateOne) ClearName() *OperatingSystemResourceUpdateOne {
	osruo.mutation.ClearName()
	return osruo
}

// SetArchitecture sets the "architecture" field.
func (osruo *OperatingSystemResourceUpdateOne) SetArchitecture(s string) *OperatingSystemResourceUpdateOne {
	osruo.mutation.SetArchitecture(s)
	return osruo
}

// SetNillableArchitecture sets the "architecture" field if the given value is not nil.
func (osruo *OperatingSystemResourceUpdateOne) SetNillableArchitecture(s *string) *OperatingSystemResourceUpdateOne {
	if s != nil {
		osruo.SetArchitecture(*s)
	}
	return osruo
}

// ClearArchitecture clears the value of the "architecture" field.
func (osruo *OperatingSystemResourceUpdateOne) ClearArchitecture() *OperatingSystemResourceUpdateOne {
	osruo.mutation.ClearArchitecture()
	return osruo
}

// SetKernelCommand sets the "kernel_command" field.
func (osruo *OperatingSystemResourceUpdateOne) SetKernelCommand(s string) *OperatingSystemResourceUpdateOne {
	osruo.mutation.SetKernelCommand(s)
	return osruo
}

// SetNillableKernelCommand sets the "kernel_command" field if the given value is not nil.
func (osruo *OperatingSystemResourceUpdateOne) SetNillableKernelCommand(s *string) *OperatingSystemResourceUpdateOne {
	if s != nil {
		osruo.SetKernelCommand(*s)
	}
	return osruo
}

// ClearKernelCommand clears the value of the "kernel_command" field.
func (osruo *OperatingSystemResourceUpdateOne) ClearKernelCommand() *OperatingSystemResourceUpdateOne {
	osruo.mutation.ClearKernelCommand()
	return osruo
}

// SetUpdateSources sets the "update_sources" field.
func (osruo *OperatingSystemResourceUpdateOne) SetUpdateSources(s string) *OperatingSystemResourceUpdateOne {
	osruo.mutation.SetUpdateSources(s)
	return osruo
}

// SetRepoURL sets the "repo_url" field.
func (osruo *OperatingSystemResourceUpdateOne) SetRepoURL(s string) *OperatingSystemResourceUpdateOne {
	osruo.mutation.SetRepoURL(s)
	return osruo
}

// SetSha256 sets the "sha256" field.
func (osruo *OperatingSystemResourceUpdateOne) SetSha256(s string) *OperatingSystemResourceUpdateOne {
	osruo.mutation.SetSha256(s)
	return osruo
}

// SetProfileName sets the "profile_name" field.
func (osruo *OperatingSystemResourceUpdateOne) SetProfileName(s string) *OperatingSystemResourceUpdateOne {
	osruo.mutation.SetProfileName(s)
	return osruo
}

// SetNillableProfileName sets the "profile_name" field if the given value is not nil.
func (osruo *OperatingSystemResourceUpdateOne) SetNillableProfileName(s *string) *OperatingSystemResourceUpdateOne {
	if s != nil {
		osruo.SetProfileName(*s)
	}
	return osruo
}

// ClearProfileName clears the value of the "profile_name" field.
func (osruo *OperatingSystemResourceUpdateOne) ClearProfileName() *OperatingSystemResourceUpdateOne {
	osruo.mutation.ClearProfileName()
	return osruo
}

// Mutation returns the OperatingSystemResourceMutation object of the builder.
func (osruo *OperatingSystemResourceUpdateOne) Mutation() *OperatingSystemResourceMutation {
	return osruo.mutation
}

// Where appends a list predicates to the OperatingSystemResourceUpdate builder.
func (osruo *OperatingSystemResourceUpdateOne) Where(ps ...predicate.OperatingSystemResource) *OperatingSystemResourceUpdateOne {
	osruo.mutation.Where(ps...)
	return osruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (osruo *OperatingSystemResourceUpdateOne) Select(field string, fields ...string) *OperatingSystemResourceUpdateOne {
	osruo.fields = append([]string{field}, fields...)
	return osruo
}

// Save executes the query and returns the updated OperatingSystemResource entity.
func (osruo *OperatingSystemResourceUpdateOne) Save(ctx context.Context) (*OperatingSystemResource, error) {
	return withHooks[*OperatingSystemResource, OperatingSystemResourceMutation](ctx, osruo.sqlSave, osruo.mutation, osruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (osruo *OperatingSystemResourceUpdateOne) SaveX(ctx context.Context) *OperatingSystemResource {
	node, err := osruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (osruo *OperatingSystemResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := osruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osruo *OperatingSystemResourceUpdateOne) ExecX(ctx context.Context) {
	if err := osruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (osruo *OperatingSystemResourceUpdateOne) sqlSave(ctx context.Context) (_node *OperatingSystemResource, err error) {
	_spec := sqlgraph.NewUpdateSpec(operatingsystemresource.Table, operatingsystemresource.Columns, sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt))
	id, ok := osruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OperatingSystemResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := osruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, operatingsystemresource.FieldID)
		for _, f := range fields {
			if !operatingsystemresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != operatingsystemresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := osruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := osruo.mutation.ResourceID(); ok {
		_spec.SetField(operatingsystemresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := osruo.mutation.Name(); ok {
		_spec.SetField(operatingsystemresource.FieldName, field.TypeString, value)
	}
	if osruo.mutation.NameCleared() {
		_spec.ClearField(operatingsystemresource.FieldName, field.TypeString)
	}
	if value, ok := osruo.mutation.Architecture(); ok {
		_spec.SetField(operatingsystemresource.FieldArchitecture, field.TypeString, value)
	}
	if osruo.mutation.ArchitectureCleared() {
		_spec.ClearField(operatingsystemresource.FieldArchitecture, field.TypeString)
	}
	if value, ok := osruo.mutation.KernelCommand(); ok {
		_spec.SetField(operatingsystemresource.FieldKernelCommand, field.TypeString, value)
	}
	if osruo.mutation.KernelCommandCleared() {
		_spec.ClearField(operatingsystemresource.FieldKernelCommand, field.TypeString)
	}
	if value, ok := osruo.mutation.UpdateSources(); ok {
		_spec.SetField(operatingsystemresource.FieldUpdateSources, field.TypeString, value)
	}
	if value, ok := osruo.mutation.RepoURL(); ok {
		_spec.SetField(operatingsystemresource.FieldRepoURL, field.TypeString, value)
	}
	if value, ok := osruo.mutation.Sha256(); ok {
		_spec.SetField(operatingsystemresource.FieldSha256, field.TypeString, value)
	}
	if value, ok := osruo.mutation.ProfileName(); ok {
		_spec.SetField(operatingsystemresource.FieldProfileName, field.TypeString, value)
	}
	if osruo.mutation.ProfileNameCleared() {
		_spec.ClearField(operatingsystemresource.FieldProfileName, field.TypeString)
	}
	_node = &OperatingSystemResource{config: osruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, osruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operatingsystemresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	osruo.mutation.done = true
	return _node, nil
}
