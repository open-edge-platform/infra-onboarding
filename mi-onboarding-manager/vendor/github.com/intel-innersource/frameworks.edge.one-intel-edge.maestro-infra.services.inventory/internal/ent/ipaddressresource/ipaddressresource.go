// Code generated by ent, DO NOT EDIT.

package ipaddressresource

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the ipaddressresource type in the database.
	Label = "ip_address_resource"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldResourceID holds the string denoting the resource_id field in the database.
	FieldResourceID = "resource_id"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldDesiredState holds the string denoting the desired_state field in the database.
	FieldDesiredState = "desired_state"
	// FieldCurrentState holds the string denoting the current_state field in the database.
	FieldCurrentState = "current_state"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldStatusDetail holds the string denoting the status_detail field in the database.
	FieldStatusDetail = "status_detail"
	// FieldConfigMethod holds the string denoting the config_method field in the database.
	FieldConfigMethod = "config_method"
	// EdgeNic holds the string denoting the nic edge name in mutations.
	EdgeNic = "nic"
	// Table holds the table name of the ipaddressresource in the database.
	Table = "ip_address_resources"
	// NicTable is the table that holds the nic relation/edge.
	NicTable = "ip_address_resources"
	// NicInverseTable is the table name for the HostnicResource entity.
	// It exists in this package in order to avoid circular dependency with the "hostnicresource" package.
	NicInverseTable = "hostnic_resources"
	// NicColumn is the table column denoting the nic relation/edge.
	NicColumn = "ip_address_resource_nic"
)

// Columns holds all SQL columns for ipaddressresource fields.
var Columns = []string{
	FieldID,
	FieldResourceID,
	FieldAddress,
	FieldDesiredState,
	FieldCurrentState,
	FieldStatus,
	FieldStatusDetail,
	FieldConfigMethod,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "ip_address_resources"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"ip_address_resource_nic",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// DesiredState defines the type for the "desired_state" enum field.
type DesiredState string

// DesiredState values.
const (
	DesiredStateIP_ADDRESS_STATE_UNSPECIFIED DesiredState = "IP_ADDRESS_STATE_UNSPECIFIED"
	DesiredStateIP_ADDRESS_STATE_ERROR       DesiredState = "IP_ADDRESS_STATE_ERROR"
	DesiredStateIP_ADDRESS_STATE_ASSIGNED    DesiredState = "IP_ADDRESS_STATE_ASSIGNED"
	DesiredStateIP_ADDRESS_STATE_CONFIGURED  DesiredState = "IP_ADDRESS_STATE_CONFIGURED"
	DesiredStateIP_ADDRESS_STATE_RELEASED    DesiredState = "IP_ADDRESS_STATE_RELEASED"
	DesiredStateIP_ADDRESS_STATE_DELETED     DesiredState = "IP_ADDRESS_STATE_DELETED"
)

func (ds DesiredState) String() string {
	return string(ds)
}

// DesiredStateValidator is a validator for the "desired_state" field enum values. It is called by the builders before save.
func DesiredStateValidator(ds DesiredState) error {
	switch ds {
	case DesiredStateIP_ADDRESS_STATE_UNSPECIFIED, DesiredStateIP_ADDRESS_STATE_ERROR, DesiredStateIP_ADDRESS_STATE_ASSIGNED, DesiredStateIP_ADDRESS_STATE_CONFIGURED, DesiredStateIP_ADDRESS_STATE_RELEASED, DesiredStateIP_ADDRESS_STATE_DELETED:
		return nil
	default:
		return fmt.Errorf("ipaddressresource: invalid enum value for desired_state field: %q", ds)
	}
}

// CurrentState defines the type for the "current_state" enum field.
type CurrentState string

// CurrentState values.
const (
	CurrentStateIP_ADDRESS_STATE_UNSPECIFIED CurrentState = "IP_ADDRESS_STATE_UNSPECIFIED"
	CurrentStateIP_ADDRESS_STATE_ERROR       CurrentState = "IP_ADDRESS_STATE_ERROR"
	CurrentStateIP_ADDRESS_STATE_ASSIGNED    CurrentState = "IP_ADDRESS_STATE_ASSIGNED"
	CurrentStateIP_ADDRESS_STATE_CONFIGURED  CurrentState = "IP_ADDRESS_STATE_CONFIGURED"
	CurrentStateIP_ADDRESS_STATE_RELEASED    CurrentState = "IP_ADDRESS_STATE_RELEASED"
	CurrentStateIP_ADDRESS_STATE_DELETED     CurrentState = "IP_ADDRESS_STATE_DELETED"
)

func (cs CurrentState) String() string {
	return string(cs)
}

// CurrentStateValidator is a validator for the "current_state" field enum values. It is called by the builders before save.
func CurrentStateValidator(cs CurrentState) error {
	switch cs {
	case CurrentStateIP_ADDRESS_STATE_UNSPECIFIED, CurrentStateIP_ADDRESS_STATE_ERROR, CurrentStateIP_ADDRESS_STATE_ASSIGNED, CurrentStateIP_ADDRESS_STATE_CONFIGURED, CurrentStateIP_ADDRESS_STATE_RELEASED, CurrentStateIP_ADDRESS_STATE_DELETED:
		return nil
	default:
		return fmt.Errorf("ipaddressresource: invalid enum value for current_state field: %q", cs)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusIP_ADDRESS_STATUS_UNSPECIFIED         Status = "IP_ADDRESS_STATUS_UNSPECIFIED"
	StatusIP_ADDRESS_STATUS_ASSIGNMENT_ERROR    Status = "IP_ADDRESS_STATUS_ASSIGNMENT_ERROR"
	StatusIP_ADDRESS_STATUS_ASSIGNED            Status = "IP_ADDRESS_STATUS_ASSIGNED"
	StatusIP_ADDRESS_STATUS_CONFIGURATION_ERROR Status = "IP_ADDRESS_STATUS_CONFIGURATION_ERROR"
	StatusIP_ADDRESS_STATUS_CONFIGURED          Status = "IP_ADDRESS_STATUS_CONFIGURED"
	StatusIP_ADDRESS_STATUS_RELEASED            Status = "IP_ADDRESS_STATUS_RELEASED"
	StatusIP_ADDRESS_STATUS_ERROR               Status = "IP_ADDRESS_STATUS_ERROR"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusIP_ADDRESS_STATUS_UNSPECIFIED, StatusIP_ADDRESS_STATUS_ASSIGNMENT_ERROR, StatusIP_ADDRESS_STATUS_ASSIGNED, StatusIP_ADDRESS_STATUS_CONFIGURATION_ERROR, StatusIP_ADDRESS_STATUS_CONFIGURED, StatusIP_ADDRESS_STATUS_RELEASED, StatusIP_ADDRESS_STATUS_ERROR:
		return nil
	default:
		return fmt.Errorf("ipaddressresource: invalid enum value for status field: %q", s)
	}
}

// ConfigMethod defines the type for the "config_method" enum field.
type ConfigMethod string

// ConfigMethod values.
const (
	ConfigMethodIP_ADDRESS_CONFIG_METHOD_UNSPECIFIED ConfigMethod = "IP_ADDRESS_CONFIG_METHOD_UNSPECIFIED"
	ConfigMethodIP_ADDRESS_CONFIG_METHOD_STATIC      ConfigMethod = "IP_ADDRESS_CONFIG_METHOD_STATIC"
	ConfigMethodIP_ADDRESS_CONFIG_METHOD_DYNAMIC     ConfigMethod = "IP_ADDRESS_CONFIG_METHOD_DYNAMIC"
)

func (cm ConfigMethod) String() string {
	return string(cm)
}

// ConfigMethodValidator is a validator for the "config_method" field enum values. It is called by the builders before save.
func ConfigMethodValidator(cm ConfigMethod) error {
	switch cm {
	case ConfigMethodIP_ADDRESS_CONFIG_METHOD_UNSPECIFIED, ConfigMethodIP_ADDRESS_CONFIG_METHOD_STATIC, ConfigMethodIP_ADDRESS_CONFIG_METHOD_DYNAMIC:
		return nil
	default:
		return fmt.Errorf("ipaddressresource: invalid enum value for config_method field: %q", cm)
	}
}

// OrderOption defines the ordering options for the IPAddressResource queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByResourceID orders the results by the resource_id field.
func ByResourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceID, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByDesiredState orders the results by the desired_state field.
func ByDesiredState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesiredState, opts...).ToFunc()
}

// ByCurrentState orders the results by the current_state field.
func ByCurrentState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentState, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByStatusDetail orders the results by the status_detail field.
func ByStatusDetail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatusDetail, opts...).ToFunc()
}

// ByConfigMethod orders the results by the config_method field.
func ByConfigMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConfigMethod, opts...).ToFunc()
}

// ByNicField orders the results by nic field.
func ByNicField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNicStep(), sql.OrderByField(field, opts...))
	}
}
func newNicStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NicInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, NicTable, NicColumn),
	)
}
