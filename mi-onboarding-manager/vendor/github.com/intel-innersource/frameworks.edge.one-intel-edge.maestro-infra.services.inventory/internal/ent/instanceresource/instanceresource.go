// Code generated by ent, DO NOT EDIT.

package instanceresource

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the instanceresource type in the database.
	Label = "instance_resource"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldResourceID holds the string denoting the resource_id field in the database.
	FieldResourceID = "resource_id"
	// FieldKind holds the string denoting the kind field in the database.
	FieldKind = "kind"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldDesiredState holds the string denoting the desired_state field in the database.
	FieldDesiredState = "desired_state"
	// FieldCurrentState holds the string denoting the current_state field in the database.
	FieldCurrentState = "current_state"
	// FieldVMMemoryBytes holds the string denoting the vm_memory_bytes field in the database.
	FieldVMMemoryBytes = "vm_memory_bytes"
	// FieldVMCPUCores holds the string denoting the vm_cpu_cores field in the database.
	FieldVMCPUCores = "vm_cpu_cores"
	// FieldVMStorageBytes holds the string denoting the vm_storage_bytes field in the database.
	FieldVMStorageBytes = "vm_storage_bytes"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldStatusDetail holds the string denoting the status_detail field in the database.
	FieldStatusDetail = "status_detail"
	// EdgeHost holds the string denoting the host edge name in mutations.
	EdgeHost = "host"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeOs holds the string denoting the os edge name in mutations.
	EdgeOs = "os"
	// EdgeWorkloadMembers holds the string denoting the workload_members edge name in mutations.
	EdgeWorkloadMembers = "workload_members"
	// Table holds the table name of the instanceresource in the database.
	Table = "instance_resources"
	// HostTable is the table that holds the host relation/edge.
	HostTable = "host_resources"
	// HostInverseTable is the table name for the HostResource entity.
	// It exists in this package in order to avoid circular dependency with the "hostresource" package.
	HostInverseTable = "host_resources"
	// HostColumn is the table column denoting the host relation/edge.
	HostColumn = "instance_resource_host"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "instance_resources"
	// UserInverseTable is the table name for the UserResource entity.
	// It exists in this package in order to avoid circular dependency with the "userresource" package.
	UserInverseTable = "user_resources"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "instance_resource_user"
	// OsTable is the table that holds the os relation/edge.
	OsTable = "instance_resources"
	// OsInverseTable is the table name for the OperatingSystemResource entity.
	// It exists in this package in order to avoid circular dependency with the "operatingsystemresource" package.
	OsInverseTable = "operating_system_resources"
	// OsColumn is the table column denoting the os relation/edge.
	OsColumn = "instance_resource_os"
	// WorkloadMembersTable is the table that holds the workload_members relation/edge.
	WorkloadMembersTable = "workload_members"
	// WorkloadMembersInverseTable is the table name for the WorkloadMember entity.
	// It exists in this package in order to avoid circular dependency with the "workloadmember" package.
	WorkloadMembersInverseTable = "workload_members"
	// WorkloadMembersColumn is the table column denoting the workload_members relation/edge.
	WorkloadMembersColumn = "workload_member_instance"
)

// Columns holds all SQL columns for instanceresource fields.
var Columns = []string{
	FieldID,
	FieldResourceID,
	FieldKind,
	FieldDescription,
	FieldDesiredState,
	FieldCurrentState,
	FieldVMMemoryBytes,
	FieldVMCPUCores,
	FieldVMStorageBytes,
	FieldStatus,
	FieldStatusDetail,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "instance_resources"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"instance_resource_user",
	"instance_resource_os",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Kind defines the type for the "kind" enum field.
type Kind string

// Kind values.
const (
	KindINSTANCE_KIND_UNSPECIFIED Kind = "INSTANCE_KIND_UNSPECIFIED"
	KindINSTANCE_KIND_VM          Kind = "INSTANCE_KIND_VM"
	KindINSTANCE_KIND_METAL       Kind = "INSTANCE_KIND_METAL"
)

func (k Kind) String() string {
	return string(k)
}

// KindValidator is a validator for the "kind" field enum values. It is called by the builders before save.
func KindValidator(k Kind) error {
	switch k {
	case KindINSTANCE_KIND_UNSPECIFIED, KindINSTANCE_KIND_VM, KindINSTANCE_KIND_METAL:
		return nil
	default:
		return fmt.Errorf("instanceresource: invalid enum value for kind field: %q", k)
	}
}

// DesiredState defines the type for the "desired_state" enum field.
type DesiredState string

// DesiredState values.
const (
	DesiredStateINSTANCE_STATE_UNSPECIFIED DesiredState = "INSTANCE_STATE_UNSPECIFIED"
	DesiredStateINSTANCE_STATE_ERROR       DesiredState = "INSTANCE_STATE_ERROR"
	DesiredStateINSTANCE_STATE_INSTALLED   DesiredState = "INSTANCE_STATE_INSTALLED"
	DesiredStateINSTANCE_STATE_RUNNING     DesiredState = "INSTANCE_STATE_RUNNING"
	DesiredStateINSTANCE_STATE_STOPPED     DesiredState = "INSTANCE_STATE_STOPPED"
	DesiredStateINSTANCE_STATE_DELETED     DesiredState = "INSTANCE_STATE_DELETED"
)

func (ds DesiredState) String() string {
	return string(ds)
}

// DesiredStateValidator is a validator for the "desired_state" field enum values. It is called by the builders before save.
func DesiredStateValidator(ds DesiredState) error {
	switch ds {
	case DesiredStateINSTANCE_STATE_UNSPECIFIED, DesiredStateINSTANCE_STATE_ERROR, DesiredStateINSTANCE_STATE_INSTALLED, DesiredStateINSTANCE_STATE_RUNNING, DesiredStateINSTANCE_STATE_STOPPED, DesiredStateINSTANCE_STATE_DELETED:
		return nil
	default:
		return fmt.Errorf("instanceresource: invalid enum value for desired_state field: %q", ds)
	}
}

// CurrentState defines the type for the "current_state" enum field.
type CurrentState string

// CurrentState values.
const (
	CurrentStateINSTANCE_STATE_UNSPECIFIED CurrentState = "INSTANCE_STATE_UNSPECIFIED"
	CurrentStateINSTANCE_STATE_ERROR       CurrentState = "INSTANCE_STATE_ERROR"
	CurrentStateINSTANCE_STATE_INSTALLED   CurrentState = "INSTANCE_STATE_INSTALLED"
	CurrentStateINSTANCE_STATE_RUNNING     CurrentState = "INSTANCE_STATE_RUNNING"
	CurrentStateINSTANCE_STATE_STOPPED     CurrentState = "INSTANCE_STATE_STOPPED"
	CurrentStateINSTANCE_STATE_DELETED     CurrentState = "INSTANCE_STATE_DELETED"
)

func (cs CurrentState) String() string {
	return string(cs)
}

// CurrentStateValidator is a validator for the "current_state" field enum values. It is called by the builders before save.
func CurrentStateValidator(cs CurrentState) error {
	switch cs {
	case CurrentStateINSTANCE_STATE_UNSPECIFIED, CurrentStateINSTANCE_STATE_ERROR, CurrentStateINSTANCE_STATE_INSTALLED, CurrentStateINSTANCE_STATE_RUNNING, CurrentStateINSTANCE_STATE_STOPPED, CurrentStateINSTANCE_STATE_DELETED:
		return nil
	default:
		return fmt.Errorf("instanceresource: invalid enum value for current_state field: %q", cs)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusINSTANCE_STATUS_UNSPECIFIED      Status = "INSTANCE_STATUS_UNSPECIFIED"
	StatusINSTANCE_STATUS_BOOTING          Status = "INSTANCE_STATUS_BOOTING"
	StatusINSTANCE_STATUS_BOOT_FAILED      Status = "INSTANCE_STATUS_BOOT_FAILED"
	StatusINSTANCE_STATUS_PROVISIONING     Status = "INSTANCE_STATUS_PROVISIONING"
	StatusINSTANCE_STATUS_PROVISIONED      Status = "INSTANCE_STATUS_PROVISIONED"
	StatusINSTANCE_STATUS_PROVISION_FAILED Status = "INSTANCE_STATUS_PROVISION_FAILED"
	StatusINSTANCE_STATUS_RUNNING          Status = "INSTANCE_STATUS_RUNNING"
	StatusINSTANCE_STATUS_ERROR            Status = "INSTANCE_STATUS_ERROR"
	StatusINSTANCE_STATUS_UPDATING         Status = "INSTANCE_STATUS_UPDATING"
	StatusINSTANCE_STATUS_UPDATE_FAILED    Status = "INSTANCE_STATUS_UPDATE_FAILED"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusINSTANCE_STATUS_UNSPECIFIED, StatusINSTANCE_STATUS_BOOTING, StatusINSTANCE_STATUS_BOOT_FAILED, StatusINSTANCE_STATUS_PROVISIONING, StatusINSTANCE_STATUS_PROVISIONED, StatusINSTANCE_STATUS_PROVISION_FAILED, StatusINSTANCE_STATUS_RUNNING, StatusINSTANCE_STATUS_ERROR, StatusINSTANCE_STATUS_UPDATING, StatusINSTANCE_STATUS_UPDATE_FAILED:
		return nil
	default:
		return fmt.Errorf("instanceresource: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the InstanceResource queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByResourceID orders the results by the resource_id field.
func ByResourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceID, opts...).ToFunc()
}

// ByKind orders the results by the kind field.
func ByKind(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKind, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByDesiredState orders the results by the desired_state field.
func ByDesiredState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesiredState, opts...).ToFunc()
}

// ByCurrentState orders the results by the current_state field.
func ByCurrentState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentState, opts...).ToFunc()
}

// ByVMMemoryBytes orders the results by the vm_memory_bytes field.
func ByVMMemoryBytes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVMMemoryBytes, opts...).ToFunc()
}

// ByVMCPUCores orders the results by the vm_cpu_cores field.
func ByVMCPUCores(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVMCPUCores, opts...).ToFunc()
}

// ByVMStorageBytes orders the results by the vm_storage_bytes field.
func ByVMStorageBytes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVMStorageBytes, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByStatusDetail orders the results by the status_detail field.
func ByStatusDetail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatusDetail, opts...).ToFunc()
}

// ByHostField orders the results by host field.
func ByHostField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHostStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByOsField orders the results by os field.
func ByOsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOsStep(), sql.OrderByField(field, opts...))
	}
}

// ByWorkloadMembersCount orders the results by workload_members count.
func ByWorkloadMembersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWorkloadMembersStep(), opts...)
	}
}

// ByWorkloadMembers orders the results by workload_members terms.
func ByWorkloadMembers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkloadMembersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newHostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HostInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, HostTable, HostColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
	)
}
func newOsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OsTable, OsColumn),
	)
}
func newWorkloadMembersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkloadMembersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, WorkloadMembersTable, WorkloadMembersColumn),
	)
}
