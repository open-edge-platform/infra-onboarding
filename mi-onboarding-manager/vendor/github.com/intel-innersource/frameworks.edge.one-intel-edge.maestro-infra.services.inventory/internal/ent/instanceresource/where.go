// Code generated by ent, DO NOT EDIT.

package instanceresource

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldLTE(FieldID, id))
}

// ResourceID applies equality check predicate on the "resource_id" field. It's identical to ResourceIDEQ.
func ResourceID(v string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldEQ(FieldResourceID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldEQ(FieldName, v))
}

// VMMemoryBytes applies equality check predicate on the "vm_memory_bytes" field. It's identical to VMMemoryBytesEQ.
func VMMemoryBytes(v uint64) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldEQ(FieldVMMemoryBytes, v))
}

// VMCPUCores applies equality check predicate on the "vm_cpu_cores" field. It's identical to VMCPUCoresEQ.
func VMCPUCores(v uint32) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldEQ(FieldVMCPUCores, v))
}

// VMStorageBytes applies equality check predicate on the "vm_storage_bytes" field. It's identical to VMStorageBytesEQ.
func VMStorageBytes(v uint64) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldEQ(FieldVMStorageBytes, v))
}

// StatusDetail applies equality check predicate on the "status_detail" field. It's identical to StatusDetailEQ.
func StatusDetail(v string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldEQ(FieldStatusDetail, v))
}

// ResourceIDEQ applies the EQ predicate on the "resource_id" field.
func ResourceIDEQ(v string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldEQ(FieldResourceID, v))
}

// ResourceIDNEQ applies the NEQ predicate on the "resource_id" field.
func ResourceIDNEQ(v string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldNEQ(FieldResourceID, v))
}

// ResourceIDIn applies the In predicate on the "resource_id" field.
func ResourceIDIn(vs ...string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldIn(FieldResourceID, vs...))
}

// ResourceIDNotIn applies the NotIn predicate on the "resource_id" field.
func ResourceIDNotIn(vs ...string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldNotIn(FieldResourceID, vs...))
}

// ResourceIDGT applies the GT predicate on the "resource_id" field.
func ResourceIDGT(v string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldGT(FieldResourceID, v))
}

// ResourceIDGTE applies the GTE predicate on the "resource_id" field.
func ResourceIDGTE(v string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldGTE(FieldResourceID, v))
}

// ResourceIDLT applies the LT predicate on the "resource_id" field.
func ResourceIDLT(v string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldLT(FieldResourceID, v))
}

// ResourceIDLTE applies the LTE predicate on the "resource_id" field.
func ResourceIDLTE(v string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldLTE(FieldResourceID, v))
}

// ResourceIDContains applies the Contains predicate on the "resource_id" field.
func ResourceIDContains(v string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldContains(FieldResourceID, v))
}

// ResourceIDHasPrefix applies the HasPrefix predicate on the "resource_id" field.
func ResourceIDHasPrefix(v string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldHasPrefix(FieldResourceID, v))
}

// ResourceIDHasSuffix applies the HasSuffix predicate on the "resource_id" field.
func ResourceIDHasSuffix(v string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldHasSuffix(FieldResourceID, v))
}

// ResourceIDEqualFold applies the EqualFold predicate on the "resource_id" field.
func ResourceIDEqualFold(v string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldEqualFold(FieldResourceID, v))
}

// ResourceIDContainsFold applies the ContainsFold predicate on the "resource_id" field.
func ResourceIDContainsFold(v string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldContainsFold(FieldResourceID, v))
}

// KindEQ applies the EQ predicate on the "kind" field.
func KindEQ(v Kind) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldEQ(FieldKind, v))
}

// KindNEQ applies the NEQ predicate on the "kind" field.
func KindNEQ(v Kind) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldNEQ(FieldKind, v))
}

// KindIn applies the In predicate on the "kind" field.
func KindIn(vs ...Kind) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldIn(FieldKind, vs...))
}

// KindNotIn applies the NotIn predicate on the "kind" field.
func KindNotIn(vs ...Kind) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldNotIn(FieldKind, vs...))
}

// KindIsNil applies the IsNil predicate on the "kind" field.
func KindIsNil() predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldIsNull(FieldKind))
}

// KindNotNil applies the NotNil predicate on the "kind" field.
func KindNotNil() predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldNotNull(FieldKind))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldContainsFold(FieldName, v))
}

// DesiredStateEQ applies the EQ predicate on the "desired_state" field.
func DesiredStateEQ(v DesiredState) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldEQ(FieldDesiredState, v))
}

// DesiredStateNEQ applies the NEQ predicate on the "desired_state" field.
func DesiredStateNEQ(v DesiredState) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldNEQ(FieldDesiredState, v))
}

// DesiredStateIn applies the In predicate on the "desired_state" field.
func DesiredStateIn(vs ...DesiredState) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldIn(FieldDesiredState, vs...))
}

// DesiredStateNotIn applies the NotIn predicate on the "desired_state" field.
func DesiredStateNotIn(vs ...DesiredState) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldNotIn(FieldDesiredState, vs...))
}

// DesiredStateIsNil applies the IsNil predicate on the "desired_state" field.
func DesiredStateIsNil() predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldIsNull(FieldDesiredState))
}

// DesiredStateNotNil applies the NotNil predicate on the "desired_state" field.
func DesiredStateNotNil() predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldNotNull(FieldDesiredState))
}

// CurrentStateEQ applies the EQ predicate on the "current_state" field.
func CurrentStateEQ(v CurrentState) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldEQ(FieldCurrentState, v))
}

// CurrentStateNEQ applies the NEQ predicate on the "current_state" field.
func CurrentStateNEQ(v CurrentState) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldNEQ(FieldCurrentState, v))
}

// CurrentStateIn applies the In predicate on the "current_state" field.
func CurrentStateIn(vs ...CurrentState) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldIn(FieldCurrentState, vs...))
}

// CurrentStateNotIn applies the NotIn predicate on the "current_state" field.
func CurrentStateNotIn(vs ...CurrentState) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldNotIn(FieldCurrentState, vs...))
}

// CurrentStateIsNil applies the IsNil predicate on the "current_state" field.
func CurrentStateIsNil() predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldIsNull(FieldCurrentState))
}

// CurrentStateNotNil applies the NotNil predicate on the "current_state" field.
func CurrentStateNotNil() predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldNotNull(FieldCurrentState))
}

// VMMemoryBytesEQ applies the EQ predicate on the "vm_memory_bytes" field.
func VMMemoryBytesEQ(v uint64) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldEQ(FieldVMMemoryBytes, v))
}

// VMMemoryBytesNEQ applies the NEQ predicate on the "vm_memory_bytes" field.
func VMMemoryBytesNEQ(v uint64) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldNEQ(FieldVMMemoryBytes, v))
}

// VMMemoryBytesIn applies the In predicate on the "vm_memory_bytes" field.
func VMMemoryBytesIn(vs ...uint64) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldIn(FieldVMMemoryBytes, vs...))
}

// VMMemoryBytesNotIn applies the NotIn predicate on the "vm_memory_bytes" field.
func VMMemoryBytesNotIn(vs ...uint64) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldNotIn(FieldVMMemoryBytes, vs...))
}

// VMMemoryBytesGT applies the GT predicate on the "vm_memory_bytes" field.
func VMMemoryBytesGT(v uint64) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldGT(FieldVMMemoryBytes, v))
}

// VMMemoryBytesGTE applies the GTE predicate on the "vm_memory_bytes" field.
func VMMemoryBytesGTE(v uint64) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldGTE(FieldVMMemoryBytes, v))
}

// VMMemoryBytesLT applies the LT predicate on the "vm_memory_bytes" field.
func VMMemoryBytesLT(v uint64) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldLT(FieldVMMemoryBytes, v))
}

// VMMemoryBytesLTE applies the LTE predicate on the "vm_memory_bytes" field.
func VMMemoryBytesLTE(v uint64) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldLTE(FieldVMMemoryBytes, v))
}

// VMMemoryBytesIsNil applies the IsNil predicate on the "vm_memory_bytes" field.
func VMMemoryBytesIsNil() predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldIsNull(FieldVMMemoryBytes))
}

// VMMemoryBytesNotNil applies the NotNil predicate on the "vm_memory_bytes" field.
func VMMemoryBytesNotNil() predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldNotNull(FieldVMMemoryBytes))
}

// VMCPUCoresEQ applies the EQ predicate on the "vm_cpu_cores" field.
func VMCPUCoresEQ(v uint32) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldEQ(FieldVMCPUCores, v))
}

// VMCPUCoresNEQ applies the NEQ predicate on the "vm_cpu_cores" field.
func VMCPUCoresNEQ(v uint32) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldNEQ(FieldVMCPUCores, v))
}

// VMCPUCoresIn applies the In predicate on the "vm_cpu_cores" field.
func VMCPUCoresIn(vs ...uint32) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldIn(FieldVMCPUCores, vs...))
}

// VMCPUCoresNotIn applies the NotIn predicate on the "vm_cpu_cores" field.
func VMCPUCoresNotIn(vs ...uint32) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldNotIn(FieldVMCPUCores, vs...))
}

// VMCPUCoresGT applies the GT predicate on the "vm_cpu_cores" field.
func VMCPUCoresGT(v uint32) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldGT(FieldVMCPUCores, v))
}

// VMCPUCoresGTE applies the GTE predicate on the "vm_cpu_cores" field.
func VMCPUCoresGTE(v uint32) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldGTE(FieldVMCPUCores, v))
}

// VMCPUCoresLT applies the LT predicate on the "vm_cpu_cores" field.
func VMCPUCoresLT(v uint32) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldLT(FieldVMCPUCores, v))
}

// VMCPUCoresLTE applies the LTE predicate on the "vm_cpu_cores" field.
func VMCPUCoresLTE(v uint32) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldLTE(FieldVMCPUCores, v))
}

// VMCPUCoresIsNil applies the IsNil predicate on the "vm_cpu_cores" field.
func VMCPUCoresIsNil() predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldIsNull(FieldVMCPUCores))
}

// VMCPUCoresNotNil applies the NotNil predicate on the "vm_cpu_cores" field.
func VMCPUCoresNotNil() predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldNotNull(FieldVMCPUCores))
}

// VMStorageBytesEQ applies the EQ predicate on the "vm_storage_bytes" field.
func VMStorageBytesEQ(v uint64) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldEQ(FieldVMStorageBytes, v))
}

// VMStorageBytesNEQ applies the NEQ predicate on the "vm_storage_bytes" field.
func VMStorageBytesNEQ(v uint64) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldNEQ(FieldVMStorageBytes, v))
}

// VMStorageBytesIn applies the In predicate on the "vm_storage_bytes" field.
func VMStorageBytesIn(vs ...uint64) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldIn(FieldVMStorageBytes, vs...))
}

// VMStorageBytesNotIn applies the NotIn predicate on the "vm_storage_bytes" field.
func VMStorageBytesNotIn(vs ...uint64) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldNotIn(FieldVMStorageBytes, vs...))
}

// VMStorageBytesGT applies the GT predicate on the "vm_storage_bytes" field.
func VMStorageBytesGT(v uint64) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldGT(FieldVMStorageBytes, v))
}

// VMStorageBytesGTE applies the GTE predicate on the "vm_storage_bytes" field.
func VMStorageBytesGTE(v uint64) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldGTE(FieldVMStorageBytes, v))
}

// VMStorageBytesLT applies the LT predicate on the "vm_storage_bytes" field.
func VMStorageBytesLT(v uint64) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldLT(FieldVMStorageBytes, v))
}

// VMStorageBytesLTE applies the LTE predicate on the "vm_storage_bytes" field.
func VMStorageBytesLTE(v uint64) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldLTE(FieldVMStorageBytes, v))
}

// VMStorageBytesIsNil applies the IsNil predicate on the "vm_storage_bytes" field.
func VMStorageBytesIsNil() predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldIsNull(FieldVMStorageBytes))
}

// VMStorageBytesNotNil applies the NotNil predicate on the "vm_storage_bytes" field.
func VMStorageBytesNotNil() predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldNotNull(FieldVMStorageBytes))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldNotNull(FieldStatus))
}

// StatusDetailEQ applies the EQ predicate on the "status_detail" field.
func StatusDetailEQ(v string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldEQ(FieldStatusDetail, v))
}

// StatusDetailNEQ applies the NEQ predicate on the "status_detail" field.
func StatusDetailNEQ(v string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldNEQ(FieldStatusDetail, v))
}

// StatusDetailIn applies the In predicate on the "status_detail" field.
func StatusDetailIn(vs ...string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldIn(FieldStatusDetail, vs...))
}

// StatusDetailNotIn applies the NotIn predicate on the "status_detail" field.
func StatusDetailNotIn(vs ...string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldNotIn(FieldStatusDetail, vs...))
}

// StatusDetailGT applies the GT predicate on the "status_detail" field.
func StatusDetailGT(v string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldGT(FieldStatusDetail, v))
}

// StatusDetailGTE applies the GTE predicate on the "status_detail" field.
func StatusDetailGTE(v string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldGTE(FieldStatusDetail, v))
}

// StatusDetailLT applies the LT predicate on the "status_detail" field.
func StatusDetailLT(v string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldLT(FieldStatusDetail, v))
}

// StatusDetailLTE applies the LTE predicate on the "status_detail" field.
func StatusDetailLTE(v string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldLTE(FieldStatusDetail, v))
}

// StatusDetailContains applies the Contains predicate on the "status_detail" field.
func StatusDetailContains(v string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldContains(FieldStatusDetail, v))
}

// StatusDetailHasPrefix applies the HasPrefix predicate on the "status_detail" field.
func StatusDetailHasPrefix(v string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldHasPrefix(FieldStatusDetail, v))
}

// StatusDetailHasSuffix applies the HasSuffix predicate on the "status_detail" field.
func StatusDetailHasSuffix(v string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldHasSuffix(FieldStatusDetail, v))
}

// StatusDetailIsNil applies the IsNil predicate on the "status_detail" field.
func StatusDetailIsNil() predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldIsNull(FieldStatusDetail))
}

// StatusDetailNotNil applies the NotNil predicate on the "status_detail" field.
func StatusDetailNotNil() predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldNotNull(FieldStatusDetail))
}

// StatusDetailEqualFold applies the EqualFold predicate on the "status_detail" field.
func StatusDetailEqualFold(v string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldEqualFold(FieldStatusDetail, v))
}

// StatusDetailContainsFold applies the ContainsFold predicate on the "status_detail" field.
func StatusDetailContainsFold(v string) predicate.InstanceResource {
	return predicate.InstanceResource(sql.FieldContainsFold(FieldStatusDetail, v))
}

// HasHost applies the HasEdge predicate on the "host" edge.
func HasHost() predicate.InstanceResource {
	return predicate.InstanceResource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, HostTable, HostColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHostWith applies the HasEdge predicate on the "host" edge with a given conditions (other predicates).
func HasHostWith(preds ...predicate.HostResource) predicate.InstanceResource {
	return predicate.InstanceResource(func(s *sql.Selector) {
		step := newHostStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.InstanceResource {
	return predicate.InstanceResource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.UserResource) predicate.InstanceResource {
	return predicate.InstanceResource(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOs applies the HasEdge predicate on the "os" edge.
func HasOs() predicate.InstanceResource {
	return predicate.InstanceResource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OsTable, OsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOsWith applies the HasEdge predicate on the "os" edge with a given conditions (other predicates).
func HasOsWith(preds ...predicate.OperatingSystemResource) predicate.InstanceResource {
	return predicate.InstanceResource(func(s *sql.Selector) {
		step := newOsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorkloadMembers applies the HasEdge predicate on the "workload_members" edge.
func HasWorkloadMembers() predicate.InstanceResource {
	return predicate.InstanceResource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, WorkloadMembersTable, WorkloadMembersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkloadMembersWith applies the HasEdge predicate on the "workload_members" edge with a given conditions (other predicates).
func HasWorkloadMembersWith(preds ...predicate.WorkloadMember) predicate.InstanceResource {
	return predicate.InstanceResource(func(s *sql.Selector) {
		step := newWorkloadMembersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProvider applies the HasEdge predicate on the "provider" edge.
func HasProvider() predicate.InstanceResource {
	return predicate.InstanceResource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProviderTable, ProviderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProviderWith applies the HasEdge predicate on the "provider" edge with a given conditions (other predicates).
func HasProviderWith(preds ...predicate.ProviderResource) predicate.InstanceResource {
	return predicate.InstanceResource(func(s *sql.Selector) {
		step := newProviderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.InstanceResource) predicate.InstanceResource {
	return predicate.InstanceResource(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.InstanceResource) predicate.InstanceResource {
	return predicate.InstanceResource(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.InstanceResource) predicate.InstanceResource {
	return predicate.InstanceResource(func(s *sql.Selector) {
		p(s.Not())
	})
}
