// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hostresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/instanceresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/operatingsystemresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/providerresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/userresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/workloadmember"
)

// InstanceResourceQuery is the builder for querying InstanceResource entities.
type InstanceResourceQuery struct {
	config
	ctx                 *QueryContext
	order               []instanceresource.OrderOption
	inters              []Interceptor
	predicates          []predicate.InstanceResource
	withHost            *HostResourceQuery
	withUser            *UserResourceQuery
	withOs              *OperatingSystemResourceQuery
	withWorkloadMembers *WorkloadMemberQuery
	withProvider        *ProviderResourceQuery
	withFKs             bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the InstanceResourceQuery builder.
func (irq *InstanceResourceQuery) Where(ps ...predicate.InstanceResource) *InstanceResourceQuery {
	irq.predicates = append(irq.predicates, ps...)
	return irq
}

// Limit the number of records to be returned by this query.
func (irq *InstanceResourceQuery) Limit(limit int) *InstanceResourceQuery {
	irq.ctx.Limit = &limit
	return irq
}

// Offset to start from.
func (irq *InstanceResourceQuery) Offset(offset int) *InstanceResourceQuery {
	irq.ctx.Offset = &offset
	return irq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (irq *InstanceResourceQuery) Unique(unique bool) *InstanceResourceQuery {
	irq.ctx.Unique = &unique
	return irq
}

// Order specifies how the records should be ordered.
func (irq *InstanceResourceQuery) Order(o ...instanceresource.OrderOption) *InstanceResourceQuery {
	irq.order = append(irq.order, o...)
	return irq
}

// QueryHost chains the current query on the "host" edge.
func (irq *InstanceResourceQuery) QueryHost() *HostResourceQuery {
	query := (&HostResourceClient{config: irq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := irq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := irq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(instanceresource.Table, instanceresource.FieldID, selector),
			sqlgraph.To(hostresource.Table, hostresource.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, instanceresource.HostTable, instanceresource.HostColumn),
		)
		fromU = sqlgraph.SetNeighbors(irq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (irq *InstanceResourceQuery) QueryUser() *UserResourceQuery {
	query := (&UserResourceClient{config: irq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := irq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := irq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(instanceresource.Table, instanceresource.FieldID, selector),
			sqlgraph.To(userresource.Table, userresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, instanceresource.UserTable, instanceresource.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(irq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOs chains the current query on the "os" edge.
func (irq *InstanceResourceQuery) QueryOs() *OperatingSystemResourceQuery {
	query := (&OperatingSystemResourceClient{config: irq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := irq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := irq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(instanceresource.Table, instanceresource.FieldID, selector),
			sqlgraph.To(operatingsystemresource.Table, operatingsystemresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, instanceresource.OsTable, instanceresource.OsColumn),
		)
		fromU = sqlgraph.SetNeighbors(irq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkloadMembers chains the current query on the "workload_members" edge.
func (irq *InstanceResourceQuery) QueryWorkloadMembers() *WorkloadMemberQuery {
	query := (&WorkloadMemberClient{config: irq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := irq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := irq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(instanceresource.Table, instanceresource.FieldID, selector),
			sqlgraph.To(workloadmember.Table, workloadmember.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, instanceresource.WorkloadMembersTable, instanceresource.WorkloadMembersColumn),
		)
		fromU = sqlgraph.SetNeighbors(irq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvider chains the current query on the "provider" edge.
func (irq *InstanceResourceQuery) QueryProvider() *ProviderResourceQuery {
	query := (&ProviderResourceClient{config: irq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := irq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := irq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(instanceresource.Table, instanceresource.FieldID, selector),
			sqlgraph.To(providerresource.Table, providerresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, instanceresource.ProviderTable, instanceresource.ProviderColumn),
		)
		fromU = sqlgraph.SetNeighbors(irq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first InstanceResource entity from the query.
// Returns a *NotFoundError when no InstanceResource was found.
func (irq *InstanceResourceQuery) First(ctx context.Context) (*InstanceResource, error) {
	nodes, err := irq.Limit(1).All(setContextOp(ctx, irq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{instanceresource.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (irq *InstanceResourceQuery) FirstX(ctx context.Context) *InstanceResource {
	node, err := irq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first InstanceResource ID from the query.
// Returns a *NotFoundError when no InstanceResource ID was found.
func (irq *InstanceResourceQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = irq.Limit(1).IDs(setContextOp(ctx, irq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{instanceresource.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (irq *InstanceResourceQuery) FirstIDX(ctx context.Context) int {
	id, err := irq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single InstanceResource entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one InstanceResource entity is found.
// Returns a *NotFoundError when no InstanceResource entities are found.
func (irq *InstanceResourceQuery) Only(ctx context.Context) (*InstanceResource, error) {
	nodes, err := irq.Limit(2).All(setContextOp(ctx, irq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{instanceresource.Label}
	default:
		return nil, &NotSingularError{instanceresource.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (irq *InstanceResourceQuery) OnlyX(ctx context.Context) *InstanceResource {
	node, err := irq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only InstanceResource ID in the query.
// Returns a *NotSingularError when more than one InstanceResource ID is found.
// Returns a *NotFoundError when no entities are found.
func (irq *InstanceResourceQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = irq.Limit(2).IDs(setContextOp(ctx, irq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{instanceresource.Label}
	default:
		err = &NotSingularError{instanceresource.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (irq *InstanceResourceQuery) OnlyIDX(ctx context.Context) int {
	id, err := irq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of InstanceResources.
func (irq *InstanceResourceQuery) All(ctx context.Context) ([]*InstanceResource, error) {
	ctx = setContextOp(ctx, irq.ctx, "All")
	if err := irq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*InstanceResource, *InstanceResourceQuery]()
	return withInterceptors[[]*InstanceResource](ctx, irq, qr, irq.inters)
}

// AllX is like All, but panics if an error occurs.
func (irq *InstanceResourceQuery) AllX(ctx context.Context) []*InstanceResource {
	nodes, err := irq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of InstanceResource IDs.
func (irq *InstanceResourceQuery) IDs(ctx context.Context) (ids []int, err error) {
	if irq.ctx.Unique == nil && irq.path != nil {
		irq.Unique(true)
	}
	ctx = setContextOp(ctx, irq.ctx, "IDs")
	if err = irq.Select(instanceresource.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (irq *InstanceResourceQuery) IDsX(ctx context.Context) []int {
	ids, err := irq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (irq *InstanceResourceQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, irq.ctx, "Count")
	if err := irq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, irq, querierCount[*InstanceResourceQuery](), irq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (irq *InstanceResourceQuery) CountX(ctx context.Context) int {
	count, err := irq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (irq *InstanceResourceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, irq.ctx, "Exist")
	switch _, err := irq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (irq *InstanceResourceQuery) ExistX(ctx context.Context) bool {
	exist, err := irq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the InstanceResourceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (irq *InstanceResourceQuery) Clone() *InstanceResourceQuery {
	if irq == nil {
		return nil
	}
	return &InstanceResourceQuery{
		config:              irq.config,
		ctx:                 irq.ctx.Clone(),
		order:               append([]instanceresource.OrderOption{}, irq.order...),
		inters:              append([]Interceptor{}, irq.inters...),
		predicates:          append([]predicate.InstanceResource{}, irq.predicates...),
		withHost:            irq.withHost.Clone(),
		withUser:            irq.withUser.Clone(),
		withOs:              irq.withOs.Clone(),
		withWorkloadMembers: irq.withWorkloadMembers.Clone(),
		withProvider:        irq.withProvider.Clone(),
		// clone intermediate query.
		sql:  irq.sql.Clone(),
		path: irq.path,
	}
}

// WithHost tells the query-builder to eager-load the nodes that are connected to
// the "host" edge. The optional arguments are used to configure the query builder of the edge.
func (irq *InstanceResourceQuery) WithHost(opts ...func(*HostResourceQuery)) *InstanceResourceQuery {
	query := (&HostResourceClient{config: irq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	irq.withHost = query
	return irq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (irq *InstanceResourceQuery) WithUser(opts ...func(*UserResourceQuery)) *InstanceResourceQuery {
	query := (&UserResourceClient{config: irq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	irq.withUser = query
	return irq
}

// WithOs tells the query-builder to eager-load the nodes that are connected to
// the "os" edge. The optional arguments are used to configure the query builder of the edge.
func (irq *InstanceResourceQuery) WithOs(opts ...func(*OperatingSystemResourceQuery)) *InstanceResourceQuery {
	query := (&OperatingSystemResourceClient{config: irq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	irq.withOs = query
	return irq
}

// WithWorkloadMembers tells the query-builder to eager-load the nodes that are connected to
// the "workload_members" edge. The optional arguments are used to configure the query builder of the edge.
func (irq *InstanceResourceQuery) WithWorkloadMembers(opts ...func(*WorkloadMemberQuery)) *InstanceResourceQuery {
	query := (&WorkloadMemberClient{config: irq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	irq.withWorkloadMembers = query
	return irq
}

// WithProvider tells the query-builder to eager-load the nodes that are connected to
// the "provider" edge. The optional arguments are used to configure the query builder of the edge.
func (irq *InstanceResourceQuery) WithProvider(opts ...func(*ProviderResourceQuery)) *InstanceResourceQuery {
	query := (&ProviderResourceClient{config: irq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	irq.withProvider = query
	return irq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ResourceID string `json:"resource_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.InstanceResource.Query().
//		GroupBy(instanceresource.FieldResourceID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (irq *InstanceResourceQuery) GroupBy(field string, fields ...string) *InstanceResourceGroupBy {
	irq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &InstanceResourceGroupBy{build: irq}
	grbuild.flds = &irq.ctx.Fields
	grbuild.label = instanceresource.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ResourceID string `json:"resource_id,omitempty"`
//	}
//
//	client.InstanceResource.Query().
//		Select(instanceresource.FieldResourceID).
//		Scan(ctx, &v)
func (irq *InstanceResourceQuery) Select(fields ...string) *InstanceResourceSelect {
	irq.ctx.Fields = append(irq.ctx.Fields, fields...)
	sbuild := &InstanceResourceSelect{InstanceResourceQuery: irq}
	sbuild.label = instanceresource.Label
	sbuild.flds, sbuild.scan = &irq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a InstanceResourceSelect configured with the given aggregations.
func (irq *InstanceResourceQuery) Aggregate(fns ...AggregateFunc) *InstanceResourceSelect {
	return irq.Select().Aggregate(fns...)
}

func (irq *InstanceResourceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range irq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, irq); err != nil {
				return err
			}
		}
	}
	for _, f := range irq.ctx.Fields {
		if !instanceresource.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if irq.path != nil {
		prev, err := irq.path(ctx)
		if err != nil {
			return err
		}
		irq.sql = prev
	}
	return nil
}

func (irq *InstanceResourceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*InstanceResource, error) {
	var (
		nodes       = []*InstanceResource{}
		withFKs     = irq.withFKs
		_spec       = irq.querySpec()
		loadedTypes = [5]bool{
			irq.withHost != nil,
			irq.withUser != nil,
			irq.withOs != nil,
			irq.withWorkloadMembers != nil,
			irq.withProvider != nil,
		}
	)
	if irq.withUser != nil || irq.withOs != nil || irq.withProvider != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, instanceresource.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*InstanceResource).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &InstanceResource{config: irq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, irq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := irq.withHost; query != nil {
		if err := irq.loadHost(ctx, query, nodes, nil,
			func(n *InstanceResource, e *HostResource) { n.Edges.Host = e }); err != nil {
			return nil, err
		}
	}
	if query := irq.withUser; query != nil {
		if err := irq.loadUser(ctx, query, nodes, nil,
			func(n *InstanceResource, e *UserResource) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := irq.withOs; query != nil {
		if err := irq.loadOs(ctx, query, nodes, nil,
			func(n *InstanceResource, e *OperatingSystemResource) { n.Edges.Os = e }); err != nil {
			return nil, err
		}
	}
	if query := irq.withWorkloadMembers; query != nil {
		if err := irq.loadWorkloadMembers(ctx, query, nodes,
			func(n *InstanceResource) { n.Edges.WorkloadMembers = []*WorkloadMember{} },
			func(n *InstanceResource, e *WorkloadMember) {
				n.Edges.WorkloadMembers = append(n.Edges.WorkloadMembers, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := irq.withProvider; query != nil {
		if err := irq.loadProvider(ctx, query, nodes, nil,
			func(n *InstanceResource, e *ProviderResource) { n.Edges.Provider = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (irq *InstanceResourceQuery) loadHost(ctx context.Context, query *HostResourceQuery, nodes []*InstanceResource, init func(*InstanceResource), assign func(*InstanceResource, *HostResource)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*InstanceResource)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.HostResource(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(instanceresource.HostColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.instance_resource_host
		if fk == nil {
			return fmt.Errorf(`foreign-key "instance_resource_host" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "instance_resource_host" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (irq *InstanceResourceQuery) loadUser(ctx context.Context, query *UserResourceQuery, nodes []*InstanceResource, init func(*InstanceResource), assign func(*InstanceResource, *UserResource)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*InstanceResource)
	for i := range nodes {
		if nodes[i].instance_resource_user == nil {
			continue
		}
		fk := *nodes[i].instance_resource_user
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(userresource.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "instance_resource_user" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (irq *InstanceResourceQuery) loadOs(ctx context.Context, query *OperatingSystemResourceQuery, nodes []*InstanceResource, init func(*InstanceResource), assign func(*InstanceResource, *OperatingSystemResource)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*InstanceResource)
	for i := range nodes {
		if nodes[i].instance_resource_os == nil {
			continue
		}
		fk := *nodes[i].instance_resource_os
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(operatingsystemresource.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "instance_resource_os" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (irq *InstanceResourceQuery) loadWorkloadMembers(ctx context.Context, query *WorkloadMemberQuery, nodes []*InstanceResource, init func(*InstanceResource), assign func(*InstanceResource, *WorkloadMember)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*InstanceResource)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.WorkloadMember(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(instanceresource.WorkloadMembersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.workload_member_instance
		if fk == nil {
			return fmt.Errorf(`foreign-key "workload_member_instance" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "workload_member_instance" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (irq *InstanceResourceQuery) loadProvider(ctx context.Context, query *ProviderResourceQuery, nodes []*InstanceResource, init func(*InstanceResource), assign func(*InstanceResource, *ProviderResource)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*InstanceResource)
	for i := range nodes {
		if nodes[i].instance_resource_provider == nil {
			continue
		}
		fk := *nodes[i].instance_resource_provider
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(providerresource.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "instance_resource_provider" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (irq *InstanceResourceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := irq.querySpec()
	_spec.Node.Columns = irq.ctx.Fields
	if len(irq.ctx.Fields) > 0 {
		_spec.Unique = irq.ctx.Unique != nil && *irq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, irq.driver, _spec)
}

func (irq *InstanceResourceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(instanceresource.Table, instanceresource.Columns, sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt))
	_spec.From = irq.sql
	if unique := irq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if irq.path != nil {
		_spec.Unique = true
	}
	if fields := irq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, instanceresource.FieldID)
		for i := range fields {
			if fields[i] != instanceresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := irq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := irq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := irq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := irq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (irq *InstanceResourceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(irq.driver.Dialect())
	t1 := builder.Table(instanceresource.Table)
	columns := irq.ctx.Fields
	if len(columns) == 0 {
		columns = instanceresource.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if irq.sql != nil {
		selector = irq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if irq.ctx.Unique != nil && *irq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range irq.predicates {
		p(selector)
	}
	for _, p := range irq.order {
		p(selector)
	}
	if offset := irq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := irq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// InstanceResourceGroupBy is the group-by builder for InstanceResource entities.
type InstanceResourceGroupBy struct {
	selector
	build *InstanceResourceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (irgb *InstanceResourceGroupBy) Aggregate(fns ...AggregateFunc) *InstanceResourceGroupBy {
	irgb.fns = append(irgb.fns, fns...)
	return irgb
}

// Scan applies the selector query and scans the result into the given value.
func (irgb *InstanceResourceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, irgb.build.ctx, "GroupBy")
	if err := irgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*InstanceResourceQuery, *InstanceResourceGroupBy](ctx, irgb.build, irgb, irgb.build.inters, v)
}

func (irgb *InstanceResourceGroupBy) sqlScan(ctx context.Context, root *InstanceResourceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(irgb.fns))
	for _, fn := range irgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*irgb.flds)+len(irgb.fns))
		for _, f := range *irgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*irgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := irgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// InstanceResourceSelect is the builder for selecting fields of InstanceResource entities.
type InstanceResourceSelect struct {
	*InstanceResourceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (irs *InstanceResourceSelect) Aggregate(fns ...AggregateFunc) *InstanceResourceSelect {
	irs.fns = append(irs.fns, fns...)
	return irs
}

// Scan applies the selector query and scans the result into the given value.
func (irs *InstanceResourceSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, irs.ctx, "Select")
	if err := irs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*InstanceResourceQuery, *InstanceResourceSelect](ctx, irs.InstanceResourceQuery, irs, irs.inters, v)
}

func (irs *InstanceResourceSelect) sqlScan(ctx context.Context, root *InstanceResourceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(irs.fns))
	for _, fn := range irs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*irs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := irs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
