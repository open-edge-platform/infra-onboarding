// Code generated by ent, DO NOT EDIT.

package providerresource

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the providerresource type in the database.
	Label = "provider_resource"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldResourceID holds the string denoting the resource_id field in the database.
	FieldResourceID = "resource_id"
	// FieldKind holds the string denoting the kind field in the database.
	FieldKind = "kind"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldDesiredState holds the string denoting the desired_state field in the database.
	FieldDesiredState = "desired_state"
	// FieldCurrentState holds the string denoting the current_state field in the database.
	FieldCurrentState = "current_state"
	// FieldEndpoint holds the string denoting the endpoint field in the database.
	FieldEndpoint = "endpoint"
	// FieldToken holds the string denoting the token field in the database.
	FieldToken = "token"
	// EdgeSite holds the string denoting the site edge name in mutations.
	EdgeSite = "site"
	// Table holds the table name of the providerresource in the database.
	Table = "provider_resources"
	// SiteTable is the table that holds the site relation/edge.
	SiteTable = "provider_resources"
	// SiteInverseTable is the table name for the SiteResource entity.
	// It exists in this package in order to avoid circular dependency with the "siteresource" package.
	SiteInverseTable = "site_resources"
	// SiteColumn is the table column denoting the site relation/edge.
	SiteColumn = "provider_resource_site"
)

// Columns holds all SQL columns for providerresource fields.
var Columns = []string{
	FieldID,
	FieldResourceID,
	FieldKind,
	FieldDescription,
	FieldDesiredState,
	FieldCurrentState,
	FieldEndpoint,
	FieldToken,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "provider_resources"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"provider_resource_site",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Kind defines the type for the "kind" enum field.
type Kind string

// Kind values.
const (
	KindPROVIDER_KIND_UNSPECIFIED Kind = "PROVIDER_KIND_UNSPECIFIED"
	KindPROVIDER_KIND_HARVESTER   Kind = "PROVIDER_KIND_HARVESTER"
	KindPROVIDER_KIND_METAL       Kind = "PROVIDER_KIND_METAL"
)

func (k Kind) String() string {
	return string(k)
}

// KindValidator is a validator for the "kind" field enum values. It is called by the builders before save.
func KindValidator(k Kind) error {
	switch k {
	case KindPROVIDER_KIND_UNSPECIFIED, KindPROVIDER_KIND_HARVESTER, KindPROVIDER_KIND_METAL:
		return nil
	default:
		return fmt.Errorf("providerresource: invalid enum value for kind field: %q", k)
	}
}

// DesiredState defines the type for the "desired_state" enum field.
type DesiredState string

// DesiredState values.
const (
	DesiredStatePROVIDER_STATE_UNSPECIFIED DesiredState = "PROVIDER_STATE_UNSPECIFIED"
	DesiredStatePROVIDER_STATE_ERROR       DesiredState = "PROVIDER_STATE_ERROR"
	DesiredStatePROVIDER_STATE_DELETED     DesiredState = "PROVIDER_STATE_DELETED"
	DesiredStatePROVIDER_STATE_ENABLED     DesiredState = "PROVIDER_STATE_ENABLED"
	DesiredStatePROVIDER_STATE_DISABLED    DesiredState = "PROVIDER_STATE_DISABLED"
)

func (ds DesiredState) String() string {
	return string(ds)
}

// DesiredStateValidator is a validator for the "desired_state" field enum values. It is called by the builders before save.
func DesiredStateValidator(ds DesiredState) error {
	switch ds {
	case DesiredStatePROVIDER_STATE_UNSPECIFIED, DesiredStatePROVIDER_STATE_ERROR, DesiredStatePROVIDER_STATE_DELETED, DesiredStatePROVIDER_STATE_ENABLED, DesiredStatePROVIDER_STATE_DISABLED:
		return nil
	default:
		return fmt.Errorf("providerresource: invalid enum value for desired_state field: %q", ds)
	}
}

// CurrentState defines the type for the "current_state" enum field.
type CurrentState string

// CurrentState values.
const (
	CurrentStatePROVIDER_STATE_UNSPECIFIED CurrentState = "PROVIDER_STATE_UNSPECIFIED"
	CurrentStatePROVIDER_STATE_ERROR       CurrentState = "PROVIDER_STATE_ERROR"
	CurrentStatePROVIDER_STATE_DELETED     CurrentState = "PROVIDER_STATE_DELETED"
	CurrentStatePROVIDER_STATE_ENABLED     CurrentState = "PROVIDER_STATE_ENABLED"
	CurrentStatePROVIDER_STATE_DISABLED    CurrentState = "PROVIDER_STATE_DISABLED"
)

func (cs CurrentState) String() string {
	return string(cs)
}

// CurrentStateValidator is a validator for the "current_state" field enum values. It is called by the builders before save.
func CurrentStateValidator(cs CurrentState) error {
	switch cs {
	case CurrentStatePROVIDER_STATE_UNSPECIFIED, CurrentStatePROVIDER_STATE_ERROR, CurrentStatePROVIDER_STATE_DELETED, CurrentStatePROVIDER_STATE_ENABLED, CurrentStatePROVIDER_STATE_DISABLED:
		return nil
	default:
		return fmt.Errorf("providerresource: invalid enum value for current_state field: %q", cs)
	}
}

// OrderOption defines the ordering options for the ProviderResource queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByResourceID orders the results by the resource_id field.
func ByResourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceID, opts...).ToFunc()
}

// ByKind orders the results by the kind field.
func ByKind(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKind, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByDesiredState orders the results by the desired_state field.
func ByDesiredState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesiredState, opts...).ToFunc()
}

// ByCurrentState orders the results by the current_state field.
func ByCurrentState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentState, opts...).ToFunc()
}

// ByEndpoint orders the results by the endpoint field.
func ByEndpoint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndpoint, opts...).ToFunc()
}

// ByToken orders the results by the token field.
func ByToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToken, opts...).ToFunc()
}

// BySiteField orders the results by site field.
func BySiteField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSiteStep(), sql.OrderByField(field, opts...))
	}
}
func newSiteStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SiteInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SiteTable, SiteColumn),
	)
}
