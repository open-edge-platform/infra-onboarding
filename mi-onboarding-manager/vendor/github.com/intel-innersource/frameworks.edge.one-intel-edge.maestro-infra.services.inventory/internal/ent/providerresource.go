// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/providerresource"
)

// ProviderResource is the model entity for the ProviderResource schema.
type ProviderResource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ResourceID holds the value of the "resource_id" field.
	ResourceID string `json:"resource_id,omitempty"`
	// ProviderKind holds the value of the "provider_kind" field.
	ProviderKind providerresource.ProviderKind `json:"provider_kind,omitempty"`
	// ProviderVendor holds the value of the "provider_vendor" field.
	ProviderVendor providerresource.ProviderVendor `json:"provider_vendor,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// APIEndpoint holds the value of the "api_endpoint" field.
	APIEndpoint string `json:"api_endpoint,omitempty"`
	// APICredentials holds the value of the "api_credentials" field.
	APICredentials string `json:"api_credentials,omitempty"`
	selectValues   sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProviderResource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case providerresource.FieldID:
			values[i] = new(sql.NullInt64)
		case providerresource.FieldResourceID, providerresource.FieldProviderKind, providerresource.FieldProviderVendor, providerresource.FieldName, providerresource.FieldAPIEndpoint, providerresource.FieldAPICredentials:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProviderResource fields.
func (pr *ProviderResource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case providerresource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case providerresource.FieldResourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				pr.ResourceID = value.String
			}
		case providerresource.FieldProviderKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_kind", values[i])
			} else if value.Valid {
				pr.ProviderKind = providerresource.ProviderKind(value.String)
			}
		case providerresource.FieldProviderVendor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_vendor", values[i])
			} else if value.Valid {
				pr.ProviderVendor = providerresource.ProviderVendor(value.String)
			}
		case providerresource.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case providerresource.FieldAPIEndpoint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_endpoint", values[i])
			} else if value.Valid {
				pr.APIEndpoint = value.String
			}
		case providerresource.FieldAPICredentials:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_credentials", values[i])
			} else if value.Valid {
				pr.APICredentials = value.String
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProviderResource.
// This includes values selected through modifiers, order, etc.
func (pr *ProviderResource) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// Update returns a builder for updating this ProviderResource.
// Note that you need to call ProviderResource.Unwrap() before calling this method if this ProviderResource
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *ProviderResource) Update() *ProviderResourceUpdateOne {
	return NewProviderResourceClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the ProviderResource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *ProviderResource) Unwrap() *ProviderResource {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProviderResource is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *ProviderResource) String() string {
	var builder strings.Builder
	builder.WriteString("ProviderResource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("resource_id=")
	builder.WriteString(pr.ResourceID)
	builder.WriteString(", ")
	builder.WriteString("provider_kind=")
	builder.WriteString(fmt.Sprintf("%v", pr.ProviderKind))
	builder.WriteString(", ")
	builder.WriteString("provider_vendor=")
	builder.WriteString(fmt.Sprintf("%v", pr.ProviderVendor))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", ")
	builder.WriteString("api_endpoint=")
	builder.WriteString(pr.APIEndpoint)
	builder.WriteString(", ")
	builder.WriteString("api_credentials=")
	builder.WriteString(pr.APICredentials)
	builder.WriteByte(')')
	return builder.String()
}

// ProviderResources is a parsable slice of ProviderResource.
type ProviderResources []*ProviderResource
