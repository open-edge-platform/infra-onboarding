// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hostgpuresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hostresource"
)

// HostgpuResourceCreate is the builder for creating a HostgpuResource entity.
type HostgpuResourceCreate struct {
	config
	mutation *HostgpuResourceMutation
	hooks    []Hook
}

// SetResourceID sets the "resource_id" field.
func (hrc *HostgpuResourceCreate) SetResourceID(s string) *HostgpuResourceCreate {
	hrc.mutation.SetResourceID(s)
	return hrc
}

// SetPciID sets the "pci_id" field.
func (hrc *HostgpuResourceCreate) SetPciID(s string) *HostgpuResourceCreate {
	hrc.mutation.SetPciID(s)
	return hrc
}

// SetNillablePciID sets the "pci_id" field if the given value is not nil.
func (hrc *HostgpuResourceCreate) SetNillablePciID(s *string) *HostgpuResourceCreate {
	if s != nil {
		hrc.SetPciID(*s)
	}
	return hrc
}

// SetProduct sets the "product" field.
func (hrc *HostgpuResourceCreate) SetProduct(s string) *HostgpuResourceCreate {
	hrc.mutation.SetProduct(s)
	return hrc
}

// SetNillableProduct sets the "product" field if the given value is not nil.
func (hrc *HostgpuResourceCreate) SetNillableProduct(s *string) *HostgpuResourceCreate {
	if s != nil {
		hrc.SetProduct(*s)
	}
	return hrc
}

// SetVendor sets the "vendor" field.
func (hrc *HostgpuResourceCreate) SetVendor(s string) *HostgpuResourceCreate {
	hrc.mutation.SetVendor(s)
	return hrc
}

// SetNillableVendor sets the "vendor" field if the given value is not nil.
func (hrc *HostgpuResourceCreate) SetNillableVendor(s *string) *HostgpuResourceCreate {
	if s != nil {
		hrc.SetVendor(*s)
	}
	return hrc
}

// SetDescription sets the "description" field.
func (hrc *HostgpuResourceCreate) SetDescription(s string) *HostgpuResourceCreate {
	hrc.mutation.SetDescription(s)
	return hrc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (hrc *HostgpuResourceCreate) SetNillableDescription(s *string) *HostgpuResourceCreate {
	if s != nil {
		hrc.SetDescription(*s)
	}
	return hrc
}

// SetDeviceName sets the "device_name" field.
func (hrc *HostgpuResourceCreate) SetDeviceName(s string) *HostgpuResourceCreate {
	hrc.mutation.SetDeviceName(s)
	return hrc
}

// SetNillableDeviceName sets the "device_name" field if the given value is not nil.
func (hrc *HostgpuResourceCreate) SetNillableDeviceName(s *string) *HostgpuResourceCreate {
	if s != nil {
		hrc.SetDeviceName(*s)
	}
	return hrc
}

// SetHostID sets the "host" edge to the HostResource entity by ID.
func (hrc *HostgpuResourceCreate) SetHostID(id int) *HostgpuResourceCreate {
	hrc.mutation.SetHostID(id)
	return hrc
}

// SetHost sets the "host" edge to the HostResource entity.
func (hrc *HostgpuResourceCreate) SetHost(h *HostResource) *HostgpuResourceCreate {
	return hrc.SetHostID(h.ID)
}

// Mutation returns the HostgpuResourceMutation object of the builder.
func (hrc *HostgpuResourceCreate) Mutation() *HostgpuResourceMutation {
	return hrc.mutation
}

// Save creates the HostgpuResource in the database.
func (hrc *HostgpuResourceCreate) Save(ctx context.Context) (*HostgpuResource, error) {
	return withHooks[*HostgpuResource, HostgpuResourceMutation](ctx, hrc.sqlSave, hrc.mutation, hrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hrc *HostgpuResourceCreate) SaveX(ctx context.Context) *HostgpuResource {
	v, err := hrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hrc *HostgpuResourceCreate) Exec(ctx context.Context) error {
	_, err := hrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hrc *HostgpuResourceCreate) ExecX(ctx context.Context) {
	if err := hrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hrc *HostgpuResourceCreate) check() error {
	if _, ok := hrc.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource_id", err: errors.New(`ent: missing required field "HostgpuResource.resource_id"`)}
	}
	if _, ok := hrc.mutation.HostID(); !ok {
		return &ValidationError{Name: "host", err: errors.New(`ent: missing required edge "HostgpuResource.host"`)}
	}
	return nil
}

func (hrc *HostgpuResourceCreate) sqlSave(ctx context.Context) (*HostgpuResource, error) {
	if err := hrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	hrc.mutation.id = &_node.ID
	hrc.mutation.done = true
	return _node, nil
}

func (hrc *HostgpuResourceCreate) createSpec() (*HostgpuResource, *sqlgraph.CreateSpec) {
	var (
		_node = &HostgpuResource{config: hrc.config}
		_spec = sqlgraph.NewCreateSpec(hostgpuresource.Table, sqlgraph.NewFieldSpec(hostgpuresource.FieldID, field.TypeInt))
	)
	if value, ok := hrc.mutation.ResourceID(); ok {
		_spec.SetField(hostgpuresource.FieldResourceID, field.TypeString, value)
		_node.ResourceID = value
	}
	if value, ok := hrc.mutation.PciID(); ok {
		_spec.SetField(hostgpuresource.FieldPciID, field.TypeString, value)
		_node.PciID = value
	}
	if value, ok := hrc.mutation.Product(); ok {
		_spec.SetField(hostgpuresource.FieldProduct, field.TypeString, value)
		_node.Product = value
	}
	if value, ok := hrc.mutation.Vendor(); ok {
		_spec.SetField(hostgpuresource.FieldVendor, field.TypeString, value)
		_node.Vendor = value
	}
	if value, ok := hrc.mutation.Description(); ok {
		_spec.SetField(hostgpuresource.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := hrc.mutation.DeviceName(); ok {
		_spec.SetField(hostgpuresource.FieldDeviceName, field.TypeString, value)
		_node.DeviceName = value
	}
	if nodes := hrc.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostgpuresource.HostTable,
			Columns: []string{hostgpuresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.hostgpu_resource_host = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HostgpuResourceCreateBulk is the builder for creating many HostgpuResource entities in bulk.
type HostgpuResourceCreateBulk struct {
	config
	builders []*HostgpuResourceCreate
}

// Save creates the HostgpuResource entities in the database.
func (hrcb *HostgpuResourceCreateBulk) Save(ctx context.Context) ([]*HostgpuResource, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hrcb.builders))
	nodes := make([]*HostgpuResource, len(hrcb.builders))
	mutators := make([]Mutator, len(hrcb.builders))
	for i := range hrcb.builders {
		func(i int, root context.Context) {
			builder := hrcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HostgpuResourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hrcb *HostgpuResourceCreateBulk) SaveX(ctx context.Context) []*HostgpuResource {
	v, err := hrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hrcb *HostgpuResourceCreateBulk) Exec(ctx context.Context) error {
	_, err := hrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hrcb *HostgpuResourceCreateBulk) ExecX(ctx context.Context) {
	if err := hrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
