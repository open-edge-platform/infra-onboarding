// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hostresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/repeatedscheduleresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/siteresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/workloadresource"
)

// RepeatedScheduleResourceUpdate is the builder for updating RepeatedScheduleResource entities.
type RepeatedScheduleResourceUpdate struct {
	config
	hooks    []Hook
	mutation *RepeatedScheduleResourceMutation
}

// Where appends a list predicates to the RepeatedScheduleResourceUpdate builder.
func (rsru *RepeatedScheduleResourceUpdate) Where(ps ...predicate.RepeatedScheduleResource) *RepeatedScheduleResourceUpdate {
	rsru.mutation.Where(ps...)
	return rsru
}

// SetResourceID sets the "resource_id" field.
func (rsru *RepeatedScheduleResourceUpdate) SetResourceID(s string) *RepeatedScheduleResourceUpdate {
	rsru.mutation.SetResourceID(s)
	return rsru
}

// SetScheduleStatus sets the "schedule_status" field.
func (rsru *RepeatedScheduleResourceUpdate) SetScheduleStatus(rs repeatedscheduleresource.ScheduleStatus) *RepeatedScheduleResourceUpdate {
	rsru.mutation.SetScheduleStatus(rs)
	return rsru
}

// SetNillableScheduleStatus sets the "schedule_status" field if the given value is not nil.
func (rsru *RepeatedScheduleResourceUpdate) SetNillableScheduleStatus(rs *repeatedscheduleresource.ScheduleStatus) *RepeatedScheduleResourceUpdate {
	if rs != nil {
		rsru.SetScheduleStatus(*rs)
	}
	return rsru
}

// ClearScheduleStatus clears the value of the "schedule_status" field.
func (rsru *RepeatedScheduleResourceUpdate) ClearScheduleStatus() *RepeatedScheduleResourceUpdate {
	rsru.mutation.ClearScheduleStatus()
	return rsru
}

// SetDescription sets the "description" field.
func (rsru *RepeatedScheduleResourceUpdate) SetDescription(s string) *RepeatedScheduleResourceUpdate {
	rsru.mutation.SetDescription(s)
	return rsru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rsru *RepeatedScheduleResourceUpdate) SetNillableDescription(s *string) *RepeatedScheduleResourceUpdate {
	if s != nil {
		rsru.SetDescription(*s)
	}
	return rsru
}

// ClearDescription clears the value of the "description" field.
func (rsru *RepeatedScheduleResourceUpdate) ClearDescription() *RepeatedScheduleResourceUpdate {
	rsru.mutation.ClearDescription()
	return rsru
}

// SetDurationSeconds sets the "duration_seconds" field.
func (rsru *RepeatedScheduleResourceUpdate) SetDurationSeconds(u uint32) *RepeatedScheduleResourceUpdate {
	rsru.mutation.ResetDurationSeconds()
	rsru.mutation.SetDurationSeconds(u)
	return rsru
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (rsru *RepeatedScheduleResourceUpdate) SetNillableDurationSeconds(u *uint32) *RepeatedScheduleResourceUpdate {
	if u != nil {
		rsru.SetDurationSeconds(*u)
	}
	return rsru
}

// AddDurationSeconds adds u to the "duration_seconds" field.
func (rsru *RepeatedScheduleResourceUpdate) AddDurationSeconds(u int32) *RepeatedScheduleResourceUpdate {
	rsru.mutation.AddDurationSeconds(u)
	return rsru
}

// ClearDurationSeconds clears the value of the "duration_seconds" field.
func (rsru *RepeatedScheduleResourceUpdate) ClearDurationSeconds() *RepeatedScheduleResourceUpdate {
	rsru.mutation.ClearDurationSeconds()
	return rsru
}

// SetCronMinutes sets the "cron_minutes" field.
func (rsru *RepeatedScheduleResourceUpdate) SetCronMinutes(s string) *RepeatedScheduleResourceUpdate {
	rsru.mutation.SetCronMinutes(s)
	return rsru
}

// SetCronHours sets the "cron_hours" field.
func (rsru *RepeatedScheduleResourceUpdate) SetCronHours(s string) *RepeatedScheduleResourceUpdate {
	rsru.mutation.SetCronHours(s)
	return rsru
}

// SetCronDayMonth sets the "cron_day_month" field.
func (rsru *RepeatedScheduleResourceUpdate) SetCronDayMonth(s string) *RepeatedScheduleResourceUpdate {
	rsru.mutation.SetCronDayMonth(s)
	return rsru
}

// SetCronMonth sets the "cron_month" field.
func (rsru *RepeatedScheduleResourceUpdate) SetCronMonth(s string) *RepeatedScheduleResourceUpdate {
	rsru.mutation.SetCronMonth(s)
	return rsru
}

// SetCronDayWeek sets the "cron_day_week" field.
func (rsru *RepeatedScheduleResourceUpdate) SetCronDayWeek(s string) *RepeatedScheduleResourceUpdate {
	rsru.mutation.SetCronDayWeek(s)
	return rsru
}

// SetTargetSiteID sets the "target_site" edge to the SiteResource entity by ID.
func (rsru *RepeatedScheduleResourceUpdate) SetTargetSiteID(id int) *RepeatedScheduleResourceUpdate {
	rsru.mutation.SetTargetSiteID(id)
	return rsru
}

// SetNillableTargetSiteID sets the "target_site" edge to the SiteResource entity by ID if the given value is not nil.
func (rsru *RepeatedScheduleResourceUpdate) SetNillableTargetSiteID(id *int) *RepeatedScheduleResourceUpdate {
	if id != nil {
		rsru = rsru.SetTargetSiteID(*id)
	}
	return rsru
}

// SetTargetSite sets the "target_site" edge to the SiteResource entity.
func (rsru *RepeatedScheduleResourceUpdate) SetTargetSite(s *SiteResource) *RepeatedScheduleResourceUpdate {
	return rsru.SetTargetSiteID(s.ID)
}

// SetTargetHostID sets the "target_host" edge to the HostResource entity by ID.
func (rsru *RepeatedScheduleResourceUpdate) SetTargetHostID(id int) *RepeatedScheduleResourceUpdate {
	rsru.mutation.SetTargetHostID(id)
	return rsru
}

// SetNillableTargetHostID sets the "target_host" edge to the HostResource entity by ID if the given value is not nil.
func (rsru *RepeatedScheduleResourceUpdate) SetNillableTargetHostID(id *int) *RepeatedScheduleResourceUpdate {
	if id != nil {
		rsru = rsru.SetTargetHostID(*id)
	}
	return rsru
}

// SetTargetHost sets the "target_host" edge to the HostResource entity.
func (rsru *RepeatedScheduleResourceUpdate) SetTargetHost(h *HostResource) *RepeatedScheduleResourceUpdate {
	return rsru.SetTargetHostID(h.ID)
}

// SetTargetWorkloadID sets the "target_workload" edge to the WorkloadResource entity by ID.
func (rsru *RepeatedScheduleResourceUpdate) SetTargetWorkloadID(id int) *RepeatedScheduleResourceUpdate {
	rsru.mutation.SetTargetWorkloadID(id)
	return rsru
}

// SetNillableTargetWorkloadID sets the "target_workload" edge to the WorkloadResource entity by ID if the given value is not nil.
func (rsru *RepeatedScheduleResourceUpdate) SetNillableTargetWorkloadID(id *int) *RepeatedScheduleResourceUpdate {
	if id != nil {
		rsru = rsru.SetTargetWorkloadID(*id)
	}
	return rsru
}

// SetTargetWorkload sets the "target_workload" edge to the WorkloadResource entity.
func (rsru *RepeatedScheduleResourceUpdate) SetTargetWorkload(w *WorkloadResource) *RepeatedScheduleResourceUpdate {
	return rsru.SetTargetWorkloadID(w.ID)
}

// Mutation returns the RepeatedScheduleResourceMutation object of the builder.
func (rsru *RepeatedScheduleResourceUpdate) Mutation() *RepeatedScheduleResourceMutation {
	return rsru.mutation
}

// ClearTargetSite clears the "target_site" edge to the SiteResource entity.
func (rsru *RepeatedScheduleResourceUpdate) ClearTargetSite() *RepeatedScheduleResourceUpdate {
	rsru.mutation.ClearTargetSite()
	return rsru
}

// ClearTargetHost clears the "target_host" edge to the HostResource entity.
func (rsru *RepeatedScheduleResourceUpdate) ClearTargetHost() *RepeatedScheduleResourceUpdate {
	rsru.mutation.ClearTargetHost()
	return rsru
}

// ClearTargetWorkload clears the "target_workload" edge to the WorkloadResource entity.
func (rsru *RepeatedScheduleResourceUpdate) ClearTargetWorkload() *RepeatedScheduleResourceUpdate {
	rsru.mutation.ClearTargetWorkload()
	return rsru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rsru *RepeatedScheduleResourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, RepeatedScheduleResourceMutation](ctx, rsru.sqlSave, rsru.mutation, rsru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rsru *RepeatedScheduleResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := rsru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rsru *RepeatedScheduleResourceUpdate) Exec(ctx context.Context) error {
	_, err := rsru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsru *RepeatedScheduleResourceUpdate) ExecX(ctx context.Context) {
	if err := rsru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rsru *RepeatedScheduleResourceUpdate) check() error {
	if v, ok := rsru.mutation.ScheduleStatus(); ok {
		if err := repeatedscheduleresource.ScheduleStatusValidator(v); err != nil {
			return &ValidationError{Name: "schedule_status", err: fmt.Errorf(`ent: validator failed for field "RepeatedScheduleResource.schedule_status": %w`, err)}
		}
	}
	return nil
}

func (rsru *RepeatedScheduleResourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rsru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(repeatedscheduleresource.Table, repeatedscheduleresource.Columns, sqlgraph.NewFieldSpec(repeatedscheduleresource.FieldID, field.TypeInt))
	if ps := rsru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rsru.mutation.ResourceID(); ok {
		_spec.SetField(repeatedscheduleresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := rsru.mutation.ScheduleStatus(); ok {
		_spec.SetField(repeatedscheduleresource.FieldScheduleStatus, field.TypeEnum, value)
	}
	if rsru.mutation.ScheduleStatusCleared() {
		_spec.ClearField(repeatedscheduleresource.FieldScheduleStatus, field.TypeEnum)
	}
	if value, ok := rsru.mutation.Description(); ok {
		_spec.SetField(repeatedscheduleresource.FieldDescription, field.TypeString, value)
	}
	if rsru.mutation.DescriptionCleared() {
		_spec.ClearField(repeatedscheduleresource.FieldDescription, field.TypeString)
	}
	if value, ok := rsru.mutation.DurationSeconds(); ok {
		_spec.SetField(repeatedscheduleresource.FieldDurationSeconds, field.TypeUint32, value)
	}
	if value, ok := rsru.mutation.AddedDurationSeconds(); ok {
		_spec.AddField(repeatedscheduleresource.FieldDurationSeconds, field.TypeUint32, value)
	}
	if rsru.mutation.DurationSecondsCleared() {
		_spec.ClearField(repeatedscheduleresource.FieldDurationSeconds, field.TypeUint32)
	}
	if value, ok := rsru.mutation.CronMinutes(); ok {
		_spec.SetField(repeatedscheduleresource.FieldCronMinutes, field.TypeString, value)
	}
	if value, ok := rsru.mutation.CronHours(); ok {
		_spec.SetField(repeatedscheduleresource.FieldCronHours, field.TypeString, value)
	}
	if value, ok := rsru.mutation.CronDayMonth(); ok {
		_spec.SetField(repeatedscheduleresource.FieldCronDayMonth, field.TypeString, value)
	}
	if value, ok := rsru.mutation.CronMonth(); ok {
		_spec.SetField(repeatedscheduleresource.FieldCronMonth, field.TypeString, value)
	}
	if value, ok := rsru.mutation.CronDayWeek(); ok {
		_spec.SetField(repeatedscheduleresource.FieldCronDayWeek, field.TypeString, value)
	}
	if rsru.mutation.TargetSiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repeatedscheduleresource.TargetSiteTable,
			Columns: []string{repeatedscheduleresource.TargetSiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsru.mutation.TargetSiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repeatedscheduleresource.TargetSiteTable,
			Columns: []string{repeatedscheduleresource.TargetSiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rsru.mutation.TargetHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repeatedscheduleresource.TargetHostTable,
			Columns: []string{repeatedscheduleresource.TargetHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsru.mutation.TargetHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repeatedscheduleresource.TargetHostTable,
			Columns: []string{repeatedscheduleresource.TargetHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rsru.mutation.TargetWorkloadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repeatedscheduleresource.TargetWorkloadTable,
			Columns: []string{repeatedscheduleresource.TargetWorkloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsru.mutation.TargetWorkloadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repeatedscheduleresource.TargetWorkloadTable,
			Columns: []string{repeatedscheduleresource.TargetWorkloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rsru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repeatedscheduleresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rsru.mutation.done = true
	return n, nil
}

// RepeatedScheduleResourceUpdateOne is the builder for updating a single RepeatedScheduleResource entity.
type RepeatedScheduleResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RepeatedScheduleResourceMutation
}

// SetResourceID sets the "resource_id" field.
func (rsruo *RepeatedScheduleResourceUpdateOne) SetResourceID(s string) *RepeatedScheduleResourceUpdateOne {
	rsruo.mutation.SetResourceID(s)
	return rsruo
}

// SetScheduleStatus sets the "schedule_status" field.
func (rsruo *RepeatedScheduleResourceUpdateOne) SetScheduleStatus(rs repeatedscheduleresource.ScheduleStatus) *RepeatedScheduleResourceUpdateOne {
	rsruo.mutation.SetScheduleStatus(rs)
	return rsruo
}

// SetNillableScheduleStatus sets the "schedule_status" field if the given value is not nil.
func (rsruo *RepeatedScheduleResourceUpdateOne) SetNillableScheduleStatus(rs *repeatedscheduleresource.ScheduleStatus) *RepeatedScheduleResourceUpdateOne {
	if rs != nil {
		rsruo.SetScheduleStatus(*rs)
	}
	return rsruo
}

// ClearScheduleStatus clears the value of the "schedule_status" field.
func (rsruo *RepeatedScheduleResourceUpdateOne) ClearScheduleStatus() *RepeatedScheduleResourceUpdateOne {
	rsruo.mutation.ClearScheduleStatus()
	return rsruo
}

// SetDescription sets the "description" field.
func (rsruo *RepeatedScheduleResourceUpdateOne) SetDescription(s string) *RepeatedScheduleResourceUpdateOne {
	rsruo.mutation.SetDescription(s)
	return rsruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rsruo *RepeatedScheduleResourceUpdateOne) SetNillableDescription(s *string) *RepeatedScheduleResourceUpdateOne {
	if s != nil {
		rsruo.SetDescription(*s)
	}
	return rsruo
}

// ClearDescription clears the value of the "description" field.
func (rsruo *RepeatedScheduleResourceUpdateOne) ClearDescription() *RepeatedScheduleResourceUpdateOne {
	rsruo.mutation.ClearDescription()
	return rsruo
}

// SetDurationSeconds sets the "duration_seconds" field.
func (rsruo *RepeatedScheduleResourceUpdateOne) SetDurationSeconds(u uint32) *RepeatedScheduleResourceUpdateOne {
	rsruo.mutation.ResetDurationSeconds()
	rsruo.mutation.SetDurationSeconds(u)
	return rsruo
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (rsruo *RepeatedScheduleResourceUpdateOne) SetNillableDurationSeconds(u *uint32) *RepeatedScheduleResourceUpdateOne {
	if u != nil {
		rsruo.SetDurationSeconds(*u)
	}
	return rsruo
}

// AddDurationSeconds adds u to the "duration_seconds" field.
func (rsruo *RepeatedScheduleResourceUpdateOne) AddDurationSeconds(u int32) *RepeatedScheduleResourceUpdateOne {
	rsruo.mutation.AddDurationSeconds(u)
	return rsruo
}

// ClearDurationSeconds clears the value of the "duration_seconds" field.
func (rsruo *RepeatedScheduleResourceUpdateOne) ClearDurationSeconds() *RepeatedScheduleResourceUpdateOne {
	rsruo.mutation.ClearDurationSeconds()
	return rsruo
}

// SetCronMinutes sets the "cron_minutes" field.
func (rsruo *RepeatedScheduleResourceUpdateOne) SetCronMinutes(s string) *RepeatedScheduleResourceUpdateOne {
	rsruo.mutation.SetCronMinutes(s)
	return rsruo
}

// SetCronHours sets the "cron_hours" field.
func (rsruo *RepeatedScheduleResourceUpdateOne) SetCronHours(s string) *RepeatedScheduleResourceUpdateOne {
	rsruo.mutation.SetCronHours(s)
	return rsruo
}

// SetCronDayMonth sets the "cron_day_month" field.
func (rsruo *RepeatedScheduleResourceUpdateOne) SetCronDayMonth(s string) *RepeatedScheduleResourceUpdateOne {
	rsruo.mutation.SetCronDayMonth(s)
	return rsruo
}

// SetCronMonth sets the "cron_month" field.
func (rsruo *RepeatedScheduleResourceUpdateOne) SetCronMonth(s string) *RepeatedScheduleResourceUpdateOne {
	rsruo.mutation.SetCronMonth(s)
	return rsruo
}

// SetCronDayWeek sets the "cron_day_week" field.
func (rsruo *RepeatedScheduleResourceUpdateOne) SetCronDayWeek(s string) *RepeatedScheduleResourceUpdateOne {
	rsruo.mutation.SetCronDayWeek(s)
	return rsruo
}

// SetTargetSiteID sets the "target_site" edge to the SiteResource entity by ID.
func (rsruo *RepeatedScheduleResourceUpdateOne) SetTargetSiteID(id int) *RepeatedScheduleResourceUpdateOne {
	rsruo.mutation.SetTargetSiteID(id)
	return rsruo
}

// SetNillableTargetSiteID sets the "target_site" edge to the SiteResource entity by ID if the given value is not nil.
func (rsruo *RepeatedScheduleResourceUpdateOne) SetNillableTargetSiteID(id *int) *RepeatedScheduleResourceUpdateOne {
	if id != nil {
		rsruo = rsruo.SetTargetSiteID(*id)
	}
	return rsruo
}

// SetTargetSite sets the "target_site" edge to the SiteResource entity.
func (rsruo *RepeatedScheduleResourceUpdateOne) SetTargetSite(s *SiteResource) *RepeatedScheduleResourceUpdateOne {
	return rsruo.SetTargetSiteID(s.ID)
}

// SetTargetHostID sets the "target_host" edge to the HostResource entity by ID.
func (rsruo *RepeatedScheduleResourceUpdateOne) SetTargetHostID(id int) *RepeatedScheduleResourceUpdateOne {
	rsruo.mutation.SetTargetHostID(id)
	return rsruo
}

// SetNillableTargetHostID sets the "target_host" edge to the HostResource entity by ID if the given value is not nil.
func (rsruo *RepeatedScheduleResourceUpdateOne) SetNillableTargetHostID(id *int) *RepeatedScheduleResourceUpdateOne {
	if id != nil {
		rsruo = rsruo.SetTargetHostID(*id)
	}
	return rsruo
}

// SetTargetHost sets the "target_host" edge to the HostResource entity.
func (rsruo *RepeatedScheduleResourceUpdateOne) SetTargetHost(h *HostResource) *RepeatedScheduleResourceUpdateOne {
	return rsruo.SetTargetHostID(h.ID)
}

// SetTargetWorkloadID sets the "target_workload" edge to the WorkloadResource entity by ID.
func (rsruo *RepeatedScheduleResourceUpdateOne) SetTargetWorkloadID(id int) *RepeatedScheduleResourceUpdateOne {
	rsruo.mutation.SetTargetWorkloadID(id)
	return rsruo
}

// SetNillableTargetWorkloadID sets the "target_workload" edge to the WorkloadResource entity by ID if the given value is not nil.
func (rsruo *RepeatedScheduleResourceUpdateOne) SetNillableTargetWorkloadID(id *int) *RepeatedScheduleResourceUpdateOne {
	if id != nil {
		rsruo = rsruo.SetTargetWorkloadID(*id)
	}
	return rsruo
}

// SetTargetWorkload sets the "target_workload" edge to the WorkloadResource entity.
func (rsruo *RepeatedScheduleResourceUpdateOne) SetTargetWorkload(w *WorkloadResource) *RepeatedScheduleResourceUpdateOne {
	return rsruo.SetTargetWorkloadID(w.ID)
}

// Mutation returns the RepeatedScheduleResourceMutation object of the builder.
func (rsruo *RepeatedScheduleResourceUpdateOne) Mutation() *RepeatedScheduleResourceMutation {
	return rsruo.mutation
}

// ClearTargetSite clears the "target_site" edge to the SiteResource entity.
func (rsruo *RepeatedScheduleResourceUpdateOne) ClearTargetSite() *RepeatedScheduleResourceUpdateOne {
	rsruo.mutation.ClearTargetSite()
	return rsruo
}

// ClearTargetHost clears the "target_host" edge to the HostResource entity.
func (rsruo *RepeatedScheduleResourceUpdateOne) ClearTargetHost() *RepeatedScheduleResourceUpdateOne {
	rsruo.mutation.ClearTargetHost()
	return rsruo
}

// ClearTargetWorkload clears the "target_workload" edge to the WorkloadResource entity.
func (rsruo *RepeatedScheduleResourceUpdateOne) ClearTargetWorkload() *RepeatedScheduleResourceUpdateOne {
	rsruo.mutation.ClearTargetWorkload()
	return rsruo
}

// Where appends a list predicates to the RepeatedScheduleResourceUpdate builder.
func (rsruo *RepeatedScheduleResourceUpdateOne) Where(ps ...predicate.RepeatedScheduleResource) *RepeatedScheduleResourceUpdateOne {
	rsruo.mutation.Where(ps...)
	return rsruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rsruo *RepeatedScheduleResourceUpdateOne) Select(field string, fields ...string) *RepeatedScheduleResourceUpdateOne {
	rsruo.fields = append([]string{field}, fields...)
	return rsruo
}

// Save executes the query and returns the updated RepeatedScheduleResource entity.
func (rsruo *RepeatedScheduleResourceUpdateOne) Save(ctx context.Context) (*RepeatedScheduleResource, error) {
	return withHooks[*RepeatedScheduleResource, RepeatedScheduleResourceMutation](ctx, rsruo.sqlSave, rsruo.mutation, rsruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rsruo *RepeatedScheduleResourceUpdateOne) SaveX(ctx context.Context) *RepeatedScheduleResource {
	node, err := rsruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rsruo *RepeatedScheduleResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := rsruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsruo *RepeatedScheduleResourceUpdateOne) ExecX(ctx context.Context) {
	if err := rsruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rsruo *RepeatedScheduleResourceUpdateOne) check() error {
	if v, ok := rsruo.mutation.ScheduleStatus(); ok {
		if err := repeatedscheduleresource.ScheduleStatusValidator(v); err != nil {
			return &ValidationError{Name: "schedule_status", err: fmt.Errorf(`ent: validator failed for field "RepeatedScheduleResource.schedule_status": %w`, err)}
		}
	}
	return nil
}

func (rsruo *RepeatedScheduleResourceUpdateOne) sqlSave(ctx context.Context) (_node *RepeatedScheduleResource, err error) {
	if err := rsruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(repeatedscheduleresource.Table, repeatedscheduleresource.Columns, sqlgraph.NewFieldSpec(repeatedscheduleresource.FieldID, field.TypeInt))
	id, ok := rsruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RepeatedScheduleResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rsruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, repeatedscheduleresource.FieldID)
		for _, f := range fields {
			if !repeatedscheduleresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != repeatedscheduleresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rsruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rsruo.mutation.ResourceID(); ok {
		_spec.SetField(repeatedscheduleresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := rsruo.mutation.ScheduleStatus(); ok {
		_spec.SetField(repeatedscheduleresource.FieldScheduleStatus, field.TypeEnum, value)
	}
	if rsruo.mutation.ScheduleStatusCleared() {
		_spec.ClearField(repeatedscheduleresource.FieldScheduleStatus, field.TypeEnum)
	}
	if value, ok := rsruo.mutation.Description(); ok {
		_spec.SetField(repeatedscheduleresource.FieldDescription, field.TypeString, value)
	}
	if rsruo.mutation.DescriptionCleared() {
		_spec.ClearField(repeatedscheduleresource.FieldDescription, field.TypeString)
	}
	if value, ok := rsruo.mutation.DurationSeconds(); ok {
		_spec.SetField(repeatedscheduleresource.FieldDurationSeconds, field.TypeUint32, value)
	}
	if value, ok := rsruo.mutation.AddedDurationSeconds(); ok {
		_spec.AddField(repeatedscheduleresource.FieldDurationSeconds, field.TypeUint32, value)
	}
	if rsruo.mutation.DurationSecondsCleared() {
		_spec.ClearField(repeatedscheduleresource.FieldDurationSeconds, field.TypeUint32)
	}
	if value, ok := rsruo.mutation.CronMinutes(); ok {
		_spec.SetField(repeatedscheduleresource.FieldCronMinutes, field.TypeString, value)
	}
	if value, ok := rsruo.mutation.CronHours(); ok {
		_spec.SetField(repeatedscheduleresource.FieldCronHours, field.TypeString, value)
	}
	if value, ok := rsruo.mutation.CronDayMonth(); ok {
		_spec.SetField(repeatedscheduleresource.FieldCronDayMonth, field.TypeString, value)
	}
	if value, ok := rsruo.mutation.CronMonth(); ok {
		_spec.SetField(repeatedscheduleresource.FieldCronMonth, field.TypeString, value)
	}
	if value, ok := rsruo.mutation.CronDayWeek(); ok {
		_spec.SetField(repeatedscheduleresource.FieldCronDayWeek, field.TypeString, value)
	}
	if rsruo.mutation.TargetSiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repeatedscheduleresource.TargetSiteTable,
			Columns: []string{repeatedscheduleresource.TargetSiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsruo.mutation.TargetSiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repeatedscheduleresource.TargetSiteTable,
			Columns: []string{repeatedscheduleresource.TargetSiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rsruo.mutation.TargetHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repeatedscheduleresource.TargetHostTable,
			Columns: []string{repeatedscheduleresource.TargetHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsruo.mutation.TargetHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repeatedscheduleresource.TargetHostTable,
			Columns: []string{repeatedscheduleresource.TargetHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rsruo.mutation.TargetWorkloadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repeatedscheduleresource.TargetWorkloadTable,
			Columns: []string{repeatedscheduleresource.TargetWorkloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsruo.mutation.TargetWorkloadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repeatedscheduleresource.TargetWorkloadTable,
			Columns: []string{repeatedscheduleresource.TargetWorkloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RepeatedScheduleResource{config: rsruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rsruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repeatedscheduleresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rsruo.mutation.done = true
	return _node, nil
}
