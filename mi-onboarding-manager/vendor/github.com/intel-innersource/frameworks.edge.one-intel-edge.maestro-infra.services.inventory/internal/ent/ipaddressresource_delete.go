// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/ipaddressresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
)

// IPAddressResourceDelete is the builder for deleting a IPAddressResource entity.
type IPAddressResourceDelete struct {
	config
	hooks    []Hook
	mutation *IPAddressResourceMutation
}

// Where appends a list predicates to the IPAddressResourceDelete builder.
func (iard *IPAddressResourceDelete) Where(ps ...predicate.IPAddressResource) *IPAddressResourceDelete {
	iard.mutation.Where(ps...)
	return iard
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (iard *IPAddressResourceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, IPAddressResourceMutation](ctx, iard.sqlExec, iard.mutation, iard.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (iard *IPAddressResourceDelete) ExecX(ctx context.Context) int {
	n, err := iard.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (iard *IPAddressResourceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(ipaddressresource.Table, sqlgraph.NewFieldSpec(ipaddressresource.FieldID, field.TypeInt))
	if ps := iard.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, iard.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	iard.mutation.done = true
	return affected, err
}

// IPAddressResourceDeleteOne is the builder for deleting a single IPAddressResource entity.
type IPAddressResourceDeleteOne struct {
	iard *IPAddressResourceDelete
}

// Where appends a list predicates to the IPAddressResourceDelete builder.
func (iardo *IPAddressResourceDeleteOne) Where(ps ...predicate.IPAddressResource) *IPAddressResourceDeleteOne {
	iardo.iard.mutation.Where(ps...)
	return iardo
}

// Exec executes the deletion query.
func (iardo *IPAddressResourceDeleteOne) Exec(ctx context.Context) error {
	n, err := iardo.iard.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{ipaddressresource.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (iardo *IPAddressResourceDeleteOne) ExecX(ctx context.Context) {
	if err := iardo.Exec(ctx); err != nil {
		panic(err)
	}
}
