// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/ouresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/regionresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/siteresource"
)

// SiteResource is the model entity for the SiteResource schema.
type SiteResource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ResourceID holds the value of the "resource_id" field.
	ResourceID string `json:"resource_id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// SiteKind holds the value of the "site_kind" field.
	SiteKind string `json:"site_kind,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// SiteLat holds the value of the "site_lat" field.
	SiteLat int32 `json:"site_lat,omitempty"`
	// SiteLng holds the value of the "site_lng" field.
	SiteLng int32 `json:"site_lng,omitempty"`
	// DNSServers holds the value of the "dns_servers" field.
	DNSServers string `json:"dns_servers,omitempty"`
	// DockerRegistries holds the value of the "docker_registries" field.
	DockerRegistries string `json:"docker_registries,omitempty"`
	// MetricsEndpoint holds the value of the "metrics_endpoint" field.
	MetricsEndpoint string `json:"metrics_endpoint,omitempty"`
	// HTTPProxy holds the value of the "http_proxy" field.
	HTTPProxy string `json:"http_proxy,omitempty"`
	// HTTPSProxy holds the value of the "https_proxy" field.
	HTTPSProxy string `json:"https_proxy,omitempty"`
	// FtpProxy holds the value of the "ftp_proxy" field.
	FtpProxy string `json:"ftp_proxy,omitempty"`
	// NoProxy holds the value of the "no_proxy" field.
	NoProxy string `json:"no_proxy,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata string `json:"metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SiteResourceQuery when eager-loading is set.
	Edges                SiteResourceEdges `json:"edges"`
	site_resource_region *int
	site_resource_ou     *int
	selectValues         sql.SelectValues
}

// SiteResourceEdges holds the relations/edges for other nodes in the graph.
type SiteResourceEdges struct {
	// Region holds the value of the region edge.
	Region *RegionResource `json:"region,omitempty"`
	// Ou holds the value of the ou edge.
	Ou *OuResource `json:"ou,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RegionOrErr returns the Region value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SiteResourceEdges) RegionOrErr() (*RegionResource, error) {
	if e.loadedTypes[0] {
		if e.Region == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: regionresource.Label}
		}
		return e.Region, nil
	}
	return nil, &NotLoadedError{edge: "region"}
}

// OuOrErr returns the Ou value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SiteResourceEdges) OuOrErr() (*OuResource, error) {
	if e.loadedTypes[1] {
		if e.Ou == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: ouresource.Label}
		}
		return e.Ou, nil
	}
	return nil, &NotLoadedError{edge: "ou"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SiteResource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case siteresource.FieldID, siteresource.FieldSiteLat, siteresource.FieldSiteLng:
			values[i] = new(sql.NullInt64)
		case siteresource.FieldResourceID, siteresource.FieldDescription, siteresource.FieldSiteKind, siteresource.FieldAddress, siteresource.FieldDNSServers, siteresource.FieldDockerRegistries, siteresource.FieldMetricsEndpoint, siteresource.FieldHTTPProxy, siteresource.FieldHTTPSProxy, siteresource.FieldFtpProxy, siteresource.FieldNoProxy, siteresource.FieldMetadata:
			values[i] = new(sql.NullString)
		case siteresource.ForeignKeys[0]: // site_resource_region
			values[i] = new(sql.NullInt64)
		case siteresource.ForeignKeys[1]: // site_resource_ou
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SiteResource fields.
func (sr *SiteResource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case siteresource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sr.ID = int(value.Int64)
		case siteresource.FieldResourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				sr.ResourceID = value.String
			}
		case siteresource.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				sr.Description = value.String
			}
		case siteresource.FieldSiteKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field site_kind", values[i])
			} else if value.Valid {
				sr.SiteKind = value.String
			}
		case siteresource.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				sr.Address = value.String
			}
		case siteresource.FieldSiteLat:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field site_lat", values[i])
			} else if value.Valid {
				sr.SiteLat = int32(value.Int64)
			}
		case siteresource.FieldSiteLng:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field site_lng", values[i])
			} else if value.Valid {
				sr.SiteLng = int32(value.Int64)
			}
		case siteresource.FieldDNSServers:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dns_servers", values[i])
			} else if value.Valid {
				sr.DNSServers = value.String
			}
		case siteresource.FieldDockerRegistries:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field docker_registries", values[i])
			} else if value.Valid {
				sr.DockerRegistries = value.String
			}
		case siteresource.FieldMetricsEndpoint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field metrics_endpoint", values[i])
			} else if value.Valid {
				sr.MetricsEndpoint = value.String
			}
		case siteresource.FieldHTTPProxy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field http_proxy", values[i])
			} else if value.Valid {
				sr.HTTPProxy = value.String
			}
		case siteresource.FieldHTTPSProxy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field https_proxy", values[i])
			} else if value.Valid {
				sr.HTTPSProxy = value.String
			}
		case siteresource.FieldFtpProxy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ftp_proxy", values[i])
			} else if value.Valid {
				sr.FtpProxy = value.String
			}
		case siteresource.FieldNoProxy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field no_proxy", values[i])
			} else if value.Valid {
				sr.NoProxy = value.String
			}
		case siteresource.FieldMetadata:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value.Valid {
				sr.Metadata = value.String
			}
		case siteresource.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field site_resource_region", value)
			} else if value.Valid {
				sr.site_resource_region = new(int)
				*sr.site_resource_region = int(value.Int64)
			}
		case siteresource.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field site_resource_ou", value)
			} else if value.Valid {
				sr.site_resource_ou = new(int)
				*sr.site_resource_ou = int(value.Int64)
			}
		default:
			sr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SiteResource.
// This includes values selected through modifiers, order, etc.
func (sr *SiteResource) Value(name string) (ent.Value, error) {
	return sr.selectValues.Get(name)
}

// QueryRegion queries the "region" edge of the SiteResource entity.
func (sr *SiteResource) QueryRegion() *RegionResourceQuery {
	return NewSiteResourceClient(sr.config).QueryRegion(sr)
}

// QueryOu queries the "ou" edge of the SiteResource entity.
func (sr *SiteResource) QueryOu() *OuResourceQuery {
	return NewSiteResourceClient(sr.config).QueryOu(sr)
}

// Update returns a builder for updating this SiteResource.
// Note that you need to call SiteResource.Unwrap() before calling this method if this SiteResource
// was returned from a transaction, and the transaction was committed or rolled back.
func (sr *SiteResource) Update() *SiteResourceUpdateOne {
	return NewSiteResourceClient(sr.config).UpdateOne(sr)
}

// Unwrap unwraps the SiteResource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sr *SiteResource) Unwrap() *SiteResource {
	_tx, ok := sr.config.driver.(*txDriver)
	if !ok {
		panic("ent: SiteResource is not a transactional entity")
	}
	sr.config.driver = _tx.drv
	return sr
}

// String implements the fmt.Stringer.
func (sr *SiteResource) String() string {
	var builder strings.Builder
	builder.WriteString("SiteResource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sr.ID))
	builder.WriteString("resource_id=")
	builder.WriteString(sr.ResourceID)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(sr.Description)
	builder.WriteString(", ")
	builder.WriteString("site_kind=")
	builder.WriteString(sr.SiteKind)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(sr.Address)
	builder.WriteString(", ")
	builder.WriteString("site_lat=")
	builder.WriteString(fmt.Sprintf("%v", sr.SiteLat))
	builder.WriteString(", ")
	builder.WriteString("site_lng=")
	builder.WriteString(fmt.Sprintf("%v", sr.SiteLng))
	builder.WriteString(", ")
	builder.WriteString("dns_servers=")
	builder.WriteString(sr.DNSServers)
	builder.WriteString(", ")
	builder.WriteString("docker_registries=")
	builder.WriteString(sr.DockerRegistries)
	builder.WriteString(", ")
	builder.WriteString("metrics_endpoint=")
	builder.WriteString(sr.MetricsEndpoint)
	builder.WriteString(", ")
	builder.WriteString("http_proxy=")
	builder.WriteString(sr.HTTPProxy)
	builder.WriteString(", ")
	builder.WriteString("https_proxy=")
	builder.WriteString(sr.HTTPSProxy)
	builder.WriteString(", ")
	builder.WriteString("ftp_proxy=")
	builder.WriteString(sr.FtpProxy)
	builder.WriteString(", ")
	builder.WriteString("no_proxy=")
	builder.WriteString(sr.NoProxy)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(sr.Metadata)
	builder.WriteByte(')')
	return builder.String()
}

// SiteResources is a parsable slice of SiteResource.
type SiteResources []*SiteResource
