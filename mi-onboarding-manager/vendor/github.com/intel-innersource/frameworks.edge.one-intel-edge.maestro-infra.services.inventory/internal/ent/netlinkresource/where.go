// Code generated by ent, DO NOT EDIT.

package netlinkresource

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldLTE(FieldID, id))
}

// ResourceID applies equality check predicate on the "resource_id" field. It's identical to ResourceIDEQ.
func ResourceID(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldEQ(FieldResourceID, v))
}

// Kind applies equality check predicate on the "kind" field. It's identical to KindEQ.
func Kind(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldEQ(FieldKind, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldEQ(FieldDescription, v))
}

// ProviderStatus applies equality check predicate on the "provider_status" field. It's identical to ProviderStatusEQ.
func ProviderStatus(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldEQ(FieldProviderStatus, v))
}

// ResourceIDEQ applies the EQ predicate on the "resource_id" field.
func ResourceIDEQ(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldEQ(FieldResourceID, v))
}

// ResourceIDNEQ applies the NEQ predicate on the "resource_id" field.
func ResourceIDNEQ(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldNEQ(FieldResourceID, v))
}

// ResourceIDIn applies the In predicate on the "resource_id" field.
func ResourceIDIn(vs ...string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldIn(FieldResourceID, vs...))
}

// ResourceIDNotIn applies the NotIn predicate on the "resource_id" field.
func ResourceIDNotIn(vs ...string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldNotIn(FieldResourceID, vs...))
}

// ResourceIDGT applies the GT predicate on the "resource_id" field.
func ResourceIDGT(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldGT(FieldResourceID, v))
}

// ResourceIDGTE applies the GTE predicate on the "resource_id" field.
func ResourceIDGTE(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldGTE(FieldResourceID, v))
}

// ResourceIDLT applies the LT predicate on the "resource_id" field.
func ResourceIDLT(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldLT(FieldResourceID, v))
}

// ResourceIDLTE applies the LTE predicate on the "resource_id" field.
func ResourceIDLTE(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldLTE(FieldResourceID, v))
}

// ResourceIDContains applies the Contains predicate on the "resource_id" field.
func ResourceIDContains(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldContains(FieldResourceID, v))
}

// ResourceIDHasPrefix applies the HasPrefix predicate on the "resource_id" field.
func ResourceIDHasPrefix(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldHasPrefix(FieldResourceID, v))
}

// ResourceIDHasSuffix applies the HasSuffix predicate on the "resource_id" field.
func ResourceIDHasSuffix(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldHasSuffix(FieldResourceID, v))
}

// ResourceIDEqualFold applies the EqualFold predicate on the "resource_id" field.
func ResourceIDEqualFold(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldEqualFold(FieldResourceID, v))
}

// ResourceIDContainsFold applies the ContainsFold predicate on the "resource_id" field.
func ResourceIDContainsFold(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldContainsFold(FieldResourceID, v))
}

// KindEQ applies the EQ predicate on the "kind" field.
func KindEQ(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldEQ(FieldKind, v))
}

// KindNEQ applies the NEQ predicate on the "kind" field.
func KindNEQ(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldNEQ(FieldKind, v))
}

// KindIn applies the In predicate on the "kind" field.
func KindIn(vs ...string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldIn(FieldKind, vs...))
}

// KindNotIn applies the NotIn predicate on the "kind" field.
func KindNotIn(vs ...string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldNotIn(FieldKind, vs...))
}

// KindGT applies the GT predicate on the "kind" field.
func KindGT(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldGT(FieldKind, v))
}

// KindGTE applies the GTE predicate on the "kind" field.
func KindGTE(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldGTE(FieldKind, v))
}

// KindLT applies the LT predicate on the "kind" field.
func KindLT(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldLT(FieldKind, v))
}

// KindLTE applies the LTE predicate on the "kind" field.
func KindLTE(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldLTE(FieldKind, v))
}

// KindContains applies the Contains predicate on the "kind" field.
func KindContains(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldContains(FieldKind, v))
}

// KindHasPrefix applies the HasPrefix predicate on the "kind" field.
func KindHasPrefix(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldHasPrefix(FieldKind, v))
}

// KindHasSuffix applies the HasSuffix predicate on the "kind" field.
func KindHasSuffix(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldHasSuffix(FieldKind, v))
}

// KindIsNil applies the IsNil predicate on the "kind" field.
func KindIsNil() predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldIsNull(FieldKind))
}

// KindNotNil applies the NotNil predicate on the "kind" field.
func KindNotNil() predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldNotNull(FieldKind))
}

// KindEqualFold applies the EqualFold predicate on the "kind" field.
func KindEqualFold(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldEqualFold(FieldKind, v))
}

// KindContainsFold applies the ContainsFold predicate on the "kind" field.
func KindContainsFold(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldContainsFold(FieldKind, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldContainsFold(FieldDescription, v))
}

// DesiredStateEQ applies the EQ predicate on the "desired_state" field.
func DesiredStateEQ(v DesiredState) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldEQ(FieldDesiredState, v))
}

// DesiredStateNEQ applies the NEQ predicate on the "desired_state" field.
func DesiredStateNEQ(v DesiredState) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldNEQ(FieldDesiredState, v))
}

// DesiredStateIn applies the In predicate on the "desired_state" field.
func DesiredStateIn(vs ...DesiredState) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldIn(FieldDesiredState, vs...))
}

// DesiredStateNotIn applies the NotIn predicate on the "desired_state" field.
func DesiredStateNotIn(vs ...DesiredState) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldNotIn(FieldDesiredState, vs...))
}

// CurrentStateEQ applies the EQ predicate on the "current_state" field.
func CurrentStateEQ(v CurrentState) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldEQ(FieldCurrentState, v))
}

// CurrentStateNEQ applies the NEQ predicate on the "current_state" field.
func CurrentStateNEQ(v CurrentState) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldNEQ(FieldCurrentState, v))
}

// CurrentStateIn applies the In predicate on the "current_state" field.
func CurrentStateIn(vs ...CurrentState) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldIn(FieldCurrentState, vs...))
}

// CurrentStateNotIn applies the NotIn predicate on the "current_state" field.
func CurrentStateNotIn(vs ...CurrentState) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldNotIn(FieldCurrentState, vs...))
}

// CurrentStateIsNil applies the IsNil predicate on the "current_state" field.
func CurrentStateIsNil() predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldIsNull(FieldCurrentState))
}

// CurrentStateNotNil applies the NotNil predicate on the "current_state" field.
func CurrentStateNotNil() predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldNotNull(FieldCurrentState))
}

// ProviderStatusEQ applies the EQ predicate on the "provider_status" field.
func ProviderStatusEQ(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldEQ(FieldProviderStatus, v))
}

// ProviderStatusNEQ applies the NEQ predicate on the "provider_status" field.
func ProviderStatusNEQ(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldNEQ(FieldProviderStatus, v))
}

// ProviderStatusIn applies the In predicate on the "provider_status" field.
func ProviderStatusIn(vs ...string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldIn(FieldProviderStatus, vs...))
}

// ProviderStatusNotIn applies the NotIn predicate on the "provider_status" field.
func ProviderStatusNotIn(vs ...string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldNotIn(FieldProviderStatus, vs...))
}

// ProviderStatusGT applies the GT predicate on the "provider_status" field.
func ProviderStatusGT(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldGT(FieldProviderStatus, v))
}

// ProviderStatusGTE applies the GTE predicate on the "provider_status" field.
func ProviderStatusGTE(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldGTE(FieldProviderStatus, v))
}

// ProviderStatusLT applies the LT predicate on the "provider_status" field.
func ProviderStatusLT(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldLT(FieldProviderStatus, v))
}

// ProviderStatusLTE applies the LTE predicate on the "provider_status" field.
func ProviderStatusLTE(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldLTE(FieldProviderStatus, v))
}

// ProviderStatusContains applies the Contains predicate on the "provider_status" field.
func ProviderStatusContains(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldContains(FieldProviderStatus, v))
}

// ProviderStatusHasPrefix applies the HasPrefix predicate on the "provider_status" field.
func ProviderStatusHasPrefix(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldHasPrefix(FieldProviderStatus, v))
}

// ProviderStatusHasSuffix applies the HasSuffix predicate on the "provider_status" field.
func ProviderStatusHasSuffix(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldHasSuffix(FieldProviderStatus, v))
}

// ProviderStatusIsNil applies the IsNil predicate on the "provider_status" field.
func ProviderStatusIsNil() predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldIsNull(FieldProviderStatus))
}

// ProviderStatusNotNil applies the NotNil predicate on the "provider_status" field.
func ProviderStatusNotNil() predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldNotNull(FieldProviderStatus))
}

// ProviderStatusEqualFold applies the EqualFold predicate on the "provider_status" field.
func ProviderStatusEqualFold(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldEqualFold(FieldProviderStatus, v))
}

// ProviderStatusContainsFold applies the ContainsFold predicate on the "provider_status" field.
func ProviderStatusContainsFold(v string) predicate.NetlinkResource {
	return predicate.NetlinkResource(sql.FieldContainsFold(FieldProviderStatus, v))
}

// HasSrc applies the HasEdge predicate on the "src" edge.
func HasSrc() predicate.NetlinkResource {
	return predicate.NetlinkResource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SrcTable, SrcColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSrcWith applies the HasEdge predicate on the "src" edge with a given conditions (other predicates).
func HasSrcWith(preds ...predicate.EndpointResource) predicate.NetlinkResource {
	return predicate.NetlinkResource(func(s *sql.Selector) {
		step := newSrcStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDst applies the HasEdge predicate on the "dst" edge.
func HasDst() predicate.NetlinkResource {
	return predicate.NetlinkResource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DstTable, DstColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDstWith applies the HasEdge predicate on the "dst" edge with a given conditions (other predicates).
func HasDstWith(preds ...predicate.EndpointResource) predicate.NetlinkResource {
	return predicate.NetlinkResource(func(s *sql.Selector) {
		step := newDstStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NetlinkResource) predicate.NetlinkResource {
	return predicate.NetlinkResource(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NetlinkResource) predicate.NetlinkResource {
	return predicate.NetlinkResource(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NetlinkResource) predicate.NetlinkResource {
	return predicate.NetlinkResource(func(s *sql.Selector) {
		p(s.Not())
	})
}
