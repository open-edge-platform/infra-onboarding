// Code generated by ent, DO NOT EDIT.

package netlinkresource

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the netlinkresource type in the database.
	Label = "netlink_resource"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldResourceID holds the string denoting the resource_id field in the database.
	FieldResourceID = "resource_id"
	// FieldKind holds the string denoting the kind field in the database.
	FieldKind = "kind"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDesiredState holds the string denoting the desired_state field in the database.
	FieldDesiredState = "desired_state"
	// FieldCurrentState holds the string denoting the current_state field in the database.
	FieldCurrentState = "current_state"
	// FieldProviderStatus holds the string denoting the provider_status field in the database.
	FieldProviderStatus = "provider_status"
	// EdgeSrc holds the string denoting the src edge name in mutations.
	EdgeSrc = "src"
	// EdgeDst holds the string denoting the dst edge name in mutations.
	EdgeDst = "dst"
	// Table holds the table name of the netlinkresource in the database.
	Table = "netlink_resources"
	// SrcTable is the table that holds the src relation/edge.
	SrcTable = "netlink_resources"
	// SrcInverseTable is the table name for the EndpointResource entity.
	// It exists in this package in order to avoid circular dependency with the "endpointresource" package.
	SrcInverseTable = "endpoint_resources"
	// SrcColumn is the table column denoting the src relation/edge.
	SrcColumn = "netlink_resource_src"
	// DstTable is the table that holds the dst relation/edge.
	DstTable = "netlink_resources"
	// DstInverseTable is the table name for the EndpointResource entity.
	// It exists in this package in order to avoid circular dependency with the "endpointresource" package.
	DstInverseTable = "endpoint_resources"
	// DstColumn is the table column denoting the dst relation/edge.
	DstColumn = "netlink_resource_dst"
)

// Columns holds all SQL columns for netlinkresource fields.
var Columns = []string{
	FieldID,
	FieldResourceID,
	FieldKind,
	FieldName,
	FieldDesiredState,
	FieldCurrentState,
	FieldProviderStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "netlink_resources"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"netlink_resource_src",
	"netlink_resource_dst",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// DesiredState defines the type for the "desired_state" enum field.
type DesiredState string

// DesiredState values.
const (
	DesiredStateNETLINK_STATE_UNSPECIFIED DesiredState = "NETLINK_STATE_UNSPECIFIED"
	DesiredStateNETLINK_STATE_DELETED     DesiredState = "NETLINK_STATE_DELETED"
	DesiredStateNETLINK_STATE_ONLINE      DesiredState = "NETLINK_STATE_ONLINE"
	DesiredStateNETLINK_STATE_OFFLINE     DesiredState = "NETLINK_STATE_OFFLINE"
	DesiredStateNETLINK_STATE_ERROR       DesiredState = "NETLINK_STATE_ERROR"
)

func (ds DesiredState) String() string {
	return string(ds)
}

// DesiredStateValidator is a validator for the "desired_state" field enum values. It is called by the builders before save.
func DesiredStateValidator(ds DesiredState) error {
	switch ds {
	case DesiredStateNETLINK_STATE_UNSPECIFIED, DesiredStateNETLINK_STATE_DELETED, DesiredStateNETLINK_STATE_ONLINE, DesiredStateNETLINK_STATE_OFFLINE, DesiredStateNETLINK_STATE_ERROR:
		return nil
	default:
		return fmt.Errorf("netlinkresource: invalid enum value for desired_state field: %q", ds)
	}
}

// CurrentState defines the type for the "current_state" enum field.
type CurrentState string

// CurrentState values.
const (
	CurrentStateNETLINK_STATE_UNSPECIFIED CurrentState = "NETLINK_STATE_UNSPECIFIED"
	CurrentStateNETLINK_STATE_DELETED     CurrentState = "NETLINK_STATE_DELETED"
	CurrentStateNETLINK_STATE_ONLINE      CurrentState = "NETLINK_STATE_ONLINE"
	CurrentStateNETLINK_STATE_OFFLINE     CurrentState = "NETLINK_STATE_OFFLINE"
	CurrentStateNETLINK_STATE_ERROR       CurrentState = "NETLINK_STATE_ERROR"
)

func (cs CurrentState) String() string {
	return string(cs)
}

// CurrentStateValidator is a validator for the "current_state" field enum values. It is called by the builders before save.
func CurrentStateValidator(cs CurrentState) error {
	switch cs {
	case CurrentStateNETLINK_STATE_UNSPECIFIED, CurrentStateNETLINK_STATE_DELETED, CurrentStateNETLINK_STATE_ONLINE, CurrentStateNETLINK_STATE_OFFLINE, CurrentStateNETLINK_STATE_ERROR:
		return nil
	default:
		return fmt.Errorf("netlinkresource: invalid enum value for current_state field: %q", cs)
	}
}

// OrderOption defines the ordering options for the NetlinkResource queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByResourceID orders the results by the resource_id field.
func ByResourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceID, opts...).ToFunc()
}

// ByKind orders the results by the kind field.
func ByKind(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKind, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDesiredState orders the results by the desired_state field.
func ByDesiredState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesiredState, opts...).ToFunc()
}

// ByCurrentState orders the results by the current_state field.
func ByCurrentState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentState, opts...).ToFunc()
}

// ByProviderStatus orders the results by the provider_status field.
func ByProviderStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderStatus, opts...).ToFunc()
}

// BySrcField orders the results by src field.
func BySrcField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSrcStep(), sql.OrderByField(field, opts...))
	}
}

// ByDstField orders the results by dst field.
func ByDstField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDstStep(), sql.OrderByField(field, opts...))
	}
}
func newSrcStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SrcInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SrcTable, SrcColumn),
	)
}
func newDstStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DstInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, DstTable, DstColumn),
	)
}
