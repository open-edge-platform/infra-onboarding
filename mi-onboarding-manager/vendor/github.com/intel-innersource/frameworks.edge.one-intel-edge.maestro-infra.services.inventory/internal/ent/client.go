// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/endpointresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hostnicresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hostresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hoststorageresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hostusbresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/instanceresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/ipaddressresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/netlinkresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/networksegment"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/operatingsystemresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/ouresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/projectresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/providerresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/regionresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/repeatedscheduleresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/singlescheduleresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/siteresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/userresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/workloadmember"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/workloadresource"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// EndpointResource is the client for interacting with the EndpointResource builders.
	EndpointResource *EndpointResourceClient
	// HostResource is the client for interacting with the HostResource builders.
	HostResource *HostResourceClient
	// HostnicResource is the client for interacting with the HostnicResource builders.
	HostnicResource *HostnicResourceClient
	// HoststorageResource is the client for interacting with the HoststorageResource builders.
	HoststorageResource *HoststorageResourceClient
	// HostusbResource is the client for interacting with the HostusbResource builders.
	HostusbResource *HostusbResourceClient
	// IPAddressResource is the client for interacting with the IPAddressResource builders.
	IPAddressResource *IPAddressResourceClient
	// InstanceResource is the client for interacting with the InstanceResource builders.
	InstanceResource *InstanceResourceClient
	// NetlinkResource is the client for interacting with the NetlinkResource builders.
	NetlinkResource *NetlinkResourceClient
	// NetworkSegment is the client for interacting with the NetworkSegment builders.
	NetworkSegment *NetworkSegmentClient
	// OperatingSystemResource is the client for interacting with the OperatingSystemResource builders.
	OperatingSystemResource *OperatingSystemResourceClient
	// OuResource is the client for interacting with the OuResource builders.
	OuResource *OuResourceClient
	// ProjectResource is the client for interacting with the ProjectResource builders.
	ProjectResource *ProjectResourceClient
	// ProviderResource is the client for interacting with the ProviderResource builders.
	ProviderResource *ProviderResourceClient
	// RegionResource is the client for interacting with the RegionResource builders.
	RegionResource *RegionResourceClient
	// RepeatedScheduleResource is the client for interacting with the RepeatedScheduleResource builders.
	RepeatedScheduleResource *RepeatedScheduleResourceClient
	// SingleScheduleResource is the client for interacting with the SingleScheduleResource builders.
	SingleScheduleResource *SingleScheduleResourceClient
	// SiteResource is the client for interacting with the SiteResource builders.
	SiteResource *SiteResourceClient
	// UserResource is the client for interacting with the UserResource builders.
	UserResource *UserResourceClient
	// WorkloadMember is the client for interacting with the WorkloadMember builders.
	WorkloadMember *WorkloadMemberClient
	// WorkloadResource is the client for interacting with the WorkloadResource builders.
	WorkloadResource *WorkloadResourceClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.EndpointResource = NewEndpointResourceClient(c.config)
	c.HostResource = NewHostResourceClient(c.config)
	c.HostnicResource = NewHostnicResourceClient(c.config)
	c.HoststorageResource = NewHoststorageResourceClient(c.config)
	c.HostusbResource = NewHostusbResourceClient(c.config)
	c.IPAddressResource = NewIPAddressResourceClient(c.config)
	c.InstanceResource = NewInstanceResourceClient(c.config)
	c.NetlinkResource = NewNetlinkResourceClient(c.config)
	c.NetworkSegment = NewNetworkSegmentClient(c.config)
	c.OperatingSystemResource = NewOperatingSystemResourceClient(c.config)
	c.OuResource = NewOuResourceClient(c.config)
	c.ProjectResource = NewProjectResourceClient(c.config)
	c.ProviderResource = NewProviderResourceClient(c.config)
	c.RegionResource = NewRegionResourceClient(c.config)
	c.RepeatedScheduleResource = NewRepeatedScheduleResourceClient(c.config)
	c.SingleScheduleResource = NewSingleScheduleResourceClient(c.config)
	c.SiteResource = NewSiteResourceClient(c.config)
	c.UserResource = NewUserResourceClient(c.config)
	c.WorkloadMember = NewWorkloadMemberClient(c.config)
	c.WorkloadResource = NewWorkloadResourceClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                      ctx,
		config:                   cfg,
		EndpointResource:         NewEndpointResourceClient(cfg),
		HostResource:             NewHostResourceClient(cfg),
		HostnicResource:          NewHostnicResourceClient(cfg),
		HoststorageResource:      NewHoststorageResourceClient(cfg),
		HostusbResource:          NewHostusbResourceClient(cfg),
		IPAddressResource:        NewIPAddressResourceClient(cfg),
		InstanceResource:         NewInstanceResourceClient(cfg),
		NetlinkResource:          NewNetlinkResourceClient(cfg),
		NetworkSegment:           NewNetworkSegmentClient(cfg),
		OperatingSystemResource:  NewOperatingSystemResourceClient(cfg),
		OuResource:               NewOuResourceClient(cfg),
		ProjectResource:          NewProjectResourceClient(cfg),
		ProviderResource:         NewProviderResourceClient(cfg),
		RegionResource:           NewRegionResourceClient(cfg),
		RepeatedScheduleResource: NewRepeatedScheduleResourceClient(cfg),
		SingleScheduleResource:   NewSingleScheduleResourceClient(cfg),
		SiteResource:             NewSiteResourceClient(cfg),
		UserResource:             NewUserResourceClient(cfg),
		WorkloadMember:           NewWorkloadMemberClient(cfg),
		WorkloadResource:         NewWorkloadResourceClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                      ctx,
		config:                   cfg,
		EndpointResource:         NewEndpointResourceClient(cfg),
		HostResource:             NewHostResourceClient(cfg),
		HostnicResource:          NewHostnicResourceClient(cfg),
		HoststorageResource:      NewHoststorageResourceClient(cfg),
		HostusbResource:          NewHostusbResourceClient(cfg),
		IPAddressResource:        NewIPAddressResourceClient(cfg),
		InstanceResource:         NewInstanceResourceClient(cfg),
		NetlinkResource:          NewNetlinkResourceClient(cfg),
		NetworkSegment:           NewNetworkSegmentClient(cfg),
		OperatingSystemResource:  NewOperatingSystemResourceClient(cfg),
		OuResource:               NewOuResourceClient(cfg),
		ProjectResource:          NewProjectResourceClient(cfg),
		ProviderResource:         NewProviderResourceClient(cfg),
		RegionResource:           NewRegionResourceClient(cfg),
		RepeatedScheduleResource: NewRepeatedScheduleResourceClient(cfg),
		SingleScheduleResource:   NewSingleScheduleResourceClient(cfg),
		SiteResource:             NewSiteResourceClient(cfg),
		UserResource:             NewUserResourceClient(cfg),
		WorkloadMember:           NewWorkloadMemberClient(cfg),
		WorkloadResource:         NewWorkloadResourceClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		EndpointResource.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.EndpointResource, c.HostResource, c.HostnicResource, c.HoststorageResource,
		c.HostusbResource, c.IPAddressResource, c.InstanceResource, c.NetlinkResource,
		c.NetworkSegment, c.OperatingSystemResource, c.OuResource, c.ProjectResource,
		c.ProviderResource, c.RegionResource, c.RepeatedScheduleResource,
		c.SingleScheduleResource, c.SiteResource, c.UserResource, c.WorkloadMember,
		c.WorkloadResource,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.EndpointResource, c.HostResource, c.HostnicResource, c.HoststorageResource,
		c.HostusbResource, c.IPAddressResource, c.InstanceResource, c.NetlinkResource,
		c.NetworkSegment, c.OperatingSystemResource, c.OuResource, c.ProjectResource,
		c.ProviderResource, c.RegionResource, c.RepeatedScheduleResource,
		c.SingleScheduleResource, c.SiteResource, c.UserResource, c.WorkloadMember,
		c.WorkloadResource,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *EndpointResourceMutation:
		return c.EndpointResource.mutate(ctx, m)
	case *HostResourceMutation:
		return c.HostResource.mutate(ctx, m)
	case *HostnicResourceMutation:
		return c.HostnicResource.mutate(ctx, m)
	case *HoststorageResourceMutation:
		return c.HoststorageResource.mutate(ctx, m)
	case *HostusbResourceMutation:
		return c.HostusbResource.mutate(ctx, m)
	case *IPAddressResourceMutation:
		return c.IPAddressResource.mutate(ctx, m)
	case *InstanceResourceMutation:
		return c.InstanceResource.mutate(ctx, m)
	case *NetlinkResourceMutation:
		return c.NetlinkResource.mutate(ctx, m)
	case *NetworkSegmentMutation:
		return c.NetworkSegment.mutate(ctx, m)
	case *OperatingSystemResourceMutation:
		return c.OperatingSystemResource.mutate(ctx, m)
	case *OuResourceMutation:
		return c.OuResource.mutate(ctx, m)
	case *ProjectResourceMutation:
		return c.ProjectResource.mutate(ctx, m)
	case *ProviderResourceMutation:
		return c.ProviderResource.mutate(ctx, m)
	case *RegionResourceMutation:
		return c.RegionResource.mutate(ctx, m)
	case *RepeatedScheduleResourceMutation:
		return c.RepeatedScheduleResource.mutate(ctx, m)
	case *SingleScheduleResourceMutation:
		return c.SingleScheduleResource.mutate(ctx, m)
	case *SiteResourceMutation:
		return c.SiteResource.mutate(ctx, m)
	case *UserResourceMutation:
		return c.UserResource.mutate(ctx, m)
	case *WorkloadMemberMutation:
		return c.WorkloadMember.mutate(ctx, m)
	case *WorkloadResourceMutation:
		return c.WorkloadResource.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// EndpointResourceClient is a client for the EndpointResource schema.
type EndpointResourceClient struct {
	config
}

// NewEndpointResourceClient returns a client for the EndpointResource from the given config.
func NewEndpointResourceClient(c config) *EndpointResourceClient {
	return &EndpointResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `endpointresource.Hooks(f(g(h())))`.
func (c *EndpointResourceClient) Use(hooks ...Hook) {
	c.hooks.EndpointResource = append(c.hooks.EndpointResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `endpointresource.Intercept(f(g(h())))`.
func (c *EndpointResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.EndpointResource = append(c.inters.EndpointResource, interceptors...)
}

// Create returns a builder for creating a EndpointResource entity.
func (c *EndpointResourceClient) Create() *EndpointResourceCreate {
	mutation := newEndpointResourceMutation(c.config, OpCreate)
	return &EndpointResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EndpointResource entities.
func (c *EndpointResourceClient) CreateBulk(builders ...*EndpointResourceCreate) *EndpointResourceCreateBulk {
	return &EndpointResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EndpointResource.
func (c *EndpointResourceClient) Update() *EndpointResourceUpdate {
	mutation := newEndpointResourceMutation(c.config, OpUpdate)
	return &EndpointResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EndpointResourceClient) UpdateOne(er *EndpointResource) *EndpointResourceUpdateOne {
	mutation := newEndpointResourceMutation(c.config, OpUpdateOne, withEndpointResource(er))
	return &EndpointResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EndpointResourceClient) UpdateOneID(id int) *EndpointResourceUpdateOne {
	mutation := newEndpointResourceMutation(c.config, OpUpdateOne, withEndpointResourceID(id))
	return &EndpointResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EndpointResource.
func (c *EndpointResourceClient) Delete() *EndpointResourceDelete {
	mutation := newEndpointResourceMutation(c.config, OpDelete)
	return &EndpointResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EndpointResourceClient) DeleteOne(er *EndpointResource) *EndpointResourceDeleteOne {
	return c.DeleteOneID(er.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EndpointResourceClient) DeleteOneID(id int) *EndpointResourceDeleteOne {
	builder := c.Delete().Where(endpointresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EndpointResourceDeleteOne{builder}
}

// Query returns a query builder for EndpointResource.
func (c *EndpointResourceClient) Query() *EndpointResourceQuery {
	return &EndpointResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEndpointResource},
		inters: c.Interceptors(),
	}
}

// Get returns a EndpointResource entity by its id.
func (c *EndpointResourceClient) Get(ctx context.Context, id int) (*EndpointResource, error) {
	return c.Query().Where(endpointresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EndpointResourceClient) GetX(ctx context.Context, id int) *EndpointResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHost queries the host edge of a EndpointResource.
func (c *EndpointResourceClient) QueryHost(er *EndpointResource) *HostResourceQuery {
	query := (&HostResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := er.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(endpointresource.Table, endpointresource.FieldID, id),
			sqlgraph.To(hostresource.Table, hostresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, endpointresource.HostTable, endpointresource.HostColumn),
		)
		fromV = sqlgraph.Neighbors(er.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EndpointResourceClient) Hooks() []Hook {
	return c.hooks.EndpointResource
}

// Interceptors returns the client interceptors.
func (c *EndpointResourceClient) Interceptors() []Interceptor {
	return c.inters.EndpointResource
}

func (c *EndpointResourceClient) mutate(ctx context.Context, m *EndpointResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EndpointResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EndpointResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EndpointResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EndpointResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EndpointResource mutation op: %q", m.Op())
	}
}

// HostResourceClient is a client for the HostResource schema.
type HostResourceClient struct {
	config
}

// NewHostResourceClient returns a client for the HostResource from the given config.
func NewHostResourceClient(c config) *HostResourceClient {
	return &HostResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hostresource.Hooks(f(g(h())))`.
func (c *HostResourceClient) Use(hooks ...Hook) {
	c.hooks.HostResource = append(c.hooks.HostResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hostresource.Intercept(f(g(h())))`.
func (c *HostResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.HostResource = append(c.inters.HostResource, interceptors...)
}

// Create returns a builder for creating a HostResource entity.
func (c *HostResourceClient) Create() *HostResourceCreate {
	mutation := newHostResourceMutation(c.config, OpCreate)
	return &HostResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HostResource entities.
func (c *HostResourceClient) CreateBulk(builders ...*HostResourceCreate) *HostResourceCreateBulk {
	return &HostResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HostResource.
func (c *HostResourceClient) Update() *HostResourceUpdate {
	mutation := newHostResourceMutation(c.config, OpUpdate)
	return &HostResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HostResourceClient) UpdateOne(hr *HostResource) *HostResourceUpdateOne {
	mutation := newHostResourceMutation(c.config, OpUpdateOne, withHostResource(hr))
	return &HostResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HostResourceClient) UpdateOneID(id int) *HostResourceUpdateOne {
	mutation := newHostResourceMutation(c.config, OpUpdateOne, withHostResourceID(id))
	return &HostResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HostResource.
func (c *HostResourceClient) Delete() *HostResourceDelete {
	mutation := newHostResourceMutation(c.config, OpDelete)
	return &HostResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HostResourceClient) DeleteOne(hr *HostResource) *HostResourceDeleteOne {
	return c.DeleteOneID(hr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HostResourceClient) DeleteOneID(id int) *HostResourceDeleteOne {
	builder := c.Delete().Where(hostresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HostResourceDeleteOne{builder}
}

// Query returns a query builder for HostResource.
func (c *HostResourceClient) Query() *HostResourceQuery {
	return &HostResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHostResource},
		inters: c.Interceptors(),
	}
}

// Get returns a HostResource entity by its id.
func (c *HostResourceClient) Get(ctx context.Context, id int) (*HostResource, error) {
	return c.Query().Where(hostresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HostResourceClient) GetX(ctx context.Context, id int) *HostResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySite queries the site edge of a HostResource.
func (c *HostResourceClient) QuerySite(hr *HostResource) *SiteResourceQuery {
	query := (&SiteResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostresource.Table, hostresource.FieldID, id),
			sqlgraph.To(siteresource.Table, siteresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hostresource.SiteTable, hostresource.SiteColumn),
		)
		fromV = sqlgraph.Neighbors(hr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvider queries the provider edge of a HostResource.
func (c *HostResourceClient) QueryProvider(hr *HostResource) *ProviderResourceQuery {
	query := (&ProviderResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostresource.Table, hostresource.FieldID, id),
			sqlgraph.To(providerresource.Table, providerresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hostresource.ProviderTable, hostresource.ProviderColumn),
		)
		fromV = sqlgraph.Neighbors(hr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProject queries the project edge of a HostResource.
func (c *HostResourceClient) QueryProject(hr *HostResource) *ProjectResourceQuery {
	query := (&ProjectResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostresource.Table, hostresource.FieldID, id),
			sqlgraph.To(projectresource.Table, projectresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hostresource.ProjectTable, hostresource.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(hr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a HostResource.
func (c *HostResourceClient) QueryUser(hr *HostResource) *UserResourceQuery {
	query := (&UserResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostresource.Table, hostresource.FieldID, id),
			sqlgraph.To(userresource.Table, userresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hostresource.UserTable, hostresource.UserColumn),
		)
		fromV = sqlgraph.Neighbors(hr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHostStorages queries the host_storages edge of a HostResource.
func (c *HostResourceClient) QueryHostStorages(hr *HostResource) *HoststorageResourceQuery {
	query := (&HoststorageResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostresource.Table, hostresource.FieldID, id),
			sqlgraph.To(hoststorageresource.Table, hoststorageresource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, hostresource.HostStoragesTable, hostresource.HostStoragesColumn),
		)
		fromV = sqlgraph.Neighbors(hr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHostNics queries the host_nics edge of a HostResource.
func (c *HostResourceClient) QueryHostNics(hr *HostResource) *HostnicResourceQuery {
	query := (&HostnicResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostresource.Table, hostresource.FieldID, id),
			sqlgraph.To(hostnicresource.Table, hostnicresource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, hostresource.HostNicsTable, hostresource.HostNicsColumn),
		)
		fromV = sqlgraph.Neighbors(hr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHostUsbs queries the host_usbs edge of a HostResource.
func (c *HostResourceClient) QueryHostUsbs(hr *HostResource) *HostusbResourceQuery {
	query := (&HostusbResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostresource.Table, hostresource.FieldID, id),
			sqlgraph.To(hostusbresource.Table, hostusbresource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, hostresource.HostUsbsTable, hostresource.HostUsbsColumn),
		)
		fromV = sqlgraph.Neighbors(hr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInstance queries the instance edge of a HostResource.
func (c *HostResourceClient) QueryInstance(hr *HostResource) *InstanceResourceQuery {
	query := (&InstanceResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostresource.Table, hostresource.FieldID, id),
			sqlgraph.To(instanceresource.Table, instanceresource.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, hostresource.InstanceTable, hostresource.InstanceColumn),
		)
		fromV = sqlgraph.Neighbors(hr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HostResourceClient) Hooks() []Hook {
	return c.hooks.HostResource
}

// Interceptors returns the client interceptors.
func (c *HostResourceClient) Interceptors() []Interceptor {
	return c.inters.HostResource
}

func (c *HostResourceClient) mutate(ctx context.Context, m *HostResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HostResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HostResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HostResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HostResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HostResource mutation op: %q", m.Op())
	}
}

// HostnicResourceClient is a client for the HostnicResource schema.
type HostnicResourceClient struct {
	config
}

// NewHostnicResourceClient returns a client for the HostnicResource from the given config.
func NewHostnicResourceClient(c config) *HostnicResourceClient {
	return &HostnicResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hostnicresource.Hooks(f(g(h())))`.
func (c *HostnicResourceClient) Use(hooks ...Hook) {
	c.hooks.HostnicResource = append(c.hooks.HostnicResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hostnicresource.Intercept(f(g(h())))`.
func (c *HostnicResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.HostnicResource = append(c.inters.HostnicResource, interceptors...)
}

// Create returns a builder for creating a HostnicResource entity.
func (c *HostnicResourceClient) Create() *HostnicResourceCreate {
	mutation := newHostnicResourceMutation(c.config, OpCreate)
	return &HostnicResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HostnicResource entities.
func (c *HostnicResourceClient) CreateBulk(builders ...*HostnicResourceCreate) *HostnicResourceCreateBulk {
	return &HostnicResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HostnicResource.
func (c *HostnicResourceClient) Update() *HostnicResourceUpdate {
	mutation := newHostnicResourceMutation(c.config, OpUpdate)
	return &HostnicResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HostnicResourceClient) UpdateOne(hr *HostnicResource) *HostnicResourceUpdateOne {
	mutation := newHostnicResourceMutation(c.config, OpUpdateOne, withHostnicResource(hr))
	return &HostnicResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HostnicResourceClient) UpdateOneID(id int) *HostnicResourceUpdateOne {
	mutation := newHostnicResourceMutation(c.config, OpUpdateOne, withHostnicResourceID(id))
	return &HostnicResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HostnicResource.
func (c *HostnicResourceClient) Delete() *HostnicResourceDelete {
	mutation := newHostnicResourceMutation(c.config, OpDelete)
	return &HostnicResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HostnicResourceClient) DeleteOne(hr *HostnicResource) *HostnicResourceDeleteOne {
	return c.DeleteOneID(hr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HostnicResourceClient) DeleteOneID(id int) *HostnicResourceDeleteOne {
	builder := c.Delete().Where(hostnicresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HostnicResourceDeleteOne{builder}
}

// Query returns a query builder for HostnicResource.
func (c *HostnicResourceClient) Query() *HostnicResourceQuery {
	return &HostnicResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHostnicResource},
		inters: c.Interceptors(),
	}
}

// Get returns a HostnicResource entity by its id.
func (c *HostnicResourceClient) Get(ctx context.Context, id int) (*HostnicResource, error) {
	return c.Query().Where(hostnicresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HostnicResourceClient) GetX(ctx context.Context, id int) *HostnicResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySite queries the site edge of a HostnicResource.
func (c *HostnicResourceClient) QuerySite(hr *HostnicResource) *SiteResourceQuery {
	query := (&SiteResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostnicresource.Table, hostnicresource.FieldID, id),
			sqlgraph.To(siteresource.Table, siteresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hostnicresource.SiteTable, hostnicresource.SiteColumn),
		)
		fromV = sqlgraph.Neighbors(hr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvider queries the provider edge of a HostnicResource.
func (c *HostnicResourceClient) QueryProvider(hr *HostnicResource) *ProviderResourceQuery {
	query := (&ProviderResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostnicresource.Table, hostnicresource.FieldID, id),
			sqlgraph.To(providerresource.Table, providerresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hostnicresource.ProviderTable, hostnicresource.ProviderColumn),
		)
		fromV = sqlgraph.Neighbors(hr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProject queries the project edge of a HostnicResource.
func (c *HostnicResourceClient) QueryProject(hr *HostnicResource) *ProjectResourceQuery {
	query := (&ProjectResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostnicresource.Table, hostnicresource.FieldID, id),
			sqlgraph.To(projectresource.Table, projectresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hostnicresource.ProjectTable, hostnicresource.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(hr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHost queries the host edge of a HostnicResource.
func (c *HostnicResourceClient) QueryHost(hr *HostnicResource) *HostResourceQuery {
	query := (&HostResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostnicresource.Table, hostnicresource.FieldID, id),
			sqlgraph.To(hostresource.Table, hostresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hostnicresource.HostTable, hostnicresource.HostColumn),
		)
		fromV = sqlgraph.Neighbors(hr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HostnicResourceClient) Hooks() []Hook {
	return c.hooks.HostnicResource
}

// Interceptors returns the client interceptors.
func (c *HostnicResourceClient) Interceptors() []Interceptor {
	return c.inters.HostnicResource
}

func (c *HostnicResourceClient) mutate(ctx context.Context, m *HostnicResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HostnicResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HostnicResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HostnicResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HostnicResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HostnicResource mutation op: %q", m.Op())
	}
}

// HoststorageResourceClient is a client for the HoststorageResource schema.
type HoststorageResourceClient struct {
	config
}

// NewHoststorageResourceClient returns a client for the HoststorageResource from the given config.
func NewHoststorageResourceClient(c config) *HoststorageResourceClient {
	return &HoststorageResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hoststorageresource.Hooks(f(g(h())))`.
func (c *HoststorageResourceClient) Use(hooks ...Hook) {
	c.hooks.HoststorageResource = append(c.hooks.HoststorageResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hoststorageresource.Intercept(f(g(h())))`.
func (c *HoststorageResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.HoststorageResource = append(c.inters.HoststorageResource, interceptors...)
}

// Create returns a builder for creating a HoststorageResource entity.
func (c *HoststorageResourceClient) Create() *HoststorageResourceCreate {
	mutation := newHoststorageResourceMutation(c.config, OpCreate)
	return &HoststorageResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HoststorageResource entities.
func (c *HoststorageResourceClient) CreateBulk(builders ...*HoststorageResourceCreate) *HoststorageResourceCreateBulk {
	return &HoststorageResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HoststorageResource.
func (c *HoststorageResourceClient) Update() *HoststorageResourceUpdate {
	mutation := newHoststorageResourceMutation(c.config, OpUpdate)
	return &HoststorageResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HoststorageResourceClient) UpdateOne(hr *HoststorageResource) *HoststorageResourceUpdateOne {
	mutation := newHoststorageResourceMutation(c.config, OpUpdateOne, withHoststorageResource(hr))
	return &HoststorageResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HoststorageResourceClient) UpdateOneID(id int) *HoststorageResourceUpdateOne {
	mutation := newHoststorageResourceMutation(c.config, OpUpdateOne, withHoststorageResourceID(id))
	return &HoststorageResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HoststorageResource.
func (c *HoststorageResourceClient) Delete() *HoststorageResourceDelete {
	mutation := newHoststorageResourceMutation(c.config, OpDelete)
	return &HoststorageResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HoststorageResourceClient) DeleteOne(hr *HoststorageResource) *HoststorageResourceDeleteOne {
	return c.DeleteOneID(hr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HoststorageResourceClient) DeleteOneID(id int) *HoststorageResourceDeleteOne {
	builder := c.Delete().Where(hoststorageresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HoststorageResourceDeleteOne{builder}
}

// Query returns a query builder for HoststorageResource.
func (c *HoststorageResourceClient) Query() *HoststorageResourceQuery {
	return &HoststorageResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHoststorageResource},
		inters: c.Interceptors(),
	}
}

// Get returns a HoststorageResource entity by its id.
func (c *HoststorageResourceClient) Get(ctx context.Context, id int) (*HoststorageResource, error) {
	return c.Query().Where(hoststorageresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HoststorageResourceClient) GetX(ctx context.Context, id int) *HoststorageResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySite queries the site edge of a HoststorageResource.
func (c *HoststorageResourceClient) QuerySite(hr *HoststorageResource) *SiteResourceQuery {
	query := (&SiteResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hoststorageresource.Table, hoststorageresource.FieldID, id),
			sqlgraph.To(siteresource.Table, siteresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hoststorageresource.SiteTable, hoststorageresource.SiteColumn),
		)
		fromV = sqlgraph.Neighbors(hr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvider queries the provider edge of a HoststorageResource.
func (c *HoststorageResourceClient) QueryProvider(hr *HoststorageResource) *ProviderResourceQuery {
	query := (&ProviderResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hoststorageresource.Table, hoststorageresource.FieldID, id),
			sqlgraph.To(providerresource.Table, providerresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hoststorageresource.ProviderTable, hoststorageresource.ProviderColumn),
		)
		fromV = sqlgraph.Neighbors(hr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProject queries the project edge of a HoststorageResource.
func (c *HoststorageResourceClient) QueryProject(hr *HoststorageResource) *ProjectResourceQuery {
	query := (&ProjectResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hoststorageresource.Table, hoststorageresource.FieldID, id),
			sqlgraph.To(projectresource.Table, projectresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hoststorageresource.ProjectTable, hoststorageresource.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(hr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHost queries the host edge of a HoststorageResource.
func (c *HoststorageResourceClient) QueryHost(hr *HoststorageResource) *HostResourceQuery {
	query := (&HostResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hoststorageresource.Table, hoststorageresource.FieldID, id),
			sqlgraph.To(hostresource.Table, hostresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hoststorageresource.HostTable, hoststorageresource.HostColumn),
		)
		fromV = sqlgraph.Neighbors(hr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HoststorageResourceClient) Hooks() []Hook {
	return c.hooks.HoststorageResource
}

// Interceptors returns the client interceptors.
func (c *HoststorageResourceClient) Interceptors() []Interceptor {
	return c.inters.HoststorageResource
}

func (c *HoststorageResourceClient) mutate(ctx context.Context, m *HoststorageResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HoststorageResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HoststorageResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HoststorageResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HoststorageResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HoststorageResource mutation op: %q", m.Op())
	}
}

// HostusbResourceClient is a client for the HostusbResource schema.
type HostusbResourceClient struct {
	config
}

// NewHostusbResourceClient returns a client for the HostusbResource from the given config.
func NewHostusbResourceClient(c config) *HostusbResourceClient {
	return &HostusbResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hostusbresource.Hooks(f(g(h())))`.
func (c *HostusbResourceClient) Use(hooks ...Hook) {
	c.hooks.HostusbResource = append(c.hooks.HostusbResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hostusbresource.Intercept(f(g(h())))`.
func (c *HostusbResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.HostusbResource = append(c.inters.HostusbResource, interceptors...)
}

// Create returns a builder for creating a HostusbResource entity.
func (c *HostusbResourceClient) Create() *HostusbResourceCreate {
	mutation := newHostusbResourceMutation(c.config, OpCreate)
	return &HostusbResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HostusbResource entities.
func (c *HostusbResourceClient) CreateBulk(builders ...*HostusbResourceCreate) *HostusbResourceCreateBulk {
	return &HostusbResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HostusbResource.
func (c *HostusbResourceClient) Update() *HostusbResourceUpdate {
	mutation := newHostusbResourceMutation(c.config, OpUpdate)
	return &HostusbResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HostusbResourceClient) UpdateOne(hr *HostusbResource) *HostusbResourceUpdateOne {
	mutation := newHostusbResourceMutation(c.config, OpUpdateOne, withHostusbResource(hr))
	return &HostusbResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HostusbResourceClient) UpdateOneID(id int) *HostusbResourceUpdateOne {
	mutation := newHostusbResourceMutation(c.config, OpUpdateOne, withHostusbResourceID(id))
	return &HostusbResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HostusbResource.
func (c *HostusbResourceClient) Delete() *HostusbResourceDelete {
	mutation := newHostusbResourceMutation(c.config, OpDelete)
	return &HostusbResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HostusbResourceClient) DeleteOne(hr *HostusbResource) *HostusbResourceDeleteOne {
	return c.DeleteOneID(hr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HostusbResourceClient) DeleteOneID(id int) *HostusbResourceDeleteOne {
	builder := c.Delete().Where(hostusbresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HostusbResourceDeleteOne{builder}
}

// Query returns a query builder for HostusbResource.
func (c *HostusbResourceClient) Query() *HostusbResourceQuery {
	return &HostusbResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHostusbResource},
		inters: c.Interceptors(),
	}
}

// Get returns a HostusbResource entity by its id.
func (c *HostusbResourceClient) Get(ctx context.Context, id int) (*HostusbResource, error) {
	return c.Query().Where(hostusbresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HostusbResourceClient) GetX(ctx context.Context, id int) *HostusbResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHost queries the host edge of a HostusbResource.
func (c *HostusbResourceClient) QueryHost(hr *HostusbResource) *HostResourceQuery {
	query := (&HostResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostusbresource.Table, hostusbresource.FieldID, id),
			sqlgraph.To(hostresource.Table, hostresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hostusbresource.HostTable, hostusbresource.HostColumn),
		)
		fromV = sqlgraph.Neighbors(hr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HostusbResourceClient) Hooks() []Hook {
	return c.hooks.HostusbResource
}

// Interceptors returns the client interceptors.
func (c *HostusbResourceClient) Interceptors() []Interceptor {
	return c.inters.HostusbResource
}

func (c *HostusbResourceClient) mutate(ctx context.Context, m *HostusbResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HostusbResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HostusbResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HostusbResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HostusbResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HostusbResource mutation op: %q", m.Op())
	}
}

// IPAddressResourceClient is a client for the IPAddressResource schema.
type IPAddressResourceClient struct {
	config
}

// NewIPAddressResourceClient returns a client for the IPAddressResource from the given config.
func NewIPAddressResourceClient(c config) *IPAddressResourceClient {
	return &IPAddressResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ipaddressresource.Hooks(f(g(h())))`.
func (c *IPAddressResourceClient) Use(hooks ...Hook) {
	c.hooks.IPAddressResource = append(c.hooks.IPAddressResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ipaddressresource.Intercept(f(g(h())))`.
func (c *IPAddressResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.IPAddressResource = append(c.inters.IPAddressResource, interceptors...)
}

// Create returns a builder for creating a IPAddressResource entity.
func (c *IPAddressResourceClient) Create() *IPAddressResourceCreate {
	mutation := newIPAddressResourceMutation(c.config, OpCreate)
	return &IPAddressResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of IPAddressResource entities.
func (c *IPAddressResourceClient) CreateBulk(builders ...*IPAddressResourceCreate) *IPAddressResourceCreateBulk {
	return &IPAddressResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for IPAddressResource.
func (c *IPAddressResourceClient) Update() *IPAddressResourceUpdate {
	mutation := newIPAddressResourceMutation(c.config, OpUpdate)
	return &IPAddressResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IPAddressResourceClient) UpdateOne(iar *IPAddressResource) *IPAddressResourceUpdateOne {
	mutation := newIPAddressResourceMutation(c.config, OpUpdateOne, withIPAddressResource(iar))
	return &IPAddressResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IPAddressResourceClient) UpdateOneID(id int) *IPAddressResourceUpdateOne {
	mutation := newIPAddressResourceMutation(c.config, OpUpdateOne, withIPAddressResourceID(id))
	return &IPAddressResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for IPAddressResource.
func (c *IPAddressResourceClient) Delete() *IPAddressResourceDelete {
	mutation := newIPAddressResourceMutation(c.config, OpDelete)
	return &IPAddressResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *IPAddressResourceClient) DeleteOne(iar *IPAddressResource) *IPAddressResourceDeleteOne {
	return c.DeleteOneID(iar.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *IPAddressResourceClient) DeleteOneID(id int) *IPAddressResourceDeleteOne {
	builder := c.Delete().Where(ipaddressresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IPAddressResourceDeleteOne{builder}
}

// Query returns a query builder for IPAddressResource.
func (c *IPAddressResourceClient) Query() *IPAddressResourceQuery {
	return &IPAddressResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeIPAddressResource},
		inters: c.Interceptors(),
	}
}

// Get returns a IPAddressResource entity by its id.
func (c *IPAddressResourceClient) Get(ctx context.Context, id int) (*IPAddressResource, error) {
	return c.Query().Where(ipaddressresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IPAddressResourceClient) GetX(ctx context.Context, id int) *IPAddressResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNic queries the nic edge of a IPAddressResource.
func (c *IPAddressResourceClient) QueryNic(iar *IPAddressResource) *HostnicResourceQuery {
	query := (&HostnicResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := iar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ipaddressresource.Table, ipaddressresource.FieldID, id),
			sqlgraph.To(hostnicresource.Table, hostnicresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ipaddressresource.NicTable, ipaddressresource.NicColumn),
		)
		fromV = sqlgraph.Neighbors(iar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *IPAddressResourceClient) Hooks() []Hook {
	return c.hooks.IPAddressResource
}

// Interceptors returns the client interceptors.
func (c *IPAddressResourceClient) Interceptors() []Interceptor {
	return c.inters.IPAddressResource
}

func (c *IPAddressResourceClient) mutate(ctx context.Context, m *IPAddressResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&IPAddressResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&IPAddressResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&IPAddressResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&IPAddressResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown IPAddressResource mutation op: %q", m.Op())
	}
}

// InstanceResourceClient is a client for the InstanceResource schema.
type InstanceResourceClient struct {
	config
}

// NewInstanceResourceClient returns a client for the InstanceResource from the given config.
func NewInstanceResourceClient(c config) *InstanceResourceClient {
	return &InstanceResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `instanceresource.Hooks(f(g(h())))`.
func (c *InstanceResourceClient) Use(hooks ...Hook) {
	c.hooks.InstanceResource = append(c.hooks.InstanceResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `instanceresource.Intercept(f(g(h())))`.
func (c *InstanceResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.InstanceResource = append(c.inters.InstanceResource, interceptors...)
}

// Create returns a builder for creating a InstanceResource entity.
func (c *InstanceResourceClient) Create() *InstanceResourceCreate {
	mutation := newInstanceResourceMutation(c.config, OpCreate)
	return &InstanceResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InstanceResource entities.
func (c *InstanceResourceClient) CreateBulk(builders ...*InstanceResourceCreate) *InstanceResourceCreateBulk {
	return &InstanceResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InstanceResource.
func (c *InstanceResourceClient) Update() *InstanceResourceUpdate {
	mutation := newInstanceResourceMutation(c.config, OpUpdate)
	return &InstanceResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InstanceResourceClient) UpdateOne(ir *InstanceResource) *InstanceResourceUpdateOne {
	mutation := newInstanceResourceMutation(c.config, OpUpdateOne, withInstanceResource(ir))
	return &InstanceResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InstanceResourceClient) UpdateOneID(id int) *InstanceResourceUpdateOne {
	mutation := newInstanceResourceMutation(c.config, OpUpdateOne, withInstanceResourceID(id))
	return &InstanceResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InstanceResource.
func (c *InstanceResourceClient) Delete() *InstanceResourceDelete {
	mutation := newInstanceResourceMutation(c.config, OpDelete)
	return &InstanceResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InstanceResourceClient) DeleteOne(ir *InstanceResource) *InstanceResourceDeleteOne {
	return c.DeleteOneID(ir.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InstanceResourceClient) DeleteOneID(id int) *InstanceResourceDeleteOne {
	builder := c.Delete().Where(instanceresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InstanceResourceDeleteOne{builder}
}

// Query returns a query builder for InstanceResource.
func (c *InstanceResourceClient) Query() *InstanceResourceQuery {
	return &InstanceResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInstanceResource},
		inters: c.Interceptors(),
	}
}

// Get returns a InstanceResource entity by its id.
func (c *InstanceResourceClient) Get(ctx context.Context, id int) (*InstanceResource, error) {
	return c.Query().Where(instanceresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InstanceResourceClient) GetX(ctx context.Context, id int) *InstanceResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHost queries the host edge of a InstanceResource.
func (c *InstanceResourceClient) QueryHost(ir *InstanceResource) *HostResourceQuery {
	query := (&HostResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ir.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(instanceresource.Table, instanceresource.FieldID, id),
			sqlgraph.To(hostresource.Table, hostresource.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, instanceresource.HostTable, instanceresource.HostColumn),
		)
		fromV = sqlgraph.Neighbors(ir.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a InstanceResource.
func (c *InstanceResourceClient) QueryUser(ir *InstanceResource) *UserResourceQuery {
	query := (&UserResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ir.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(instanceresource.Table, instanceresource.FieldID, id),
			sqlgraph.To(userresource.Table, userresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, instanceresource.UserTable, instanceresource.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ir.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOs queries the os edge of a InstanceResource.
func (c *InstanceResourceClient) QueryOs(ir *InstanceResource) *OperatingSystemResourceQuery {
	query := (&OperatingSystemResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ir.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(instanceresource.Table, instanceresource.FieldID, id),
			sqlgraph.To(operatingsystemresource.Table, operatingsystemresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, instanceresource.OsTable, instanceresource.OsColumn),
		)
		fromV = sqlgraph.Neighbors(ir.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkloadMembers queries the workload_members edge of a InstanceResource.
func (c *InstanceResourceClient) QueryWorkloadMembers(ir *InstanceResource) *WorkloadMemberQuery {
	query := (&WorkloadMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ir.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(instanceresource.Table, instanceresource.FieldID, id),
			sqlgraph.To(workloadmember.Table, workloadmember.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, instanceresource.WorkloadMembersTable, instanceresource.WorkloadMembersColumn),
		)
		fromV = sqlgraph.Neighbors(ir.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InstanceResourceClient) Hooks() []Hook {
	return c.hooks.InstanceResource
}

// Interceptors returns the client interceptors.
func (c *InstanceResourceClient) Interceptors() []Interceptor {
	return c.inters.InstanceResource
}

func (c *InstanceResourceClient) mutate(ctx context.Context, m *InstanceResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InstanceResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InstanceResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InstanceResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InstanceResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown InstanceResource mutation op: %q", m.Op())
	}
}

// NetlinkResourceClient is a client for the NetlinkResource schema.
type NetlinkResourceClient struct {
	config
}

// NewNetlinkResourceClient returns a client for the NetlinkResource from the given config.
func NewNetlinkResourceClient(c config) *NetlinkResourceClient {
	return &NetlinkResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `netlinkresource.Hooks(f(g(h())))`.
func (c *NetlinkResourceClient) Use(hooks ...Hook) {
	c.hooks.NetlinkResource = append(c.hooks.NetlinkResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `netlinkresource.Intercept(f(g(h())))`.
func (c *NetlinkResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.NetlinkResource = append(c.inters.NetlinkResource, interceptors...)
}

// Create returns a builder for creating a NetlinkResource entity.
func (c *NetlinkResourceClient) Create() *NetlinkResourceCreate {
	mutation := newNetlinkResourceMutation(c.config, OpCreate)
	return &NetlinkResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NetlinkResource entities.
func (c *NetlinkResourceClient) CreateBulk(builders ...*NetlinkResourceCreate) *NetlinkResourceCreateBulk {
	return &NetlinkResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NetlinkResource.
func (c *NetlinkResourceClient) Update() *NetlinkResourceUpdate {
	mutation := newNetlinkResourceMutation(c.config, OpUpdate)
	return &NetlinkResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NetlinkResourceClient) UpdateOne(nr *NetlinkResource) *NetlinkResourceUpdateOne {
	mutation := newNetlinkResourceMutation(c.config, OpUpdateOne, withNetlinkResource(nr))
	return &NetlinkResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NetlinkResourceClient) UpdateOneID(id int) *NetlinkResourceUpdateOne {
	mutation := newNetlinkResourceMutation(c.config, OpUpdateOne, withNetlinkResourceID(id))
	return &NetlinkResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NetlinkResource.
func (c *NetlinkResourceClient) Delete() *NetlinkResourceDelete {
	mutation := newNetlinkResourceMutation(c.config, OpDelete)
	return &NetlinkResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NetlinkResourceClient) DeleteOne(nr *NetlinkResource) *NetlinkResourceDeleteOne {
	return c.DeleteOneID(nr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NetlinkResourceClient) DeleteOneID(id int) *NetlinkResourceDeleteOne {
	builder := c.Delete().Where(netlinkresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NetlinkResourceDeleteOne{builder}
}

// Query returns a query builder for NetlinkResource.
func (c *NetlinkResourceClient) Query() *NetlinkResourceQuery {
	return &NetlinkResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNetlinkResource},
		inters: c.Interceptors(),
	}
}

// Get returns a NetlinkResource entity by its id.
func (c *NetlinkResourceClient) Get(ctx context.Context, id int) (*NetlinkResource, error) {
	return c.Query().Where(netlinkresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NetlinkResourceClient) GetX(ctx context.Context, id int) *NetlinkResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySrc queries the src edge of a NetlinkResource.
func (c *NetlinkResourceClient) QuerySrc(nr *NetlinkResource) *EndpointResourceQuery {
	query := (&EndpointResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(netlinkresource.Table, netlinkresource.FieldID, id),
			sqlgraph.To(endpointresource.Table, endpointresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, netlinkresource.SrcTable, netlinkresource.SrcColumn),
		)
		fromV = sqlgraph.Neighbors(nr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDst queries the dst edge of a NetlinkResource.
func (c *NetlinkResourceClient) QueryDst(nr *NetlinkResource) *EndpointResourceQuery {
	query := (&EndpointResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(netlinkresource.Table, netlinkresource.FieldID, id),
			sqlgraph.To(endpointresource.Table, endpointresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, netlinkresource.DstTable, netlinkresource.DstColumn),
		)
		fromV = sqlgraph.Neighbors(nr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NetlinkResourceClient) Hooks() []Hook {
	return c.hooks.NetlinkResource
}

// Interceptors returns the client interceptors.
func (c *NetlinkResourceClient) Interceptors() []Interceptor {
	return c.inters.NetlinkResource
}

func (c *NetlinkResourceClient) mutate(ctx context.Context, m *NetlinkResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NetlinkResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NetlinkResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NetlinkResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NetlinkResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown NetlinkResource mutation op: %q", m.Op())
	}
}

// NetworkSegmentClient is a client for the NetworkSegment schema.
type NetworkSegmentClient struct {
	config
}

// NewNetworkSegmentClient returns a client for the NetworkSegment from the given config.
func NewNetworkSegmentClient(c config) *NetworkSegmentClient {
	return &NetworkSegmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `networksegment.Hooks(f(g(h())))`.
func (c *NetworkSegmentClient) Use(hooks ...Hook) {
	c.hooks.NetworkSegment = append(c.hooks.NetworkSegment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `networksegment.Intercept(f(g(h())))`.
func (c *NetworkSegmentClient) Intercept(interceptors ...Interceptor) {
	c.inters.NetworkSegment = append(c.inters.NetworkSegment, interceptors...)
}

// Create returns a builder for creating a NetworkSegment entity.
func (c *NetworkSegmentClient) Create() *NetworkSegmentCreate {
	mutation := newNetworkSegmentMutation(c.config, OpCreate)
	return &NetworkSegmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NetworkSegment entities.
func (c *NetworkSegmentClient) CreateBulk(builders ...*NetworkSegmentCreate) *NetworkSegmentCreateBulk {
	return &NetworkSegmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NetworkSegment.
func (c *NetworkSegmentClient) Update() *NetworkSegmentUpdate {
	mutation := newNetworkSegmentMutation(c.config, OpUpdate)
	return &NetworkSegmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NetworkSegmentClient) UpdateOne(ns *NetworkSegment) *NetworkSegmentUpdateOne {
	mutation := newNetworkSegmentMutation(c.config, OpUpdateOne, withNetworkSegment(ns))
	return &NetworkSegmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NetworkSegmentClient) UpdateOneID(id int) *NetworkSegmentUpdateOne {
	mutation := newNetworkSegmentMutation(c.config, OpUpdateOne, withNetworkSegmentID(id))
	return &NetworkSegmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NetworkSegment.
func (c *NetworkSegmentClient) Delete() *NetworkSegmentDelete {
	mutation := newNetworkSegmentMutation(c.config, OpDelete)
	return &NetworkSegmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NetworkSegmentClient) DeleteOne(ns *NetworkSegment) *NetworkSegmentDeleteOne {
	return c.DeleteOneID(ns.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NetworkSegmentClient) DeleteOneID(id int) *NetworkSegmentDeleteOne {
	builder := c.Delete().Where(networksegment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NetworkSegmentDeleteOne{builder}
}

// Query returns a query builder for NetworkSegment.
func (c *NetworkSegmentClient) Query() *NetworkSegmentQuery {
	return &NetworkSegmentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNetworkSegment},
		inters: c.Interceptors(),
	}
}

// Get returns a NetworkSegment entity by its id.
func (c *NetworkSegmentClient) Get(ctx context.Context, id int) (*NetworkSegment, error) {
	return c.Query().Where(networksegment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NetworkSegmentClient) GetX(ctx context.Context, id int) *NetworkSegment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySite queries the site edge of a NetworkSegment.
func (c *NetworkSegmentClient) QuerySite(ns *NetworkSegment) *SiteResourceQuery {
	query := (&SiteResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ns.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(networksegment.Table, networksegment.FieldID, id),
			sqlgraph.To(siteresource.Table, siteresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, networksegment.SiteTable, networksegment.SiteColumn),
		)
		fromV = sqlgraph.Neighbors(ns.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NetworkSegmentClient) Hooks() []Hook {
	return c.hooks.NetworkSegment
}

// Interceptors returns the client interceptors.
func (c *NetworkSegmentClient) Interceptors() []Interceptor {
	return c.inters.NetworkSegment
}

func (c *NetworkSegmentClient) mutate(ctx context.Context, m *NetworkSegmentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NetworkSegmentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NetworkSegmentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NetworkSegmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NetworkSegmentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown NetworkSegment mutation op: %q", m.Op())
	}
}

// OperatingSystemResourceClient is a client for the OperatingSystemResource schema.
type OperatingSystemResourceClient struct {
	config
}

// NewOperatingSystemResourceClient returns a client for the OperatingSystemResource from the given config.
func NewOperatingSystemResourceClient(c config) *OperatingSystemResourceClient {
	return &OperatingSystemResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `operatingsystemresource.Hooks(f(g(h())))`.
func (c *OperatingSystemResourceClient) Use(hooks ...Hook) {
	c.hooks.OperatingSystemResource = append(c.hooks.OperatingSystemResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `operatingsystemresource.Intercept(f(g(h())))`.
func (c *OperatingSystemResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.OperatingSystemResource = append(c.inters.OperatingSystemResource, interceptors...)
}

// Create returns a builder for creating a OperatingSystemResource entity.
func (c *OperatingSystemResourceClient) Create() *OperatingSystemResourceCreate {
	mutation := newOperatingSystemResourceMutation(c.config, OpCreate)
	return &OperatingSystemResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OperatingSystemResource entities.
func (c *OperatingSystemResourceClient) CreateBulk(builders ...*OperatingSystemResourceCreate) *OperatingSystemResourceCreateBulk {
	return &OperatingSystemResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OperatingSystemResource.
func (c *OperatingSystemResourceClient) Update() *OperatingSystemResourceUpdate {
	mutation := newOperatingSystemResourceMutation(c.config, OpUpdate)
	return &OperatingSystemResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OperatingSystemResourceClient) UpdateOne(osr *OperatingSystemResource) *OperatingSystemResourceUpdateOne {
	mutation := newOperatingSystemResourceMutation(c.config, OpUpdateOne, withOperatingSystemResource(osr))
	return &OperatingSystemResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OperatingSystemResourceClient) UpdateOneID(id int) *OperatingSystemResourceUpdateOne {
	mutation := newOperatingSystemResourceMutation(c.config, OpUpdateOne, withOperatingSystemResourceID(id))
	return &OperatingSystemResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OperatingSystemResource.
func (c *OperatingSystemResourceClient) Delete() *OperatingSystemResourceDelete {
	mutation := newOperatingSystemResourceMutation(c.config, OpDelete)
	return &OperatingSystemResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OperatingSystemResourceClient) DeleteOne(osr *OperatingSystemResource) *OperatingSystemResourceDeleteOne {
	return c.DeleteOneID(osr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OperatingSystemResourceClient) DeleteOneID(id int) *OperatingSystemResourceDeleteOne {
	builder := c.Delete().Where(operatingsystemresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OperatingSystemResourceDeleteOne{builder}
}

// Query returns a query builder for OperatingSystemResource.
func (c *OperatingSystemResourceClient) Query() *OperatingSystemResourceQuery {
	return &OperatingSystemResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOperatingSystemResource},
		inters: c.Interceptors(),
	}
}

// Get returns a OperatingSystemResource entity by its id.
func (c *OperatingSystemResourceClient) Get(ctx context.Context, id int) (*OperatingSystemResource, error) {
	return c.Query().Where(operatingsystemresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OperatingSystemResourceClient) GetX(ctx context.Context, id int) *OperatingSystemResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OperatingSystemResourceClient) Hooks() []Hook {
	return c.hooks.OperatingSystemResource
}

// Interceptors returns the client interceptors.
func (c *OperatingSystemResourceClient) Interceptors() []Interceptor {
	return c.inters.OperatingSystemResource
}

func (c *OperatingSystemResourceClient) mutate(ctx context.Context, m *OperatingSystemResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OperatingSystemResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OperatingSystemResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OperatingSystemResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OperatingSystemResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OperatingSystemResource mutation op: %q", m.Op())
	}
}

// OuResourceClient is a client for the OuResource schema.
type OuResourceClient struct {
	config
}

// NewOuResourceClient returns a client for the OuResource from the given config.
func NewOuResourceClient(c config) *OuResourceClient {
	return &OuResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ouresource.Hooks(f(g(h())))`.
func (c *OuResourceClient) Use(hooks ...Hook) {
	c.hooks.OuResource = append(c.hooks.OuResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ouresource.Intercept(f(g(h())))`.
func (c *OuResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.OuResource = append(c.inters.OuResource, interceptors...)
}

// Create returns a builder for creating a OuResource entity.
func (c *OuResourceClient) Create() *OuResourceCreate {
	mutation := newOuResourceMutation(c.config, OpCreate)
	return &OuResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OuResource entities.
func (c *OuResourceClient) CreateBulk(builders ...*OuResourceCreate) *OuResourceCreateBulk {
	return &OuResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OuResource.
func (c *OuResourceClient) Update() *OuResourceUpdate {
	mutation := newOuResourceMutation(c.config, OpUpdate)
	return &OuResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OuResourceClient) UpdateOne(or *OuResource) *OuResourceUpdateOne {
	mutation := newOuResourceMutation(c.config, OpUpdateOne, withOuResource(or))
	return &OuResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OuResourceClient) UpdateOneID(id int) *OuResourceUpdateOne {
	mutation := newOuResourceMutation(c.config, OpUpdateOne, withOuResourceID(id))
	return &OuResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OuResource.
func (c *OuResourceClient) Delete() *OuResourceDelete {
	mutation := newOuResourceMutation(c.config, OpDelete)
	return &OuResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OuResourceClient) DeleteOne(or *OuResource) *OuResourceDeleteOne {
	return c.DeleteOneID(or.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OuResourceClient) DeleteOneID(id int) *OuResourceDeleteOne {
	builder := c.Delete().Where(ouresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OuResourceDeleteOne{builder}
}

// Query returns a query builder for OuResource.
func (c *OuResourceClient) Query() *OuResourceQuery {
	return &OuResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOuResource},
		inters: c.Interceptors(),
	}
}

// Get returns a OuResource entity by its id.
func (c *OuResourceClient) Get(ctx context.Context, id int) (*OuResource, error) {
	return c.Query().Where(ouresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OuResourceClient) GetX(ctx context.Context, id int) *OuResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParentOu queries the parent_ou edge of a OuResource.
func (c *OuResourceClient) QueryParentOu(or *OuResource) *OuResourceQuery {
	query := (&OuResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := or.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ouresource.Table, ouresource.FieldID, id),
			sqlgraph.To(ouresource.Table, ouresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ouresource.ParentOuTable, ouresource.ParentOuColumn),
		)
		fromV = sqlgraph.Neighbors(or.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a OuResource.
func (c *OuResourceClient) QueryChildren(or *OuResource) *OuResourceQuery {
	query := (&OuResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := or.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ouresource.Table, ouresource.FieldID, id),
			sqlgraph.To(ouresource.Table, ouresource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ouresource.ChildrenTable, ouresource.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(or.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OuResourceClient) Hooks() []Hook {
	return c.hooks.OuResource
}

// Interceptors returns the client interceptors.
func (c *OuResourceClient) Interceptors() []Interceptor {
	return c.inters.OuResource
}

func (c *OuResourceClient) mutate(ctx context.Context, m *OuResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OuResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OuResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OuResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OuResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OuResource mutation op: %q", m.Op())
	}
}

// ProjectResourceClient is a client for the ProjectResource schema.
type ProjectResourceClient struct {
	config
}

// NewProjectResourceClient returns a client for the ProjectResource from the given config.
func NewProjectResourceClient(c config) *ProjectResourceClient {
	return &ProjectResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `projectresource.Hooks(f(g(h())))`.
func (c *ProjectResourceClient) Use(hooks ...Hook) {
	c.hooks.ProjectResource = append(c.hooks.ProjectResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `projectresource.Intercept(f(g(h())))`.
func (c *ProjectResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProjectResource = append(c.inters.ProjectResource, interceptors...)
}

// Create returns a builder for creating a ProjectResource entity.
func (c *ProjectResourceClient) Create() *ProjectResourceCreate {
	mutation := newProjectResourceMutation(c.config, OpCreate)
	return &ProjectResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProjectResource entities.
func (c *ProjectResourceClient) CreateBulk(builders ...*ProjectResourceCreate) *ProjectResourceCreateBulk {
	return &ProjectResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProjectResource.
func (c *ProjectResourceClient) Update() *ProjectResourceUpdate {
	mutation := newProjectResourceMutation(c.config, OpUpdate)
	return &ProjectResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectResourceClient) UpdateOne(pr *ProjectResource) *ProjectResourceUpdateOne {
	mutation := newProjectResourceMutation(c.config, OpUpdateOne, withProjectResource(pr))
	return &ProjectResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectResourceClient) UpdateOneID(id int) *ProjectResourceUpdateOne {
	mutation := newProjectResourceMutation(c.config, OpUpdateOne, withProjectResourceID(id))
	return &ProjectResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProjectResource.
func (c *ProjectResourceClient) Delete() *ProjectResourceDelete {
	mutation := newProjectResourceMutation(c.config, OpDelete)
	return &ProjectResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProjectResourceClient) DeleteOne(pr *ProjectResource) *ProjectResourceDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProjectResourceClient) DeleteOneID(id int) *ProjectResourceDeleteOne {
	builder := c.Delete().Where(projectresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectResourceDeleteOne{builder}
}

// Query returns a query builder for ProjectResource.
func (c *ProjectResourceClient) Query() *ProjectResourceQuery {
	return &ProjectResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProjectResource},
		inters: c.Interceptors(),
	}
}

// Get returns a ProjectResource entity by its id.
func (c *ProjectResourceClient) Get(ctx context.Context, id int) (*ProjectResource, error) {
	return c.Query().Where(projectresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectResourceClient) GetX(ctx context.Context, id int) *ProjectResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProjectResourceClient) Hooks() []Hook {
	return c.hooks.ProjectResource
}

// Interceptors returns the client interceptors.
func (c *ProjectResourceClient) Interceptors() []Interceptor {
	return c.inters.ProjectResource
}

func (c *ProjectResourceClient) mutate(ctx context.Context, m *ProjectResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProjectResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProjectResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProjectResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProjectResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProjectResource mutation op: %q", m.Op())
	}
}

// ProviderResourceClient is a client for the ProviderResource schema.
type ProviderResourceClient struct {
	config
}

// NewProviderResourceClient returns a client for the ProviderResource from the given config.
func NewProviderResourceClient(c config) *ProviderResourceClient {
	return &ProviderResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `providerresource.Hooks(f(g(h())))`.
func (c *ProviderResourceClient) Use(hooks ...Hook) {
	c.hooks.ProviderResource = append(c.hooks.ProviderResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `providerresource.Intercept(f(g(h())))`.
func (c *ProviderResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProviderResource = append(c.inters.ProviderResource, interceptors...)
}

// Create returns a builder for creating a ProviderResource entity.
func (c *ProviderResourceClient) Create() *ProviderResourceCreate {
	mutation := newProviderResourceMutation(c.config, OpCreate)
	return &ProviderResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProviderResource entities.
func (c *ProviderResourceClient) CreateBulk(builders ...*ProviderResourceCreate) *ProviderResourceCreateBulk {
	return &ProviderResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProviderResource.
func (c *ProviderResourceClient) Update() *ProviderResourceUpdate {
	mutation := newProviderResourceMutation(c.config, OpUpdate)
	return &ProviderResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProviderResourceClient) UpdateOne(pr *ProviderResource) *ProviderResourceUpdateOne {
	mutation := newProviderResourceMutation(c.config, OpUpdateOne, withProviderResource(pr))
	return &ProviderResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProviderResourceClient) UpdateOneID(id int) *ProviderResourceUpdateOne {
	mutation := newProviderResourceMutation(c.config, OpUpdateOne, withProviderResourceID(id))
	return &ProviderResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProviderResource.
func (c *ProviderResourceClient) Delete() *ProviderResourceDelete {
	mutation := newProviderResourceMutation(c.config, OpDelete)
	return &ProviderResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProviderResourceClient) DeleteOne(pr *ProviderResource) *ProviderResourceDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProviderResourceClient) DeleteOneID(id int) *ProviderResourceDeleteOne {
	builder := c.Delete().Where(providerresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProviderResourceDeleteOne{builder}
}

// Query returns a query builder for ProviderResource.
func (c *ProviderResourceClient) Query() *ProviderResourceQuery {
	return &ProviderResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProviderResource},
		inters: c.Interceptors(),
	}
}

// Get returns a ProviderResource entity by its id.
func (c *ProviderResourceClient) Get(ctx context.Context, id int) (*ProviderResource, error) {
	return c.Query().Where(providerresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProviderResourceClient) GetX(ctx context.Context, id int) *ProviderResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySite queries the site edge of a ProviderResource.
func (c *ProviderResourceClient) QuerySite(pr *ProviderResource) *SiteResourceQuery {
	query := (&SiteResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(providerresource.Table, providerresource.FieldID, id),
			sqlgraph.To(siteresource.Table, siteresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, providerresource.SiteTable, providerresource.SiteColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProviderResourceClient) Hooks() []Hook {
	return c.hooks.ProviderResource
}

// Interceptors returns the client interceptors.
func (c *ProviderResourceClient) Interceptors() []Interceptor {
	return c.inters.ProviderResource
}

func (c *ProviderResourceClient) mutate(ctx context.Context, m *ProviderResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProviderResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProviderResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProviderResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProviderResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProviderResource mutation op: %q", m.Op())
	}
}

// RegionResourceClient is a client for the RegionResource schema.
type RegionResourceClient struct {
	config
}

// NewRegionResourceClient returns a client for the RegionResource from the given config.
func NewRegionResourceClient(c config) *RegionResourceClient {
	return &RegionResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `regionresource.Hooks(f(g(h())))`.
func (c *RegionResourceClient) Use(hooks ...Hook) {
	c.hooks.RegionResource = append(c.hooks.RegionResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `regionresource.Intercept(f(g(h())))`.
func (c *RegionResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.RegionResource = append(c.inters.RegionResource, interceptors...)
}

// Create returns a builder for creating a RegionResource entity.
func (c *RegionResourceClient) Create() *RegionResourceCreate {
	mutation := newRegionResourceMutation(c.config, OpCreate)
	return &RegionResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RegionResource entities.
func (c *RegionResourceClient) CreateBulk(builders ...*RegionResourceCreate) *RegionResourceCreateBulk {
	return &RegionResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RegionResource.
func (c *RegionResourceClient) Update() *RegionResourceUpdate {
	mutation := newRegionResourceMutation(c.config, OpUpdate)
	return &RegionResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RegionResourceClient) UpdateOne(rr *RegionResource) *RegionResourceUpdateOne {
	mutation := newRegionResourceMutation(c.config, OpUpdateOne, withRegionResource(rr))
	return &RegionResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RegionResourceClient) UpdateOneID(id int) *RegionResourceUpdateOne {
	mutation := newRegionResourceMutation(c.config, OpUpdateOne, withRegionResourceID(id))
	return &RegionResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RegionResource.
func (c *RegionResourceClient) Delete() *RegionResourceDelete {
	mutation := newRegionResourceMutation(c.config, OpDelete)
	return &RegionResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RegionResourceClient) DeleteOne(rr *RegionResource) *RegionResourceDeleteOne {
	return c.DeleteOneID(rr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RegionResourceClient) DeleteOneID(id int) *RegionResourceDeleteOne {
	builder := c.Delete().Where(regionresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RegionResourceDeleteOne{builder}
}

// Query returns a query builder for RegionResource.
func (c *RegionResourceClient) Query() *RegionResourceQuery {
	return &RegionResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRegionResource},
		inters: c.Interceptors(),
	}
}

// Get returns a RegionResource entity by its id.
func (c *RegionResourceClient) Get(ctx context.Context, id int) (*RegionResource, error) {
	return c.Query().Where(regionresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RegionResourceClient) GetX(ctx context.Context, id int) *RegionResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParentRegion queries the parent_region edge of a RegionResource.
func (c *RegionResourceClient) QueryParentRegion(rr *RegionResource) *RegionResourceQuery {
	query := (&RegionResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(regionresource.Table, regionresource.FieldID, id),
			sqlgraph.To(regionresource.Table, regionresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, regionresource.ParentRegionTable, regionresource.ParentRegionColumn),
		)
		fromV = sqlgraph.Neighbors(rr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a RegionResource.
func (c *RegionResourceClient) QueryChildren(rr *RegionResource) *RegionResourceQuery {
	query := (&RegionResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(regionresource.Table, regionresource.FieldID, id),
			sqlgraph.To(regionresource.Table, regionresource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, regionresource.ChildrenTable, regionresource.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(rr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RegionResourceClient) Hooks() []Hook {
	return c.hooks.RegionResource
}

// Interceptors returns the client interceptors.
func (c *RegionResourceClient) Interceptors() []Interceptor {
	return c.inters.RegionResource
}

func (c *RegionResourceClient) mutate(ctx context.Context, m *RegionResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RegionResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RegionResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RegionResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RegionResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RegionResource mutation op: %q", m.Op())
	}
}

// RepeatedScheduleResourceClient is a client for the RepeatedScheduleResource schema.
type RepeatedScheduleResourceClient struct {
	config
}

// NewRepeatedScheduleResourceClient returns a client for the RepeatedScheduleResource from the given config.
func NewRepeatedScheduleResourceClient(c config) *RepeatedScheduleResourceClient {
	return &RepeatedScheduleResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `repeatedscheduleresource.Hooks(f(g(h())))`.
func (c *RepeatedScheduleResourceClient) Use(hooks ...Hook) {
	c.hooks.RepeatedScheduleResource = append(c.hooks.RepeatedScheduleResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `repeatedscheduleresource.Intercept(f(g(h())))`.
func (c *RepeatedScheduleResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.RepeatedScheduleResource = append(c.inters.RepeatedScheduleResource, interceptors...)
}

// Create returns a builder for creating a RepeatedScheduleResource entity.
func (c *RepeatedScheduleResourceClient) Create() *RepeatedScheduleResourceCreate {
	mutation := newRepeatedScheduleResourceMutation(c.config, OpCreate)
	return &RepeatedScheduleResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RepeatedScheduleResource entities.
func (c *RepeatedScheduleResourceClient) CreateBulk(builders ...*RepeatedScheduleResourceCreate) *RepeatedScheduleResourceCreateBulk {
	return &RepeatedScheduleResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RepeatedScheduleResource.
func (c *RepeatedScheduleResourceClient) Update() *RepeatedScheduleResourceUpdate {
	mutation := newRepeatedScheduleResourceMutation(c.config, OpUpdate)
	return &RepeatedScheduleResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RepeatedScheduleResourceClient) UpdateOne(rsr *RepeatedScheduleResource) *RepeatedScheduleResourceUpdateOne {
	mutation := newRepeatedScheduleResourceMutation(c.config, OpUpdateOne, withRepeatedScheduleResource(rsr))
	return &RepeatedScheduleResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RepeatedScheduleResourceClient) UpdateOneID(id int) *RepeatedScheduleResourceUpdateOne {
	mutation := newRepeatedScheduleResourceMutation(c.config, OpUpdateOne, withRepeatedScheduleResourceID(id))
	return &RepeatedScheduleResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RepeatedScheduleResource.
func (c *RepeatedScheduleResourceClient) Delete() *RepeatedScheduleResourceDelete {
	mutation := newRepeatedScheduleResourceMutation(c.config, OpDelete)
	return &RepeatedScheduleResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RepeatedScheduleResourceClient) DeleteOne(rsr *RepeatedScheduleResource) *RepeatedScheduleResourceDeleteOne {
	return c.DeleteOneID(rsr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RepeatedScheduleResourceClient) DeleteOneID(id int) *RepeatedScheduleResourceDeleteOne {
	builder := c.Delete().Where(repeatedscheduleresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RepeatedScheduleResourceDeleteOne{builder}
}

// Query returns a query builder for RepeatedScheduleResource.
func (c *RepeatedScheduleResourceClient) Query() *RepeatedScheduleResourceQuery {
	return &RepeatedScheduleResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRepeatedScheduleResource},
		inters: c.Interceptors(),
	}
}

// Get returns a RepeatedScheduleResource entity by its id.
func (c *RepeatedScheduleResourceClient) Get(ctx context.Context, id int) (*RepeatedScheduleResource, error) {
	return c.Query().Where(repeatedscheduleresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RepeatedScheduleResourceClient) GetX(ctx context.Context, id int) *RepeatedScheduleResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTargetSite queries the target_site edge of a RepeatedScheduleResource.
func (c *RepeatedScheduleResourceClient) QueryTargetSite(rsr *RepeatedScheduleResource) *SiteResourceQuery {
	query := (&SiteResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rsr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(repeatedscheduleresource.Table, repeatedscheduleresource.FieldID, id),
			sqlgraph.To(siteresource.Table, siteresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, repeatedscheduleresource.TargetSiteTable, repeatedscheduleresource.TargetSiteColumn),
		)
		fromV = sqlgraph.Neighbors(rsr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTargetHost queries the target_host edge of a RepeatedScheduleResource.
func (c *RepeatedScheduleResourceClient) QueryTargetHost(rsr *RepeatedScheduleResource) *HostResourceQuery {
	query := (&HostResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rsr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(repeatedscheduleresource.Table, repeatedscheduleresource.FieldID, id),
			sqlgraph.To(hostresource.Table, hostresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, repeatedscheduleresource.TargetHostTable, repeatedscheduleresource.TargetHostColumn),
		)
		fromV = sqlgraph.Neighbors(rsr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTargetWorkload queries the target_workload edge of a RepeatedScheduleResource.
func (c *RepeatedScheduleResourceClient) QueryTargetWorkload(rsr *RepeatedScheduleResource) *WorkloadResourceQuery {
	query := (&WorkloadResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rsr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(repeatedscheduleresource.Table, repeatedscheduleresource.FieldID, id),
			sqlgraph.To(workloadresource.Table, workloadresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, repeatedscheduleresource.TargetWorkloadTable, repeatedscheduleresource.TargetWorkloadColumn),
		)
		fromV = sqlgraph.Neighbors(rsr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RepeatedScheduleResourceClient) Hooks() []Hook {
	return c.hooks.RepeatedScheduleResource
}

// Interceptors returns the client interceptors.
func (c *RepeatedScheduleResourceClient) Interceptors() []Interceptor {
	return c.inters.RepeatedScheduleResource
}

func (c *RepeatedScheduleResourceClient) mutate(ctx context.Context, m *RepeatedScheduleResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RepeatedScheduleResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RepeatedScheduleResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RepeatedScheduleResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RepeatedScheduleResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RepeatedScheduleResource mutation op: %q", m.Op())
	}
}

// SingleScheduleResourceClient is a client for the SingleScheduleResource schema.
type SingleScheduleResourceClient struct {
	config
}

// NewSingleScheduleResourceClient returns a client for the SingleScheduleResource from the given config.
func NewSingleScheduleResourceClient(c config) *SingleScheduleResourceClient {
	return &SingleScheduleResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `singlescheduleresource.Hooks(f(g(h())))`.
func (c *SingleScheduleResourceClient) Use(hooks ...Hook) {
	c.hooks.SingleScheduleResource = append(c.hooks.SingleScheduleResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `singlescheduleresource.Intercept(f(g(h())))`.
func (c *SingleScheduleResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.SingleScheduleResource = append(c.inters.SingleScheduleResource, interceptors...)
}

// Create returns a builder for creating a SingleScheduleResource entity.
func (c *SingleScheduleResourceClient) Create() *SingleScheduleResourceCreate {
	mutation := newSingleScheduleResourceMutation(c.config, OpCreate)
	return &SingleScheduleResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SingleScheduleResource entities.
func (c *SingleScheduleResourceClient) CreateBulk(builders ...*SingleScheduleResourceCreate) *SingleScheduleResourceCreateBulk {
	return &SingleScheduleResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SingleScheduleResource.
func (c *SingleScheduleResourceClient) Update() *SingleScheduleResourceUpdate {
	mutation := newSingleScheduleResourceMutation(c.config, OpUpdate)
	return &SingleScheduleResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SingleScheduleResourceClient) UpdateOne(ssr *SingleScheduleResource) *SingleScheduleResourceUpdateOne {
	mutation := newSingleScheduleResourceMutation(c.config, OpUpdateOne, withSingleScheduleResource(ssr))
	return &SingleScheduleResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SingleScheduleResourceClient) UpdateOneID(id int) *SingleScheduleResourceUpdateOne {
	mutation := newSingleScheduleResourceMutation(c.config, OpUpdateOne, withSingleScheduleResourceID(id))
	return &SingleScheduleResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SingleScheduleResource.
func (c *SingleScheduleResourceClient) Delete() *SingleScheduleResourceDelete {
	mutation := newSingleScheduleResourceMutation(c.config, OpDelete)
	return &SingleScheduleResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SingleScheduleResourceClient) DeleteOne(ssr *SingleScheduleResource) *SingleScheduleResourceDeleteOne {
	return c.DeleteOneID(ssr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SingleScheduleResourceClient) DeleteOneID(id int) *SingleScheduleResourceDeleteOne {
	builder := c.Delete().Where(singlescheduleresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SingleScheduleResourceDeleteOne{builder}
}

// Query returns a query builder for SingleScheduleResource.
func (c *SingleScheduleResourceClient) Query() *SingleScheduleResourceQuery {
	return &SingleScheduleResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSingleScheduleResource},
		inters: c.Interceptors(),
	}
}

// Get returns a SingleScheduleResource entity by its id.
func (c *SingleScheduleResourceClient) Get(ctx context.Context, id int) (*SingleScheduleResource, error) {
	return c.Query().Where(singlescheduleresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SingleScheduleResourceClient) GetX(ctx context.Context, id int) *SingleScheduleResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTargetSite queries the target_site edge of a SingleScheduleResource.
func (c *SingleScheduleResourceClient) QueryTargetSite(ssr *SingleScheduleResource) *SiteResourceQuery {
	query := (&SiteResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ssr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(singlescheduleresource.Table, singlescheduleresource.FieldID, id),
			sqlgraph.To(siteresource.Table, siteresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, singlescheduleresource.TargetSiteTable, singlescheduleresource.TargetSiteColumn),
		)
		fromV = sqlgraph.Neighbors(ssr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTargetHost queries the target_host edge of a SingleScheduleResource.
func (c *SingleScheduleResourceClient) QueryTargetHost(ssr *SingleScheduleResource) *HostResourceQuery {
	query := (&HostResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ssr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(singlescheduleresource.Table, singlescheduleresource.FieldID, id),
			sqlgraph.To(hostresource.Table, hostresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, singlescheduleresource.TargetHostTable, singlescheduleresource.TargetHostColumn),
		)
		fromV = sqlgraph.Neighbors(ssr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTargetWorkload queries the target_workload edge of a SingleScheduleResource.
func (c *SingleScheduleResourceClient) QueryTargetWorkload(ssr *SingleScheduleResource) *WorkloadResourceQuery {
	query := (&WorkloadResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ssr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(singlescheduleresource.Table, singlescheduleresource.FieldID, id),
			sqlgraph.To(workloadresource.Table, workloadresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, singlescheduleresource.TargetWorkloadTable, singlescheduleresource.TargetWorkloadColumn),
		)
		fromV = sqlgraph.Neighbors(ssr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SingleScheduleResourceClient) Hooks() []Hook {
	return c.hooks.SingleScheduleResource
}

// Interceptors returns the client interceptors.
func (c *SingleScheduleResourceClient) Interceptors() []Interceptor {
	return c.inters.SingleScheduleResource
}

func (c *SingleScheduleResourceClient) mutate(ctx context.Context, m *SingleScheduleResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SingleScheduleResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SingleScheduleResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SingleScheduleResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SingleScheduleResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SingleScheduleResource mutation op: %q", m.Op())
	}
}

// SiteResourceClient is a client for the SiteResource schema.
type SiteResourceClient struct {
	config
}

// NewSiteResourceClient returns a client for the SiteResource from the given config.
func NewSiteResourceClient(c config) *SiteResourceClient {
	return &SiteResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `siteresource.Hooks(f(g(h())))`.
func (c *SiteResourceClient) Use(hooks ...Hook) {
	c.hooks.SiteResource = append(c.hooks.SiteResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `siteresource.Intercept(f(g(h())))`.
func (c *SiteResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.SiteResource = append(c.inters.SiteResource, interceptors...)
}

// Create returns a builder for creating a SiteResource entity.
func (c *SiteResourceClient) Create() *SiteResourceCreate {
	mutation := newSiteResourceMutation(c.config, OpCreate)
	return &SiteResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SiteResource entities.
func (c *SiteResourceClient) CreateBulk(builders ...*SiteResourceCreate) *SiteResourceCreateBulk {
	return &SiteResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SiteResource.
func (c *SiteResourceClient) Update() *SiteResourceUpdate {
	mutation := newSiteResourceMutation(c.config, OpUpdate)
	return &SiteResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SiteResourceClient) UpdateOne(sr *SiteResource) *SiteResourceUpdateOne {
	mutation := newSiteResourceMutation(c.config, OpUpdateOne, withSiteResource(sr))
	return &SiteResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SiteResourceClient) UpdateOneID(id int) *SiteResourceUpdateOne {
	mutation := newSiteResourceMutation(c.config, OpUpdateOne, withSiteResourceID(id))
	return &SiteResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SiteResource.
func (c *SiteResourceClient) Delete() *SiteResourceDelete {
	mutation := newSiteResourceMutation(c.config, OpDelete)
	return &SiteResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SiteResourceClient) DeleteOne(sr *SiteResource) *SiteResourceDeleteOne {
	return c.DeleteOneID(sr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SiteResourceClient) DeleteOneID(id int) *SiteResourceDeleteOne {
	builder := c.Delete().Where(siteresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SiteResourceDeleteOne{builder}
}

// Query returns a query builder for SiteResource.
func (c *SiteResourceClient) Query() *SiteResourceQuery {
	return &SiteResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSiteResource},
		inters: c.Interceptors(),
	}
}

// Get returns a SiteResource entity by its id.
func (c *SiteResourceClient) Get(ctx context.Context, id int) (*SiteResource, error) {
	return c.Query().Where(siteresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SiteResourceClient) GetX(ctx context.Context, id int) *SiteResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRegion queries the region edge of a SiteResource.
func (c *SiteResourceClient) QueryRegion(sr *SiteResource) *RegionResourceQuery {
	query := (&RegionResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(siteresource.Table, siteresource.FieldID, id),
			sqlgraph.To(regionresource.Table, regionresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, siteresource.RegionTable, siteresource.RegionColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOu queries the ou edge of a SiteResource.
func (c *SiteResourceClient) QueryOu(sr *SiteResource) *OuResourceQuery {
	query := (&OuResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(siteresource.Table, siteresource.FieldID, id),
			sqlgraph.To(ouresource.Table, ouresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, siteresource.OuTable, siteresource.OuColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SiteResourceClient) Hooks() []Hook {
	return c.hooks.SiteResource
}

// Interceptors returns the client interceptors.
func (c *SiteResourceClient) Interceptors() []Interceptor {
	return c.inters.SiteResource
}

func (c *SiteResourceClient) mutate(ctx context.Context, m *SiteResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SiteResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SiteResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SiteResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SiteResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SiteResource mutation op: %q", m.Op())
	}
}

// UserResourceClient is a client for the UserResource schema.
type UserResourceClient struct {
	config
}

// NewUserResourceClient returns a client for the UserResource from the given config.
func NewUserResourceClient(c config) *UserResourceClient {
	return &UserResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userresource.Hooks(f(g(h())))`.
func (c *UserResourceClient) Use(hooks ...Hook) {
	c.hooks.UserResource = append(c.hooks.UserResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userresource.Intercept(f(g(h())))`.
func (c *UserResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserResource = append(c.inters.UserResource, interceptors...)
}

// Create returns a builder for creating a UserResource entity.
func (c *UserResourceClient) Create() *UserResourceCreate {
	mutation := newUserResourceMutation(c.config, OpCreate)
	return &UserResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserResource entities.
func (c *UserResourceClient) CreateBulk(builders ...*UserResourceCreate) *UserResourceCreateBulk {
	return &UserResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserResource.
func (c *UserResourceClient) Update() *UserResourceUpdate {
	mutation := newUserResourceMutation(c.config, OpUpdate)
	return &UserResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserResourceClient) UpdateOne(ur *UserResource) *UserResourceUpdateOne {
	mutation := newUserResourceMutation(c.config, OpUpdateOne, withUserResource(ur))
	return &UserResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserResourceClient) UpdateOneID(id int) *UserResourceUpdateOne {
	mutation := newUserResourceMutation(c.config, OpUpdateOne, withUserResourceID(id))
	return &UserResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserResource.
func (c *UserResourceClient) Delete() *UserResourceDelete {
	mutation := newUserResourceMutation(c.config, OpDelete)
	return &UserResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserResourceClient) DeleteOne(ur *UserResource) *UserResourceDeleteOne {
	return c.DeleteOneID(ur.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserResourceClient) DeleteOneID(id int) *UserResourceDeleteOne {
	builder := c.Delete().Where(userresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserResourceDeleteOne{builder}
}

// Query returns a query builder for UserResource.
func (c *UserResourceClient) Query() *UserResourceQuery {
	return &UserResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserResource},
		inters: c.Interceptors(),
	}
}

// Get returns a UserResource entity by its id.
func (c *UserResourceClient) Get(ctx context.Context, id int) (*UserResource, error) {
	return c.Query().Where(userresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserResourceClient) GetX(ctx context.Context, id int) *UserResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserResourceClient) Hooks() []Hook {
	return c.hooks.UserResource
}

// Interceptors returns the client interceptors.
func (c *UserResourceClient) Interceptors() []Interceptor {
	return c.inters.UserResource
}

func (c *UserResourceClient) mutate(ctx context.Context, m *UserResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserResource mutation op: %q", m.Op())
	}
}

// WorkloadMemberClient is a client for the WorkloadMember schema.
type WorkloadMemberClient struct {
	config
}

// NewWorkloadMemberClient returns a client for the WorkloadMember from the given config.
func NewWorkloadMemberClient(c config) *WorkloadMemberClient {
	return &WorkloadMemberClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workloadmember.Hooks(f(g(h())))`.
func (c *WorkloadMemberClient) Use(hooks ...Hook) {
	c.hooks.WorkloadMember = append(c.hooks.WorkloadMember, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `workloadmember.Intercept(f(g(h())))`.
func (c *WorkloadMemberClient) Intercept(interceptors ...Interceptor) {
	c.inters.WorkloadMember = append(c.inters.WorkloadMember, interceptors...)
}

// Create returns a builder for creating a WorkloadMember entity.
func (c *WorkloadMemberClient) Create() *WorkloadMemberCreate {
	mutation := newWorkloadMemberMutation(c.config, OpCreate)
	return &WorkloadMemberCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkloadMember entities.
func (c *WorkloadMemberClient) CreateBulk(builders ...*WorkloadMemberCreate) *WorkloadMemberCreateBulk {
	return &WorkloadMemberCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkloadMember.
func (c *WorkloadMemberClient) Update() *WorkloadMemberUpdate {
	mutation := newWorkloadMemberMutation(c.config, OpUpdate)
	return &WorkloadMemberUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkloadMemberClient) UpdateOne(wm *WorkloadMember) *WorkloadMemberUpdateOne {
	mutation := newWorkloadMemberMutation(c.config, OpUpdateOne, withWorkloadMember(wm))
	return &WorkloadMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkloadMemberClient) UpdateOneID(id int) *WorkloadMemberUpdateOne {
	mutation := newWorkloadMemberMutation(c.config, OpUpdateOne, withWorkloadMemberID(id))
	return &WorkloadMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkloadMember.
func (c *WorkloadMemberClient) Delete() *WorkloadMemberDelete {
	mutation := newWorkloadMemberMutation(c.config, OpDelete)
	return &WorkloadMemberDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WorkloadMemberClient) DeleteOne(wm *WorkloadMember) *WorkloadMemberDeleteOne {
	return c.DeleteOneID(wm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WorkloadMemberClient) DeleteOneID(id int) *WorkloadMemberDeleteOne {
	builder := c.Delete().Where(workloadmember.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkloadMemberDeleteOne{builder}
}

// Query returns a query builder for WorkloadMember.
func (c *WorkloadMemberClient) Query() *WorkloadMemberQuery {
	return &WorkloadMemberQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWorkloadMember},
		inters: c.Interceptors(),
	}
}

// Get returns a WorkloadMember entity by its id.
func (c *WorkloadMemberClient) Get(ctx context.Context, id int) (*WorkloadMember, error) {
	return c.Query().Where(workloadmember.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkloadMemberClient) GetX(ctx context.Context, id int) *WorkloadMember {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkload queries the workload edge of a WorkloadMember.
func (c *WorkloadMemberClient) QueryWorkload(wm *WorkloadMember) *WorkloadResourceQuery {
	query := (&WorkloadResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workloadmember.Table, workloadmember.FieldID, id),
			sqlgraph.To(workloadresource.Table, workloadresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, workloadmember.WorkloadTable, workloadmember.WorkloadColumn),
		)
		fromV = sqlgraph.Neighbors(wm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInstance queries the instance edge of a WorkloadMember.
func (c *WorkloadMemberClient) QueryInstance(wm *WorkloadMember) *InstanceResourceQuery {
	query := (&InstanceResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workloadmember.Table, workloadmember.FieldID, id),
			sqlgraph.To(instanceresource.Table, instanceresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, workloadmember.InstanceTable, workloadmember.InstanceColumn),
		)
		fromV = sqlgraph.Neighbors(wm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkloadMemberClient) Hooks() []Hook {
	return c.hooks.WorkloadMember
}

// Interceptors returns the client interceptors.
func (c *WorkloadMemberClient) Interceptors() []Interceptor {
	return c.inters.WorkloadMember
}

func (c *WorkloadMemberClient) mutate(ctx context.Context, m *WorkloadMemberMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WorkloadMemberCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WorkloadMemberUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WorkloadMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WorkloadMemberDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown WorkloadMember mutation op: %q", m.Op())
	}
}

// WorkloadResourceClient is a client for the WorkloadResource schema.
type WorkloadResourceClient struct {
	config
}

// NewWorkloadResourceClient returns a client for the WorkloadResource from the given config.
func NewWorkloadResourceClient(c config) *WorkloadResourceClient {
	return &WorkloadResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workloadresource.Hooks(f(g(h())))`.
func (c *WorkloadResourceClient) Use(hooks ...Hook) {
	c.hooks.WorkloadResource = append(c.hooks.WorkloadResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `workloadresource.Intercept(f(g(h())))`.
func (c *WorkloadResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.WorkloadResource = append(c.inters.WorkloadResource, interceptors...)
}

// Create returns a builder for creating a WorkloadResource entity.
func (c *WorkloadResourceClient) Create() *WorkloadResourceCreate {
	mutation := newWorkloadResourceMutation(c.config, OpCreate)
	return &WorkloadResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkloadResource entities.
func (c *WorkloadResourceClient) CreateBulk(builders ...*WorkloadResourceCreate) *WorkloadResourceCreateBulk {
	return &WorkloadResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkloadResource.
func (c *WorkloadResourceClient) Update() *WorkloadResourceUpdate {
	mutation := newWorkloadResourceMutation(c.config, OpUpdate)
	return &WorkloadResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkloadResourceClient) UpdateOne(wr *WorkloadResource) *WorkloadResourceUpdateOne {
	mutation := newWorkloadResourceMutation(c.config, OpUpdateOne, withWorkloadResource(wr))
	return &WorkloadResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkloadResourceClient) UpdateOneID(id int) *WorkloadResourceUpdateOne {
	mutation := newWorkloadResourceMutation(c.config, OpUpdateOne, withWorkloadResourceID(id))
	return &WorkloadResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkloadResource.
func (c *WorkloadResourceClient) Delete() *WorkloadResourceDelete {
	mutation := newWorkloadResourceMutation(c.config, OpDelete)
	return &WorkloadResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WorkloadResourceClient) DeleteOne(wr *WorkloadResource) *WorkloadResourceDeleteOne {
	return c.DeleteOneID(wr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WorkloadResourceClient) DeleteOneID(id int) *WorkloadResourceDeleteOne {
	builder := c.Delete().Where(workloadresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkloadResourceDeleteOne{builder}
}

// Query returns a query builder for WorkloadResource.
func (c *WorkloadResourceClient) Query() *WorkloadResourceQuery {
	return &WorkloadResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWorkloadResource},
		inters: c.Interceptors(),
	}
}

// Get returns a WorkloadResource entity by its id.
func (c *WorkloadResourceClient) Get(ctx context.Context, id int) (*WorkloadResource, error) {
	return c.Query().Where(workloadresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkloadResourceClient) GetX(ctx context.Context, id int) *WorkloadResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMembers queries the members edge of a WorkloadResource.
func (c *WorkloadResourceClient) QueryMembers(wr *WorkloadResource) *WorkloadMemberQuery {
	query := (&WorkloadMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workloadresource.Table, workloadresource.FieldID, id),
			sqlgraph.To(workloadmember.Table, workloadmember.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, workloadresource.MembersTable, workloadresource.MembersColumn),
		)
		fromV = sqlgraph.Neighbors(wr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkloadResourceClient) Hooks() []Hook {
	return c.hooks.WorkloadResource
}

// Interceptors returns the client interceptors.
func (c *WorkloadResourceClient) Interceptors() []Interceptor {
	return c.inters.WorkloadResource
}

func (c *WorkloadResourceClient) mutate(ctx context.Context, m *WorkloadResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WorkloadResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WorkloadResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WorkloadResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WorkloadResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown WorkloadResource mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		EndpointResource, HostResource, HostnicResource, HoststorageResource,
		HostusbResource, IPAddressResource, InstanceResource, NetlinkResource,
		NetworkSegment, OperatingSystemResource, OuResource, ProjectResource,
		ProviderResource, RegionResource, RepeatedScheduleResource,
		SingleScheduleResource, SiteResource, UserResource, WorkloadMember,
		WorkloadResource []ent.Hook
	}
	inters struct {
		EndpointResource, HostResource, HostnicResource, HoststorageResource,
		HostusbResource, IPAddressResource, InstanceResource, NetlinkResource,
		NetworkSegment, OperatingSystemResource, OuResource, ProjectResource,
		ProviderResource, RegionResource, RepeatedScheduleResource,
		SingleScheduleResource, SiteResource, UserResource, WorkloadMember,
		WorkloadResource []ent.Interceptor
	}
)
