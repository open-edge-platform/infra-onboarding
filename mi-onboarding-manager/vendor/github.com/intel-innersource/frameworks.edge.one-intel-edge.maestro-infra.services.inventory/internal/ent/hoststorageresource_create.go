// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hostresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hoststorageresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/projectresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/providerresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/siteresource"
)

// HoststorageResourceCreate is the builder for creating a HoststorageResource entity.
type HoststorageResourceCreate struct {
	config
	mutation *HoststorageResourceMutation
	hooks    []Hook
}

// SetResourceID sets the "resource_id" field.
func (hrc *HoststorageResourceCreate) SetResourceID(s string) *HoststorageResourceCreate {
	hrc.mutation.SetResourceID(s)
	return hrc
}

// SetKind sets the "kind" field.
func (hrc *HoststorageResourceCreate) SetKind(s string) *HoststorageResourceCreate {
	hrc.mutation.SetKind(s)
	return hrc
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (hrc *HoststorageResourceCreate) SetNillableKind(s *string) *HoststorageResourceCreate {
	if s != nil {
		hrc.SetKind(*s)
	}
	return hrc
}

// SetProviderStatus sets the "provider_status" field.
func (hrc *HoststorageResourceCreate) SetProviderStatus(s string) *HoststorageResourceCreate {
	hrc.mutation.SetProviderStatus(s)
	return hrc
}

// SetNillableProviderStatus sets the "provider_status" field if the given value is not nil.
func (hrc *HoststorageResourceCreate) SetNillableProviderStatus(s *string) *HoststorageResourceCreate {
	if s != nil {
		hrc.SetProviderStatus(*s)
	}
	return hrc
}

// SetWwid sets the "wwid" field.
func (hrc *HoststorageResourceCreate) SetWwid(s string) *HoststorageResourceCreate {
	hrc.mutation.SetWwid(s)
	return hrc
}

// SetNillableWwid sets the "wwid" field if the given value is not nil.
func (hrc *HoststorageResourceCreate) SetNillableWwid(s *string) *HoststorageResourceCreate {
	if s != nil {
		hrc.SetWwid(*s)
	}
	return hrc
}

// SetSerial sets the "serial" field.
func (hrc *HoststorageResourceCreate) SetSerial(s string) *HoststorageResourceCreate {
	hrc.mutation.SetSerial(s)
	return hrc
}

// SetNillableSerial sets the "serial" field if the given value is not nil.
func (hrc *HoststorageResourceCreate) SetNillableSerial(s *string) *HoststorageResourceCreate {
	if s != nil {
		hrc.SetSerial(*s)
	}
	return hrc
}

// SetVendor sets the "vendor" field.
func (hrc *HoststorageResourceCreate) SetVendor(s string) *HoststorageResourceCreate {
	hrc.mutation.SetVendor(s)
	return hrc
}

// SetNillableVendor sets the "vendor" field if the given value is not nil.
func (hrc *HoststorageResourceCreate) SetNillableVendor(s *string) *HoststorageResourceCreate {
	if s != nil {
		hrc.SetVendor(*s)
	}
	return hrc
}

// SetModel sets the "model" field.
func (hrc *HoststorageResourceCreate) SetModel(s string) *HoststorageResourceCreate {
	hrc.mutation.SetModel(s)
	return hrc
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (hrc *HoststorageResourceCreate) SetNillableModel(s *string) *HoststorageResourceCreate {
	if s != nil {
		hrc.SetModel(*s)
	}
	return hrc
}

// SetCapacityBytes sets the "capacity_bytes" field.
func (hrc *HoststorageResourceCreate) SetCapacityBytes(u uint64) *HoststorageResourceCreate {
	hrc.mutation.SetCapacityBytes(u)
	return hrc
}

// SetNillableCapacityBytes sets the "capacity_bytes" field if the given value is not nil.
func (hrc *HoststorageResourceCreate) SetNillableCapacityBytes(u *uint64) *HoststorageResourceCreate {
	if u != nil {
		hrc.SetCapacityBytes(*u)
	}
	return hrc
}

// SetDeviceName sets the "device_name" field.
func (hrc *HoststorageResourceCreate) SetDeviceName(s string) *HoststorageResourceCreate {
	hrc.mutation.SetDeviceName(s)
	return hrc
}

// SetNillableDeviceName sets the "device_name" field if the given value is not nil.
func (hrc *HoststorageResourceCreate) SetNillableDeviceName(s *string) *HoststorageResourceCreate {
	if s != nil {
		hrc.SetDeviceName(*s)
	}
	return hrc
}

// SetSiteID sets the "site" edge to the SiteResource entity by ID.
func (hrc *HoststorageResourceCreate) SetSiteID(id int) *HoststorageResourceCreate {
	hrc.mutation.SetSiteID(id)
	return hrc
}

// SetNillableSiteID sets the "site" edge to the SiteResource entity by ID if the given value is not nil.
func (hrc *HoststorageResourceCreate) SetNillableSiteID(id *int) *HoststorageResourceCreate {
	if id != nil {
		hrc = hrc.SetSiteID(*id)
	}
	return hrc
}

// SetSite sets the "site" edge to the SiteResource entity.
func (hrc *HoststorageResourceCreate) SetSite(s *SiteResource) *HoststorageResourceCreate {
	return hrc.SetSiteID(s.ID)
}

// SetProviderID sets the "provider" edge to the ProviderResource entity by ID.
func (hrc *HoststorageResourceCreate) SetProviderID(id int) *HoststorageResourceCreate {
	hrc.mutation.SetProviderID(id)
	return hrc
}

// SetNillableProviderID sets the "provider" edge to the ProviderResource entity by ID if the given value is not nil.
func (hrc *HoststorageResourceCreate) SetNillableProviderID(id *int) *HoststorageResourceCreate {
	if id != nil {
		hrc = hrc.SetProviderID(*id)
	}
	return hrc
}

// SetProvider sets the "provider" edge to the ProviderResource entity.
func (hrc *HoststorageResourceCreate) SetProvider(p *ProviderResource) *HoststorageResourceCreate {
	return hrc.SetProviderID(p.ID)
}

// SetProjectID sets the "project" edge to the ProjectResource entity by ID.
func (hrc *HoststorageResourceCreate) SetProjectID(id int) *HoststorageResourceCreate {
	hrc.mutation.SetProjectID(id)
	return hrc
}

// SetNillableProjectID sets the "project" edge to the ProjectResource entity by ID if the given value is not nil.
func (hrc *HoststorageResourceCreate) SetNillableProjectID(id *int) *HoststorageResourceCreate {
	if id != nil {
		hrc = hrc.SetProjectID(*id)
	}
	return hrc
}

// SetProject sets the "project" edge to the ProjectResource entity.
func (hrc *HoststorageResourceCreate) SetProject(p *ProjectResource) *HoststorageResourceCreate {
	return hrc.SetProjectID(p.ID)
}

// SetHostID sets the "host" edge to the HostResource entity by ID.
func (hrc *HoststorageResourceCreate) SetHostID(id int) *HoststorageResourceCreate {
	hrc.mutation.SetHostID(id)
	return hrc
}

// SetHost sets the "host" edge to the HostResource entity.
func (hrc *HoststorageResourceCreate) SetHost(h *HostResource) *HoststorageResourceCreate {
	return hrc.SetHostID(h.ID)
}

// Mutation returns the HoststorageResourceMutation object of the builder.
func (hrc *HoststorageResourceCreate) Mutation() *HoststorageResourceMutation {
	return hrc.mutation
}

// Save creates the HoststorageResource in the database.
func (hrc *HoststorageResourceCreate) Save(ctx context.Context) (*HoststorageResource, error) {
	return withHooks[*HoststorageResource, HoststorageResourceMutation](ctx, hrc.sqlSave, hrc.mutation, hrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hrc *HoststorageResourceCreate) SaveX(ctx context.Context) *HoststorageResource {
	v, err := hrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hrc *HoststorageResourceCreate) Exec(ctx context.Context) error {
	_, err := hrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hrc *HoststorageResourceCreate) ExecX(ctx context.Context) {
	if err := hrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hrc *HoststorageResourceCreate) check() error {
	if _, ok := hrc.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource_id", err: errors.New(`ent: missing required field "HoststorageResource.resource_id"`)}
	}
	if _, ok := hrc.mutation.HostID(); !ok {
		return &ValidationError{Name: "host", err: errors.New(`ent: missing required edge "HoststorageResource.host"`)}
	}
	return nil
}

func (hrc *HoststorageResourceCreate) sqlSave(ctx context.Context) (*HoststorageResource, error) {
	if err := hrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	hrc.mutation.id = &_node.ID
	hrc.mutation.done = true
	return _node, nil
}

func (hrc *HoststorageResourceCreate) createSpec() (*HoststorageResource, *sqlgraph.CreateSpec) {
	var (
		_node = &HoststorageResource{config: hrc.config}
		_spec = sqlgraph.NewCreateSpec(hoststorageresource.Table, sqlgraph.NewFieldSpec(hoststorageresource.FieldID, field.TypeInt))
	)
	if value, ok := hrc.mutation.ResourceID(); ok {
		_spec.SetField(hoststorageresource.FieldResourceID, field.TypeString, value)
		_node.ResourceID = value
	}
	if value, ok := hrc.mutation.Kind(); ok {
		_spec.SetField(hoststorageresource.FieldKind, field.TypeString, value)
		_node.Kind = value
	}
	if value, ok := hrc.mutation.ProviderStatus(); ok {
		_spec.SetField(hoststorageresource.FieldProviderStatus, field.TypeString, value)
		_node.ProviderStatus = value
	}
	if value, ok := hrc.mutation.Wwid(); ok {
		_spec.SetField(hoststorageresource.FieldWwid, field.TypeString, value)
		_node.Wwid = value
	}
	if value, ok := hrc.mutation.Serial(); ok {
		_spec.SetField(hoststorageresource.FieldSerial, field.TypeString, value)
		_node.Serial = value
	}
	if value, ok := hrc.mutation.Vendor(); ok {
		_spec.SetField(hoststorageresource.FieldVendor, field.TypeString, value)
		_node.Vendor = value
	}
	if value, ok := hrc.mutation.Model(); ok {
		_spec.SetField(hoststorageresource.FieldModel, field.TypeString, value)
		_node.Model = value
	}
	if value, ok := hrc.mutation.CapacityBytes(); ok {
		_spec.SetField(hoststorageresource.FieldCapacityBytes, field.TypeUint64, value)
		_node.CapacityBytes = value
	}
	if value, ok := hrc.mutation.DeviceName(); ok {
		_spec.SetField(hoststorageresource.FieldDeviceName, field.TypeString, value)
		_node.DeviceName = value
	}
	if nodes := hrc.mutation.SiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hoststorageresource.SiteTable,
			Columns: []string{hoststorageresource.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.hoststorage_resource_site = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hrc.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hoststorageresource.ProviderTable,
			Columns: []string{hoststorageresource.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.hoststorage_resource_provider = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hrc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hoststorageresource.ProjectTable,
			Columns: []string{hoststorageresource.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.hoststorage_resource_project = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hrc.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hoststorageresource.HostTable,
			Columns: []string{hoststorageresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.hoststorage_resource_host = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HoststorageResourceCreateBulk is the builder for creating many HoststorageResource entities in bulk.
type HoststorageResourceCreateBulk struct {
	config
	builders []*HoststorageResourceCreate
}

// Save creates the HoststorageResource entities in the database.
func (hrcb *HoststorageResourceCreateBulk) Save(ctx context.Context) ([]*HoststorageResource, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hrcb.builders))
	nodes := make([]*HoststorageResource, len(hrcb.builders))
	mutators := make([]Mutator, len(hrcb.builders))
	for i := range hrcb.builders {
		func(i int, root context.Context) {
			builder := hrcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HoststorageResourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hrcb *HoststorageResourceCreateBulk) SaveX(ctx context.Context) []*HoststorageResource {
	v, err := hrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hrcb *HoststorageResourceCreateBulk) Exec(ctx context.Context) error {
	_, err := hrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hrcb *HoststorageResourceCreateBulk) ExecX(ctx context.Context) {
	if err := hrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
