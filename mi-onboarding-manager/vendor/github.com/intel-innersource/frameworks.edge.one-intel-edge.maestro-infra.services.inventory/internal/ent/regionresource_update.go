// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/regionresource"
)

// RegionResourceUpdate is the builder for updating RegionResource entities.
type RegionResourceUpdate struct {
	config
	hooks    []Hook
	mutation *RegionResourceMutation
}

// Where appends a list predicates to the RegionResourceUpdate builder.
func (rru *RegionResourceUpdate) Where(ps ...predicate.RegionResource) *RegionResourceUpdate {
	rru.mutation.Where(ps...)
	return rru
}

// SetResourceID sets the "resource_id" field.
func (rru *RegionResourceUpdate) SetResourceID(s string) *RegionResourceUpdate {
	rru.mutation.SetResourceID(s)
	return rru
}

// SetName sets the "name" field.
func (rru *RegionResourceUpdate) SetName(s string) *RegionResourceUpdate {
	rru.mutation.SetName(s)
	return rru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rru *RegionResourceUpdate) SetNillableName(s *string) *RegionResourceUpdate {
	if s != nil {
		rru.SetName(*s)
	}
	return rru
}

// ClearName clears the value of the "name" field.
func (rru *RegionResourceUpdate) ClearName() *RegionResourceUpdate {
	rru.mutation.ClearName()
	return rru
}

// SetRegionKind sets the "region_kind" field.
func (rru *RegionResourceUpdate) SetRegionKind(s string) *RegionResourceUpdate {
	rru.mutation.SetRegionKind(s)
	return rru
}

// SetNillableRegionKind sets the "region_kind" field if the given value is not nil.
func (rru *RegionResourceUpdate) SetNillableRegionKind(s *string) *RegionResourceUpdate {
	if s != nil {
		rru.SetRegionKind(*s)
	}
	return rru
}

// ClearRegionKind clears the value of the "region_kind" field.
func (rru *RegionResourceUpdate) ClearRegionKind() *RegionResourceUpdate {
	rru.mutation.ClearRegionKind()
	return rru
}

// SetMetadata sets the "metadata" field.
func (rru *RegionResourceUpdate) SetMetadata(s string) *RegionResourceUpdate {
	rru.mutation.SetMetadata(s)
	return rru
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (rru *RegionResourceUpdate) SetNillableMetadata(s *string) *RegionResourceUpdate {
	if s != nil {
		rru.SetMetadata(*s)
	}
	return rru
}

// ClearMetadata clears the value of the "metadata" field.
func (rru *RegionResourceUpdate) ClearMetadata() *RegionResourceUpdate {
	rru.mutation.ClearMetadata()
	return rru
}

// SetParentRegionID sets the "parent_region" edge to the RegionResource entity by ID.
func (rru *RegionResourceUpdate) SetParentRegionID(id int) *RegionResourceUpdate {
	rru.mutation.SetParentRegionID(id)
	return rru
}

// SetNillableParentRegionID sets the "parent_region" edge to the RegionResource entity by ID if the given value is not nil.
func (rru *RegionResourceUpdate) SetNillableParentRegionID(id *int) *RegionResourceUpdate {
	if id != nil {
		rru = rru.SetParentRegionID(*id)
	}
	return rru
}

// SetParentRegion sets the "parent_region" edge to the RegionResource entity.
func (rru *RegionResourceUpdate) SetParentRegion(r *RegionResource) *RegionResourceUpdate {
	return rru.SetParentRegionID(r.ID)
}

// AddChildIDs adds the "children" edge to the RegionResource entity by IDs.
func (rru *RegionResourceUpdate) AddChildIDs(ids ...int) *RegionResourceUpdate {
	rru.mutation.AddChildIDs(ids...)
	return rru
}

// AddChildren adds the "children" edges to the RegionResource entity.
func (rru *RegionResourceUpdate) AddChildren(r ...*RegionResource) *RegionResourceUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rru.AddChildIDs(ids...)
}

// Mutation returns the RegionResourceMutation object of the builder.
func (rru *RegionResourceUpdate) Mutation() *RegionResourceMutation {
	return rru.mutation
}

// ClearParentRegion clears the "parent_region" edge to the RegionResource entity.
func (rru *RegionResourceUpdate) ClearParentRegion() *RegionResourceUpdate {
	rru.mutation.ClearParentRegion()
	return rru
}

// ClearChildren clears all "children" edges to the RegionResource entity.
func (rru *RegionResourceUpdate) ClearChildren() *RegionResourceUpdate {
	rru.mutation.ClearChildren()
	return rru
}

// RemoveChildIDs removes the "children" edge to RegionResource entities by IDs.
func (rru *RegionResourceUpdate) RemoveChildIDs(ids ...int) *RegionResourceUpdate {
	rru.mutation.RemoveChildIDs(ids...)
	return rru
}

// RemoveChildren removes "children" edges to RegionResource entities.
func (rru *RegionResourceUpdate) RemoveChildren(r ...*RegionResource) *RegionResourceUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rru.RemoveChildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rru *RegionResourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, RegionResourceMutation](ctx, rru.sqlSave, rru.mutation, rru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rru *RegionResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := rru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rru *RegionResourceUpdate) Exec(ctx context.Context) error {
	_, err := rru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rru *RegionResourceUpdate) ExecX(ctx context.Context) {
	if err := rru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rru *RegionResourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(regionresource.Table, regionresource.Columns, sqlgraph.NewFieldSpec(regionresource.FieldID, field.TypeInt))
	if ps := rru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rru.mutation.ResourceID(); ok {
		_spec.SetField(regionresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := rru.mutation.Name(); ok {
		_spec.SetField(regionresource.FieldName, field.TypeString, value)
	}
	if rru.mutation.NameCleared() {
		_spec.ClearField(regionresource.FieldName, field.TypeString)
	}
	if value, ok := rru.mutation.RegionKind(); ok {
		_spec.SetField(regionresource.FieldRegionKind, field.TypeString, value)
	}
	if rru.mutation.RegionKindCleared() {
		_spec.ClearField(regionresource.FieldRegionKind, field.TypeString)
	}
	if value, ok := rru.mutation.Metadata(); ok {
		_spec.SetField(regionresource.FieldMetadata, field.TypeString, value)
	}
	if rru.mutation.MetadataCleared() {
		_spec.ClearField(regionresource.FieldMetadata, field.TypeString)
	}
	if rru.mutation.ParentRegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   regionresource.ParentRegionTable,
			Columns: []string{regionresource.ParentRegionColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rru.mutation.ParentRegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   regionresource.ParentRegionTable,
			Columns: []string{regionresource.ParentRegionColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rru.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   regionresource.ChildrenTable,
			Columns: []string{regionresource.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rru.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !rru.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   regionresource.ChildrenTable,
			Columns: []string{regionresource.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rru.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   regionresource.ChildrenTable,
			Columns: []string{regionresource.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{regionresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rru.mutation.done = true
	return n, nil
}

// RegionResourceUpdateOne is the builder for updating a single RegionResource entity.
type RegionResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RegionResourceMutation
}

// SetResourceID sets the "resource_id" field.
func (rruo *RegionResourceUpdateOne) SetResourceID(s string) *RegionResourceUpdateOne {
	rruo.mutation.SetResourceID(s)
	return rruo
}

// SetName sets the "name" field.
func (rruo *RegionResourceUpdateOne) SetName(s string) *RegionResourceUpdateOne {
	rruo.mutation.SetName(s)
	return rruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rruo *RegionResourceUpdateOne) SetNillableName(s *string) *RegionResourceUpdateOne {
	if s != nil {
		rruo.SetName(*s)
	}
	return rruo
}

// ClearName clears the value of the "name" field.
func (rruo *RegionResourceUpdateOne) ClearName() *RegionResourceUpdateOne {
	rruo.mutation.ClearName()
	return rruo
}

// SetRegionKind sets the "region_kind" field.
func (rruo *RegionResourceUpdateOne) SetRegionKind(s string) *RegionResourceUpdateOne {
	rruo.mutation.SetRegionKind(s)
	return rruo
}

// SetNillableRegionKind sets the "region_kind" field if the given value is not nil.
func (rruo *RegionResourceUpdateOne) SetNillableRegionKind(s *string) *RegionResourceUpdateOne {
	if s != nil {
		rruo.SetRegionKind(*s)
	}
	return rruo
}

// ClearRegionKind clears the value of the "region_kind" field.
func (rruo *RegionResourceUpdateOne) ClearRegionKind() *RegionResourceUpdateOne {
	rruo.mutation.ClearRegionKind()
	return rruo
}

// SetMetadata sets the "metadata" field.
func (rruo *RegionResourceUpdateOne) SetMetadata(s string) *RegionResourceUpdateOne {
	rruo.mutation.SetMetadata(s)
	return rruo
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (rruo *RegionResourceUpdateOne) SetNillableMetadata(s *string) *RegionResourceUpdateOne {
	if s != nil {
		rruo.SetMetadata(*s)
	}
	return rruo
}

// ClearMetadata clears the value of the "metadata" field.
func (rruo *RegionResourceUpdateOne) ClearMetadata() *RegionResourceUpdateOne {
	rruo.mutation.ClearMetadata()
	return rruo
}

// SetParentRegionID sets the "parent_region" edge to the RegionResource entity by ID.
func (rruo *RegionResourceUpdateOne) SetParentRegionID(id int) *RegionResourceUpdateOne {
	rruo.mutation.SetParentRegionID(id)
	return rruo
}

// SetNillableParentRegionID sets the "parent_region" edge to the RegionResource entity by ID if the given value is not nil.
func (rruo *RegionResourceUpdateOne) SetNillableParentRegionID(id *int) *RegionResourceUpdateOne {
	if id != nil {
		rruo = rruo.SetParentRegionID(*id)
	}
	return rruo
}

// SetParentRegion sets the "parent_region" edge to the RegionResource entity.
func (rruo *RegionResourceUpdateOne) SetParentRegion(r *RegionResource) *RegionResourceUpdateOne {
	return rruo.SetParentRegionID(r.ID)
}

// AddChildIDs adds the "children" edge to the RegionResource entity by IDs.
func (rruo *RegionResourceUpdateOne) AddChildIDs(ids ...int) *RegionResourceUpdateOne {
	rruo.mutation.AddChildIDs(ids...)
	return rruo
}

// AddChildren adds the "children" edges to the RegionResource entity.
func (rruo *RegionResourceUpdateOne) AddChildren(r ...*RegionResource) *RegionResourceUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rruo.AddChildIDs(ids...)
}

// Mutation returns the RegionResourceMutation object of the builder.
func (rruo *RegionResourceUpdateOne) Mutation() *RegionResourceMutation {
	return rruo.mutation
}

// ClearParentRegion clears the "parent_region" edge to the RegionResource entity.
func (rruo *RegionResourceUpdateOne) ClearParentRegion() *RegionResourceUpdateOne {
	rruo.mutation.ClearParentRegion()
	return rruo
}

// ClearChildren clears all "children" edges to the RegionResource entity.
func (rruo *RegionResourceUpdateOne) ClearChildren() *RegionResourceUpdateOne {
	rruo.mutation.ClearChildren()
	return rruo
}

// RemoveChildIDs removes the "children" edge to RegionResource entities by IDs.
func (rruo *RegionResourceUpdateOne) RemoveChildIDs(ids ...int) *RegionResourceUpdateOne {
	rruo.mutation.RemoveChildIDs(ids...)
	return rruo
}

// RemoveChildren removes "children" edges to RegionResource entities.
func (rruo *RegionResourceUpdateOne) RemoveChildren(r ...*RegionResource) *RegionResourceUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rruo.RemoveChildIDs(ids...)
}

// Where appends a list predicates to the RegionResourceUpdate builder.
func (rruo *RegionResourceUpdateOne) Where(ps ...predicate.RegionResource) *RegionResourceUpdateOne {
	rruo.mutation.Where(ps...)
	return rruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rruo *RegionResourceUpdateOne) Select(field string, fields ...string) *RegionResourceUpdateOne {
	rruo.fields = append([]string{field}, fields...)
	return rruo
}

// Save executes the query and returns the updated RegionResource entity.
func (rruo *RegionResourceUpdateOne) Save(ctx context.Context) (*RegionResource, error) {
	return withHooks[*RegionResource, RegionResourceMutation](ctx, rruo.sqlSave, rruo.mutation, rruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rruo *RegionResourceUpdateOne) SaveX(ctx context.Context) *RegionResource {
	node, err := rruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rruo *RegionResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := rruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rruo *RegionResourceUpdateOne) ExecX(ctx context.Context) {
	if err := rruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rruo *RegionResourceUpdateOne) sqlSave(ctx context.Context) (_node *RegionResource, err error) {
	_spec := sqlgraph.NewUpdateSpec(regionresource.Table, regionresource.Columns, sqlgraph.NewFieldSpec(regionresource.FieldID, field.TypeInt))
	id, ok := rruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RegionResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, regionresource.FieldID)
		for _, f := range fields {
			if !regionresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != regionresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rruo.mutation.ResourceID(); ok {
		_spec.SetField(regionresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := rruo.mutation.Name(); ok {
		_spec.SetField(regionresource.FieldName, field.TypeString, value)
	}
	if rruo.mutation.NameCleared() {
		_spec.ClearField(regionresource.FieldName, field.TypeString)
	}
	if value, ok := rruo.mutation.RegionKind(); ok {
		_spec.SetField(regionresource.FieldRegionKind, field.TypeString, value)
	}
	if rruo.mutation.RegionKindCleared() {
		_spec.ClearField(regionresource.FieldRegionKind, field.TypeString)
	}
	if value, ok := rruo.mutation.Metadata(); ok {
		_spec.SetField(regionresource.FieldMetadata, field.TypeString, value)
	}
	if rruo.mutation.MetadataCleared() {
		_spec.ClearField(regionresource.FieldMetadata, field.TypeString)
	}
	if rruo.mutation.ParentRegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   regionresource.ParentRegionTable,
			Columns: []string{regionresource.ParentRegionColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rruo.mutation.ParentRegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   regionresource.ParentRegionTable,
			Columns: []string{regionresource.ParentRegionColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rruo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   regionresource.ChildrenTable,
			Columns: []string{regionresource.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rruo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !rruo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   regionresource.ChildrenTable,
			Columns: []string{regionresource.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rruo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   regionresource.ChildrenTable,
			Columns: []string{regionresource.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RegionResource{config: rruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{regionresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rruo.mutation.done = true
	return _node, nil
}
