// Code generated by ent, DO NOT EDIT.

package telemetryprofile

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the telemetryprofile type in the database.
	Label = "telemetry_profile"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldResourceID holds the string denoting the resource_id field in the database.
	FieldResourceID = "resource_id"
	// FieldKind holds the string denoting the kind field in the database.
	FieldKind = "kind"
	// FieldMetricsInterval holds the string denoting the metrics_interval field in the database.
	FieldMetricsInterval = "metrics_interval"
	// FieldLogLevel holds the string denoting the log_level field in the database.
	FieldLogLevel = "log_level"
	// EdgeRegion holds the string denoting the region edge name in mutations.
	EdgeRegion = "region"
	// EdgeSite holds the string denoting the site edge name in mutations.
	EdgeSite = "site"
	// EdgeInstance holds the string denoting the instance edge name in mutations.
	EdgeInstance = "instance"
	// EdgeGroup holds the string denoting the group edge name in mutations.
	EdgeGroup = "group"
	// Table holds the table name of the telemetryprofile in the database.
	Table = "telemetry_profiles"
	// RegionTable is the table that holds the region relation/edge.
	RegionTable = "telemetry_profiles"
	// RegionInverseTable is the table name for the RegionResource entity.
	// It exists in this package in order to avoid circular dependency with the "regionresource" package.
	RegionInverseTable = "region_resources"
	// RegionColumn is the table column denoting the region relation/edge.
	RegionColumn = "telemetry_profile_region"
	// SiteTable is the table that holds the site relation/edge.
	SiteTable = "telemetry_profiles"
	// SiteInverseTable is the table name for the SiteResource entity.
	// It exists in this package in order to avoid circular dependency with the "siteresource" package.
	SiteInverseTable = "site_resources"
	// SiteColumn is the table column denoting the site relation/edge.
	SiteColumn = "telemetry_profile_site"
	// InstanceTable is the table that holds the instance relation/edge.
	InstanceTable = "telemetry_profiles"
	// InstanceInverseTable is the table name for the InstanceResource entity.
	// It exists in this package in order to avoid circular dependency with the "instanceresource" package.
	InstanceInverseTable = "instance_resources"
	// InstanceColumn is the table column denoting the instance relation/edge.
	InstanceColumn = "telemetry_profile_instance"
	// GroupTable is the table that holds the group relation/edge.
	GroupTable = "telemetry_profiles"
	// GroupInverseTable is the table name for the TelemetryGroupResource entity.
	// It exists in this package in order to avoid circular dependency with the "telemetrygroupresource" package.
	GroupInverseTable = "telemetry_group_resources"
	// GroupColumn is the table column denoting the group relation/edge.
	GroupColumn = "telemetry_profile_group"
)

// Columns holds all SQL columns for telemetryprofile fields.
var Columns = []string{
	FieldID,
	FieldResourceID,
	FieldKind,
	FieldMetricsInterval,
	FieldLogLevel,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "telemetry_profiles"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"telemetry_profile_region",
	"telemetry_profile_site",
	"telemetry_profile_instance",
	"telemetry_profile_group",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Kind defines the type for the "kind" enum field.
type Kind string

// Kind values.
const (
	KindTELEMETRY_RESOURCE_KIND_UNSPECIFIED Kind = "TELEMETRY_RESOURCE_KIND_UNSPECIFIED"
	KindTELEMETRY_RESOURCE_KIND_METRICS     Kind = "TELEMETRY_RESOURCE_KIND_METRICS"
	KindTELEMETRY_RESOURCE_KIND_LOGS        Kind = "TELEMETRY_RESOURCE_KIND_LOGS"
)

func (k Kind) String() string {
	return string(k)
}

// KindValidator is a validator for the "kind" field enum values. It is called by the builders before save.
func KindValidator(k Kind) error {
	switch k {
	case KindTELEMETRY_RESOURCE_KIND_UNSPECIFIED, KindTELEMETRY_RESOURCE_KIND_METRICS, KindTELEMETRY_RESOURCE_KIND_LOGS:
		return nil
	default:
		return fmt.Errorf("telemetryprofile: invalid enum value for kind field: %q", k)
	}
}

// LogLevel defines the type for the "log_level" enum field.
type LogLevel string

// LogLevel values.
const (
	LogLevelSEVERITY_LEVEL_UNSPECIFIED LogLevel = "SEVERITY_LEVEL_UNSPECIFIED"
	LogLevelSEVERITY_LEVEL_CRITICAL    LogLevel = "SEVERITY_LEVEL_CRITICAL"
	LogLevelSEVERITY_LEVEL_ERROR       LogLevel = "SEVERITY_LEVEL_ERROR"
	LogLevelSEVERITY_LEVEL_WARN        LogLevel = "SEVERITY_LEVEL_WARN"
	LogLevelSEVERITY_LEVEL_INFO        LogLevel = "SEVERITY_LEVEL_INFO"
	LogLevelSEVERITY_LEVEL_DEBUG       LogLevel = "SEVERITY_LEVEL_DEBUG"
)

func (ll LogLevel) String() string {
	return string(ll)
}

// LogLevelValidator is a validator for the "log_level" field enum values. It is called by the builders before save.
func LogLevelValidator(ll LogLevel) error {
	switch ll {
	case LogLevelSEVERITY_LEVEL_UNSPECIFIED, LogLevelSEVERITY_LEVEL_CRITICAL, LogLevelSEVERITY_LEVEL_ERROR, LogLevelSEVERITY_LEVEL_WARN, LogLevelSEVERITY_LEVEL_INFO, LogLevelSEVERITY_LEVEL_DEBUG:
		return nil
	default:
		return fmt.Errorf("telemetryprofile: invalid enum value for log_level field: %q", ll)
	}
}

// OrderOption defines the ordering options for the TelemetryProfile queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByResourceID orders the results by the resource_id field.
func ByResourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceID, opts...).ToFunc()
}

// ByKind orders the results by the kind field.
func ByKind(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKind, opts...).ToFunc()
}

// ByMetricsInterval orders the results by the metrics_interval field.
func ByMetricsInterval(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMetricsInterval, opts...).ToFunc()
}

// ByLogLevel orders the results by the log_level field.
func ByLogLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLogLevel, opts...).ToFunc()
}

// ByRegionField orders the results by region field.
func ByRegionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRegionStep(), sql.OrderByField(field, opts...))
	}
}

// BySiteField orders the results by site field.
func BySiteField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSiteStep(), sql.OrderByField(field, opts...))
	}
}

// ByInstanceField orders the results by instance field.
func ByInstanceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInstanceStep(), sql.OrderByField(field, opts...))
	}
}

// ByGroupField orders the results by group field.
func ByGroupField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupStep(), sql.OrderByField(field, opts...))
	}
}
func newRegionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RegionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RegionTable, RegionColumn),
	)
}
func newSiteStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SiteInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SiteTable, SiteColumn),
	)
}
func newInstanceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InstanceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, InstanceTable, InstanceColumn),
	)
}
func newGroupStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroupInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, GroupTable, GroupColumn),
	)
}
