// Code generated by ent, DO NOT EDIT.

package siteresource

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the siteresource type in the database.
	Label = "site_resource"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldResourceID holds the string denoting the resource_id field in the database.
	FieldResourceID = "resource_id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldSiteKind holds the string denoting the site_kind field in the database.
	FieldSiteKind = "site_kind"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldSiteLat holds the string denoting the site_lat field in the database.
	FieldSiteLat = "site_lat"
	// FieldSiteLng holds the string denoting the site_lng field in the database.
	FieldSiteLng = "site_lng"
	// FieldDNSServers holds the string denoting the dns_servers field in the database.
	FieldDNSServers = "dns_servers"
	// FieldDockerRegistries holds the string denoting the docker_registries field in the database.
	FieldDockerRegistries = "docker_registries"
	// FieldMetricsEndpoint holds the string denoting the metrics_endpoint field in the database.
	FieldMetricsEndpoint = "metrics_endpoint"
	// FieldHTTPProxy holds the string denoting the http_proxy field in the database.
	FieldHTTPProxy = "http_proxy"
	// FieldHTTPSProxy holds the string denoting the https_proxy field in the database.
	FieldHTTPSProxy = "https_proxy"
	// FieldFtpProxy holds the string denoting the ftp_proxy field in the database.
	FieldFtpProxy = "ftp_proxy"
	// FieldNoProxy holds the string denoting the no_proxy field in the database.
	FieldNoProxy = "no_proxy"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// EdgeRegion holds the string denoting the region edge name in mutations.
	EdgeRegion = "region"
	// EdgeOu holds the string denoting the ou edge name in mutations.
	EdgeOu = "ou"
	// Table holds the table name of the siteresource in the database.
	Table = "site_resources"
	// RegionTable is the table that holds the region relation/edge.
	RegionTable = "site_resources"
	// RegionInverseTable is the table name for the RegionResource entity.
	// It exists in this package in order to avoid circular dependency with the "regionresource" package.
	RegionInverseTable = "region_resources"
	// RegionColumn is the table column denoting the region relation/edge.
	RegionColumn = "site_resource_region"
	// OuTable is the table that holds the ou relation/edge.
	OuTable = "site_resources"
	// OuInverseTable is the table name for the OuResource entity.
	// It exists in this package in order to avoid circular dependency with the "ouresource" package.
	OuInverseTable = "ou_resources"
	// OuColumn is the table column denoting the ou relation/edge.
	OuColumn = "site_resource_ou"
)

// Columns holds all SQL columns for siteresource fields.
var Columns = []string{
	FieldID,
	FieldResourceID,
	FieldDescription,
	FieldSiteKind,
	FieldAddress,
	FieldSiteLat,
	FieldSiteLng,
	FieldDNSServers,
	FieldDockerRegistries,
	FieldMetricsEndpoint,
	FieldHTTPProxy,
	FieldHTTPSProxy,
	FieldFtpProxy,
	FieldNoProxy,
	FieldMetadata,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "site_resources"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"site_resource_region",
	"site_resource_ou",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the SiteResource queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByResourceID orders the results by the resource_id field.
func ByResourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceID, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// BySiteKind orders the results by the site_kind field.
func BySiteKind(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSiteKind, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// BySiteLat orders the results by the site_lat field.
func BySiteLat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSiteLat, opts...).ToFunc()
}

// BySiteLng orders the results by the site_lng field.
func BySiteLng(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSiteLng, opts...).ToFunc()
}

// ByDNSServers orders the results by the dns_servers field.
func ByDNSServers(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDNSServers, opts...).ToFunc()
}

// ByDockerRegistries orders the results by the docker_registries field.
func ByDockerRegistries(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDockerRegistries, opts...).ToFunc()
}

// ByMetricsEndpoint orders the results by the metrics_endpoint field.
func ByMetricsEndpoint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMetricsEndpoint, opts...).ToFunc()
}

// ByHTTPProxy orders the results by the http_proxy field.
func ByHTTPProxy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHTTPProxy, opts...).ToFunc()
}

// ByHTTPSProxy orders the results by the https_proxy field.
func ByHTTPSProxy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHTTPSProxy, opts...).ToFunc()
}

// ByFtpProxy orders the results by the ftp_proxy field.
func ByFtpProxy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFtpProxy, opts...).ToFunc()
}

// ByNoProxy orders the results by the no_proxy field.
func ByNoProxy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNoProxy, opts...).ToFunc()
}

// ByMetadata orders the results by the metadata field.
func ByMetadata(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMetadata, opts...).ToFunc()
}

// ByRegionField orders the results by region field.
func ByRegionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRegionStep(), sql.OrderByField(field, opts...))
	}
}

// ByOuField orders the results by ou field.
func ByOuField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOuStep(), sql.OrderByField(field, opts...))
	}
}
func newRegionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RegionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RegionTable, RegionColumn),
	)
}
func newOuStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OuInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OuTable, OuColumn),
	)
}
