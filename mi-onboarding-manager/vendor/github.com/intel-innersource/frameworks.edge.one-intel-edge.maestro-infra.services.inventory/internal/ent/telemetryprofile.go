// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/instanceresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/regionresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/siteresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/telemetrygroupresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/telemetryprofile"
)

// TelemetryProfile is the model entity for the TelemetryProfile schema.
type TelemetryProfile struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ResourceID holds the value of the "resource_id" field.
	ResourceID string `json:"resource_id,omitempty"`
	// Kind holds the value of the "kind" field.
	Kind telemetryprofile.Kind `json:"kind,omitempty"`
	// MetricsInterval holds the value of the "metrics_interval" field.
	MetricsInterval uint32 `json:"metrics_interval,omitempty"`
	// LogLevel holds the value of the "log_level" field.
	LogLevel telemetryprofile.LogLevel `json:"log_level,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TelemetryProfileQuery when eager-loading is set.
	Edges                      TelemetryProfileEdges `json:"edges"`
	telemetry_profile_region   *int
	telemetry_profile_site     *int
	telemetry_profile_instance *int
	telemetry_profile_group    *int
	selectValues               sql.SelectValues
}

// TelemetryProfileEdges holds the relations/edges for other nodes in the graph.
type TelemetryProfileEdges struct {
	// Region holds the value of the region edge.
	Region *RegionResource `json:"region,omitempty"`
	// Site holds the value of the site edge.
	Site *SiteResource `json:"site,omitempty"`
	// Instance holds the value of the instance edge.
	Instance *InstanceResource `json:"instance,omitempty"`
	// Group holds the value of the group edge.
	Group *TelemetryGroupResource `json:"group,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// RegionOrErr returns the Region value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TelemetryProfileEdges) RegionOrErr() (*RegionResource, error) {
	if e.loadedTypes[0] {
		if e.Region == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: regionresource.Label}
		}
		return e.Region, nil
	}
	return nil, &NotLoadedError{edge: "region"}
}

// SiteOrErr returns the Site value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TelemetryProfileEdges) SiteOrErr() (*SiteResource, error) {
	if e.loadedTypes[1] {
		if e.Site == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: siteresource.Label}
		}
		return e.Site, nil
	}
	return nil, &NotLoadedError{edge: "site"}
}

// InstanceOrErr returns the Instance value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TelemetryProfileEdges) InstanceOrErr() (*InstanceResource, error) {
	if e.loadedTypes[2] {
		if e.Instance == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: instanceresource.Label}
		}
		return e.Instance, nil
	}
	return nil, &NotLoadedError{edge: "instance"}
}

// GroupOrErr returns the Group value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TelemetryProfileEdges) GroupOrErr() (*TelemetryGroupResource, error) {
	if e.loadedTypes[3] {
		if e.Group == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: telemetrygroupresource.Label}
		}
		return e.Group, nil
	}
	return nil, &NotLoadedError{edge: "group"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TelemetryProfile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case telemetryprofile.FieldID, telemetryprofile.FieldMetricsInterval:
			values[i] = new(sql.NullInt64)
		case telemetryprofile.FieldResourceID, telemetryprofile.FieldKind, telemetryprofile.FieldLogLevel:
			values[i] = new(sql.NullString)
		case telemetryprofile.ForeignKeys[0]: // telemetry_profile_region
			values[i] = new(sql.NullInt64)
		case telemetryprofile.ForeignKeys[1]: // telemetry_profile_site
			values[i] = new(sql.NullInt64)
		case telemetryprofile.ForeignKeys[2]: // telemetry_profile_instance
			values[i] = new(sql.NullInt64)
		case telemetryprofile.ForeignKeys[3]: // telemetry_profile_group
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TelemetryProfile fields.
func (tp *TelemetryProfile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case telemetryprofile.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tp.ID = int(value.Int64)
		case telemetryprofile.FieldResourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				tp.ResourceID = value.String
			}
		case telemetryprofile.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				tp.Kind = telemetryprofile.Kind(value.String)
			}
		case telemetryprofile.FieldMetricsInterval:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field metrics_interval", values[i])
			} else if value.Valid {
				tp.MetricsInterval = uint32(value.Int64)
			}
		case telemetryprofile.FieldLogLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field log_level", values[i])
			} else if value.Valid {
				tp.LogLevel = telemetryprofile.LogLevel(value.String)
			}
		case telemetryprofile.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field telemetry_profile_region", value)
			} else if value.Valid {
				tp.telemetry_profile_region = new(int)
				*tp.telemetry_profile_region = int(value.Int64)
			}
		case telemetryprofile.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field telemetry_profile_site", value)
			} else if value.Valid {
				tp.telemetry_profile_site = new(int)
				*tp.telemetry_profile_site = int(value.Int64)
			}
		case telemetryprofile.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field telemetry_profile_instance", value)
			} else if value.Valid {
				tp.telemetry_profile_instance = new(int)
				*tp.telemetry_profile_instance = int(value.Int64)
			}
		case telemetryprofile.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field telemetry_profile_group", value)
			} else if value.Valid {
				tp.telemetry_profile_group = new(int)
				*tp.telemetry_profile_group = int(value.Int64)
			}
		default:
			tp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TelemetryProfile.
// This includes values selected through modifiers, order, etc.
func (tp *TelemetryProfile) Value(name string) (ent.Value, error) {
	return tp.selectValues.Get(name)
}

// QueryRegion queries the "region" edge of the TelemetryProfile entity.
func (tp *TelemetryProfile) QueryRegion() *RegionResourceQuery {
	return NewTelemetryProfileClient(tp.config).QueryRegion(tp)
}

// QuerySite queries the "site" edge of the TelemetryProfile entity.
func (tp *TelemetryProfile) QuerySite() *SiteResourceQuery {
	return NewTelemetryProfileClient(tp.config).QuerySite(tp)
}

// QueryInstance queries the "instance" edge of the TelemetryProfile entity.
func (tp *TelemetryProfile) QueryInstance() *InstanceResourceQuery {
	return NewTelemetryProfileClient(tp.config).QueryInstance(tp)
}

// QueryGroup queries the "group" edge of the TelemetryProfile entity.
func (tp *TelemetryProfile) QueryGroup() *TelemetryGroupResourceQuery {
	return NewTelemetryProfileClient(tp.config).QueryGroup(tp)
}

// Update returns a builder for updating this TelemetryProfile.
// Note that you need to call TelemetryProfile.Unwrap() before calling this method if this TelemetryProfile
// was returned from a transaction, and the transaction was committed or rolled back.
func (tp *TelemetryProfile) Update() *TelemetryProfileUpdateOne {
	return NewTelemetryProfileClient(tp.config).UpdateOne(tp)
}

// Unwrap unwraps the TelemetryProfile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tp *TelemetryProfile) Unwrap() *TelemetryProfile {
	_tx, ok := tp.config.driver.(*txDriver)
	if !ok {
		panic("ent: TelemetryProfile is not a transactional entity")
	}
	tp.config.driver = _tx.drv
	return tp
}

// String implements the fmt.Stringer.
func (tp *TelemetryProfile) String() string {
	var builder strings.Builder
	builder.WriteString("TelemetryProfile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tp.ID))
	builder.WriteString("resource_id=")
	builder.WriteString(tp.ResourceID)
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(fmt.Sprintf("%v", tp.Kind))
	builder.WriteString(", ")
	builder.WriteString("metrics_interval=")
	builder.WriteString(fmt.Sprintf("%v", tp.MetricsInterval))
	builder.WriteString(", ")
	builder.WriteString("log_level=")
	builder.WriteString(fmt.Sprintf("%v", tp.LogLevel))
	builder.WriteByte(')')
	return builder.String()
}

// TelemetryProfiles is a parsable slice of TelemetryProfile.
type TelemetryProfiles []*TelemetryProfile
