// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/endpointresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hostresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/predicate"
)

// EndpointResourceUpdate is the builder for updating EndpointResource entities.
type EndpointResourceUpdate struct {
	config
	hooks    []Hook
	mutation *EndpointResourceMutation
}

// Where appends a list predicates to the EndpointResourceUpdate builder.
func (eru *EndpointResourceUpdate) Where(ps ...predicate.EndpointResource) *EndpointResourceUpdate {
	eru.mutation.Where(ps...)
	return eru
}

// SetResourceID sets the "resource_id" field.
func (eru *EndpointResourceUpdate) SetResourceID(s string) *EndpointResourceUpdate {
	eru.mutation.SetResourceID(s)
	return eru
}

// SetKind sets the "kind" field.
func (eru *EndpointResourceUpdate) SetKind(s string) *EndpointResourceUpdate {
	eru.mutation.SetKind(s)
	return eru
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (eru *EndpointResourceUpdate) SetNillableKind(s *string) *EndpointResourceUpdate {
	if s != nil {
		eru.SetKind(*s)
	}
	return eru
}

// ClearKind clears the value of the "kind" field.
func (eru *EndpointResourceUpdate) ClearKind() *EndpointResourceUpdate {
	eru.mutation.ClearKind()
	return eru
}

// SetDescription sets the "description" field.
func (eru *EndpointResourceUpdate) SetDescription(s string) *EndpointResourceUpdate {
	eru.mutation.SetDescription(s)
	return eru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (eru *EndpointResourceUpdate) SetNillableDescription(s *string) *EndpointResourceUpdate {
	if s != nil {
		eru.SetDescription(*s)
	}
	return eru
}

// ClearDescription clears the value of the "description" field.
func (eru *EndpointResourceUpdate) ClearDescription() *EndpointResourceUpdate {
	eru.mutation.ClearDescription()
	return eru
}

// SetHostID sets the "host" edge to the HostResource entity by ID.
func (eru *EndpointResourceUpdate) SetHostID(id int) *EndpointResourceUpdate {
	eru.mutation.SetHostID(id)
	return eru
}

// SetNillableHostID sets the "host" edge to the HostResource entity by ID if the given value is not nil.
func (eru *EndpointResourceUpdate) SetNillableHostID(id *int) *EndpointResourceUpdate {
	if id != nil {
		eru = eru.SetHostID(*id)
	}
	return eru
}

// SetHost sets the "host" edge to the HostResource entity.
func (eru *EndpointResourceUpdate) SetHost(h *HostResource) *EndpointResourceUpdate {
	return eru.SetHostID(h.ID)
}

// Mutation returns the EndpointResourceMutation object of the builder.
func (eru *EndpointResourceUpdate) Mutation() *EndpointResourceMutation {
	return eru.mutation
}

// ClearHost clears the "host" edge to the HostResource entity.
func (eru *EndpointResourceUpdate) ClearHost() *EndpointResourceUpdate {
	eru.mutation.ClearHost()
	return eru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eru *EndpointResourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, EndpointResourceMutation](ctx, eru.sqlSave, eru.mutation, eru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eru *EndpointResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := eru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eru *EndpointResourceUpdate) Exec(ctx context.Context) error {
	_, err := eru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eru *EndpointResourceUpdate) ExecX(ctx context.Context) {
	if err := eru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eru *EndpointResourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(endpointresource.Table, endpointresource.Columns, sqlgraph.NewFieldSpec(endpointresource.FieldID, field.TypeInt))
	if ps := eru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eru.mutation.ResourceID(); ok {
		_spec.SetField(endpointresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := eru.mutation.Kind(); ok {
		_spec.SetField(endpointresource.FieldKind, field.TypeString, value)
	}
	if eru.mutation.KindCleared() {
		_spec.ClearField(endpointresource.FieldKind, field.TypeString)
	}
	if value, ok := eru.mutation.Description(); ok {
		_spec.SetField(endpointresource.FieldDescription, field.TypeString, value)
	}
	if eru.mutation.DescriptionCleared() {
		_spec.ClearField(endpointresource.FieldDescription, field.TypeString)
	}
	if eru.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   endpointresource.HostTable,
			Columns: []string{endpointresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eru.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   endpointresource.HostTable,
			Columns: []string{endpointresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{endpointresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eru.mutation.done = true
	return n, nil
}

// EndpointResourceUpdateOne is the builder for updating a single EndpointResource entity.
type EndpointResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EndpointResourceMutation
}

// SetResourceID sets the "resource_id" field.
func (eruo *EndpointResourceUpdateOne) SetResourceID(s string) *EndpointResourceUpdateOne {
	eruo.mutation.SetResourceID(s)
	return eruo
}

// SetKind sets the "kind" field.
func (eruo *EndpointResourceUpdateOne) SetKind(s string) *EndpointResourceUpdateOne {
	eruo.mutation.SetKind(s)
	return eruo
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (eruo *EndpointResourceUpdateOne) SetNillableKind(s *string) *EndpointResourceUpdateOne {
	if s != nil {
		eruo.SetKind(*s)
	}
	return eruo
}

// ClearKind clears the value of the "kind" field.
func (eruo *EndpointResourceUpdateOne) ClearKind() *EndpointResourceUpdateOne {
	eruo.mutation.ClearKind()
	return eruo
}

// SetDescription sets the "description" field.
func (eruo *EndpointResourceUpdateOne) SetDescription(s string) *EndpointResourceUpdateOne {
	eruo.mutation.SetDescription(s)
	return eruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (eruo *EndpointResourceUpdateOne) SetNillableDescription(s *string) *EndpointResourceUpdateOne {
	if s != nil {
		eruo.SetDescription(*s)
	}
	return eruo
}

// ClearDescription clears the value of the "description" field.
func (eruo *EndpointResourceUpdateOne) ClearDescription() *EndpointResourceUpdateOne {
	eruo.mutation.ClearDescription()
	return eruo
}

// SetHostID sets the "host" edge to the HostResource entity by ID.
func (eruo *EndpointResourceUpdateOne) SetHostID(id int) *EndpointResourceUpdateOne {
	eruo.mutation.SetHostID(id)
	return eruo
}

// SetNillableHostID sets the "host" edge to the HostResource entity by ID if the given value is not nil.
func (eruo *EndpointResourceUpdateOne) SetNillableHostID(id *int) *EndpointResourceUpdateOne {
	if id != nil {
		eruo = eruo.SetHostID(*id)
	}
	return eruo
}

// SetHost sets the "host" edge to the HostResource entity.
func (eruo *EndpointResourceUpdateOne) SetHost(h *HostResource) *EndpointResourceUpdateOne {
	return eruo.SetHostID(h.ID)
}

// Mutation returns the EndpointResourceMutation object of the builder.
func (eruo *EndpointResourceUpdateOne) Mutation() *EndpointResourceMutation {
	return eruo.mutation
}

// ClearHost clears the "host" edge to the HostResource entity.
func (eruo *EndpointResourceUpdateOne) ClearHost() *EndpointResourceUpdateOne {
	eruo.mutation.ClearHost()
	return eruo
}

// Where appends a list predicates to the EndpointResourceUpdate builder.
func (eruo *EndpointResourceUpdateOne) Where(ps ...predicate.EndpointResource) *EndpointResourceUpdateOne {
	eruo.mutation.Where(ps...)
	return eruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eruo *EndpointResourceUpdateOne) Select(field string, fields ...string) *EndpointResourceUpdateOne {
	eruo.fields = append([]string{field}, fields...)
	return eruo
}

// Save executes the query and returns the updated EndpointResource entity.
func (eruo *EndpointResourceUpdateOne) Save(ctx context.Context) (*EndpointResource, error) {
	return withHooks[*EndpointResource, EndpointResourceMutation](ctx, eruo.sqlSave, eruo.mutation, eruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eruo *EndpointResourceUpdateOne) SaveX(ctx context.Context) *EndpointResource {
	node, err := eruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eruo *EndpointResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := eruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eruo *EndpointResourceUpdateOne) ExecX(ctx context.Context) {
	if err := eruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eruo *EndpointResourceUpdateOne) sqlSave(ctx context.Context) (_node *EndpointResource, err error) {
	_spec := sqlgraph.NewUpdateSpec(endpointresource.Table, endpointresource.Columns, sqlgraph.NewFieldSpec(endpointresource.FieldID, field.TypeInt))
	id, ok := eruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EndpointResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, endpointresource.FieldID)
		for _, f := range fields {
			if !endpointresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != endpointresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eruo.mutation.ResourceID(); ok {
		_spec.SetField(endpointresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := eruo.mutation.Kind(); ok {
		_spec.SetField(endpointresource.FieldKind, field.TypeString, value)
	}
	if eruo.mutation.KindCleared() {
		_spec.ClearField(endpointresource.FieldKind, field.TypeString)
	}
	if value, ok := eruo.mutation.Description(); ok {
		_spec.SetField(endpointresource.FieldDescription, field.TypeString, value)
	}
	if eruo.mutation.DescriptionCleared() {
		_spec.ClearField(endpointresource.FieldDescription, field.TypeString)
	}
	if eruo.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   endpointresource.HostTable,
			Columns: []string{endpointresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eruo.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   endpointresource.HostTable,
			Columns: []string{endpointresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EndpointResource{config: eruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{endpointresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eruo.mutation.done = true
	return _node, nil
}
