// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hostresource"
	"github.com/intel-innersource/frameworks.edge.one-intel-edge.maestro-infra.services.inventory/internal/ent/hostusbresource"
)

// HostusbResource is the model entity for the HostusbResource schema.
type HostusbResource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ResourceID holds the value of the "resource_id" field.
	ResourceID string `json:"resource_id,omitempty"`
	// Kind holds the value of the "kind" field.
	Kind string `json:"kind,omitempty"`
	// OwnerID holds the value of the "owner_id" field.
	OwnerID string `json:"owner_id,omitempty"`
	// Idvendor holds the value of the "idvendor" field.
	Idvendor string `json:"idvendor,omitempty"`
	// Idproduct holds the value of the "idproduct" field.
	Idproduct string `json:"idproduct,omitempty"`
	// Bus holds the value of the "bus" field.
	Bus uint32 `json:"bus,omitempty"`
	// Addr holds the value of the "addr" field.
	Addr uint32 `json:"addr,omitempty"`
	// Class holds the value of the "class" field.
	Class string `json:"class,omitempty"`
	// Serial holds the value of the "serial" field.
	Serial string `json:"serial,omitempty"`
	// DeviceName holds the value of the "device_name" field.
	DeviceName string `json:"device_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HostusbResourceQuery when eager-loading is set.
	Edges                 HostusbResourceEdges `json:"edges"`
	hostusb_resource_host *int
	selectValues          sql.SelectValues
}

// HostusbResourceEdges holds the relations/edges for other nodes in the graph.
type HostusbResourceEdges struct {
	// Host holds the value of the host edge.
	Host *HostResource `json:"host,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// HostOrErr returns the Host value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HostusbResourceEdges) HostOrErr() (*HostResource, error) {
	if e.loadedTypes[0] {
		if e.Host == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: hostresource.Label}
		}
		return e.Host, nil
	}
	return nil, &NotLoadedError{edge: "host"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HostusbResource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hostusbresource.FieldID, hostusbresource.FieldBus, hostusbresource.FieldAddr:
			values[i] = new(sql.NullInt64)
		case hostusbresource.FieldResourceID, hostusbresource.FieldKind, hostusbresource.FieldOwnerID, hostusbresource.FieldIdvendor, hostusbresource.FieldIdproduct, hostusbresource.FieldClass, hostusbresource.FieldSerial, hostusbresource.FieldDeviceName:
			values[i] = new(sql.NullString)
		case hostusbresource.ForeignKeys[0]: // hostusb_resource_host
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HostusbResource fields.
func (hr *HostusbResource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hostusbresource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			hr.ID = int(value.Int64)
		case hostusbresource.FieldResourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				hr.ResourceID = value.String
			}
		case hostusbresource.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				hr.Kind = value.String
			}
		case hostusbresource.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				hr.OwnerID = value.String
			}
		case hostusbresource.FieldIdvendor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field idvendor", values[i])
			} else if value.Valid {
				hr.Idvendor = value.String
			}
		case hostusbresource.FieldIdproduct:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field idproduct", values[i])
			} else if value.Valid {
				hr.Idproduct = value.String
			}
		case hostusbresource.FieldBus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bus", values[i])
			} else if value.Valid {
				hr.Bus = uint32(value.Int64)
			}
		case hostusbresource.FieldAddr:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field addr", values[i])
			} else if value.Valid {
				hr.Addr = uint32(value.Int64)
			}
		case hostusbresource.FieldClass:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field class", values[i])
			} else if value.Valid {
				hr.Class = value.String
			}
		case hostusbresource.FieldSerial:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field serial", values[i])
			} else if value.Valid {
				hr.Serial = value.String
			}
		case hostusbresource.FieldDeviceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_name", values[i])
			} else if value.Valid {
				hr.DeviceName = value.String
			}
		case hostusbresource.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field hostusb_resource_host", value)
			} else if value.Valid {
				hr.hostusb_resource_host = new(int)
				*hr.hostusb_resource_host = int(value.Int64)
			}
		default:
			hr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HostusbResource.
// This includes values selected through modifiers, order, etc.
func (hr *HostusbResource) Value(name string) (ent.Value, error) {
	return hr.selectValues.Get(name)
}

// QueryHost queries the "host" edge of the HostusbResource entity.
func (hr *HostusbResource) QueryHost() *HostResourceQuery {
	return NewHostusbResourceClient(hr.config).QueryHost(hr)
}

// Update returns a builder for updating this HostusbResource.
// Note that you need to call HostusbResource.Unwrap() before calling this method if this HostusbResource
// was returned from a transaction, and the transaction was committed or rolled back.
func (hr *HostusbResource) Update() *HostusbResourceUpdateOne {
	return NewHostusbResourceClient(hr.config).UpdateOne(hr)
}

// Unwrap unwraps the HostusbResource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hr *HostusbResource) Unwrap() *HostusbResource {
	_tx, ok := hr.config.driver.(*txDriver)
	if !ok {
		panic("ent: HostusbResource is not a transactional entity")
	}
	hr.config.driver = _tx.drv
	return hr
}

// String implements the fmt.Stringer.
func (hr *HostusbResource) String() string {
	var builder strings.Builder
	builder.WriteString("HostusbResource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hr.ID))
	builder.WriteString("resource_id=")
	builder.WriteString(hr.ResourceID)
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(hr.Kind)
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(hr.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("idvendor=")
	builder.WriteString(hr.Idvendor)
	builder.WriteString(", ")
	builder.WriteString("idproduct=")
	builder.WriteString(hr.Idproduct)
	builder.WriteString(", ")
	builder.WriteString("bus=")
	builder.WriteString(fmt.Sprintf("%v", hr.Bus))
	builder.WriteString(", ")
	builder.WriteString("addr=")
	builder.WriteString(fmt.Sprintf("%v", hr.Addr))
	builder.WriteString(", ")
	builder.WriteString("class=")
	builder.WriteString(hr.Class)
	builder.WriteString(", ")
	builder.WriteString("serial=")
	builder.WriteString(hr.Serial)
	builder.WriteString(", ")
	builder.WriteString("device_name=")
	builder.WriteString(hr.DeviceName)
	builder.WriteByte(')')
	return builder.String()
}

// HostusbResources is a parsable slice of HostusbResource.
type HostusbResources []*HostusbResource
