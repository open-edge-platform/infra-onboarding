# SPDX-FileCopyrightText: (C) 2023 Intel Corporation
# SPDX-License-Identifier: LicenseRef-Intel
VERSION 0.7

LOCALLY
ARG http_proxy=$(echo $http_proxy)
ARG https_proxy=$(echo $https_proxy)
ARG no_proxy=$(echo $no_proxy)
ARG HTTP_PROXY=$(echo $HTTP_PROXY)
ARG HTTPS_PROXY=$(echo $HTTPS_PROXY)
ARG NO_PROXY=$(echo $NO_PROXY)

FROM golang:1.20.2-alpine3.17
ENV http_proxy=$http_proxy
ENV https_proxy=$https_proxy
ENV no_proxy=$no_proxy
ENV HTTP_PROXY=$HTTP_PROXY
ENV HTTPS_PROXY=$HTTPS_PROXY
ENV NO_PROXY=$NO_PROXY

ARG --global registry=amr-registry.caas.intel.com
ARG --global repository=one-intel-edge/maestro-i
ARG --global image_name=onboardingmgr
ARG --global tag=latest

all:
    BUILD +build-onboarding-stack

build-onboarding-stack:
    BUILD +build-onboardingmgr
    BUILD +docker-onboardingmgr
    BUILD +helm-onboardingmgr
    BUILD +build-onboardingcli
    BUILD +build-pdctl

build-onboardingmgr:
    ARG version='0.0.0-unknown'
    WORKDIR /work
    COPY . .
    RUN --mount=type=cache,target=/root/.cache/go-build --ssh CGO_ENABLED=0 GOARCH=amd64 GOOS=linux \
        go build -trimpath -o build/onboardingmgr \
            -ldflags "-s -w -extldflags '-static' -X main.Version=$version" \
            ./cmd/onboardingmgr
    SAVE ARTIFACT build/onboardingmgr

docker-onboardingmgr:
    FROM scratch
    ARG version='0.0.0-unknown'
    COPY (+build-onboardingmgr/onboardingmgr --version=$version) .
    ENTRYPOINT ["/onboardingmgr"]
    SAVE IMAGE --push $registry/$repository/$image_name:$tag

helm-onboardingmgr:
    FROM alpine/helm:3.12.3
    COPY deployments/helm/onboarding-manager /onboardingmgr
    RUN helm package /onboardingmgr
    SAVE ARTIFACT onboarding*.tgz AS LOCAL ./build/
	IF [ "$tag" != "ci" ]
		RUN --push --secret HARBOR_USER --secret HARBOR_PASSWD \
		helm registry login --insecure -u $HARBOR_USER -p $HARBOR_PASSWD $registry \
		&& helm push --insecure-skip-tls-verify onboardingmgr-*.tgz oci://$registry/$repository/$image_name:$tag
	END

build-onboardingcli:
    ARG version='0.0.0-unknown'
    WORKDIR /work
    COPY . .
    RUN --mount=type=cache,target=/root/.cache/go-build --ssh CGO_ENABLED=0 GOARCH=amd64 GOOS=linux \
        go build -trimpath -o build/onboardingcli \
            -ldflags "-s -w -extldflags '-static' -X main.Version=$version" \
            ./internal/onboardingmgr/test/client/client_eb.go
    SAVE ARTIFACT build/onboardingcli AS LOCAL build/onboardingcli

build-pdctl:
    ARG version='0.0.0-unknown'
    WORKDIR /work
    COPY . .
    RUN --mount=type=cache,target=/root/.cache/go-build CGO_ENABLED=0 GOARCH=amd64 GOOS=linux \
        go build -trimpath -o build/exe \
            -ldflags "-s -w -extldflags '-static' -X main.Version=$version" \
            ./cmd/pdctl
    SAVE ARTIFACT build/exe AS LOCAL ./build/pdctl
