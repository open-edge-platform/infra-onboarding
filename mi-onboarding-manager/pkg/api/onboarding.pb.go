// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: onboarding.proto

package onboardingmgr

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ArtifactData_ArtifactCategory int32

const (
	ArtifactData_DEFAULT     ArtifactData_ArtifactCategory = 0 // Setting default artifact type getting all artifact
	ArtifactData_BIOS        ArtifactData_ArtifactCategory = 1 // BIOS Artifact
	ArtifactData_OS          ArtifactData_ArtifactCategory = 2 // OS Artifact
	ArtifactData_APPLICATION ArtifactData_ArtifactCategory = 3 // Application Artifact
	ArtifactData_IMAGE       ArtifactData_ArtifactCategory = 4 // Container image Artifact
	ArtifactData_PLATFORM    ArtifactData_ArtifactCategory = 5 // Type of platform of the artifact
)

// Enum value maps for ArtifactData_ArtifactCategory.
var (
	ArtifactData_ArtifactCategory_name = map[int32]string{
		0: "DEFAULT",
		1: "BIOS",
		2: "OS",
		3: "APPLICATION",
		4: "IMAGE",
		5: "PLATFORM",
	}
	ArtifactData_ArtifactCategory_value = map[string]int32{
		"DEFAULT":     0,
		"BIOS":        1,
		"OS":          2,
		"APPLICATION": 3,
		"IMAGE":       4,
		"PLATFORM":    5,
	}
)

func (x ArtifactData_ArtifactCategory) Enum() *ArtifactData_ArtifactCategory {
	p := new(ArtifactData_ArtifactCategory)
	*p = x
	return p
}

func (x ArtifactData_ArtifactCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArtifactData_ArtifactCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_onboarding_proto_enumTypes[0].Descriptor()
}

func (ArtifactData_ArtifactCategory) Type() protoreflect.EnumType {
	return &file_onboarding_proto_enumTypes[0]
}

func (x ArtifactData_ArtifactCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArtifactData_ArtifactCategory.Descriptor instead.
func (ArtifactData_ArtifactCategory) EnumDescriptor() ([]byte, []int) {
	return file_onboarding_proto_rawDescGZIP(), []int{2, 0}
}

type ArtifactData_Response int32

const (
	ArtifactData_SUCCESS ArtifactData_Response = 0 // Success
	ArtifactData_FAILURE ArtifactData_Response = 1 // Failure
)

// Enum value maps for ArtifactData_Response.
var (
	ArtifactData_Response_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
	}
	ArtifactData_Response_value = map[string]int32{
		"SUCCESS": 0,
		"FAILURE": 1,
	}
)

func (x ArtifactData_Response) Enum() *ArtifactData_Response {
	p := new(ArtifactData_Response)
	*p = x
	return p
}

func (x ArtifactData_Response) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArtifactData_Response) Descriptor() protoreflect.EnumDescriptor {
	return file_onboarding_proto_enumTypes[1].Descriptor()
}

func (ArtifactData_Response) Type() protoreflect.EnumType {
	return &file_onboarding_proto_enumTypes[1]
}

func (x ArtifactData_Response) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArtifactData_Response.Descriptor instead.
func (ArtifactData_Response) EnumDescriptor() ([]byte, []int) {
	return file_onboarding_proto_rawDescGZIP(), []int{2, 1}
}

type NodeData_Response int32

const (
	NodeData_SUCCESS NodeData_Response = 0 // Success
	NodeData_FAILURE NodeData_Response = 1 // Failure
)

// Enum value maps for NodeData_Response.
var (
	NodeData_Response_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
	}
	NodeData_Response_value = map[string]int32{
		"SUCCESS": 0,
		"FAILURE": 1,
	}
)

func (x NodeData_Response) Enum() *NodeData_Response {
	p := new(NodeData_Response)
	*p = x
	return p
}

func (x NodeData_Response) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeData_Response) Descriptor() protoreflect.EnumDescriptor {
	return file_onboarding_proto_enumTypes[2].Descriptor()
}

func (NodeData_Response) Type() protoreflect.EnumType {
	return &file_onboarding_proto_enumTypes[2]
}

func (x NodeData_Response) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeData_Response.Descriptor instead.
func (NodeData_Response) EnumDescriptor() ([]byte, []int) {
	return file_onboarding_proto_rawDescGZIP(), []int{6, 0}
}

type ArtifactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload []*ArtifactData `protobuf:"bytes,1,rep,name=payload,proto3" json:"payload,omitempty"` // Payload data represented as an array or list
}

func (x *ArtifactRequest) Reset() {
	*x = ArtifactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onboarding_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactRequest) ProtoMessage() {}

func (x *ArtifactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_onboarding_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactRequest.ProtoReflect.Descriptor instead.
func (*ArtifactRequest) Descriptor() ([]byte, []int) {
	return file_onboarding_proto_rawDescGZIP(), []int{0}
}

func (x *ArtifactRequest) GetPayload() []*ArtifactData {
	if x != nil {
		return x.Payload
	}
	return nil
}

type ArtifactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload []*ArtifactData `protobuf:"bytes,1,rep,name=payload,proto3" json:"payload,omitempty"` // Payload data {will be same as request for CREATE/DELETE}.
}

func (x *ArtifactResponse) Reset() {
	*x = ArtifactResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onboarding_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactResponse) ProtoMessage() {}

func (x *ArtifactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_onboarding_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactResponse.ProtoReflect.Descriptor instead.
func (*ArtifactResponse) Descriptor() ([]byte, []int) {
	return file_onboarding_proto_rawDescGZIP(), []int{1}
}

func (x *ArtifactResponse) GetPayload() []*ArtifactData {
	if x != nil {
		return x.Payload
	}
	return nil
}

type ArtifactData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                           // Name of the artifact
	Version      string                        `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`                                                     // Version of the artifact
	Platform     string                        `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`                                                   // Platform of the artifact
	Category     ArtifactData_ArtifactCategory `protobuf:"varint,4,opt,name=category,proto3,enum=onboardingmgr.ArtifactData_ArtifactCategory" json:"category,omitempty"` // Category of the artifact ex:BIOS,OS etc.,
	Description  string                        `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`                                             // Description of the artifact
	Details      *Supplier                     `protobuf:"bytes,6,opt,name=details,proto3" json:"details,omitempty"`                                                     // Supplier details
	PackageUrl   string                        `protobuf:"bytes,7,opt,name=package_url,json=packageUrl,proto3" json:"package_url,omitempty"`                             // URL of the package
	Author       string                        `protobuf:"bytes,8,opt,name=author,proto3" json:"author,omitempty"`                                                       // Author of package
	State        bool                          `protobuf:"varint,9,opt,name=state,proto3" json:"state,omitempty"`                                                        // state
	License      string                        `protobuf:"bytes,10,opt,name=license,proto3" json:"license,omitempty"`                                                    // License information
	Vendor       string                        `protobuf:"bytes,11,opt,name=vendor,proto3" json:"vendor,omitempty"`                                                      // vendor details
	Manufacturer string                        `protobuf:"bytes,12,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`                                          // manufacter details
	ReleaseData  string                        `protobuf:"bytes,13,opt,name=release_data,json=releaseData,proto3" json:"release_data,omitempty"`                         // Release data
	ArtifactId   string                        `protobuf:"bytes,14,opt,name=artifact_id,json=artifactId,proto3" json:"artifact_id,omitempty"`                            // Artifact ID generated while creating an artifact. This can be zero if not available during CreateArtifact Call or Batch actions like DeleteAll.
	Result       ArtifactData_Response         `protobuf:"varint,15,opt,name=result,proto3,enum=onboardingmgr.ArtifactData_Response" json:"result,omitempty"`
}

func (x *ArtifactData) Reset() {
	*x = ArtifactData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onboarding_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactData) ProtoMessage() {}

func (x *ArtifactData) ProtoReflect() protoreflect.Message {
	mi := &file_onboarding_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactData.ProtoReflect.Descriptor instead.
func (*ArtifactData) Descriptor() ([]byte, []int) {
	return file_onboarding_proto_rawDescGZIP(), []int{2}
}

func (x *ArtifactData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ArtifactData) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ArtifactData) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *ArtifactData) GetCategory() ArtifactData_ArtifactCategory {
	if x != nil {
		return x.Category
	}
	return ArtifactData_DEFAULT
}

func (x *ArtifactData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ArtifactData) GetDetails() *Supplier {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ArtifactData) GetPackageUrl() string {
	if x != nil {
		return x.PackageUrl
	}
	return ""
}

func (x *ArtifactData) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *ArtifactData) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

func (x *ArtifactData) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

func (x *ArtifactData) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ArtifactData) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *ArtifactData) GetReleaseData() string {
	if x != nil {
		return x.ReleaseData
	}
	return ""
}

func (x *ArtifactData) GetArtifactId() string {
	if x != nil {
		return x.ArtifactId
	}
	return ""
}

func (x *ArtifactData) GetResult() ArtifactData_Response {
	if x != nil {
		return x.Result
	}
	return ArtifactData_SUCCESS
}

type Supplier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`       // Name of supplier
	Url     string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`         // URL of supplier
	Contact string `protobuf:"bytes,3,opt,name=contact,proto3" json:"contact,omitempty"` // Contact details of supplier
}

func (x *Supplier) Reset() {
	*x = Supplier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onboarding_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Supplier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Supplier) ProtoMessage() {}

func (x *Supplier) ProtoReflect() protoreflect.Message {
	mi := &file_onboarding_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Supplier.ProtoReflect.Descriptor instead.
func (*Supplier) Descriptor() ([]byte, []int) {
	return file_onboarding_proto_rawDescGZIP(), []int{3}
}

func (x *Supplier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Supplier) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Supplier) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

type NodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload []*NodeData `protobuf:"bytes,1,rep,name=payload,proto3" json:"payload,omitempty"` // Payload data
}

func (x *NodeRequest) Reset() {
	*x = NodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onboarding_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeRequest) ProtoMessage() {}

func (x *NodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_onboarding_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeRequest.ProtoReflect.Descriptor instead.
func (*NodeRequest) Descriptor() ([]byte, []int) {
	return file_onboarding_proto_rawDescGZIP(), []int{4}
}

func (x *NodeRequest) GetPayload() []*NodeData {
	if x != nil {
		return x.Payload
	}
	return nil
}

type NodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload []*NodeData `protobuf:"bytes,1,rep,name=payload,proto3" json:"payload,omitempty"` // Payload data
}

func (x *NodeResponse) Reset() {
	*x = NodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onboarding_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeResponse) ProtoMessage() {}

func (x *NodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_onboarding_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeResponse.ProtoReflect.Descriptor instead.
func (*NodeResponse) Descriptor() ([]byte, []int) {
	return file_onboarding_proto_rawDescGZIP(), []int{5}
}

func (x *NodeResponse) GetPayload() []*NodeData {
	if x != nil {
		return x.Payload
	}
	return nil
}

type NodeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HwId         string `protobuf:"bytes,1,opt,name=hw_id,json=hwId,proto3" json:"hw_id,omitempty"`                           // HW Node ID
	PlatformType string `protobuf:"bytes,2,opt,name=platform_type,json=platformType,proto3" json:"platform_type,omitempty"`   // Platform details of the node //EHL,ADL/RPL/etc.,
	FwArtifactId string `protobuf:"bytes,3,opt,name=fw_artifact_id,json=fwArtifactId,proto3" json:"fw_artifact_id,omitempty"` // Node FW Artifact ID to be stored here.This ID is retured to GetArtifacts{id}
	OsArtifactId string `protobuf:"bytes,4,opt,name=os_artifact_id,json=osArtifactId,proto3" json:"os_artifact_id,omitempty"` // Node OS Artifact ID to be stored here.This ID is retured to GetArtifacts{id}
	// TODO: a new member for Image artifact has to be added here, for now, app_artifact_id is used for image artifact
	AppArtifactId    string            `protobuf:"bytes,5,opt,name=app_artifact_id,json=appArtifactId,proto3" json:"app_artifact_id,omitempty"`         // Node App Artifact ID to be stored here.This ID is retured to GetArtifacts{id}
	PlatArtifactId   string            `protobuf:"bytes,6,opt,name=plat_artifact_id,json=platArtifactId,proto3" json:"plat_artifact_id,omitempty"`      // Node Platform Artifact ID to be stored here.This ID is retured to GetArtifacts{id}
	DeviceType       string            `protobuf:"bytes,7,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`                    // Node can be physical or virtual or container. If ID is not given, then all nodes FW artifacts wil be returned
	DeviceInfoAgent  string            `protobuf:"bytes,8,opt,name=device_info_agent,json=deviceInfoAgent,proto3" json:"device_info_agent,omitempty"`   // Inventory Agent update SBOM & HBOM details during bootup.
	DeviceStatus     string            `protobuf:"bytes,9,opt,name=device_status,json=deviceStatus,proto3" json:"device_status,omitempty"`              // Only Inventory Agent Update READY Status to Inventory Manager. Other status by Admin or other managers UNCLAIMED,CLAIMED,READY,MAINTENANCE,ERROR,DECOMMISSIONED
	UpdateStatus     string            `protobuf:"bytes,10,opt,name=update_status,json=updateStatus,proto3" json:"update_status,omitempty"`             // Update Manager Update the Node update status.
	UpdateAvailable  string            `protobuf:"bytes,11,opt,name=update_available,json=updateAvailable,proto3" json:"update_available,omitempty"`    // Update manager updates if update is available.
	OnboardingStatus string            `protobuf:"bytes,12,opt,name=onboarding_status,json=onboardingStatus,proto3" json:"onboarding_status,omitempty"` // Onboarding Status
	NodeId           string            `protobuf:"bytes,13,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`                               // Generated Node ID. This field can be left empty for Create or DeleteAll
	Result           NodeData_Response `protobuf:"varint,14,opt,name=result,proto3,enum=onboardingmgr.NodeData_Response" json:"result,omitempty"`       //Result
	Hwdata           []*HwData         `protobuf:"bytes,15,rep,name=hwdata,proto3" json:"hwdata,omitempty"`
}

func (x *NodeData) Reset() {
	*x = NodeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onboarding_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeData) ProtoMessage() {}

func (x *NodeData) ProtoReflect() protoreflect.Message {
	mi := &file_onboarding_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeData.ProtoReflect.Descriptor instead.
func (*NodeData) Descriptor() ([]byte, []int) {
	return file_onboarding_proto_rawDescGZIP(), []int{6}
}

func (x *NodeData) GetHwId() string {
	if x != nil {
		return x.HwId
	}
	return ""
}

func (x *NodeData) GetPlatformType() string {
	if x != nil {
		return x.PlatformType
	}
	return ""
}

func (x *NodeData) GetFwArtifactId() string {
	if x != nil {
		return x.FwArtifactId
	}
	return ""
}

func (x *NodeData) GetOsArtifactId() string {
	if x != nil {
		return x.OsArtifactId
	}
	return ""
}

func (x *NodeData) GetAppArtifactId() string {
	if x != nil {
		return x.AppArtifactId
	}
	return ""
}

func (x *NodeData) GetPlatArtifactId() string {
	if x != nil {
		return x.PlatArtifactId
	}
	return ""
}

func (x *NodeData) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *NodeData) GetDeviceInfoAgent() string {
	if x != nil {
		return x.DeviceInfoAgent
	}
	return ""
}

func (x *NodeData) GetDeviceStatus() string {
	if x != nil {
		return x.DeviceStatus
	}
	return ""
}

func (x *NodeData) GetUpdateStatus() string {
	if x != nil {
		return x.UpdateStatus
	}
	return ""
}

func (x *NodeData) GetUpdateAvailable() string {
	if x != nil {
		return x.UpdateAvailable
	}
	return ""
}

func (x *NodeData) GetOnboardingStatus() string {
	if x != nil {
		return x.OnboardingStatus
	}
	return ""
}

func (x *NodeData) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *NodeData) GetResult() NodeData_Response {
	if x != nil {
		return x.Result
	}
	return NodeData_SUCCESS
}

func (x *NodeData) GetHwdata() []*HwData {
	if x != nil {
		return x.Hwdata
	}
	return nil
}

type HwData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HwId           string          `protobuf:"bytes,1,opt,name=hw_id,json=hwId,proto3" json:"hw_id,omitempty"`                            // HW ID of Node
	MacId          string          `protobuf:"bytes,2,opt,name=mac_id,json=macId,proto3" json:"mac_id,omitempty"`                         // Mac ID of Node
	SutIp          string          `protobuf:"bytes,3,opt,name=sut_ip,json=sutIp,proto3" json:"sut_ip,omitempty"`                         // sutip
	CusParams      *CustomerParams `protobuf:"bytes,4,opt,name=cus_params,json=cusParams,proto3" json:"cus_params,omitempty"`             // Azure Specific Parameters
	DiskPartition  string          `protobuf:"bytes,5,opt,name=disk_partition,json=diskPartition,proto3" json:"disk_partition,omitempty"` // Disk Partition Details
	PlatformType   string          `protobuf:"bytes,6,opt,name=platform_type,json=platformType,proto3" json:"platform_type,omitempty"`    // Device platform type
	Serialnum      string          `protobuf:"bytes,7,opt,name=serialnum,proto3" json:"serialnum,omitempty"`
	Uuid           string          `protobuf:"bytes,8,opt,name=uuid,proto3" json:"uuid,omitempty"`
	BmcIp          string          `protobuf:"bytes,9,opt,name=bmc_ip,json=bmcIp,proto3" json:"bmc_ip,omitempty"`
	BmcInterface   bool            `protobuf:"varint,10,opt,name=bmc_interface,json=bmcInterface,proto3" json:"bmc_interface,omitempty"`
	HostNicDevName string          `protobuf:"bytes,11,opt,name=host_nic_dev_name,json=hostNicDevName,proto3" json:"host_nic_dev_name,omitempty"`
}

func (x *HwData) Reset() {
	*x = HwData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onboarding_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HwData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwData) ProtoMessage() {}

func (x *HwData) ProtoReflect() protoreflect.Message {
	mi := &file_onboarding_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwData.ProtoReflect.Descriptor instead.
func (*HwData) Descriptor() ([]byte, []int) {
	return file_onboarding_proto_rawDescGZIP(), []int{7}
}

func (x *HwData) GetHwId() string {
	if x != nil {
		return x.HwId
	}
	return ""
}

func (x *HwData) GetMacId() string {
	if x != nil {
		return x.MacId
	}
	return ""
}

func (x *HwData) GetSutIp() string {
	if x != nil {
		return x.SutIp
	}
	return ""
}

func (x *HwData) GetCusParams() *CustomerParams {
	if x != nil {
		return x.CusParams
	}
	return nil
}

func (x *HwData) GetDiskPartition() string {
	if x != nil {
		return x.DiskPartition
	}
	return ""
}

func (x *HwData) GetPlatformType() string {
	if x != nil {
		return x.PlatformType
	}
	return ""
}

func (x *HwData) GetSerialnum() string {
	if x != nil {
		return x.Serialnum
	}
	return ""
}

func (x *HwData) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *HwData) GetBmcIp() string {
	if x != nil {
		return x.BmcIp
	}
	return ""
}

func (x *HwData) GetBmcInterface() bool {
	if x != nil {
		return x.BmcInterface
	}
	return false
}

func (x *HwData) GetHostNicDevName() string {
	if x != nil {
		return x.HostNicDevName
	}
	return ""
}

type Proxy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpProxy  string `protobuf:"bytes,1,opt,name=http_proxy,json=httpProxy,proto3" json:"http_proxy,omitempty"`    // http proxy
	HttpsProxy string `protobuf:"bytes,2,opt,name=https_proxy,json=httpsProxy,proto3" json:"https_proxy,omitempty"` // http proxy
	NoProxy    string `protobuf:"bytes,3,opt,name=no_proxy,json=noProxy,proto3" json:"no_proxy,omitempty"`          // http proxy
	SocksProxy string `protobuf:"bytes,4,opt,name=socks_proxy,json=socksProxy,proto3" json:"socks_proxy,omitempty"` // socks proxy
	RsyncProxy string `protobuf:"bytes,5,opt,name=rsync_proxy,json=rsyncProxy,proto3" json:"rsync_proxy,omitempty"` // rsync proxy
}

func (x *Proxy) Reset() {
	*x = Proxy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onboarding_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proxy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proxy) ProtoMessage() {}

func (x *Proxy) ProtoReflect() protoreflect.Message {
	mi := &file_onboarding_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proxy.ProtoReflect.Descriptor instead.
func (*Proxy) Descriptor() ([]byte, []int) {
	return file_onboarding_proto_rawDescGZIP(), []int{8}
}

func (x *Proxy) GetHttpProxy() string {
	if x != nil {
		return x.HttpProxy
	}
	return ""
}

func (x *Proxy) GetHttpsProxy() string {
	if x != nil {
		return x.HttpsProxy
	}
	return ""
}

func (x *Proxy) GetNoProxy() string {
	if x != nil {
		return x.NoProxy
	}
	return ""
}

func (x *Proxy) GetSocksProxy() string {
	if x != nil {
		return x.SocksProxy
	}
	return ""
}

func (x *Proxy) GetRsyncProxy() string {
	if x != nil {
		return x.RsyncProxy
	}
	return ""
}

type Ports struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvMgrPort  string `protobuf:"bytes,1,opt,name=inv_mgr_port,json=invMgrPort,proto3" json:"inv_mgr_port,omitempty"`    // inventory manager port
	UpMgrPort   string `protobuf:"bytes,2,opt,name=up_mgr_port,json=upMgrPort,proto3" json:"up_mgr_port,omitempty"`       // update manager port
	OobMgrPort  string `protobuf:"bytes,3,opt,name=oob_mgr_port,json=oobMgrPort,proto3" json:"oob_mgr_port,omitempty"`    // oob manager port
	TeleMgrPort string `protobuf:"bytes,4,opt,name=tele_mgr_port,json=teleMgrPort,proto3" json:"tele_mgr_port,omitempty"` // Telemetry manager port
}

func (x *Ports) Reset() {
	*x = Ports{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onboarding_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ports) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ports) ProtoMessage() {}

func (x *Ports) ProtoReflect() protoreflect.Message {
	mi := &file_onboarding_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ports.ProtoReflect.Descriptor instead.
func (*Ports) Descriptor() ([]byte, []int) {
	return file_onboarding_proto_rawDescGZIP(), []int{9}
}

func (x *Ports) GetInvMgrPort() string {
	if x != nil {
		return x.InvMgrPort
	}
	return ""
}

func (x *Ports) GetUpMgrPort() string {
	if x != nil {
		return x.UpMgrPort
	}
	return ""
}

func (x *Ports) GetOobMgrPort() string {
	if x != nil {
		return x.OobMgrPort
	}
	return ""
}

func (x *Ports) GetTeleMgrPort() string {
	if x != nil {
		return x.TeleMgrPort
	}
	return ""
}

type OnboardingParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PdIp           string `protobuf:"bytes,1,opt,name=pd_ip,json=pdIp,proto3" json:"pd_ip,omitempty"`                                 // Platform Director IP
	PdMac          string `protobuf:"bytes,2,opt,name=pd_mac,json=pdMac,proto3" json:"pd_mac,omitempty"`                              // Platform Director MAC
	LoadBalancerIp string `protobuf:"bytes,3,opt,name=load_balancer_ip,json=loadBalancerIp,proto3" json:"load_balancer_ip,omitempty"` // Load balancer IP
	DiskPartition  string `protobuf:"bytes,4,opt,name=disk_partition,json=diskPartition,proto3" json:"disk_partition,omitempty"`      // Disk Partition Details
	Proxy          *Proxy `protobuf:"bytes,5,opt,name=proxy,proto3" json:"proxy,omitempty"`                                           // Proxy Details
	Port           *Ports `protobuf:"bytes,6,opt,name=port,proto3" json:"port,omitempty"`                                             // Agent Port Details
	Env            string `protobuf:"bytes,7,opt,name=env,proto3" json:"env,omitempty"`                                               // System Environment variables
}

func (x *OnboardingParams) Reset() {
	*x = OnboardingParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onboarding_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnboardingParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardingParams) ProtoMessage() {}

func (x *OnboardingParams) ProtoReflect() protoreflect.Message {
	mi := &file_onboarding_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardingParams.ProtoReflect.Descriptor instead.
func (*OnboardingParams) Descriptor() ([]byte, []int) {
	return file_onboarding_proto_rawDescGZIP(), []int{10}
}

func (x *OnboardingParams) GetPdIp() string {
	if x != nil {
		return x.PdIp
	}
	return ""
}

func (x *OnboardingParams) GetPdMac() string {
	if x != nil {
		return x.PdMac
	}
	return ""
}

func (x *OnboardingParams) GetLoadBalancerIp() string {
	if x != nil {
		return x.LoadBalancerIp
	}
	return ""
}

func (x *OnboardingParams) GetDiskPartition() string {
	if x != nil {
		return x.DiskPartition
	}
	return ""
}

func (x *OnboardingParams) GetProxy() *Proxy {
	if x != nil {
		return x.Proxy
	}
	return nil
}

func (x *OnboardingParams) GetPort() *Ports {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *OnboardingParams) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

type CustomerParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DpsScopeId          string `protobuf:"bytes,5,opt,name=dps_scope_id,json=dpsScopeId,proto3" json:"dps_scope_id,omitempty"`                              // DPS Scope ID
	DpsRegistrationId   string `protobuf:"bytes,6,opt,name=dps_registration_id,json=dpsRegistrationId,proto3" json:"dps_registration_id,omitempty"`         // DPS registration ID
	DpsEnrollmentSymKey string `protobuf:"bytes,7,opt,name=dps_enrollment_sym_key,json=dpsEnrollmentSymKey,proto3" json:"dps_enrollment_sym_key,omitempty"` // DPS Enrollment Symetric Key
}

func (x *CustomerParams) Reset() {
	*x = CustomerParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onboarding_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerParams) ProtoMessage() {}

func (x *CustomerParams) ProtoReflect() protoreflect.Message {
	mi := &file_onboarding_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerParams.ProtoReflect.Descriptor instead.
func (*CustomerParams) Descriptor() ([]byte, []int) {
	return file_onboarding_proto_rawDescGZIP(), []int{11}
}

func (x *CustomerParams) GetDpsScopeId() string {
	if x != nil {
		return x.DpsScopeId
	}
	return ""
}

func (x *CustomerParams) GetDpsRegistrationId() string {
	if x != nil {
		return x.DpsRegistrationId
	}
	return ""
}

func (x *CustomerParams) GetDpsEnrollmentSymKey() string {
	if x != nil {
		return x.DpsEnrollmentSymKey
	}
	return ""
}

type OnboardingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArtifactData []*ArtifactData   `protobuf:"bytes,1,rep,name=artifactData,proto3" json:"artifactData,omitempty"`
	Hwdata       []*HwData         `protobuf:"bytes,2,rep,name=hwdata,proto3" json:"hwdata,omitempty"`
	CusParams    *CustomerParams   `protobuf:"bytes,3,opt,name=cusParams,proto3" json:"cusParams,omitempty"`
	OnbParams    *OnboardingParams `protobuf:"bytes,4,opt,name=OnbParams,proto3" json:"OnbParams,omitempty"`
}

func (x *OnboardingRequest) Reset() {
	*x = OnboardingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onboarding_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnboardingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardingRequest) ProtoMessage() {}

func (x *OnboardingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_onboarding_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardingRequest.ProtoReflect.Descriptor instead.
func (*OnboardingRequest) Descriptor() ([]byte, []int) {
	return file_onboarding_proto_rawDescGZIP(), []int{12}
}

func (x *OnboardingRequest) GetArtifactData() []*ArtifactData {
	if x != nil {
		return x.ArtifactData
	}
	return nil
}

func (x *OnboardingRequest) GetHwdata() []*HwData {
	if x != nil {
		return x.Hwdata
	}
	return nil
}

func (x *OnboardingRequest) GetCusParams() *CustomerParams {
	if x != nil {
		return x.CusParams
	}
	return nil
}

func (x *OnboardingRequest) GetOnbParams() *OnboardingParams {
	if x != nil {
		return x.OnbParams
	}
	return nil
}

type OnboardingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *OnboardingResponse) Reset() {
	*x = OnboardingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onboarding_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnboardingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardingResponse) ProtoMessage() {}

func (x *OnboardingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_onboarding_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardingResponse.ProtoReflect.Descriptor instead.
func (*OnboardingResponse) Descriptor() ([]byte, []int) {
	return file_onboarding_proto_rawDescGZIP(), []int{13}
}

func (x *OnboardingResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

var File_onboarding_proto protoreflect.FileDescriptor

var file_onboarding_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0d, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x67,
	0x72, 0x22, 0x48, 0x0a, 0x0f, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x6d, 0x67, 0x72, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x49, 0x0a, 0x10, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x35, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x67, 0x72,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xa1, 0x05, 0x0a, 0x0c, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x48, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x6d, 0x67, 0x72, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x67, 0x72, 0x2e, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x6e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x67, 0x72, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x5b, 0x0a, 0x10, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x44,
	0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x49, 0x4f, 0x53,
	0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x53, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x50,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x49,
	0x4d, 0x41, 0x47, 0x45, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f,
	0x52, 0x4d, 0x10, 0x05, 0x22, 0x24, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x22, 0x4a, 0x0a, 0x08, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22, 0x40, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x6d, 0x67, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x41, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x6e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x67, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xf9, 0x04, 0x0a, 0x08,
	0x4e, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x13, 0x0a, 0x05, 0x68, 0x77, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x77, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x77, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x77, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x73, 0x5f, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6f, 0x73, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x61, 0x70, 0x70, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f,
	0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x67, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x68, 0x77, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d,
	0x67, 0x72, 0x2e, 0x48, 0x77, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x68, 0x77, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x24, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x22, 0xee, 0x02, 0x0a, 0x06, 0x48, 0x77, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x13, 0x0a, 0x05, 0x68, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x77, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x63, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x73, 0x75, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x75, 0x74, 0x49, 0x70, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x75, 0x73, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x6e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x67, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x09, 0x63, 0x75, 0x73, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x73,
	0x6b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6d, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x62, 0x6d, 0x63, 0x49, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6d, 0x63, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x62, 0x6d, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x29, 0x0a,
	0x11, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x69, 0x63, 0x5f, 0x64, 0x65, 0x76, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x69,
	0x63, 0x44, 0x65, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x05, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x73, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x22,
	0x8f, 0x01, 0x0a, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6e, 0x76,
	0x5f, 0x6d, 0x67, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x76, 0x4d, 0x67, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x75,
	0x70, 0x5f, 0x6d, 0x67, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x70, 0x4d, 0x67, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6f,
	0x6f, 0x62, 0x5f, 0x6d, 0x67, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6f, 0x6f, 0x62, 0x4d, 0x67, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x22, 0x0a,
	0x0d, 0x74, 0x65, 0x6c, 0x65, 0x5f, 0x6d, 0x67, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x6c, 0x65, 0x4d, 0x67, 0x72, 0x50, 0x6f, 0x72,
	0x74, 0x22, 0xf7, 0x01, 0x0a, 0x10, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x70, 0x64, 0x5f, 0x69, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x64, 0x49, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x70,
	0x64, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x64, 0x4d,
	0x61, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f,
	0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x49, 0x70, 0x12, 0x25, 0x0a, 0x0e,
	0x64, 0x69, 0x73, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d,
	0x67, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12,
	0x28, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x67, 0x72, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x76,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x22, 0x97, 0x01, 0x0a, 0x0e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x20,
	0x0a, 0x0c, 0x64, 0x70, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x70, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x64, 0x70, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64,
	0x70, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x33, 0x0a, 0x16, 0x64, 0x70, 0x73, 0x5f, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x64, 0x70, 0x73, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x79, 0x6d, 0x4b, 0x65, 0x79, 0x22, 0xff, 0x01, 0x0a, 0x11, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x67,
	0x72, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x06,
	0x68, 0x77, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f,
	0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x67, 0x72, 0x2e, 0x48, 0x77, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x06, 0x68, 0x77, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x09, 0x63,
	0x75, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x67, 0x72, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x09, 0x63,
	0x75, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x4f, 0x6e, 0x62, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x67, 0x72, 0x2e, 0x4f, 0x6e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x09, 0x4f, 0x6e,
	0x62, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x2c, 0x0a, 0x12, 0x4f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x95, 0x05, 0x0a, 0x15, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x42, 0x12,
	0x54, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x12, 0x1e, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d,
	0x67, 0x72, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d,
	0x67, 0x72, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x1e, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x6d, 0x67, 0x72, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x6d, 0x67, 0x72, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x42, 0x79, 0x49, 0x64, 0x12,
	0x1e, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x67, 0x72, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x67, 0x72, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x54, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x1e, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x6d, 0x67, 0x72, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x6d, 0x67, 0x72, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x6d, 0x67, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x6d, 0x67, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x45, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1a,
	0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x67, 0x72, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x67, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x67, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x6d, 0x67, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x1a, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d,
	0x67, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x67, 0x72, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x66, 0x0a,
	0x0c, 0x4f, 0x6e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x42, 0x12, 0x56, 0x0a,
	0x0f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x20, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x67, 0x72,
	0x2e, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d,
	0x67, 0x72, 0x2e, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xa2, 0x01, 0x5a, 0x9f, 0x01, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2d, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x6f, 0x6e, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65,
	0x6c, 0x2d, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x6d, 0x61, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x2d, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x2d, 0x6f, 0x73, 0x2d, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x72, 0x65, 0x65,
	0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x6f,
	0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x67, 0x72, 0x3b, 0x6f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x67, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_onboarding_proto_rawDescOnce sync.Once
	file_onboarding_proto_rawDescData = file_onboarding_proto_rawDesc
)

func file_onboarding_proto_rawDescGZIP() []byte {
	file_onboarding_proto_rawDescOnce.Do(func() {
		file_onboarding_proto_rawDescData = protoimpl.X.CompressGZIP(file_onboarding_proto_rawDescData)
	})
	return file_onboarding_proto_rawDescData
}

var file_onboarding_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_onboarding_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_onboarding_proto_goTypes = []interface{}{
	(ArtifactData_ArtifactCategory)(0), // 0: onboardingmgr.ArtifactData.ArtifactCategory
	(ArtifactData_Response)(0),         // 1: onboardingmgr.ArtifactData.Response
	(NodeData_Response)(0),             // 2: onboardingmgr.NodeData.Response
	(*ArtifactRequest)(nil),            // 3: onboardingmgr.ArtifactRequest
	(*ArtifactResponse)(nil),           // 4: onboardingmgr.ArtifactResponse
	(*ArtifactData)(nil),               // 5: onboardingmgr.ArtifactData
	(*Supplier)(nil),                   // 6: onboardingmgr.Supplier
	(*NodeRequest)(nil),                // 7: onboardingmgr.NodeRequest
	(*NodeResponse)(nil),               // 8: onboardingmgr.NodeResponse
	(*NodeData)(nil),                   // 9: onboardingmgr.NodeData
	(*HwData)(nil),                     // 10: onboardingmgr.HwData
	(*Proxy)(nil),                      // 11: onboardingmgr.Proxy
	(*Ports)(nil),                      // 12: onboardingmgr.Ports
	(*OnboardingParams)(nil),           // 13: onboardingmgr.OnboardingParams
	(*CustomerParams)(nil),             // 14: onboardingmgr.CustomerParams
	(*OnboardingRequest)(nil),          // 15: onboardingmgr.OnboardingRequest
	(*OnboardingResponse)(nil),         // 16: onboardingmgr.OnboardingResponse
}
var file_onboarding_proto_depIdxs = []int32{
	5,  // 0: onboardingmgr.ArtifactRequest.payload:type_name -> onboardingmgr.ArtifactData
	5,  // 1: onboardingmgr.ArtifactResponse.payload:type_name -> onboardingmgr.ArtifactData
	0,  // 2: onboardingmgr.ArtifactData.category:type_name -> onboardingmgr.ArtifactData.ArtifactCategory
	6,  // 3: onboardingmgr.ArtifactData.details:type_name -> onboardingmgr.Supplier
	1,  // 4: onboardingmgr.ArtifactData.result:type_name -> onboardingmgr.ArtifactData.Response
	9,  // 5: onboardingmgr.NodeRequest.payload:type_name -> onboardingmgr.NodeData
	9,  // 6: onboardingmgr.NodeResponse.payload:type_name -> onboardingmgr.NodeData
	2,  // 7: onboardingmgr.NodeData.result:type_name -> onboardingmgr.NodeData.Response
	10, // 8: onboardingmgr.NodeData.hwdata:type_name -> onboardingmgr.HwData
	14, // 9: onboardingmgr.HwData.cus_params:type_name -> onboardingmgr.CustomerParams
	11, // 10: onboardingmgr.OnboardingParams.proxy:type_name -> onboardingmgr.Proxy
	12, // 11: onboardingmgr.OnboardingParams.port:type_name -> onboardingmgr.Ports
	5,  // 12: onboardingmgr.OnboardingRequest.artifactData:type_name -> onboardingmgr.ArtifactData
	10, // 13: onboardingmgr.OnboardingRequest.hwdata:type_name -> onboardingmgr.HwData
	14, // 14: onboardingmgr.OnboardingRequest.cusParams:type_name -> onboardingmgr.CustomerParams
	13, // 15: onboardingmgr.OnboardingRequest.OnbParams:type_name -> onboardingmgr.OnboardingParams
	3,  // 16: onboardingmgr.NodeArtifactServiceNB.CreateArtifacts:input_type -> onboardingmgr.ArtifactRequest
	3,  // 17: onboardingmgr.NodeArtifactServiceNB.GetArtifacts:input_type -> onboardingmgr.ArtifactRequest
	3,  // 18: onboardingmgr.NodeArtifactServiceNB.UpdateArtifactsById:input_type -> onboardingmgr.ArtifactRequest
	3,  // 19: onboardingmgr.NodeArtifactServiceNB.DeleteArtifacts:input_type -> onboardingmgr.ArtifactRequest
	7,  // 20: onboardingmgr.NodeArtifactServiceNB.CreateNodes:input_type -> onboardingmgr.NodeRequest
	7,  // 21: onboardingmgr.NodeArtifactServiceNB.GetNodes:input_type -> onboardingmgr.NodeRequest
	7,  // 22: onboardingmgr.NodeArtifactServiceNB.UpdateNodes:input_type -> onboardingmgr.NodeRequest
	7,  // 23: onboardingmgr.NodeArtifactServiceNB.DeleteNodes:input_type -> onboardingmgr.NodeRequest
	15, // 24: onboardingmgr.OnBoardingEB.StartOnboarding:input_type -> onboardingmgr.OnboardingRequest
	4,  // 25: onboardingmgr.NodeArtifactServiceNB.CreateArtifacts:output_type -> onboardingmgr.ArtifactResponse
	4,  // 26: onboardingmgr.NodeArtifactServiceNB.GetArtifacts:output_type -> onboardingmgr.ArtifactResponse
	4,  // 27: onboardingmgr.NodeArtifactServiceNB.UpdateArtifactsById:output_type -> onboardingmgr.ArtifactResponse
	4,  // 28: onboardingmgr.NodeArtifactServiceNB.DeleteArtifacts:output_type -> onboardingmgr.ArtifactResponse
	8,  // 29: onboardingmgr.NodeArtifactServiceNB.CreateNodes:output_type -> onboardingmgr.NodeResponse
	8,  // 30: onboardingmgr.NodeArtifactServiceNB.GetNodes:output_type -> onboardingmgr.NodeResponse
	8,  // 31: onboardingmgr.NodeArtifactServiceNB.UpdateNodes:output_type -> onboardingmgr.NodeResponse
	8,  // 32: onboardingmgr.NodeArtifactServiceNB.DeleteNodes:output_type -> onboardingmgr.NodeResponse
	16, // 33: onboardingmgr.OnBoardingEB.StartOnboarding:output_type -> onboardingmgr.OnboardingResponse
	25, // [25:34] is the sub-list for method output_type
	16, // [16:25] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_onboarding_proto_init() }
func file_onboarding_proto_init() {
	if File_onboarding_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_onboarding_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onboarding_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onboarding_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onboarding_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Supplier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onboarding_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onboarding_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onboarding_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onboarding_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HwData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onboarding_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proxy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onboarding_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ports); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onboarding_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnboardingParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onboarding_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onboarding_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnboardingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onboarding_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnboardingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_onboarding_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_onboarding_proto_goTypes,
		DependencyIndexes: file_onboarding_proto_depIdxs,
		EnumInfos:         file_onboarding_proto_enumTypes,
		MessageInfos:      file_onboarding_proto_msgTypes,
	}.Build()
	File_onboarding_proto = out.File
	file_onboarding_proto_rawDesc = nil
	file_onboarding_proto_goTypes = nil
	file_onboarding_proto_depIdxs = nil
}
