// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: onboarding.proto

package onboardingmgr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodeArtifactNBServiceClient is the client API for NodeArtifactNBService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeArtifactNBServiceClient interface {
	CreateArtifacts(ctx context.Context, in *CreateArtifactsRequest, opts ...grpc.CallOption) (*CreateArtifactsResponse, error)
	GetArtifacts(ctx context.Context, in *GetArtifactsRequest, opts ...grpc.CallOption) (*GetArtifactsResponse, error)
	UpdateArtifactsById(ctx context.Context, in *UpdateArtifactsByIdRequest, opts ...grpc.CallOption) (*UpdateArtifactsByIdResponse, error)
	DeleteArtifacts(ctx context.Context, in *DeleteArtifactsRequest, opts ...grpc.CallOption) (*DeleteArtifactsResponse, error)
	CreateNodes(ctx context.Context, in *CreateNodesRequest, opts ...grpc.CallOption) (*CreateNodesResponse, error)
	GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error)
	UpdateNodes(ctx context.Context, in *UpdateNodesRequest, opts ...grpc.CallOption) (*UpdateNodesResponse, error)
	DeleteNodes(ctx context.Context, in *DeleteNodesRequest, opts ...grpc.CallOption) (*DeleteNodesResponse, error)
}

type nodeArtifactNBServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeArtifactNBServiceClient(cc grpc.ClientConnInterface) NodeArtifactNBServiceClient {
	return &nodeArtifactNBServiceClient{cc}
}

func (c *nodeArtifactNBServiceClient) CreateArtifacts(ctx context.Context, in *CreateArtifactsRequest, opts ...grpc.CallOption) (*CreateArtifactsResponse, error) {
	out := new(CreateArtifactsResponse)
	err := c.cc.Invoke(ctx, "/onboardingmgr.v1.NodeArtifactNBService/CreateArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeArtifactNBServiceClient) GetArtifacts(ctx context.Context, in *GetArtifactsRequest, opts ...grpc.CallOption) (*GetArtifactsResponse, error) {
	out := new(GetArtifactsResponse)
	err := c.cc.Invoke(ctx, "/onboardingmgr.v1.NodeArtifactNBService/GetArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeArtifactNBServiceClient) UpdateArtifactsById(ctx context.Context, in *UpdateArtifactsByIdRequest, opts ...grpc.CallOption) (*UpdateArtifactsByIdResponse, error) {
	out := new(UpdateArtifactsByIdResponse)
	err := c.cc.Invoke(ctx, "/onboardingmgr.v1.NodeArtifactNBService/UpdateArtifactsById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeArtifactNBServiceClient) DeleteArtifacts(ctx context.Context, in *DeleteArtifactsRequest, opts ...grpc.CallOption) (*DeleteArtifactsResponse, error) {
	out := new(DeleteArtifactsResponse)
	err := c.cc.Invoke(ctx, "/onboardingmgr.v1.NodeArtifactNBService/DeleteArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeArtifactNBServiceClient) CreateNodes(ctx context.Context, in *CreateNodesRequest, opts ...grpc.CallOption) (*CreateNodesResponse, error) {
	out := new(CreateNodesResponse)
	err := c.cc.Invoke(ctx, "/onboardingmgr.v1.NodeArtifactNBService/CreateNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeArtifactNBServiceClient) GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error) {
	out := new(GetNodesResponse)
	err := c.cc.Invoke(ctx, "/onboardingmgr.v1.NodeArtifactNBService/GetNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeArtifactNBServiceClient) UpdateNodes(ctx context.Context, in *UpdateNodesRequest, opts ...grpc.CallOption) (*UpdateNodesResponse, error) {
	out := new(UpdateNodesResponse)
	err := c.cc.Invoke(ctx, "/onboardingmgr.v1.NodeArtifactNBService/UpdateNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeArtifactNBServiceClient) DeleteNodes(ctx context.Context, in *DeleteNodesRequest, opts ...grpc.CallOption) (*DeleteNodesResponse, error) {
	out := new(DeleteNodesResponse)
	err := c.cc.Invoke(ctx, "/onboardingmgr.v1.NodeArtifactNBService/DeleteNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeArtifactNBServiceServer is the server API for NodeArtifactNBService service.
// All implementations should embed UnimplementedNodeArtifactNBServiceServer
// for forward compatibility
type NodeArtifactNBServiceServer interface {
	CreateArtifacts(context.Context, *CreateArtifactsRequest) (*CreateArtifactsResponse, error)
	GetArtifacts(context.Context, *GetArtifactsRequest) (*GetArtifactsResponse, error)
	UpdateArtifactsById(context.Context, *UpdateArtifactsByIdRequest) (*UpdateArtifactsByIdResponse, error)
	DeleteArtifacts(context.Context, *DeleteArtifactsRequest) (*DeleteArtifactsResponse, error)
	CreateNodes(context.Context, *CreateNodesRequest) (*CreateNodesResponse, error)
	GetNodes(context.Context, *GetNodesRequest) (*GetNodesResponse, error)
	UpdateNodes(context.Context, *UpdateNodesRequest) (*UpdateNodesResponse, error)
	DeleteNodes(context.Context, *DeleteNodesRequest) (*DeleteNodesResponse, error)
}

// UnimplementedNodeArtifactNBServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNodeArtifactNBServiceServer struct {
}

func (UnimplementedNodeArtifactNBServiceServer) CreateArtifacts(context.Context, *CreateArtifactsRequest) (*CreateArtifactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArtifacts not implemented")
}
func (UnimplementedNodeArtifactNBServiceServer) GetArtifacts(context.Context, *GetArtifactsRequest) (*GetArtifactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtifacts not implemented")
}
func (UnimplementedNodeArtifactNBServiceServer) UpdateArtifactsById(context.Context, *UpdateArtifactsByIdRequest) (*UpdateArtifactsByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArtifactsById not implemented")
}
func (UnimplementedNodeArtifactNBServiceServer) DeleteArtifacts(context.Context, *DeleteArtifactsRequest) (*DeleteArtifactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArtifacts not implemented")
}
func (UnimplementedNodeArtifactNBServiceServer) CreateNodes(context.Context, *CreateNodesRequest) (*CreateNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNodes not implemented")
}
func (UnimplementedNodeArtifactNBServiceServer) GetNodes(context.Context, *GetNodesRequest) (*GetNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (UnimplementedNodeArtifactNBServiceServer) UpdateNodes(context.Context, *UpdateNodesRequest) (*UpdateNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodes not implemented")
}
func (UnimplementedNodeArtifactNBServiceServer) DeleteNodes(context.Context, *DeleteNodesRequest) (*DeleteNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNodes not implemented")
}

// UnsafeNodeArtifactNBServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeArtifactNBServiceServer will
// result in compilation errors.
type UnsafeNodeArtifactNBServiceServer interface {
	mustEmbedUnimplementedNodeArtifactNBServiceServer()
}

func RegisterNodeArtifactNBServiceServer(s grpc.ServiceRegistrar, srv NodeArtifactNBServiceServer) {
	s.RegisterService(&NodeArtifactNBService_ServiceDesc, srv)
}

func _NodeArtifactNBService_CreateArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArtifactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactNBServiceServer).CreateArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onboardingmgr.v1.NodeArtifactNBService/CreateArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactNBServiceServer).CreateArtifacts(ctx, req.(*CreateArtifactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeArtifactNBService_GetArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtifactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactNBServiceServer).GetArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onboardingmgr.v1.NodeArtifactNBService/GetArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactNBServiceServer).GetArtifacts(ctx, req.(*GetArtifactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeArtifactNBService_UpdateArtifactsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArtifactsByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactNBServiceServer).UpdateArtifactsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onboardingmgr.v1.NodeArtifactNBService/UpdateArtifactsById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactNBServiceServer).UpdateArtifactsById(ctx, req.(*UpdateArtifactsByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeArtifactNBService_DeleteArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArtifactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactNBServiceServer).DeleteArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onboardingmgr.v1.NodeArtifactNBService/DeleteArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactNBServiceServer).DeleteArtifacts(ctx, req.(*DeleteArtifactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeArtifactNBService_CreateNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactNBServiceServer).CreateNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onboardingmgr.v1.NodeArtifactNBService/CreateNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactNBServiceServer).CreateNodes(ctx, req.(*CreateNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeArtifactNBService_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactNBServiceServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onboardingmgr.v1.NodeArtifactNBService/GetNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactNBServiceServer).GetNodes(ctx, req.(*GetNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeArtifactNBService_UpdateNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactNBServiceServer).UpdateNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onboardingmgr.v1.NodeArtifactNBService/UpdateNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactNBServiceServer).UpdateNodes(ctx, req.(*UpdateNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeArtifactNBService_DeleteNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeArtifactNBServiceServer).DeleteNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onboardingmgr.v1.NodeArtifactNBService/DeleteNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeArtifactNBServiceServer).DeleteNodes(ctx, req.(*DeleteNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeArtifactNBService_ServiceDesc is the grpc.ServiceDesc for NodeArtifactNBService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeArtifactNBService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "onboardingmgr.v1.NodeArtifactNBService",
	HandlerType: (*NodeArtifactNBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateArtifacts",
			Handler:    _NodeArtifactNBService_CreateArtifacts_Handler,
		},
		{
			MethodName: "GetArtifacts",
			Handler:    _NodeArtifactNBService_GetArtifacts_Handler,
		},
		{
			MethodName: "UpdateArtifactsById",
			Handler:    _NodeArtifactNBService_UpdateArtifactsById_Handler,
		},
		{
			MethodName: "DeleteArtifacts",
			Handler:    _NodeArtifactNBService_DeleteArtifacts_Handler,
		},
		{
			MethodName: "CreateNodes",
			Handler:    _NodeArtifactNBService_CreateNodes_Handler,
		},
		{
			MethodName: "GetNodes",
			Handler:    _NodeArtifactNBService_GetNodes_Handler,
		},
		{
			MethodName: "UpdateNodes",
			Handler:    _NodeArtifactNBService_UpdateNodes_Handler,
		},
		{
			MethodName: "DeleteNodes",
			Handler:    _NodeArtifactNBService_DeleteNodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "onboarding.proto",
}
