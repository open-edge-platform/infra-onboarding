// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: onboarding.proto

package onboardingmgr

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateArtifactsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateArtifactsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateArtifactsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateArtifactsRequestMultiError, or nil if none found.
func (m *CreateArtifactsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateArtifactsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPayload() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateArtifactsRequestValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateArtifactsRequestValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateArtifactsRequestValidationError{
					field:  fmt.Sprintf("Payload[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateArtifactsRequestMultiError(errors)
	}

	return nil
}

// CreateArtifactsRequestMultiError is an error wrapping multiple validation
// errors returned by CreateArtifactsRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateArtifactsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateArtifactsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateArtifactsRequestMultiError) AllErrors() []error { return m }

// CreateArtifactsRequestValidationError is the validation error returned by
// CreateArtifactsRequest.Validate if the designated constraints aren't met.
type CreateArtifactsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateArtifactsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateArtifactsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateArtifactsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateArtifactsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateArtifactsRequestValidationError) ErrorName() string {
	return "CreateArtifactsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateArtifactsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateArtifactsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateArtifactsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateArtifactsRequestValidationError{}

// Validate checks the field values on CreateArtifactsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateArtifactsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateArtifactsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateArtifactsResponseMultiError, or nil if none found.
func (m *CreateArtifactsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateArtifactsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPayload() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateArtifactsResponseValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateArtifactsResponseValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateArtifactsResponseValidationError{
					field:  fmt.Sprintf("Payload[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateArtifactsResponseMultiError(errors)
	}

	return nil
}

// CreateArtifactsResponseMultiError is an error wrapping multiple validation
// errors returned by CreateArtifactsResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateArtifactsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateArtifactsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateArtifactsResponseMultiError) AllErrors() []error { return m }

// CreateArtifactsResponseValidationError is the validation error returned by
// CreateArtifactsResponse.Validate if the designated constraints aren't met.
type CreateArtifactsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateArtifactsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateArtifactsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateArtifactsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateArtifactsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateArtifactsResponseValidationError) ErrorName() string {
	return "CreateArtifactsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateArtifactsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateArtifactsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateArtifactsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateArtifactsResponseValidationError{}

// Validate checks the field values on GetArtifactsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArtifactsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArtifactsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArtifactsRequestMultiError, or nil if none found.
func (m *GetArtifactsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArtifactsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPayload() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetArtifactsRequestValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetArtifactsRequestValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetArtifactsRequestValidationError{
					field:  fmt.Sprintf("Payload[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetArtifactsRequestMultiError(errors)
	}

	return nil
}

// GetArtifactsRequestMultiError is an error wrapping multiple validation
// errors returned by GetArtifactsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetArtifactsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArtifactsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArtifactsRequestMultiError) AllErrors() []error { return m }

// GetArtifactsRequestValidationError is the validation error returned by
// GetArtifactsRequest.Validate if the designated constraints aren't met.
type GetArtifactsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArtifactsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArtifactsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArtifactsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArtifactsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArtifactsRequestValidationError) ErrorName() string {
	return "GetArtifactsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetArtifactsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArtifactsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArtifactsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArtifactsRequestValidationError{}

// Validate checks the field values on GetArtifactsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArtifactsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArtifactsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArtifactsResponseMultiError, or nil if none found.
func (m *GetArtifactsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArtifactsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPayload() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetArtifactsResponseValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetArtifactsResponseValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetArtifactsResponseValidationError{
					field:  fmt.Sprintf("Payload[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetArtifactsResponseMultiError(errors)
	}

	return nil
}

// GetArtifactsResponseMultiError is an error wrapping multiple validation
// errors returned by GetArtifactsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetArtifactsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArtifactsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArtifactsResponseMultiError) AllErrors() []error { return m }

// GetArtifactsResponseValidationError is the validation error returned by
// GetArtifactsResponse.Validate if the designated constraints aren't met.
type GetArtifactsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArtifactsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArtifactsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArtifactsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArtifactsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArtifactsResponseValidationError) ErrorName() string {
	return "GetArtifactsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetArtifactsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArtifactsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArtifactsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArtifactsResponseValidationError{}

// Validate checks the field values on UpdateArtifactsByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateArtifactsByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateArtifactsByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateArtifactsByIdRequestMultiError, or nil if none found.
func (m *UpdateArtifactsByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateArtifactsByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPayload() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateArtifactsByIdRequestValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateArtifactsByIdRequestValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateArtifactsByIdRequestValidationError{
					field:  fmt.Sprintf("Payload[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateArtifactsByIdRequestMultiError(errors)
	}

	return nil
}

// UpdateArtifactsByIdRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateArtifactsByIdRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateArtifactsByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateArtifactsByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateArtifactsByIdRequestMultiError) AllErrors() []error { return m }

// UpdateArtifactsByIdRequestValidationError is the validation error returned
// by UpdateArtifactsByIdRequest.Validate if the designated constraints aren't met.
type UpdateArtifactsByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateArtifactsByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateArtifactsByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateArtifactsByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateArtifactsByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateArtifactsByIdRequestValidationError) ErrorName() string {
	return "UpdateArtifactsByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateArtifactsByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateArtifactsByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateArtifactsByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateArtifactsByIdRequestValidationError{}

// Validate checks the field values on UpdateArtifactsByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateArtifactsByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateArtifactsByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateArtifactsByIdResponseMultiError, or nil if none found.
func (m *UpdateArtifactsByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateArtifactsByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPayload() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateArtifactsByIdResponseValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateArtifactsByIdResponseValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateArtifactsByIdResponseValidationError{
					field:  fmt.Sprintf("Payload[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateArtifactsByIdResponseMultiError(errors)
	}

	return nil
}

// UpdateArtifactsByIdResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateArtifactsByIdResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateArtifactsByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateArtifactsByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateArtifactsByIdResponseMultiError) AllErrors() []error { return m }

// UpdateArtifactsByIdResponseValidationError is the validation error returned
// by UpdateArtifactsByIdResponse.Validate if the designated constraints
// aren't met.
type UpdateArtifactsByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateArtifactsByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateArtifactsByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateArtifactsByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateArtifactsByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateArtifactsByIdResponseValidationError) ErrorName() string {
	return "UpdateArtifactsByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateArtifactsByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateArtifactsByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateArtifactsByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateArtifactsByIdResponseValidationError{}

// Validate checks the field values on DeleteArtifactsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteArtifactsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteArtifactsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteArtifactsRequestMultiError, or nil if none found.
func (m *DeleteArtifactsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteArtifactsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPayload() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeleteArtifactsRequestValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeleteArtifactsRequestValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeleteArtifactsRequestValidationError{
					field:  fmt.Sprintf("Payload[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeleteArtifactsRequestMultiError(errors)
	}

	return nil
}

// DeleteArtifactsRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteArtifactsRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteArtifactsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteArtifactsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteArtifactsRequestMultiError) AllErrors() []error { return m }

// DeleteArtifactsRequestValidationError is the validation error returned by
// DeleteArtifactsRequest.Validate if the designated constraints aren't met.
type DeleteArtifactsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteArtifactsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteArtifactsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteArtifactsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteArtifactsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteArtifactsRequestValidationError) ErrorName() string {
	return "DeleteArtifactsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteArtifactsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteArtifactsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteArtifactsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteArtifactsRequestValidationError{}

// Validate checks the field values on DeleteArtifactsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteArtifactsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteArtifactsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteArtifactsResponseMultiError, or nil if none found.
func (m *DeleteArtifactsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteArtifactsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPayload() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeleteArtifactsResponseValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeleteArtifactsResponseValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeleteArtifactsResponseValidationError{
					field:  fmt.Sprintf("Payload[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeleteArtifactsResponseMultiError(errors)
	}

	return nil
}

// DeleteArtifactsResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteArtifactsResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteArtifactsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteArtifactsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteArtifactsResponseMultiError) AllErrors() []error { return m }

// DeleteArtifactsResponseValidationError is the validation error returned by
// DeleteArtifactsResponse.Validate if the designated constraints aren't met.
type DeleteArtifactsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteArtifactsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteArtifactsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteArtifactsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteArtifactsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteArtifactsResponseValidationError) ErrorName() string {
	return "DeleteArtifactsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteArtifactsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteArtifactsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteArtifactsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteArtifactsResponseValidationError{}

// Validate checks the field values on ArtifactData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ArtifactData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArtifactData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ArtifactDataMultiError, or
// nil if none found.
func (m *ArtifactData) ValidateAll() error {
	return m.validate(true)
}

func (m *ArtifactData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for Platform

	// no validation rules for Category

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ArtifactDataValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ArtifactDataValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ArtifactDataValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PackageUrl

	// no validation rules for Author

	// no validation rules for State

	// no validation rules for License

	// no validation rules for Vendor

	// no validation rules for Manufacturer

	// no validation rules for ReleaseData

	// no validation rules for ArtifactId

	// no validation rules for Result

	if len(errors) > 0 {
		return ArtifactDataMultiError(errors)
	}

	return nil
}

// ArtifactDataMultiError is an error wrapping multiple validation errors
// returned by ArtifactData.ValidateAll() if the designated constraints aren't met.
type ArtifactDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArtifactDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArtifactDataMultiError) AllErrors() []error { return m }

// ArtifactDataValidationError is the validation error returned by
// ArtifactData.Validate if the designated constraints aren't met.
type ArtifactDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArtifactDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArtifactDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArtifactDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArtifactDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArtifactDataValidationError) ErrorName() string { return "ArtifactDataValidationError" }

// Error satisfies the builtin error interface
func (e ArtifactDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArtifactData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArtifactDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArtifactDataValidationError{}

// Validate checks the field values on Supplier with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Supplier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Supplier with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SupplierMultiError, or nil
// if none found.
func (m *Supplier) ValidateAll() error {
	return m.validate(true)
}

func (m *Supplier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Url

	// no validation rules for Contact

	if len(errors) > 0 {
		return SupplierMultiError(errors)
	}

	return nil
}

// SupplierMultiError is an error wrapping multiple validation errors returned
// by Supplier.ValidateAll() if the designated constraints aren't met.
type SupplierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SupplierMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SupplierMultiError) AllErrors() []error { return m }

// SupplierValidationError is the validation error returned by
// Supplier.Validate if the designated constraints aren't met.
type SupplierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SupplierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SupplierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SupplierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SupplierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SupplierValidationError) ErrorName() string { return "SupplierValidationError" }

// Error satisfies the builtin error interface
func (e SupplierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSupplier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SupplierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SupplierValidationError{}

// Validate checks the field values on CreateNodesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNodesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNodesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNodesRequestMultiError, or nil if none found.
func (m *CreateNodesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNodesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPayload() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateNodesRequestValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateNodesRequestValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateNodesRequestValidationError{
					field:  fmt.Sprintf("Payload[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateNodesRequestMultiError(errors)
	}

	return nil
}

// CreateNodesRequestMultiError is an error wrapping multiple validation errors
// returned by CreateNodesRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateNodesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNodesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNodesRequestMultiError) AllErrors() []error { return m }

// CreateNodesRequestValidationError is the validation error returned by
// CreateNodesRequest.Validate if the designated constraints aren't met.
type CreateNodesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNodesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNodesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNodesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNodesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNodesRequestValidationError) ErrorName() string {
	return "CreateNodesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNodesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNodesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNodesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNodesRequestValidationError{}

// Validate checks the field values on CreateNodesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNodesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNodesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNodesResponseMultiError, or nil if none found.
func (m *CreateNodesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNodesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPayload() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateNodesResponseValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateNodesResponseValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateNodesResponseValidationError{
					field:  fmt.Sprintf("Payload[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateNodesResponseMultiError(errors)
	}

	return nil
}

// CreateNodesResponseMultiError is an error wrapping multiple validation
// errors returned by CreateNodesResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateNodesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNodesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNodesResponseMultiError) AllErrors() []error { return m }

// CreateNodesResponseValidationError is the validation error returned by
// CreateNodesResponse.Validate if the designated constraints aren't met.
type CreateNodesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNodesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNodesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNodesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNodesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNodesResponseValidationError) ErrorName() string {
	return "CreateNodesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNodesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNodesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNodesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNodesResponseValidationError{}

// Validate checks the field values on GetNodesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetNodesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNodesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNodesRequestMultiError, or nil if none found.
func (m *GetNodesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNodesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPayload() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetNodesRequestValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetNodesRequestValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNodesRequestValidationError{
					field:  fmt.Sprintf("Payload[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetNodesRequestMultiError(errors)
	}

	return nil
}

// GetNodesRequestMultiError is an error wrapping multiple validation errors
// returned by GetNodesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetNodesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNodesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNodesRequestMultiError) AllErrors() []error { return m }

// GetNodesRequestValidationError is the validation error returned by
// GetNodesRequest.Validate if the designated constraints aren't met.
type GetNodesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodesRequestValidationError) ErrorName() string { return "GetNodesRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetNodesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodesRequestValidationError{}

// Validate checks the field values on GetNodesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetNodesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNodesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNodesResponseMultiError, or nil if none found.
func (m *GetNodesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNodesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPayload() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetNodesResponseValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetNodesResponseValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNodesResponseValidationError{
					field:  fmt.Sprintf("Payload[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetNodesResponseMultiError(errors)
	}

	return nil
}

// GetNodesResponseMultiError is an error wrapping multiple validation errors
// returned by GetNodesResponse.ValidateAll() if the designated constraints
// aren't met.
type GetNodesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNodesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNodesResponseMultiError) AllErrors() []error { return m }

// GetNodesResponseValidationError is the validation error returned by
// GetNodesResponse.Validate if the designated constraints aren't met.
type GetNodesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodesResponseValidationError) ErrorName() string { return "GetNodesResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetNodesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodesResponseValidationError{}

// Validate checks the field values on UpdateNodesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNodesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNodesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNodesRequestMultiError, or nil if none found.
func (m *UpdateNodesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNodesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPayload() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateNodesRequestValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateNodesRequestValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateNodesRequestValidationError{
					field:  fmt.Sprintf("Payload[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateNodesRequestMultiError(errors)
	}

	return nil
}

// UpdateNodesRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateNodesRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateNodesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNodesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNodesRequestMultiError) AllErrors() []error { return m }

// UpdateNodesRequestValidationError is the validation error returned by
// UpdateNodesRequest.Validate if the designated constraints aren't met.
type UpdateNodesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNodesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNodesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNodesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNodesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNodesRequestValidationError) ErrorName() string {
	return "UpdateNodesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNodesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNodesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNodesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNodesRequestValidationError{}

// Validate checks the field values on UpdateNodesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNodesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNodesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNodesResponseMultiError, or nil if none found.
func (m *UpdateNodesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNodesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPayload() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateNodesResponseValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateNodesResponseValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateNodesResponseValidationError{
					field:  fmt.Sprintf("Payload[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateNodesResponseMultiError(errors)
	}

	return nil
}

// UpdateNodesResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateNodesResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateNodesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNodesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNodesResponseMultiError) AllErrors() []error { return m }

// UpdateNodesResponseValidationError is the validation error returned by
// UpdateNodesResponse.Validate if the designated constraints aren't met.
type UpdateNodesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNodesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNodesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNodesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNodesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNodesResponseValidationError) ErrorName() string {
	return "UpdateNodesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNodesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNodesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNodesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNodesResponseValidationError{}

// Validate checks the field values on DeleteNodesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNodesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNodesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNodesRequestMultiError, or nil if none found.
func (m *DeleteNodesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNodesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPayload() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeleteNodesRequestValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeleteNodesRequestValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeleteNodesRequestValidationError{
					field:  fmt.Sprintf("Payload[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeleteNodesRequestMultiError(errors)
	}

	return nil
}

// DeleteNodesRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteNodesRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteNodesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNodesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNodesRequestMultiError) AllErrors() []error { return m }

// DeleteNodesRequestValidationError is the validation error returned by
// DeleteNodesRequest.Validate if the designated constraints aren't met.
type DeleteNodesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNodesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNodesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNodesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNodesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNodesRequestValidationError) ErrorName() string {
	return "DeleteNodesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNodesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNodesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNodesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNodesRequestValidationError{}

// Validate checks the field values on DeleteNodesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNodesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNodesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNodesResponseMultiError, or nil if none found.
func (m *DeleteNodesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNodesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPayload() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeleteNodesResponseValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeleteNodesResponseValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeleteNodesResponseValidationError{
					field:  fmt.Sprintf("Payload[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeleteNodesResponseMultiError(errors)
	}

	return nil
}

// DeleteNodesResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteNodesResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteNodesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNodesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNodesResponseMultiError) AllErrors() []error { return m }

// DeleteNodesResponseValidationError is the validation error returned by
// DeleteNodesResponse.Validate if the designated constraints aren't met.
type DeleteNodesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNodesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNodesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNodesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNodesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNodesResponseValidationError) ErrorName() string {
	return "DeleteNodesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNodesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNodesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNodesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNodesResponseValidationError{}

// Validate checks the field values on NodeData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NodeData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NodeData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NodeDataMultiError, or nil
// if none found.
func (m *NodeData) ValidateAll() error {
	return m.validate(true)
}

func (m *NodeData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HwId

	// no validation rules for PlatformType

	// no validation rules for FwArtifactId

	// no validation rules for OsArtifactId

	// no validation rules for AppArtifactId

	// no validation rules for PlatArtifactId

	// no validation rules for DeviceType

	// no validation rules for DeviceInfoAgent

	// no validation rules for DeviceStatus

	// no validation rules for UpdateStatus

	// no validation rules for UpdateAvailable

	// no validation rules for OnboardingStatus

	// no validation rules for NodeId

	// no validation rules for Result

	for idx, item := range m.GetHwdata() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NodeDataValidationError{
						field:  fmt.Sprintf("Hwdata[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NodeDataValidationError{
						field:  fmt.Sprintf("Hwdata[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NodeDataValidationError{
					field:  fmt.Sprintf("Hwdata[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NodeDataMultiError(errors)
	}

	return nil
}

// NodeDataMultiError is an error wrapping multiple validation errors returned
// by NodeData.ValidateAll() if the designated constraints aren't met.
type NodeDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeDataMultiError) AllErrors() []error { return m }

// NodeDataValidationError is the validation error returned by
// NodeData.Validate if the designated constraints aren't met.
type NodeDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeDataValidationError) ErrorName() string { return "NodeDataValidationError" }

// Error satisfies the builtin error interface
func (e NodeDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeDataValidationError{}

// Validate checks the field values on HwData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HwData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HwData with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HwDataMultiError, or nil if none found.
func (m *HwData) ValidateAll() error {
	return m.validate(true)
}

func (m *HwData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HwId

	// no validation rules for MacId

	// no validation rules for SutIp

	if all {
		switch v := interface{}(m.GetCusParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HwDataValidationError{
					field:  "CusParams",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HwDataValidationError{
					field:  "CusParams",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCusParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HwDataValidationError{
				field:  "CusParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DiskPartition

	// no validation rules for PlatformType

	// no validation rules for Serialnum

	// no validation rules for Uuid

	// no validation rules for BmcIp

	// no validation rules for BmcInterface

	// no validation rules for HostNicDevName

	// no validation rules for SecurityFeature

	if len(errors) > 0 {
		return HwDataMultiError(errors)
	}

	return nil
}

// HwDataMultiError is an error wrapping multiple validation errors returned by
// HwData.ValidateAll() if the designated constraints aren't met.
type HwDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HwDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HwDataMultiError) AllErrors() []error { return m }

// HwDataValidationError is the validation error returned by HwData.Validate if
// the designated constraints aren't met.
type HwDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HwDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HwDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HwDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HwDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HwDataValidationError) ErrorName() string { return "HwDataValidationError" }

// Error satisfies the builtin error interface
func (e HwDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHwData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HwDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HwDataValidationError{}

// Validate checks the field values on Proxy with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Proxy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Proxy with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProxyMultiError, or nil if none found.
func (m *Proxy) ValidateAll() error {
	return m.validate(true)
}

func (m *Proxy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HttpProxy

	// no validation rules for HttpsProxy

	// no validation rules for NoProxy

	// no validation rules for SocksProxy

	// no validation rules for RsyncProxy

	if len(errors) > 0 {
		return ProxyMultiError(errors)
	}

	return nil
}

// ProxyMultiError is an error wrapping multiple validation errors returned by
// Proxy.ValidateAll() if the designated constraints aren't met.
type ProxyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProxyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProxyMultiError) AllErrors() []error { return m }

// ProxyValidationError is the validation error returned by Proxy.Validate if
// the designated constraints aren't met.
type ProxyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProxyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProxyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProxyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProxyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProxyValidationError) ErrorName() string { return "ProxyValidationError" }

// Error satisfies the builtin error interface
func (e ProxyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProxy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProxyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProxyValidationError{}

// Validate checks the field values on Ports with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Ports) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ports with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PortsMultiError, or nil if none found.
func (m *Ports) ValidateAll() error {
	return m.validate(true)
}

func (m *Ports) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InvMgrPort

	// no validation rules for UpMgrPort

	// no validation rules for OobMgrPort

	// no validation rules for TeleMgrPort

	if len(errors) > 0 {
		return PortsMultiError(errors)
	}

	return nil
}

// PortsMultiError is an error wrapping multiple validation errors returned by
// Ports.ValidateAll() if the designated constraints aren't met.
type PortsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PortsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PortsMultiError) AllErrors() []error { return m }

// PortsValidationError is the validation error returned by Ports.Validate if
// the designated constraints aren't met.
type PortsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortsValidationError) ErrorName() string { return "PortsValidationError" }

// Error satisfies the builtin error interface
func (e PortsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPorts.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortsValidationError{}

// Validate checks the field values on CustomerParams with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CustomerParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CustomerParams with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CustomerParamsMultiError,
// or nil if none found.
func (m *CustomerParams) ValidateAll() error {
	return m.validate(true)
}

func (m *CustomerParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DpsScopeId

	// no validation rules for DpsRegistrationId

	// no validation rules for DpsEnrollmentSymKey

	if len(errors) > 0 {
		return CustomerParamsMultiError(errors)
	}

	return nil
}

// CustomerParamsMultiError is an error wrapping multiple validation errors
// returned by CustomerParams.ValidateAll() if the designated constraints
// aren't met.
type CustomerParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CustomerParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CustomerParamsMultiError) AllErrors() []error { return m }

// CustomerParamsValidationError is the validation error returned by
// CustomerParams.Validate if the designated constraints aren't met.
type CustomerParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CustomerParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CustomerParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CustomerParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CustomerParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CustomerParamsValidationError) ErrorName() string { return "CustomerParamsValidationError" }

// Error satisfies the builtin error interface
func (e CustomerParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCustomerParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CustomerParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CustomerParamsValidationError{}
