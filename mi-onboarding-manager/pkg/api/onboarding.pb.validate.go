// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: onboarding.proto

package onboardingmgr

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _onboarding_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ArtifactRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ArtifactRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArtifactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArtifactRequestMultiError, or nil if none found.
func (m *ArtifactRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ArtifactRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPayload() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ArtifactRequestValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ArtifactRequestValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ArtifactRequestValidationError{
					field:  fmt.Sprintf("Payload[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ArtifactRequestMultiError(errors)
	}

	return nil
}

// ArtifactRequestMultiError is an error wrapping multiple validation errors
// returned by ArtifactRequest.ValidateAll() if the designated constraints
// aren't met.
type ArtifactRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArtifactRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArtifactRequestMultiError) AllErrors() []error { return m }

// ArtifactRequestValidationError is the validation error returned by
// ArtifactRequest.Validate if the designated constraints aren't met.
type ArtifactRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArtifactRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArtifactRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArtifactRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArtifactRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArtifactRequestValidationError) ErrorName() string { return "ArtifactRequestValidationError" }

// Error satisfies the builtin error interface
func (e ArtifactRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArtifactRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArtifactRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArtifactRequestValidationError{}

// Validate checks the field values on ArtifactResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ArtifactResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArtifactResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArtifactResponseMultiError, or nil if none found.
func (m *ArtifactResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ArtifactResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPayload() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ArtifactResponseValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ArtifactResponseValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ArtifactResponseValidationError{
					field:  fmt.Sprintf("Payload[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ArtifactResponseMultiError(errors)
	}

	return nil
}

// ArtifactResponseMultiError is an error wrapping multiple validation errors
// returned by ArtifactResponse.ValidateAll() if the designated constraints
// aren't met.
type ArtifactResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArtifactResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArtifactResponseMultiError) AllErrors() []error { return m }

// ArtifactResponseValidationError is the validation error returned by
// ArtifactResponse.Validate if the designated constraints aren't met.
type ArtifactResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArtifactResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArtifactResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArtifactResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArtifactResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArtifactResponseValidationError) ErrorName() string { return "ArtifactResponseValidationError" }

// Error satisfies the builtin error interface
func (e ArtifactResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArtifactResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArtifactResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArtifactResponseValidationError{}

// Validate checks the field values on ArtifactData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ArtifactData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArtifactData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ArtifactDataMultiError, or
// nil if none found.
func (m *ArtifactData) ValidateAll() error {
	return m.validate(true)
}

func (m *ArtifactData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for Platform

	// no validation rules for Category

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ArtifactDataValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ArtifactDataValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ArtifactDataValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PackageUrl

	// no validation rules for Author

	// no validation rules for State

	// no validation rules for License

	// no validation rules for Vendor

	// no validation rules for Manufacturer

	// no validation rules for ReleaseData

	// no validation rules for ArtifactId

	// no validation rules for Result

	if len(errors) > 0 {
		return ArtifactDataMultiError(errors)
	}

	return nil
}

// ArtifactDataMultiError is an error wrapping multiple validation errors
// returned by ArtifactData.ValidateAll() if the designated constraints aren't met.
type ArtifactDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArtifactDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArtifactDataMultiError) AllErrors() []error { return m }

// ArtifactDataValidationError is the validation error returned by
// ArtifactData.Validate if the designated constraints aren't met.
type ArtifactDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArtifactDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArtifactDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArtifactDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArtifactDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArtifactDataValidationError) ErrorName() string { return "ArtifactDataValidationError" }

// Error satisfies the builtin error interface
func (e ArtifactDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArtifactData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArtifactDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArtifactDataValidationError{}

// Validate checks the field values on Supplier with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Supplier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Supplier with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SupplierMultiError, or nil
// if none found.
func (m *Supplier) ValidateAll() error {
	return m.validate(true)
}

func (m *Supplier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Url

	// no validation rules for Contact

	if len(errors) > 0 {
		return SupplierMultiError(errors)
	}

	return nil
}

// SupplierMultiError is an error wrapping multiple validation errors returned
// by Supplier.ValidateAll() if the designated constraints aren't met.
type SupplierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SupplierMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SupplierMultiError) AllErrors() []error { return m }

// SupplierValidationError is the validation error returned by
// Supplier.Validate if the designated constraints aren't met.
type SupplierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SupplierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SupplierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SupplierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SupplierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SupplierValidationError) ErrorName() string { return "SupplierValidationError" }

// Error satisfies the builtin error interface
func (e SupplierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSupplier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SupplierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SupplierValidationError{}

// Validate checks the field values on NodeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NodeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NodeRequestMultiError, or
// nil if none found.
func (m *NodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPayload() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NodeRequestValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NodeRequestValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NodeRequestValidationError{
					field:  fmt.Sprintf("Payload[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NodeRequestMultiError(errors)
	}

	return nil
}

// NodeRequestMultiError is an error wrapping multiple validation errors
// returned by NodeRequest.ValidateAll() if the designated constraints aren't met.
type NodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeRequestMultiError) AllErrors() []error { return m }

// NodeRequestValidationError is the validation error returned by
// NodeRequest.Validate if the designated constraints aren't met.
type NodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeRequestValidationError) ErrorName() string { return "NodeRequestValidationError" }

// Error satisfies the builtin error interface
func (e NodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeRequestValidationError{}

// Validate checks the field values on NodeResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NodeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NodeResponseMultiError, or
// nil if none found.
func (m *NodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPayload() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NodeResponseValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NodeResponseValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NodeResponseValidationError{
					field:  fmt.Sprintf("Payload[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NodeResponseMultiError(errors)
	}

	return nil
}

// NodeResponseMultiError is an error wrapping multiple validation errors
// returned by NodeResponse.ValidateAll() if the designated constraints aren't met.
type NodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeResponseMultiError) AllErrors() []error { return m }

// NodeResponseValidationError is the validation error returned by
// NodeResponse.Validate if the designated constraints aren't met.
type NodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeResponseValidationError) ErrorName() string { return "NodeResponseValidationError" }

// Error satisfies the builtin error interface
func (e NodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeResponseValidationError{}

// Validate checks the field values on NodeData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NodeData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NodeData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NodeDataMultiError, or nil
// if none found.
func (m *NodeData) ValidateAll() error {
	return m.validate(true)
}

func (m *NodeData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HwId

	// no validation rules for PlatformType

	// no validation rules for FwArtifactId

	// no validation rules for OsArtifactId

	// no validation rules for AppArtifactId

	// no validation rules for PlatArtifactId

	// no validation rules for DeviceType

	// no validation rules for DeviceInfoAgent

	// no validation rules for DeviceStatus

	// no validation rules for UpdateStatus

	// no validation rules for UpdateAvailable

	// no validation rules for OnboardingStatus

	// no validation rules for NodeId

	// no validation rules for Result

	for idx, item := range m.GetHwdata() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NodeDataValidationError{
						field:  fmt.Sprintf("Hwdata[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NodeDataValidationError{
						field:  fmt.Sprintf("Hwdata[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NodeDataValidationError{
					field:  fmt.Sprintf("Hwdata[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NodeDataMultiError(errors)
	}

	return nil
}

// NodeDataMultiError is an error wrapping multiple validation errors returned
// by NodeData.ValidateAll() if the designated constraints aren't met.
type NodeDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeDataMultiError) AllErrors() []error { return m }

// NodeDataValidationError is the validation error returned by
// NodeData.Validate if the designated constraints aren't met.
type NodeDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeDataValidationError) ErrorName() string { return "NodeDataValidationError" }

// Error satisfies the builtin error interface
func (e NodeDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeDataValidationError{}

// Validate checks the field values on HwData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HwData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HwData with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HwDataMultiError, or nil if none found.
func (m *HwData) ValidateAll() error {
	return m.validate(true)
}

func (m *HwData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HwId

	// no validation rules for MacId

	// no validation rules for SutIp

	if all {
		switch v := interface{}(m.GetCusParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HwDataValidationError{
					field:  "CusParams",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HwDataValidationError{
					field:  "CusParams",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCusParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HwDataValidationError{
				field:  "CusParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DiskPartition

	// no validation rules for PlatformType

	// no validation rules for Serialnum

	// no validation rules for Uuid

	// no validation rules for BmcIp

	// no validation rules for BmcInterface

	// no validation rules for HostNicDevName

	// no validation rules for SecurityFeature

	if len(errors) > 0 {
		return HwDataMultiError(errors)
	}

	return nil
}

// HwDataMultiError is an error wrapping multiple validation errors returned by
// HwData.ValidateAll() if the designated constraints aren't met.
type HwDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HwDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HwDataMultiError) AllErrors() []error { return m }

// HwDataValidationError is the validation error returned by HwData.Validate if
// the designated constraints aren't met.
type HwDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HwDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HwDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HwDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HwDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HwDataValidationError) ErrorName() string { return "HwDataValidationError" }

// Error satisfies the builtin error interface
func (e HwDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHwData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HwDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HwDataValidationError{}

// Validate checks the field values on Proxy with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Proxy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Proxy with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProxyMultiError, or nil if none found.
func (m *Proxy) ValidateAll() error {
	return m.validate(true)
}

func (m *Proxy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HttpProxy

	// no validation rules for HttpsProxy

	// no validation rules for NoProxy

	// no validation rules for SocksProxy

	// no validation rules for RsyncProxy

	if len(errors) > 0 {
		return ProxyMultiError(errors)
	}

	return nil
}

// ProxyMultiError is an error wrapping multiple validation errors returned by
// Proxy.ValidateAll() if the designated constraints aren't met.
type ProxyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProxyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProxyMultiError) AllErrors() []error { return m }

// ProxyValidationError is the validation error returned by Proxy.Validate if
// the designated constraints aren't met.
type ProxyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProxyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProxyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProxyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProxyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProxyValidationError) ErrorName() string { return "ProxyValidationError" }

// Error satisfies the builtin error interface
func (e ProxyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProxy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProxyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProxyValidationError{}

// Validate checks the field values on Ports with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Ports) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ports with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PortsMultiError, or nil if none found.
func (m *Ports) ValidateAll() error {
	return m.validate(true)
}

func (m *Ports) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InvMgrPort

	// no validation rules for UpMgrPort

	// no validation rules for OobMgrPort

	// no validation rules for TeleMgrPort

	if len(errors) > 0 {
		return PortsMultiError(errors)
	}

	return nil
}

// PortsMultiError is an error wrapping multiple validation errors returned by
// Ports.ValidateAll() if the designated constraints aren't met.
type PortsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PortsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PortsMultiError) AllErrors() []error { return m }

// PortsValidationError is the validation error returned by Ports.Validate if
// the designated constraints aren't met.
type PortsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortsValidationError) ErrorName() string { return "PortsValidationError" }

// Error satisfies the builtin error interface
func (e PortsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPorts.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortsValidationError{}

// Validate checks the field values on CustomerParams with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CustomerParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CustomerParams with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CustomerParamsMultiError,
// or nil if none found.
func (m *CustomerParams) ValidateAll() error {
	return m.validate(true)
}

func (m *CustomerParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DpsScopeId

	// no validation rules for DpsRegistrationId

	// no validation rules for DpsEnrollmentSymKey

	if len(errors) > 0 {
		return CustomerParamsMultiError(errors)
	}

	return nil
}

// CustomerParamsMultiError is an error wrapping multiple validation errors
// returned by CustomerParams.ValidateAll() if the designated constraints
// aren't met.
type CustomerParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CustomerParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CustomerParamsMultiError) AllErrors() []error { return m }

// CustomerParamsValidationError is the validation error returned by
// CustomerParams.Validate if the designated constraints aren't met.
type CustomerParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CustomerParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CustomerParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CustomerParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CustomerParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CustomerParamsValidationError) ErrorName() string { return "CustomerParamsValidationError" }

// Error satisfies the builtin error interface
func (e CustomerParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCustomerParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CustomerParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CustomerParamsValidationError{}

// Validate checks the field values on OnboardStreamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OnboardStreamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OnboardStreamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OnboardStreamRequestMultiError, or nil if none found.
func (m *OnboardStreamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OnboardStreamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = OnboardStreamRequestValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_OnboardStreamRequest_Serialnum_Pattern.MatchString(m.GetSerialnum()) {
		err := OnboardStreamRequestValidationError{
			field:  "Serialnum",
			reason: "value does not match regex pattern \"^[A-Za-z0-9]{5,20}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_OnboardStreamRequest_MacId_Pattern.MatchString(m.GetMacId()) {
		err := OnboardStreamRequestValidationError{
			field:  "MacId",
			reason: "value does not match regex pattern \"^([0-9a-fA-F]{2}([-:])){5}[0-9a-fA-F]{2}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_OnboardStreamRequest_HostIp_Pattern.MatchString(m.GetHostIp()) {
		err := OnboardStreamRequestValidationError{
			field:  "HostIp",
			reason: "value does not match regex pattern \"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OnboardStreamRequestMultiError(errors)
	}

	return nil
}

func (m *OnboardStreamRequest) _validateUuid(uuid string) error {
	if matched := _onboarding_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// OnboardStreamRequestMultiError is an error wrapping multiple validation
// errors returned by OnboardStreamRequest.ValidateAll() if the designated
// constraints aren't met.
type OnboardStreamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OnboardStreamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OnboardStreamRequestMultiError) AllErrors() []error { return m }

// OnboardStreamRequestValidationError is the validation error returned by
// OnboardStreamRequest.Validate if the designated constraints aren't met.
type OnboardStreamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OnboardStreamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OnboardStreamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OnboardStreamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OnboardStreamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OnboardStreamRequestValidationError) ErrorName() string {
	return "OnboardStreamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OnboardStreamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOnboardStreamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OnboardStreamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OnboardStreamRequestValidationError{}

var _OnboardStreamRequest_Serialnum_Pattern = regexp.MustCompile("^[A-Za-z0-9]{5,20}$")

var _OnboardStreamRequest_MacId_Pattern = regexp.MustCompile("^([0-9a-fA-F]{2}([-:])){5}[0-9a-fA-F]{2}$")

var _OnboardStreamRequest_HostIp_Pattern = regexp.MustCompile("^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$")

// Validate checks the field values on OnboardStreamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OnboardStreamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OnboardStreamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OnboardStreamResponseMultiError, or nil if none found.
func (m *OnboardStreamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OnboardStreamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OnboardStreamResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OnboardStreamResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OnboardStreamResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NodeState

	// no validation rules for ClientId

	// no validation rules for ClientSecret

	if len(errors) > 0 {
		return OnboardStreamResponseMultiError(errors)
	}

	return nil
}

// OnboardStreamResponseMultiError is an error wrapping multiple validation
// errors returned by OnboardStreamResponse.ValidateAll() if the designated
// constraints aren't met.
type OnboardStreamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OnboardStreamResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OnboardStreamResponseMultiError) AllErrors() []error { return m }

// OnboardStreamResponseValidationError is the validation error returned by
// OnboardStreamResponse.Validate if the designated constraints aren't met.
type OnboardStreamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OnboardStreamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OnboardStreamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OnboardStreamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OnboardStreamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OnboardStreamResponseValidationError) ErrorName() string {
	return "OnboardStreamResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OnboardStreamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOnboardStreamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OnboardStreamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OnboardStreamResponseValidationError{}
