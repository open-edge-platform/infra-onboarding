// SPDX-FileCopyrightText: (C) 2022 Intel Corporation
// SPDX-License-Identifier: LicenseRef-Intel
// Imported groovy libraries:
// 1cicd: ["intel-innersource/applications.devops.jenkins.jenkins-common-pipelines"]

def branchPattern = /(main|release-[0-9].[0-9]|release-[0-9][0-9].[0-9][0-9]|release-[0-9][0-9].[0-9]|release-[0-9].[0-9][0-9])/

def getEnvFromBranch(branch) {
    if (branch ==~ /main/) {
        return 'protex'
    }
    else {
        return 'virus,hadolint,trivy'
        // PR checks can be extended with checkmarx, bandit, snyk but source code has to available for them to pass. Protex should be kept only at branch level scanning.
    }
}

pipeline {
    agent {
        docker {
            label 'oie_spot_executor'
            image 'amr-registry.caas.intel.com/one-intel-edge/rrp-devops/oie_ci_testing:latest'
            alwaysPull true
        }
    }
    environment {
        GIT_SHORT_URL=env.GIT_URL.split('/')[4].toString().replaceAll('.git','')
        PROJECT_NAME = "${GIT_SHORT_URL}"
        SDLE_UPLOAD_PROJECT_ID = '20259'
        authorEmail = sh (script: 'git --no-pager show -s --format=\'%ae\'',returnStdout: true).trim()
    }
    stages {		
        stage('Scan Source') {
            parallel {
                stage('Scan Virus, Checkmarx, Protex, Trivy'){
                    environment {
                        SCANNERS            = getEnvFromBranch(env.BRANCH_NAME)
                        PROTEX_PROJECT_NAME = "${GIT_SHORT_URL}"
                    }
                    when {
                        anyOf { branch 'main'; branch 'iaas-*-*'; branch 'release-*'; changeRequest();}
                    }
                    steps {
                        script {
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                rbheStaticCodeScan()
                            }
                        }
                    }
                }
                /*stage('Trivy config scan') {
                    when {
                        anyOf { branch 'main'; branch 'iaas-*-*'; branch 'release-*'; changeRequest();}
                    }
                    steps {
                        script {
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                sh '''
                                trivy conf --exit-code 1 --severity CRITICAL . 2>&1 > trivy_conf.log
                                '''
                            }
                            sh '''
                            [ -d "artifacts" ] && mkdir artifacts/Trivy_conf || mkdir -p artifacts/Trivy_conf
                            mv trivy_conf.log artifacts/Trivy_conf
                            '''
                            archiveArtifacts artifacts: 'artifacts/Trivy_conf/*.log',
                            fingerprint: true,
                            onlyIfSuccessful: false
                            publishArtifacts([artifactsRepo: 'one-intel-edge-or-local/${SUB_PROJECT_NAME}',
                                        credentialId: 'sys_oie_devops_ubit-artifactory-or.intel.com',
                                        bypassProxy: true])
                        }
                    }
                }*/
            }
        }
        stage('Setup') {
                steps {
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'sys_oie_devops_github_api',usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']])
                    {
                        netrcPatch()
                    }
                }
        }
        stage('Version Check') {
            steps {
                echo "Check if its a valid code version"
                sh '''
                /opt/ci/version-check.sh
                '''
            }        
        }
        stage('Lint Code') {
            when {
                changeRequest()
            }
            steps {
                sh '''
                echo "Linting the code"
                make lint-ci
                '''
            }
        }			
        stage('Build') {
            steps {
                sh '''
                eval \$(ssh-agent) > /dev/null
                make build
                '''
            }
        }			
        // stage('Test Code') {
            // steps {
                // echo "Test the code"
                // sh '''
                // make test
                // '''
            // }
        // }
        stage('Validate clean repo') {
            steps {
                sh '''
                bash -c "diff -u <(echo -n) <(git diff)"
                '''
            }
        }
        stage('Version Tag') {
            when {
                anyOf { branch 'main'; branch 'feature*'; branch 'release*' }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'sys_oie_devops_github_api',usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']])
                    {
                        echo "Generate tag if SemVer"
                        netrcPatch()
                        sh '''
                        # Tag the version
                        /opt/ci/version-tag.sh
                        '''
                }
            }
        }
        stage ('Scan Containers') {
            when {
                changeRequest()
            }
            environment {
                SCANNERS = 'trivy'
            }
            steps {
                script {
                    scanContainers()
                }
            }
        }
        stage('Docker Publish') {
            when {
                anyOf {
                    branch 'main'
                    branch 'release-*'
                    expression { common.isMatchingCommit(/.*\[push-docker-image\]*/) }
                    changeRequest()
                }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'intel-harbor-credentials', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                    script {
                        def isPR = env.CHANGE_ID != null

                        sh 'docker login -u $USERNAME -p $PASSWORD https://amr-registry.caas.intel.com'

                        if (isPR) {
                            sh 'make docker-dev-push'
                        } else {
                            sh 'make docker-push'
                        }

                        sh 'docker logout'
                    }
                }
            }
        }
        stage('Version dev') {
            when {
                anyOf { branch 'main'; branch 'release-*'; }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'sys_oie_devops_github_api',usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']])
                {
                echo "Start new development cycle if needed"
                netrcPatch()
                sh '''
                # Append -dev
                REVIEWER_1="raphaelvrosa" REVIEWER_2="daniele-moro" /opt/ci/version-dev.sh
                '''
                }
            }
        }
        stage('Build Hook-OS') {
            when {
                anyOf { branch 'main'; branch 'release-*'; }
            }
            steps {
                script{
                    def downstreamJobPath = 'Edge-Node/Intel Innersource Edge-Node/frameworks.edge.one-intel-edge.edge-node.os-provision.provisioning-hook-os/main'
                    def version = readFile('VERSION').trim()
                    if (!version.contains('-dev')) {
                        build job: downstreamJobPath, parameters: [
                                booleanParam(name: 'buildHookOs', value: true),
                                string(name: 'version', value: version)
                        ]
                    }
                }

            }
        }
    }
    post {
        always {
            jcpSummaryReport()
            intelLogstashSend failBuild: false, verbose: true
            cleanWs()
        }
        failure {
            script {
                emailFailure()
            }
        }
    }
}
