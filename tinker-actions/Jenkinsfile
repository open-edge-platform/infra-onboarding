def getEnvFromBranch(branch) {
    if (branch ==~ /main/) {
        return 'virus,protex'
    }
    else {
        return 'virus'
        // PR checks can be extended with checkmarx, bandit, snyk but source code has to available for them to pass. Protex should be kept only at branch level scanning.
    }
}

pipeline {
    agent {
        docker {
            label 'docker'
            image 'amr-registry.caas.intel.com/one-intel-edge/rrp-devops/oie_ci_testing:latest'
            alwaysPull true
        }
    }
    environment {
        GIT_SHORT_URL=env.GIT_URL.split('/')[4].toString().replaceAll('.git','')
        SUB_PROJECT_NAME='maestro-a'          //update the sub project name based on your repo, eg:maestro-a/i, springboard
	authorEmail = sh (script: 'git --no-pager show -s --format=\'%ae\'',returnStdout: true).trim()
    }
    stages {
        stage('Scan Sources'){
            environment {
                PROJECT_NAME               = "oie-${GIT_SHORT_URL}"
                SCANNERS                   = getEnvFromBranch(env.BRANCH_NAME)

                // publishArtifacts details
                ARTIFACT_RETENTION_PERIOD  = ''
                ARTIFACTORY_URL            = 'https://ubit-artifactory-or.intel.com/artifactory'
                ARTIFACTS_REPO             = "one-intel-edge-or-local/${SUB_PROJECT_NAME}"
                PUBLISH_TO_ARTIFACTORY     = true
                ARTIFACTORY_CREDENTIAL_ID  = 'sys_oie_devops_ubit-artifactory-or.intel.com'

                CHECKMARX_FORCE_SCAN       = true
                CHECKMARX_USER_AUTH_DOMAIN = 'GER'
                
                //protex project has to be create before running the scan and the faceless user added to it
                PROTEX_PROJECT_NAME        = "${GIT_SHORT_URL}"
                
                VIRUS_SCAN_DIR             = "."

                SNYK_PRE_SCAN_SCRIPT = '''\
                    env
                    echo 'Adding GitHub credentials to ~/.netrc'
                    umask 077
                    echo 'machine github.com' >> ~/.netrc
                    echo "login $GITHUB_USER" >> ~/.netrc
                    echo "password $GITHUB_TOKEN" >> ~/.netrc
                    echo 'machine api.github.com' >> ~/.netrc
                    echo "login $GITHUB_USER" >> ~/.netrc
                    echo "password $GITHUB_TOKEN" >> ~/.netrc
                    umask 022
                '''.stripIndent()
            }
            when {
                anyOf {
                    branch 'main';
                    changeRequest();
                }
            }
            steps {
                withCredentials([
                    usernamePassword(
                        credentialsId: 'sys_oie_devops_github_api',
                        usernameVariable: 'GITHUB_USER',
                        passwordVariable: 'GITHUB_TOKEN',
                    ),
                ]){
                    rbheStaticCodeScan()
                }
            }
        }
        // This stage is required for service/agent repos only
        // Please remove it for chart repos
        stage('Version Check') {
            steps {
                echo "Check if its a valid code version"
                sh '''
                /opt/ci/version-check.sh
                '''
            }        
        }
        stage('Build') {
            steps {
                echo "Hi, I'm a pipeline, doing build step"
                sh '''
                make build
                '''
            }
        }
        stage('Lint') {
            steps {
                echo "Hi, I'm a pipeline, doing lint step"
                sh '''
                make lint
                '''
            }
        }
        stage('Test') {
            steps {
                echo "Hi, I'm a pipeline, doing test step"
                sh '''
                make test
                make coverage
                '''
                // Coverage template for Java 
                //step([$class: 'JacocoPublisher', 
                //               exclusionPattern: '**/com/intel/auth/**,**/com/intel/cloud/**,**/com/intel/test/**,**/com/intel/producer/model/**', 
                //               inclusionPattern: '**/*.class',
                //               changeBuildStatus: true,
                //               minimumInstructionCoverage: '50',
                //              maximumInstructionCoverage: '51',
                //               sourcePattern: '**/src/test/java/**'])
                
                // Coverage and Allure for Python
                // python -m coverage run -m pytest --alluredir allure_reports
                //  python -m coverage xml -o ./reports/coverage.xml 
                //
                // step([$class: 'CoberturaPublisher',
                //                   autoUpdateHealth: false,
                //                   autoUpdateStability: false,
                //                  coberturaReportFile: 'reports/coverage.xml',
                //                   failNoReports: false,
                //                   failUnhealthy: false,
                //                   failUnstable: false,
                //                   maxNumberOfBuilds: 10,
                //                  onlyStable: false,
                //                   sourceEncoding: 'ASCII',
                //                  zoomCoverageChart: false])
                //    allure([
                 //       includeProperties: false,
                 //       properties: [],
                 //       reportBuildPolicy: 'ALWAYS',
                 //       results: [[path: 'allure_reports']]
                 //   ])
                 
                 // Python lint using flake8
                // flake8 --format=pylint --exit-zero /home/jenkins/agent/workspace/e.devops-staging_python_coverage/ >flake8-output.txt
                // recordIssues enabledForFailure: true, tools: [flake8(name: 'Lint - Flake8', pattern: 'flake8-output.txt', skipSymbolicLinks: true)]
                
            }
        }
        // This stage is required for service/agent repos only
        // Please remove it for chart repos
        stage('Version Tag') {
            when {
                anyOf { branch 'main'; branch 'feature*'; branch 'release*' }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'sys_oie_devops_github_api',usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']])
                    {
                        echo "Generate tag if SemVer"
                        sh '''
                        # Use writable user for git
                        echo "machine github.com" >> $HOME/.netrc
                        echo "  login not-used" >> $HOME/.netrc
                        echo "  password $PASSWORD" >> $HOME/.netrc
                        echo "machine api.github.com" >> $HOME/.netrc
                        echo "  login not-used" >> $HOME/.netrc
                        echo "  password $PASSWORD" >> $HOME/.netrc
                        # Tag the version
                        /opt/ci/version-tag.sh
                        '''
                }
            }
        }
        stage('Artifact') {
            steps {
                sh '''
                tar -zcvf "${GIT_SHORT_URL}.tar.gz" *
                '''
                archiveArtifacts artifacts: '**/*.tar.gz',
                allowEmptyArchive: true,
                fingerprint: true,
                onlyIfSuccessful: true
                sh '''
                [ -d "artifacts" ] || mkdir -p artifacts
                mv  *.tar.gz artifacts/
                '''
                //in case your projects is mastro-i or springbord replace "maestro-a" from bellow accordingly
                publishArtifacts([artifactsRepo: "one-intel-edge-or-local/${SUB_PROJECT_NAME}",
                                  credentialId: 'sys_oie_devops_ubit-artifactory-or.intel.com'])
            }
        }

    }
    post {
        always {
	    jcpSummaryReport()
            cleanWs()
        }
	failure {
	    script {
		def currentBranch = env.BRANCH_NAME
                if (currentBranch == 'main' && authorEmail) {
                    emailext(
                    subject: "Build failed on main branch for ${GIT_SHORT_URL}",
                    body: "The build on the main branch failed. Please check the logs for more details. Your PR was the last change, this is why you're receiving this email",
                    to: authorEmail,
                    attachLog: true
                    )
                }
            }
	}
    }
}
