// SPDX-FileCopyrightText: (C) 2022 Intel Corporation
// SPDX-License-Identifier: LicenseRef-Intel
// Imported groovy libraries:
// 1cicd: ["intel-innersource/applications.devops.jenkins.jenkins-common-pipelines"]

def branchPattern = /(main|release-[0-9].[0-9]|release-[0-9][0-9].[0-9][0-9]|release-[0-9][0-9].[0-9]|release-[0-9].[0-9][0-9])/

def getEnvFromBranch(branch) {
    if (branch ==~ /main/) {
        return 'checkmarx,protex'
    }
    else {
        return 'virus,hadolint,trivy'
        // PR checks can be extended with checkmarx, bandit, snyk but source code has to available for them to pass. Protex should be kept only at branch level scanning.
    }
}

pipeline {
    triggers {
        // nightly build between 23:00 a.m. - 23:59 a.m.(Etc/UTC), Monday - Friday:
        cron(env.BRANCH_NAME =~ /main/ ? 'H 23 * * 1-5' : '')
    }
    agent {
        docker {
            label 'oie_spot_executor'
            image 'amr-registry.caas.intel.com/one-intel-edge/rrp-devops/oie_ci_testing:latest'
            args '-e http_proxy=http://proxy-dmz.intel.com:911 -e https_proxy=http://proxy-dmz.intel.com:912 -e HTTP_PROXY=http://proxy-dmz.intel.com:911 -e HTTPS_PROXY=http://proxy-dmz.intel.com:912 -e NO_PROXY=localhost,*.intel.com,intel.com,127.0.0.1 --net=host'
            alwaysPull true
        }
    }
    environment {
        GIT_SHORT_URL=env.GIT_URL.split('/')[4].toString().replaceAll('.git','')
        PROJECT_NAME = "${GIT_SHORT_URL}"
        SDLE_UPLOAD_PROJECT_ID = '20246'
		authorEmail = sh (script: 'git --no-pager show -s --format=\'%ae\'',returnStdout: true).trim()
    }
    stages {
	stage('Scan Source') {
            parallel {
                stage('Scan Virus, Checkmarx, Protex, Trivy'){
                    environment {
                        SCANNERS                     = getEnvFromBranch(env.BRANCH_NAME)
                        PROTEX_PROJECT_NAME          = "${GIT_SHORT_URL}"
                    }
                    when {
                        anyOf { branch 'main'; branch 'iaas-*-*'; branch 'release-*'; changeRequest();}
                    }
                    steps {
                         script {
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                rbheStaticCodeScan()
                            }
                        }
                    }
                }
                stage('Trivy config scan') {
                    when {
                        changeRequest()
                    }
                    steps {
                        script {
                            trivyConfigScan()
                        }
                    }
                }
            }
        }

	stage('Setup') {
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'sys_oie_devops_github_api',usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']])
                {
                    netrcPatch()
                }
            }
        }
        // This stage is required for service/agent repos only
        // Please remove it for chart repos
	
        stage('Version Check') {
            steps {
                echo "Check if its a valid code version"
                sh '''
                /opt/ci/version-check.sh
                '''
            }        
        }

		// stage('Lint Code') {
        //     steps {
        //         sh '''
        //         echo "Linting the code"
        //         make lint-ci
        //         '''
        //     }
        // }
	    
        // stage('Build') {
        //     steps {
        //         sh '''
        //         eval \$(ssh-agent) > /dev/null
        //         make build
        //         '''
        //     }
        // }
        
		// stage('Test Code') {
        //     steps {
        //         echo "Test the code"
        //         sh '''
        //         make test
        //         '''
        //     }
        // }
        stage('Validate clean repo') {
            steps {
                sh '''
                bash -c "diff -u <(echo -n) <(git diff)"
                '''
            }
        }
	
        // This stage is required for service/agent repos only
        // Please remove it for chart repos
        stage('Version Tag') {
            when {
                anyOf { branch 'main'; branch 'feature*'; branch 'release*' }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'sys_oie_devops_github_api',usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']])
                    {
                        echo "Generate tag if SemVer"
                        sh '''
                        # Use writable user for git
                        echo "machine github.com" >> $HOME/.netrc
                        echo "  login not-used" >> $HOME/.netrc
                        echo "  password $PASSWORD" >> $HOME/.netrc
                        echo "machine api.github.com" >> $HOME/.netrc
                        echo "  login not-used" >> $HOME/.netrc
                        echo "  password $PASSWORD" >> $HOME/.netrc
                        # Tag the version
                        /opt/ci/version-tag.sh
                        '''
                }
            }
        }
        stage('Build Docker image') {
            when {
                anyOf { branch 'main'; branch 'iaas-*-*'; branch 'release-*'; changeRequest(); }
            }
            steps {
                script {
                    miDocker.build()
                }
            }
        }
        stage('Test Code') {
            when {
                changeRequest()
            }
            steps {
                echo "Test the code"
                sh '''
                make test
                '''
            }
        }
        stage ('Scan Containers') {
            when {
                changeRequest()
            }
            environment {
                SCANNERS = 'trivy'

            }
            steps {
                script {
                    scanContainers()
                }
            }
        }
        stage('Deploy Docker image') {
            when {
                anyOf { branch 'main'; branch 'iaas-*-*'; branch 'release-*'; expression{ common.isMatchingCommit(/.*\[push-docker-image\]*/) }; }
            }
            steps {
                script {
                    miDocker.push()
                }
            }
        }
	    stage('Version dev') {
            when {
                anyOf { branch 'main'; branch 'iaas-*-*'; branch 'release-*'; }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'sys_oie_devops_github_api',usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']])
                {
                echo "Start new development cycle if needed"
                sh '''
                # Use writable user for git
                echo "machine github.com" >> $HOME/.netrc
                echo "  login not-used" >> $HOME/.netrc
                echo "  password $PASSWORD" >> $HOME/.netrc
                echo "machine api.github.com" >> $HOME/.netrc
                echo "  login not-used" >> $HOME/.netrc
                echo "  password $PASSWORD" >> $HOME/.netrc

                # Append -dev
                REVIEWER_1="raphaelvrosa" REVIEWER_2="daniele-moro" /opt/ci/version-dev.sh
                '''
                }
            }
        }

	stage('Artifact') {
            steps {
                artifactUpload()
            }
        }
    }

    post {
        always {
            jcpSummaryReport()
            intelLogstashSend failBuild: false, verbose: true
            cleanWs()
        }
        failure {
            script {
                emailFailure()
            }
	    }
    }
}
