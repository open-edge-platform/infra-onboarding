// SPDX-FileCopyrightText: (C) 2022 Intel Corporation
// SPDX-License-Identifier: LicenseRef-Intel
// Imported groovy libraries:
// 1cicd: ["intel-innersource/applications.devops.jenkins.jenkins-common-pipelines"]

def branchPattern = /(main|release-[0-9].[0-9]|release-[0-9][0-9].[0-9][0-9]|release-[0-9][0-9].[0-9]|release-[0-9].[0-9][0-9])/

def getEnvFromBranch(branch) {
    if (branch ==~ /main/) {
        return 'checkmarx,protex'
    }
    else {
        return 'virus,hadolint,trivy'
        // PR checks can be extended with checkmarx, bandit, snyk but source code has to available for them to pass. Protex should be kept only at branch level scanning.
    }
}

pipeline {
    triggers {
        // nightly build between 23:00 a.m. - 23:59 a.m.(Etc/UTC), Monday - Friday: 
        cron(env.BRANCH_NAME =~ /main/ ? 'H 23 * * 1-5' : '')
    }
    agent {
        docker {
            label 'oie_spot_executor'
            image 'amr-registry.caas.intel.com/one-intel-edge/rrp-devops/oie_ci_testing:2.10.33'
            alwaysPull true
        }
    }
    environment {
        GIT_SHORT_URL=env.GIT_URL.split('/')[4].toString().replaceAll('.git','')
        PROJECT_NAME = "${GIT_SHORT_URL}"
        SDLE_UPLOAD_PROJECT_ID = '22345'
        authorEmail = sh (script: 'git --no-pager show -s --format=\'%ae\'',returnStdout: true).trim()
    }
    stages {
    stage('Scan Source') {
            parallel {
                stage('Scan Virus, Checkmarx, Protex, Trivy'){
                    environment {
                        SCANNERS                     = getEnvFromBranch(env.BRANCH_NAME)
                        PROTEX_PROJECT_NAME          = "${GIT_SHORT_URL}"
                    }
                    when {
                        anyOf { branch 'main'; branch 'iaas-*-*'; branch 'release-*'; changeRequest();}
                    }
                    steps {
                        script {
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                rbheStaticCodeScan()
                            }
                        }
                    }
                }
                /*stage('Trivy config scan') {
                    when {
                        changeRequest()
                    }
                    steps {
                        script {
                            trivyConfigScan()
                        }
                    }
                }*/
            }
        }
        stage('Shellcheck') {
                    when {
                        changeRequest()
                    }
                    steps {
                        shellcheck('*.sh', 'SC2154,SC2086,SC2016,SC2181,SC2207,SC2004,SC1091,SC3046,SC2059,SC2269,SC2050,SC2164,SC2002,SC1091,SC2128,SC2178,SC2059,SC3037,SC2003,SC2112,SC3043,SC2155,SC2046,SC2148,SC2034,SC2001,SC2105,SC2046,SC2166,SC2124,SC2006,SC2068,SC2124,SC2129,SC2143,SC2236')
                    }
                }
        stage('Setup') {
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'sys_oie_devops_github_api',usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']])
                {
                    netrcPatch()
                }
            }
        }
        // This stage is required for service/agent repos only
        // Please remove it for chart repos
    
        stage('Version Check') {
            steps {
                echo "Check if its a valid code version"
                sh '''
                /opt/ci/version-check.sh
                '''
            }        
        }

        stage('Build') {
          steps {
            sh '''
              make build
            '''
          }
        }

        stage('Lint Code') {
            when {
                changeRequest()
            }
            steps {
                sh '''
                make lint
                '''
            }
        }
        
      stage('Test Code') {
            when {
                changeRequest()
            }
            steps {
                echo "Test the code"
                sh '''
                apt-get update && apt-get install -y pigz qemu-utils
                make test
                '''
            }
            post{
                success{
                    // improve coverage then uncomment
                    coverageReport('build/coverage.xml')
                }
            } 
        }

        stage('Validate clean repo') {
            steps {
                sh '''
                bash -c "diff -u <(echo -n) <(git diff -- . ':!pkg/script/chain.ipxe' ':!pkg/script/hook/config')"
                '''
            }
        }
    
        // This stage is required for service/agent repos only
        // Please remove it for chart repos
        stage('Version Tag') {
            when {
                anyOf { branch 'main'; branch 'feature*'; branch 'release*' }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'sys_oie_devops_github_api',usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']])
                    {
                        echo "Generate tag if SemVer"
                        sh '''
                        # Use writable user for git
                        echo "machine github.com" >> $HOME/.netrc
                        echo "  login not-used" >> $HOME/.netrc
                        echo "  password $PASSWORD" >> $HOME/.netrc
                        echo "machine api.github.com" >> $HOME/.netrc
                        echo "  login not-used" >> $HOME/.netrc
                        echo "  password $PASSWORD" >> $HOME/.netrc
                        # Tag the version
                        /opt/ci/version-tag.sh
                        '''
                }
            }
        }

        stage('Build Docker image') {
            when {
                anyOf { branch 'main'; branch 'iaas-*-*'; branch 'release-*'; changeRequest(); }
            }
            steps {
                script {
                    // scmCheckout {
                    //     clean = true
                    // }
                    miDocker.build()
                }
            }
        }
        
        stage ('Scan Containers') {
            when {
                anyOf {
                    anyOf { branch 'main'; branch 'iaas-*-*'; branch 'release-*'; changeRequest() }
                }
            }
            environment {
                SCANNERS = 'trivy'
            }
            steps {
                script {
                    scanContainers()
                }
            }
        }

        stage('Deploy Docker image') {
            when {
                anyOf { branch 'main'; branch 'iaas-*-*'; branch 'release-*'; expression{ common.isMatchingCommit(/.*\[push-docker-image\]*/) }; }
            }
            steps {
                script {
                    miDocker.push()
                }
            }
        }

        stage('Scan Binary') {
            parallel {             
                stage('Scan BDBA'){
                    environment {
                       SCANNERS                     = 'bdba'
                    }
                    when {
                        anyOf { branch 'main'; branch 'iaas-*-*'; branch 'release-*'; }
                    }
                    steps {
                        sh """
                        [ -d "BDBA" ] || mkdir BDBA
                        tar -zcvf BDBA/${GIT_SHORT_URL}.tar.gz build 
                        """
                        script {
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                rbheStaticCodeScan()
                            }
                        }
                    }
                }
                stage('Scan Binary SSCB') {
                   when {
                       changeRequest()
                   }
                   steps {
                       scanBinarySSCB()
                    }
                }
            }
        }

        stage('Artifact') {
            steps {
                artifactUpload()
            }
        }
        stage('Version dev') {
            when {
                anyOf { branch 'main'; branch 'iaas-*-*'; branch 'release-*'; }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'sys_oie_devops_github_api',usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']])
                {
                    versionDev("raphaelvrosa", "daniele-moro")
                }
            }
        }
        stage('Auto approve') {
            when {
                changeRequest()
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'sys_devops_approve_github_api', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                    script {
                        autoApproveAndMergePR()
                    }
                }
            }
        }
    }

    post {
        always {
            jcpSummaryReport()
            intelLogstashSend failBuild: false, verbose: true
            cleanWs()
        }
        failure {
            script {
                emailFailure()
            }
        }
    }
}
