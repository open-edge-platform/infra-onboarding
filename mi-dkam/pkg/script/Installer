#!/bin/bash

>/etc/environment
rm /etc/apt/apt.conf
SETUP_STATUS_FILENAME="install_pkgs_status"
SCRIPT_DIR=$(pwd)
touch $SCRIPT_DIR/$SETUP_STATUS_FILENAME

CLIENT_ID=$(cat /etc/ensp/node/client-credentials/client_id)
CLIENT_SECRET=$(cat /etc/ensp/node/client-credentials/client_secret)
DEBIAN_LOCATION=${DEBIAN_LOCATION:-/etc/ensp/node}

PROVISIONING_URL=${PROVISIONING_URL:-"localhost"}
ACCESS_TOKEN_URL=__KEYCLOAK_URL__
RELEASE_TOKEN_URL=__RELEASE_TOKEN_URL__
APT_SOURCE_URL=__FILE_SERVER__
IMG_REGISTRY_URL=__IMG_REGISTRY_URL__
APT_SOURCE_PROXY_PORT=__ORCH_APT_PORT__
IMG_REGISTRY_PROXY_PORT=__ORCH_IMG_PORT__

export REGISTRY_URL=__REGISTRY_URL__
export ORCH_C_URL=__ORCH_CLUSTER__
export ORCH_I_URL=__ORCH_INFRA__
export ORCH_PLATFORM_OBSERVABILITY_HOST=__ORCH_PLATFORM_OBS_HOST__
export ORCH_PLATFORM_OBSERVABILITY_PORT=__ORCH_PLATFORM_OBS_PORT__
# export PROVISIONING_URL=192.168.1.11:8080
# export PROVISIONING_APT_MIRROR_URL=192.168.1.11:443
export OBSERVABILITY_METRICS_HOST=__ORCH_PLATFORM_OBS_METRICS_HOST__
export OBSERVABILITY_METRICS_PORT=__ORCH_PLATFORM_OBS_METRICS_PORT__
export MAINTENANCE_MANAGER_URL=__ORCH_UPDATE__
export TELEMETRY_MANAGER_URL=__ORCH_TELEMETRY_HOST__:__ORCH_TELEMETRY_PORT__
export RELEASE_SERVER=__FILE_SERVER__
export VAULT_URL=__ORCH_VAULT__
export PKI_PATH=__ORCH_PKI_PATH__
export PKI_ROLE=__ORCH_PKI_ROLE__

# 1. Install dependencies
install_dependencies() {
    echo "Install all dependencies."
    sudo sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config.d/60-cloudimg-settings.conf
    sudo service sshd restart
    apt-get update
    sudo apt-get install -y curl jq wget openssh-server unzip apparmor iptables lvm2 cryptsetup lxc mosquitto tpm2-abrmd tpm2-tools software-properties-common ntp python3-venv git jq libpq5
    echo -e "\e[32m[install git debootstrap python3-pip]\e[0m"
    sudo apt install -y git debootstrap python3-pip

    snaphp=$(sudo snap get system proxy.http)
    ret=$?
    if [ $ret -ne 0 ]; then
    echo "proxy not set for snap."
    fi
    if [ "$snaphp" !=  "$http_proxy" ] && [ -n "$http_proxy" ]; then
    echo "set proxy.http as $http_proxy for snap."
    sudo snap set system proxy.http=$http_proxy
    echo "set proxy.https as $https_proxy for snap."
    sudo snap set system proxy.https=$https_proxy
    fi
    sudo snap install jo

    which yq_linux_amd64
    if [ $? -ne 0 ]; then
    echo "Download yq and install on provisioning host."
    KSURL=https://github.com/mikefarah/yq/releases/latest
    lversion=$(get_github_latest_vesion "$KSURL")
    version=${YQ_VERSION:-$lversion}
    echo "The latest yq version is: $lversion, will download version: $version"
    url=https://github.com/mikefarah/yq/releases/download/${version}/yq_linux_amd64.tar.gz
    download_github_url "$url"
    tmpyq=/tmp/yq_linux_amd64
    if [ -d "$tmpyq" ];then
        sudo rm -rf "$tmpyq"
    fi
    mkdir -p $tmpyq
    mv yq_linux_amd64.tar.gz $tmpyq
    tar -xzvf $tmpyq/yq_linux_amd64.tar.gz -C "$tmpyq"
    sudo mv "$tmpyq"/yq_linux_amd64 /usr/local/bin/yq_linux_amd64
    fi
    which yq
    if [ $? -ne 0 ]; then
    sudo ln -s yq_linux_amd64 /usr/local/bin/yq
    fi   
}

# 2. Firewall update
install_fws(){
 # Enable UFW
    echo "Enable firwell"
    sudo systemctl enable ufw
    echo "y" | sudo ufw enable
    sudo ufw default allow outgoing
    sudo ufw allow 2379/tcp
    sudo ufw allow 2380/tcp
    sudo ufw allow 6443/tcp
    sudo ufw allow 9345/tcp
    sudo ufw allow 10250/tcp
    sudo ufw allow 5473/tcp    
    sudo ufw allow 22/tcp
    sudo ufw allow 80/tcp
    sudo ufw allow 443/tcp
    sudo ufw allow 2376/tcp
    sudo ufw allow 8472/tcp
    sudo ufw allow 9090/tcp
    sudo ufw allow 10254/tcp
    sudo ufw reload
}

# Get the latest version from github repo release.
get_github_latest_vesion() {
  KSURL="$1"
  # curl -Ls -w %{url_effective} -o /dev/null "$KSURL"
  LASTURL=""
  LASTURL=$(curl "$KSURL" -s -L -I -o /dev/null -w '%{url_effective}')
  ret=$?
  if [ $ret -ne 0 ]; then
      LASTURL=$(wget -O /dev/null --content-disposition "$KSURL"  2>&1 |awk '/^Location: /{print $2}')
      ret=$?
      if [ $ret -ne 0 ]; then
          echo "Error: Can not find the latest ksonnet version by wget."
      fi
  fi
  LATES=${LASTURL##*/}
  echo "$LATES"
}

# Get the release from github repo.
download_github_url() {
  url="$1"
  echo "download file ${url##*/}"
  if ! [ -e "${url##*/}" ]; then
    wget "$url"
  fi
  if ! [ -e "${url##*/}" ]; then
    curl -L -O "$url"
  fi
}

# 3. Install Intel CA certificates
install_intel_CAcertificates() {
    echo "Install intel CA certificates."
    export no_proxy=$no_proxy,__FILE_SERVER__
    export NO_PROXY=$NO_PROXY,__FILE_SERVER__
    # wget  http://owrdropbox.intel.com/dropbox/public/Ansible/certificates/IntelCA5A-base64.crt
    # wget  http://owrdropbox.intel.com/dropbox/public/Ansible/certificates/IntelCA5B-base64.crt
    # wget  http://owrdropbox.intel.com/dropbox/public/Ansible/certificates/IntelSHA256RootCA-base64.crt
    # sudo cp Intel* /usr/local/share/ca-certificates/
    # sudo update-ca-certificates
    sudo apt-get install -y unzip 
    ca_bundle_list="Intel%20Root%20Certificate%20Chain%20Base64.zip \
                Public%20Root%20Certificate%20Chain%20Base64.zip \
                IntelSHA2RootChain-Base64.zip \
                PublicSHA2RootChain-Base64.zip"

    for bundle in $ca_bundle_list; do
        wget -O- -O /usr/local/share/ca-certificates/tmp.zip "http://certificates.intel.com/repository/certificates/$bundle"
        unzip /usr/local/share/ca-certificates/tmp.zip -d /usr/local/share/ca-certificates
        rm /usr/local/share/ca-certificates/tmp.zip        
    done
    update-ca-certificates
}

# 4. Install Docker
install_docker() {
    echo "Install docker"
    if [ ! -f /etc/sudoers.d/"$USER" ]; then
        echo "$USER ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/"$USER"
        echo "" "  $USER added to /etc/sudoers.d/"
    else
        echo "warn" "  $USER already exists in /etc/sudoers.d/"
    fi

    # Install Tools
    echo -e "\e[32m[apt update]\e[0m"
    sudo apt update
    echo -e "\e[32m[install ca-certificates curl gnupg jq dmidecode]\e[0m"
    sudo apt install -y ca-certificates curl gnupg jq dmidecode

    sudo install -m 0755 -d /etc/apt/keyrings

    echo -e "\e[32m[install docker]\e[0m"
    if [ ! -e /etc/apt/keyrings/docker.gpg ]; then
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        sudo chmod a+r /etc/apt/keyrings/docker.gpg
        echo \
        "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
        "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
        sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt update
        sudo apt install -y docker-ce
    fi

    if [ ! -e "/etc/systemd/system/docker.service.d/http-proxy.conf" ]; then
        updateDockerdProxy

        # Enable docker
        sudo systemctl daemon-reload
        sudo systemctl restart docker
        sudo systemctl enable docker

        # Add user into docker group
        sudo usermod -aG docker $USER
        sudo systemctl restart docker
        sudo systemctl daemon-reload
        sudo chmod 666 /var/run/docker.sock
    fi
    updateDockerClientProxy
}

# Update docker proxies
updateDockerClientProxy() {
    # Proxy for docker
    ROOT_DOCKER_CONFIG="/root/.docker/config.json"
    USER_DOCKER_CONFIG="$HOME/.docker/config.json"
    config_proxy=$(jo httpProxy=$http_proxy httpsProxy=$https_proxy noProxy=$no_proxy)
    config_default=$(jo default="$config_proxy")

    dockerDir=${ROOT_DOCKER_CONFIG%/*}
    sudo mkdir -p "$dockerDir"
    dockerDir=${USER_DOCKER_CONFIG%/*}
    mkdir -p "$dockerDir"

    sudo ls ${ROOT_DOCKER_CONFIG} > /dev/null
    if [ $? -eq 0 ];then
        root_config_proxies=$(sudo cat ${ROOT_DOCKER_CONFIG} | jo proxies="$config_default" -D -f -)
    else
        root_config_proxies=$(jo proxies="$config_default" -D)
    fi
    echo "$root_config_proxies" | jo -D -f - -p | sudo tee "$ROOT_DOCKER_CONFIG"

    sudo ls ${USER_DOCKER_CONFIG} > /dev/null
    if [ $? -eq 0 ];then
        user_config_proxies=$(cat ${USER_DOCKER_CONFIG} | jo proxies="$config_default" -D -f -)
    else
        user_config_proxies=$(jo proxies="$config_default" -D)
    fi

    echo "$user_config_proxies" | jo -D -f - -p | sudo tee "$USER_DOCKER_CONFIG"
}

#Update dockerd proxies
updateDockerdProxy() {
    if [ ! -d "/etc/systemd/system/docker.service.d" ];then
        sudo mkdir -p /etc/systemd/system/docker.service.d
    fi
    echo """
    # SPDX-FileCopyrightText: (C) 2023 Intel Corporation
    # SPDX-License-Identifier: LicenseRef-Intel

    [Service]
    Environment=\"HTTP_PROXY=$http_proxy\"
    Environment=\"HTTPS_PROXY=$http_proxy\"
    Environment=\"NO_PROXY=$no_proxy\"
    """ | sudo tee /etc/systemd/system/docker.service.d/http-proxy.conf
}

# 5. Install helm
install_helm() {
    echo "Install helm"
    local latest_release_url="https://api.github.com/repos/helm/helm/releases/latest"
    latest_release_response=$( curl -L --silent --show-error --fail "$latest_release_url" 2>&1 || true )
    O_TAG=$( echo "$latest_release_response" | grep '"tag_name"' | sed -E 's/.*"(v[0-9\.]+)".*/\1/g' )
    TAG=${O_TAG:-v3.12.3}
    HELM_DIST="helm-$TAG-linux-amd64.tar.gz"
    DOWNLOAD_URL="https://get.helm.sh/$HELM_DIST"
    wget $DOWNLOAD_URL
    tar -xvf $HELM_DIST
    mv linux-amd64/helm  /usr/bin/
    rm -rf $HELM_DIST linux-amd64

}

# 6. Get Token
install_cleanup() {
    echo "Agents cleanup."
    apt-get -y purge node-agent vault
    apt-get -y purge nginx nginx-common nginx-core
    apt-get -y purge cluster-agent
    apt-get -y purge hardware-discovery-agent
    apt-get -y purge ensp-ke-installer

    apt-get -y purge ensp-orch-installer
    apt-get purge -y platform-observability-agent
    apt-get -y purge platform-update-agent
    apt-get autoremove -y
    rm -f /etc/ensp/node/node-agent*
    rm -rf /etc/ensp/node/tokens /etc/ensp/node/certs /etc/ensp/node/.keys
    umount /etc/lp/node/.apt/.keys /etc/lp/node/.apt/certs
    rm -rf /etc/lp/node
    rm -rf /etc/ensp/node/tokens
}

# 7. Install Node Agent
install_node_agent(){
    apt-get install -y jq
    echo "get access token from orchestrator"

    ## m2m crdentials cannot be used to obtain a mTLS cert for client, hence using hardcoded username/password for stop gap solution
    #AT=$(curl -kX POST -u "$CLIENT_ID:$CLIENT_SECRET" -d "grant_type=client_credentials" https://keycloak.kind.internal/realms/master/protocol/openid-connect/token | jq -r '.access_token')
    # get JWT access token from Keycloack
    AT=$(curl -s -X POST https://__KEYCLOAK__/realms/master/protocol/openid-connect/token \
	-d "username=lp-admin-user" -d "password=ChangeMeOn1stLogin!" -d "grant_type=password" \
	-d "client_id=ledge-park-system" -d "scope=openid" | jq -r '.access_token')

    echo $AT

    #echo persist access token
    #echo $AT | tee /etc/ensp/node/tokens/node-agent/access_token

    echo obtain release service token
    RS_AT=$(curl -k -XGET https://__RELEASE_FQDN__/token -H "Authorization: Bearer $AT")
    echo $RS_AT
    #echo persist release service token
    #echo $RS_AT | tee /etc/ensp/node/tokens/release-service/access_token
    echo "Get Vault certificates."

    # Login to valut using JWT
    export VAULT_TOKEN=$(curl -s -k -X POST https://__VAULT__/v1/auth/jwt/login \
    --header 'Content-Type: application/json' \
    --data '{"jwt" : "'"$AT"'"}' | jq -r .auth.client_token)
    echo $VAULT_TOKEN
    echo "Logged in to vault"

    # Request cert & private key from Vault
    curl -s -k --header "X-Vault-Token: ${VAULT_TOKEN}" \
    --request POST --data '{ "common_name": "'"$(cat /sys/class/dmi/id/product_uuid)"'", "ttl": "60d" }' "https://__VAULT__/v1/pki_int_edge_node/issue/maestro" > response.json

    echo "Issued a fresh cert/key pair"

    # Convert Vault response to certificates
    jq -r .data.certificate response.json > host-cert.pem
    jq -r .data.ca_chain[0] response.json >> host-cert.pem
    jq -r .data.ca_chain[1] response.json >> host-cert.pem
    jq -r .data.private_key response.json > host-key.pem


    #Below code is intended to resolve dependencies for MTLS based apt and bypass need for ESP based provisioning

    groupadd -f bm-agents -g 998 --system
    id -u node-agent &>/dev/null || useradd node-agent --system -g bm-agents

    echo create required dir structure to persist cert/key
    mkdir -p /etc/lp/node/certs
    mkdir -p /etc/lp/node/.keys
    #mkdir -p /etc/ensp/node/tokens/node-agent
    #mkdir -p /etc/ensp/node/tokens/release-service
    cp ./host-cert.pem /etc/lp/node/certs
    cp ./host-key.pem /etc/lp/node/.keys
    chmod -R 750 /etc/lp/node
    #chmod -R 750 /etc/ensp/node/tokens
    chmod -R 700 /etc/ensp/node/client-credentials
    chown -R node-agent:bm-agents /etc/lp/node
    chown -R node-agent:bm-agents /etc/ensp/node

    echo "node-agent node-agent/onboarding.serviceURL string ${ORCH_I_URL}" | debconf-set-selections
    echo "node-agent node-agent/vault.serviceURL string ${VAULT_URL}" | debconf-set-selections
    echo "node-agent node-agent/vault.pkiRole string ${PKI_ROLE}" | debconf-set-selections
    echo "node-agent node-agent/vault.pkiPath string ${PKI_PATH}" | debconf-set-selections
    echo "node-agent node-agent/provisioning.serviceURL string ${PROVISIONING_URL}" | debconf-set-selections
    echo "node-agent node-agent/auth.accessTokenURL string ${ACCESS_TOKEN_URL}" | debconf-set-selections
    echo "node-agent node-agent/auth.rsTokenURL string ${RELEASE_TOKEN_URL}" | debconf-set-selections
    echo "node-agent node-agent/proxy.aptSourceURL string ${APT_SOURCE_URL}" | debconf-set-selections
    echo "node-agent node-agent/proxy.aptSourceProxyPort string ${APT_SOURCE_PROXY_PORT}" | debconf-set-selections
    echo "node-agent node-agent/proxy.imgRegistryURL string ${IMG_REGISTRY_URL}" | debconf-set-selections
    echo "node-agent node-agent/proxy.imgRegistryProxyPort string ${IMG_REGISTRY_PROXY_PORT}" | debconf-set-selections

    apt-get -y install gpg
    curl https://apt.releases.hashicorp.com/gpg | gpg --dearmor > /usr/share/keyrings/hashicorp-archive-keyring.gpg
    echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" > /etc/apt/sources.list.d/hashicorp.list
    apt-get update

    echo "Install node agent..."
    VERSION="node-agent-VERSION"
    echo $VERSION
    PKGFILE="node-agent_${VERSION}_amd64.deb" 
    echo download node agent
    wget --no-check-certificate --header="Authorization: Bearer $RS_AT" https://${APT_SOURCE_URL}/pool/release/n/node-agent/${PKGFILE} -P $DEBIAN_LOCATION

    echo "install node agent"
    apt-get install -y -o Dpkg::Options::="--force-confnew" $DEBIAN_LOCATION/$PKGFILE

    echo "remove node agent debian"
    rm -f $DEBIAN_LOCATION/$PKGFILE

    echo "wait for node agent and client proxy to start"
    while true; do
        http_status=$(curl -s -o /dev/null -w "%{http_code}" "https://localhost:$APT_SOURCE_PROXY_PORT")
        if [ "$http_status" -eq 200 ]; then
            echo "Client proxy is active"
            break
        else
            echo "HTTP status code is $http_status. Retrying in 5 seconds..."
            sleep 5
        fi
    done
    echo "install other agents below"

    curl -kfsSL "https://$APT_SOURCE_URL/ledgepark-debian-signing-key-gpg-non-prod.pem" -H "Authorization: Bearer $RS_AT" | gpg --dearmor > /usr/share/keyrings/ledgepark-release.gpg
    echo "deb [signed-by=/usr/share/keyrings/ledgepark-release.gpg] https://localhost:$APT_SOURCE_PROXY_PORT ledgepark release" | tee /etc/apt/sources.list.d/ledgepark-release.list
    echo "deb [signed-by=/usr/share/keyrings/ledgepark-release.gpg] https://localhost:$APT_SOURCE_PROXY_PORT ledgepark main" | tee -a /etc/apt/sources.list.d/ledgepark-release.list

    apt-get update
}


# 8. Install Cluster Agent
install_cluster_agent(){
echo $ID_TOKEN
echo "Install Cluster agent..."
VERSION="cluster-agent-VERSION"
echo $VERSION
apt-get update
echo "cluster-agent cluster-agent/cluster-orchestrator-url string ${ORCH_C_URL}" | debconf-set-selections
apt-get install -y -o Dpkg::Options::="--force-confnew" cluster-agent="$VERSION"
systemctl status -l --no-pager cluster-agent
}

# 9. Install Hardware Discovery Agent
install_hardware_discovery_agent(){
echo "Install Hardware discovery agent..."
VERSION="hardware-discovery-agent-VERSION"
echo $VERSION 
apt-get update
echo "hardware-discovery-agent hardware-discovery-agent/onboarding.serviceURL string ${ORCH_I_URL}" | debconf-set-selections
apt-get install -y -o Dpkg::Options::="--force-confnew" hardware-discovery-agent="$VERSION"
systemctl status -l --no-pager hardware-discovery-agent
}

# 10. Install Platform Observability Agent
install_platform_observability_agent(){
echo "install platform-observability-agent"
VERSION="platform-observability-agent-VERSION"
echo $VERSION
apt-get update
echo "platform-observability-agent platform-observability-agent/host string $ORCH_PLATFORM_OBSERVABILITY_HOST" | debconf-set-selections
echo "platform-observability-agent platform-observability-agent/port string $ORCH_PLATFORM_OBSERVABILITY_PORT" | debconf-set-selections
echo "platform-observability-agent platform-observability-agent/metrics-host string $OBSERVABILITY_METRICS_HOST" | debconf-set-selections
echo "platform-observability-agent platform-observability-agent/metrics-port string $OBSERVABILITY_METRICS_PORT" | debconf-set-selections
apt-get install -y -o Dpkg::Options::="--force-confnew" platform-observability-agent="$VERSION"
systemctl status -l --no-pager platform-observability-agent
}

# 11. Install TRTL
install_trtl(){
echo "Install TRTL..."
apt-get update
VERSION="trtl-VERSION"
echo $VERSION
apt-get -y install trtl="$VERSION"
}

# 12. Install INBM Cloudadapter Agent
install_inbm_cloudadapter_agent(){
echo "Install inbm-cloudadapter-agent..."
apt-get update
VERSION="inbm-cloudadapter-agent-VERSION"
echo $VERSION
apt-get -y install inbm-cloudadapter-agent="$VERSION"

}

# 13. Install INBM Dispatcher Agent
install_inbm_dispatcher_agent(){
echo "Install inbm-dispatcher-agent..."
apt-get update
VERSION="inbm-dispatcher-agent-VERSION"
echo $VERSION
apt-get -y install inbm-dispatcher-agent="$VERSION"

}

# 14. Install INBM Configuration Agent
install_inbm_configuration_agent(){
echo "Install inbm-configuration-agent..."
apt-get update
VERSION="inbm-configuration-agent-VERSION"
echo $VERSION
apt-get -y install inbm-configuration-agent="$VERSION"

}

# 15. Install INBM Telemetry Agent
install_inbm_telemetry_agent(){
echo "Install inbm-telemetry-agent..."
apt-get update
VERSION="inbm-telemetry-agent-VERSION"
echo $VERSION
apt-get -y install inbm-telemetry-agent="$VERSION"

}

# 16. Install INBM Diagnostic Agent
install_inbm_diagnostic_agent(){
echo "Install inbm-diagnostic-agent..."
apt-get update
VERSION="inbm-diagnostic-agent-VERSION"
echo $VERSION
apt-get -y install inbm-diagnostic-agent="$VERSION"

}

# 17. Install MQTT Agent
install_mqtt(){
echo "Install mqtt..."
apt-get update
VERSION="mqtt-VERSION"
echo $VERSION
apt-get -y install mqtt="$VERSION"

}

# 18. Install TPM Provision
install_tpm_provision(){
echo "Install tpm-provision..."
apt-get update
VERSION="tpm-provision-VERSION"
echo $VERSION
apt-get -y install tpm-provision="$VERSION"

}

# 19. Install INBC Program
install_inbc_program(){
echo "Install inbc-program..."
apt-get update
VERSION="inbc-program-VERSION"
echo $VERSION
apt-get -y install inbc-program="$VERSION"

}

# 20. Install Platform Update Agent
install_platform_update_agent(){
echo "Install Platform Update agent..."
apt-get update
VERSION="platform-update-agent-VERSION"
echo $VERSION
apt-get install -y bindfs
mkdir -p /etc/lp/node/.apt/certs /etc/lp/node/.apt/.keys
chown -R _apt:bm-agents /etc/lp/node/.apt
chmod -R 100 /etc/lp/node/.apt

bindfs -o nonempty --force-user=_apt --force-group=bm-agents --perms=400,u+D /etc/lp/node/certs/.apt /etc/lp/node/.apt/certs
bindfs -o nonempty --force-user=_apt --force-group=bm-agents --perms=400,u+D /etc/lp/node/.keys/.apt /etc/lp/node/.apt/.keys

echo "/etc/lp/node/certs/.apt /etc/lp/node/.apt/certs fuse.bindfs force-user=_apt,force-group=bm-agents,perms=400:u+D 0 0" >> /etc/fstab
echo "/etc/lp/node/.keys/.apt /etc/lp/node/.apt/.keys fuse.bindfs force-user=_apt,force-group=bm-agents,perms=400:u+D 0 0" >> /etc/fstab

echo "platform-update-agent platform-update-agent/bmaDebURL string ${RELEASE_SERVER}" | debconf-set-selections
echo "platform-update-agent platform-update-agent/updateServiceURL string ${MAINTENANCE_MANAGER_URL}" | debconf-set-selections
apt-get -y install platform-update-agent="$VERSION"
systemctl status -l --no-pager platform-update-agent
}

#increase the disk partiton
parition_extention() {
set -e  # Enable exit on error
echo "$(date): Extentending DISK size.............."
drive=$(lsblk -no pkname $(findmnt -n / | awk '{ print $2 }'))
new_partition=$(lsblk -npo name /dev/$drive | tail -n1)
trimmed_partition=${new_partition#*/}
sudo growpart /dev/$drive 3
sudo resize2fs /$trimmed_partition
set +e  # Disable exit on error
}

# 21. SRIOV configurations
install_sriov(){
sudo sed -i 's/GRUB_CMDLINE_LINUX=.*/GRUB_CMDLINE_LINUX="intel_iommu=on iommu=pt pci=realloc console=tty1 console=ttyS0,115200"/' /etc/default/grub
#Update GRUB
sudo update-grub
}

# 22. Update HWE kernel
install_HWE_kernel(){
export DEBIAN_FRONTEND=noninteractive
sudo apt-get update
sudo apt-get install -y linux-image-generic linux-headers-generic
}

# 23. Install Platform Telemetry Agent
install_platform_telemetry_agent(){
echo "install platform-telemetry-agent"
VERSION="platform-telemetry-agent-VERSION"
echo $VERSION
apt-get update
echo "telemetry-agent telemetry-agent/telemetrymanager.serviceURL string ${TELEMETRY_MANAGER_URL}" | debconf-set-selections
apt install -y -o Dpkg::Options::="--force-confnew" platform-telemetry-agent="$VERSION"
systemctl status -l --no-pager platform-telemetry-agent
}

# 24. Install log rotate
install_syslogrotate_job(){
##### Managing log rotation
if ! sudo grep -q "cron.ensp" "/etc/crontab"; then
  sudo sed -i '$ d' /etc/crontab
  echo "*/5 *   * * *   root    cd / && run-parts --report /etc/cron.ensp" | sudo tee -a /etc/crontab
  echo "#" | sudo tee -a /etc/crontab
fi

sudo rm -rf /etc/cron.ensp
sudo mkdir -p /etc/cron.ensp
sudo tee /etc/cron.ensp/logrotate << END
#!/bin/sh
/usr/sbin/logrotate /etc/logrotate.conf
EXITVALUE=$?
if [ $EXITVALUE != 0 ]; then
    /usr/bin/logger -t logrotate "ALERT exited abnormally with [$EXITVALUE]"
fi
exit $EXITVALUE
END

sudo chmod +x /etc/cron.ensp/logrotate

sudo tee /etc/logrotate.d/rsyslog << END
/var/log/syslog
/var/log/mail.info
/var/log/mail.warn
/var/log/mail.err
/var/log/mail.log
/var/log/daemon.log
/var/log/kern.log
/var/log/auth.log
/var/log/user.log
/var/log/lpr.log
/var/log/cron.log
/var/log/debug
/var/log/messages
{
        rotate 4
        weekly
        missingok
        size 1G
        notifempty
        compress
        delaycompress
        sharedscripts
        postrotate
                /usr/lib/rsyslog/rsyslog-rotate
        endscript
}
END

sudo systemctl restart rsyslog.service

sudo systemctl restart cron.service
sudo /usr/sbin/logrotate /etc/logrotate.conf
##### Managing log rotation
}

# 25. Install log end
install_syslogrotate_ufw(){
sudo tee /etc/logrotate.d/ufw << END
/var/log/ufw.log
{
        rotate 4
        weekly
        missingok
        notifempty
        size 1G
        compress
        delaycompress
        sharedscripts
        postrotate
                [ -x /usr/lib/rsyslog/rsyslog-rotate ] && /usr/lib/rsyslog/rsyslog-rotate || true
        endscript
}
END

sudo systemctl restart ufw.service
sudo ufw logging low
}

# 26. Install CA certificate
install_CA_cert(){
    curl -XGET https://__VAULT__/v1/pki_root/ca/pem -k | sudo tee /usr/local/share/ca-certificates/kind.crt && sudo update-ca-certificates
}

# 27. Enable netIp
enable_netipplan() {
    # New values to update in the config.yaml file
    new_values="network:
                  version: 2
                  renderer: networkd
                  ethernets:
                    id0:
                      match:
                        name: en*
                      dhcp4: true"


    # Update the content of the config.yaml file with new values
    echo "$new_values" > /etc/netplan/config.yaml

    # Apply the changes using the netplan apply command
    netplan apply

    echo "Config.yaml file updated successfully."
}

# 28. delete the invalid ubuntu boot menu options
delete_invalid_ubuntu_boot_menuoptions () {

    present_boot=$(efibootmgr | grep -i "Bootcurrent" | awk '{print $2}')
    while IFS= read -r boot_part_number; do
    if [ $boot_part_number -ne $present_boot ]; then
        efibootmgr -b $boot_part_number -B
    fi
    done < <(efibootmgr | grep -i ubuntu | awk '{print $1}'| cut -c 5-8 )
}

# 29. Set kernel configurations
enable_kernel_config(){
    sysctl -w vm.overcommit_memory=__OVER_COMMIT_MEMORY__ 
    sysctl -w kernel.panic=__KERNEL_PANIC__ 
    sysctl -w kernel.panic_on_oops=__PANIC_ON_OOPS__ 
    sysctl -w fs.inotify.max_user_instances=__MAX_USER_INSTANCE__
    echo vm.overcommit_memory=__OVER_COMMIT_MEMORY__ | tee -a /etc/sysctl.conf
    echo kernel.panic=__KERNEL_PANIC__ | tee -a /etc/sysctl.conf
    echo kernel.panic_on_oops=__PANIC_ON_OOPS__ | tee -a /etc/sysctl.conf
    echo fs.inotify.max_user_instances=__MAX_USER_INSTANCE__ | tee -a /etc/sysctl.conf
    sysctl -p
}

# 30. Enable NTP configuration
install_NTP(){
    apt-get update
    apt-get install -y ntp
    cp /etc/ntp.conf /etc/ntp.conf.bak
    ntpServers=__NTP_SERVERS__
    IFS=',' read -ra servers <<< "$ntpServers"
    for server in "${servers[@]}"; do
        if ! grep -q "^server $server" /etc/ntp.conf; then
            echo "server $server" | sudo tee -a /etc/ntp.conf > /dev/null
        fi
    done
    ufw allow 123/udp 
    systemctl restart ntp
    systemctl status ntp
}

#extend the disk partition
#parition_extention  2>&1 | tee -a $SCRIPT_DIR/$SETUP_STATUS_FILENAME
install_dependencies 2>&1 | tee -a $SCRIPT_DIR/$SETUP_STATUS_FILENAME
install_fws 2>&1 | tee -a $SCRIPT_DIR/$SETUP_STATUS_FILENAME
if command -v docker &> /dev/null ; then
    echo "Docker is already installed."
else
    install_docker 2>&1 | tee -a $SCRIPT_DIR/$SETUP_STATUS_FILENAME
fi

if command -v helm &> /dev/null ; then
    echo "helm is already installed."
else
    install_helm 2>&1 | tee -a $SCRIPT_DIR/$SETUP_STATUS_FILENAME
fi
if [ ! -f /usr/local/share/ca-certificates/IntelCA7B-Base64.crt ]; then
    install_intel_CAcertificates 2>&1 | tee -a $SCRIPT_DIR/$SETUP_STATUS_FILENAME
fi

enable_kernel_config 2>&1 | tee -a $SCRIPT_DIR/$SETUP_STATUS_FILENAME
install_NTP 2>&1 | tee -a $SCRIPT_DIR/$SETUP_STATUS_FILENAME
install_syslogrotate_job 2>&1 | tee -a $SCRIPT_DIR/$SETUP_STATUS_FILENAME
enable_netipplan 2>&1 | tee -a $SCRIPT_DIR/$SETUP_STATUS_FILENAME
echo "Install agents..........................."
install_CA_cert 2>&1 | tee -a $SCRIPT_DIR/$SETUP_STATUS_FILENAME
install_cleanup 2>&1 | tee -a $SCRIPT_DIR/$SETUP_STATUS_FILENAME
install_node_agent 2>&1 | tee -a $SCRIPT_DIR/$SETUP_STATUS_FILENAME
install_cluster_agent 2>&1 | tee -a $SCRIPT_DIR/$SETUP_STATUS_FILENAME
install_hardware_discovery_agent 2>&1 | tee -a $SCRIPT_DIR/$SETUP_STATUS_FILENAME
install_platform_observability_agent 2>&1 | tee -a $SCRIPT_DIR/$SETUP_STATUS_FILENAME
install_trtl 2>&1 | tee -a $SCRIPT_DIR/$SETUP_STATUS_FILENAME
install_inbm_cloudadapter_agent 2>&1 | tee -a $SCRIPT_DIR/$SETUP_STATUS_FILENAME
install_inbm_dispatcher_agent 2>&1 | tee -a $SCRIPT_DIR/$SETUP_STATUS_FILENAME
install_inbm_configuration_agent 2>&1 | tee -a $SCRIPT_DIR/$SETUP_STATUS_FILENAME
install_inbm_telemetry_agent 2>&1 | tee -a $SCRIPT_DIR/$SETUP_STATUS_FILENAME
install_inbm_diagnostic_agent 2>&1 | tee -a $SCRIPT_DIR/$SETUP_STATUS_FILENAME
install_mqtt 2>&1 | tee -a $SCRIPT_DIR/$SETUP_STATUS_FILENAME
install_tpm_provision 2>&1 | tee -a $SCRIPT_DIR/$SETUP_STATUS_FILENAME
install_inbc_program 2>&1 | tee -a $SCRIPT_DIR/$SETUP_STATUS_FILENAME
install_platform_update_agent 2>&1 | tee -a $SCRIPT_DIR/$SETUP_STATUS_FILENAME
install_platform_telemetry_agent 2>&1 | tee -a $SCRIPT_DIR/$SETUP_STATUS_FILENAME
install_sriov 2>&1 | tee -a $SCRIPT_DIR/$SETUP_STATUS_FILENAME
install_HWE_kernel 2>&1 | tee -a $SCRIPT_DIR/$SETUP_STATUS_FILENAME
install_syslogrotate_ufw 2>&1 | tee -a $SCRIPT_DIR/$SETUP_STATUS_FILENAME

#Delete the invalid ubuntu boot numbers created from previous installation from boot menu
delete_invalid_ubuntu_boot_menuoptions  2>&1 | tee -a $SCRIPT_DIR/$SETUP_STATUS_FILENAME

echo "Installation done" > $SCRIPT_DIR/.base_pkg_install_done
sudo reboot
