#!/bin/bash

set -euo pipefail

if [ -f /etc/apt/apt.conf ]; then
    rm /etc/apt/apt.conf
fi
true >/etc/environment
SETUP_STATUS_FILENAME="install_pkgs_status"
SCRIPT_DIR=$(pwd)
touch "$SCRIPT_DIR/$SETUP_STATUS_FILENAME"

if [ -s "/etc/intel_edge_node/client-credentials/client_id" ]; then
    CLIENT_ID=$(cat /etc/intel_edge_node/client-credentials/client_id)
else
    echo "CLIENT ID does not exists"
    exit 1
fi

if [ -s "/etc/intel_edge_node/client-credentials/client_secret" ]; then
    CLIENT_SECRET=$(cat /etc/intel_edge_node/client-credentials/client_secret)
else
     echo "CLIENT SECRET does not exists"
     exit 1
fi

PROVISIONING_URL=${PROVISIONING_URL:-"localhost"}
ACCESS_TOKEN_URL=__KEYCLOAK_URL__
RELEASE_TOKEN_URL=__RELEASE_TOKEN_URL__
APT_SOURCE_URL=__FILE_SERVER__
IMG_REGISTRY_URL=__IMG_REGISTRY_URL__
APT_SOURCE_PROXY_PORT=__ORCH_APT_PORT__
IMG_REGISTRY_PROXY_PORT=__ORCH_IMG_PORT__

ORCH_C_URL=__ORCH_CLUSTER__
ORCH_I_URL=__ORCH_INFRA__
ORCH_PLATFORM_OBSERVABILITY_HOST=__ORCH_PLATFORM_OBS_HOST__
ORCH_PLATFORM_OBSERVABILITY_PORT=__ORCH_PLATFORM_OBS_PORT__
OBSERVABILITY_METRICS_HOST=__ORCH_PLATFORM_OBS_METRICS_HOST__
OBSERVABILITY_METRICS_PORT=__ORCH_PLATFORM_OBS_METRICS_PORT__
MAINTENANCE_MANAGER_URL=__ORCH_UPDATE__
TELEMETRY_MANAGER_URL=__ORCH_TELEMETRY_HOST__:__ORCH_TELEMETRY_PORT__
RELEASE_SERVER=__FILE_SERVER__

CA_CERT="__CA_CERT__"

# 1. Install dependencies
install_dependencies() {
    echo "Install all dependencies."
    rm -f /etc/apt/sources.list.d/edge-node.list
    apt-get update
    echo -e "\e[32m[install git python3-pip]\e[0m"
    sudo apt-get install -y curl wget openssh-server unzip apparmor iptables lvm2 cryptsetup lxc mosquitto tpm2-abrmd tpm2-tools software-properties-common ntp python3-venv git jq libpq5 python3-pip ca-certificates gnupg dmidecode

    if ! command -v yq_linux_amd64 &> /dev/null; then
        echo "Download yq and install on provisioning host."
        version="v4.42.1"
        expected_checksum="99fc7fd4874daaceb8a718264afccc8f777413fa655c7e16063cfa87d39efe3a"
        echo "yq download version: $version"
        url=https://github.com/mikefarah/yq/releases/download/${version}/yq_linux_amd64.tar.gz
        download_github_url "$url"
        if [ -f "yq_linux_amd64.tar.gz" ]; then
            actual_checksum=$(sha256sum "yq_linux_amd64.tar.gz" | awk '{print $1}')
            if [ "$actual_checksum" != "$expected_checksum" ]; then
                echo "Checksum mismatch. File may be corrupted."
                exit 1
            fi
            echo "Checksum verification successful."
        else
            echo "Downloaded file does not exist. Aborting installation."
            exit 1
        fi
        tmpyq=/tmp/yq_linux_amd64
        if [ -d "$tmpyq" ];then
            sudo rm -rf "$tmpyq"
        fi
        mkdir -p $tmpyq
        mv yq_linux_amd64.tar.gz $tmpyq
        tar -xzvf $tmpyq/yq_linux_amd64.tar.gz -C "$tmpyq"
        sudo mv "$tmpyq"/yq_linux_amd64 /usr/local/bin/yq_linux_amd64
    fi
    if [ ! -L /usr/local/bin/yq ]; then
        sudo ln -s yq_linux_amd64 /usr/local/bin/yq
    fi   
}

# 2. Firewall update
install_fws(){
 # Enable UFW
    echo "Enable firwell"
    systemctl enable ufw
    echo "y" | ufw enable
    ufw default allow outgoing
    ufw reload
}


# Get the release from github repo.
download_github_url() {
  url="$1"
  echo "download file ${url##*/}"
  if ! [ -e "${url##*/}" ]; then
    wget "$url"
  fi
  if ! [ -e "${url##*/}" ]; then
    curl -L -O "$url"
  fi
}

# 3. Install Intel CA certificates
install_intel_CAcertificates() {
    echo "Install intel CA certificates."
    export no_proxy=$no_proxy,__FILE_SERVER__
    export NO_PROXY=$no_proxy,__FILE_SERVER__
    # wget  http://owrdropbox.intel.com/dropbox/public/Ansible/certificates/IntelCA5A-base64.crt
    # wget  http://owrdropbox.intel.com/dropbox/public/Ansible/certificates/IntelCA5B-base64.crt
    # wget  http://owrdropbox.intel.com/dropbox/public/Ansible/certificates/IntelSHA256RootCA-base64.crt
    # sudo cp Intel* /usr/local/share/ca-certificates/
    # sudo update-ca-certificates
    sudo apt-get install -y unzip 
    ca_bundle_list="Intel%20Root%20Certificate%20Chain%20Base64.zip \
                Public%20Root%20Certificate%20Chain%20Base64.zip \
                IntelSHA2RootChain-Base64.zip \
                PublicSHA2RootChain-Base64.zip"

    for bundle in $ca_bundle_list; do
        wget -O- -O /usr/local/share/ca-certificates/tmp.zip "http://certificates.intel.com/repository/certificates/$bundle"
        unzip /usr/local/share/ca-certificates/tmp.zip -d /usr/local/share/ca-certificates
        rm /usr/local/share/ca-certificates/tmp.zip        
    done
    update-ca-certificates
}

# 6. Get Token
install_cleanup() {
    echo "Agents cleanup."
    apt-get -y purge node-agent caddy || true
    apt-get -y purge cluster-agent || true
    apt-get -y purge hardware-discovery-agent || true
    apt-get -y purge ensp-ke-installer || true

    apt-get -y purge ensp-orch-installer || true
    apt-get purge -y platform-observability-agent || true
    apt-get -y purge platform-update-agent || true
    apt-get autoremove -y
    rm -rf /etc/intel_edge_node/tokens /etc/intel_edge_node/certs /etc/intel_edge_node/.keys
}

# 7. Install Node Agent
install_node_agent(){

    # Temp file to store response
    tempfile=$(mktemp)

    echo "get access token from orchestrator"
    # Save the response to the temporary file
    curl -X POST -u "$CLIENT_ID:$CLIENT_SECRET" -d "grant_type=client_credentials" https://__KEYCLOAK__/realms/master/protocol/openid-connect/token -o "$tempfile"

    # Check the exit status of curl
    if [ ! -s "$tempfile" ]; then
        echo "error in getting Keycloak token"
        rm "$tempfile"
        exit 1
    fi

    # Parse the response with jq
    AT=$(jq -r '.access_token' "$tempfile")
    rm "$tempfile"

    # Get RS token now
    tempfile=$(mktemp)
    curl -XGET https://__RELEASE_FQDN__/token -H "Authorization: Bearer $AT" -o "$tempfile"

    if [ ! -s "$tempfile" ]; then
        echo "error in getting Release Service token"
        rm "$tempfile"
        exit 1
    fi

    RS_AT=$(cat "$tempfile")
    rm "$tempfile"

    echo "setup oras"
    ORAS_VERSION="1.1.0"
    expected_checksum="e09e85323b24ccc8209a1506f142e3d481e6e809018537c6b3db979c891e6ad7"
    curl -LO "https://github.com/oras-project/oras/releases/download/v${ORAS_VERSION}/oras_${ORAS_VERSION}_linux_amd64.tar.gz"
    if [ -f "oras_1.1.0_linux_amd64.tar.gz" ]; then
        actual_checksum=$(sha256sum "oras_1.1.0_linux_amd64.tar.gz" | awk '{print $1}')
        if [ "$actual_checksum" != "$expected_checksum" ]; then
                echo "Checksum mismatch. File may be corrupted."
                exit 1
            fi
            echo "Checksum verification successful."
    else
        echo "Downloaded file does not exist. Aborting installation."
        exit 1
    fi
    mkdir -p oras-install/
    tar -zxf oras_${ORAS_VERSION}_*.tar.gz -C oras-install/
    sudo mv oras-install/oras /usr/local/bin/
    rm -rf oras_${ORAS_VERSION}_*.tar.gz oras-install/

    #Below code is intended to resolve dependencies for MTLS based apt and bypass need for ESP based provisioning
    #IMPORTANT: If additional new users or groups need to be created by DKAM, they MUST be added after the users and group created below
    #to avoid those users or groups being assigned to IDs that are reserved. A list of the reserved UID and GID values are below:
    #
    #|----------|------------|--------------|
    #|   Name   | User/Group | Reserverd ID |
    #|----------|------------|--------------|
    #|bm-agents |    Group   |      998     |
    #|node-agent|    User    |      997     |
    #|promtheus |    User    |      994     |
    #|----------|------------|--------------|

    groupadd -f bm-agents -g 998 --system
    id -u node-agent &>/dev/null || useradd node-agent -u 997 --system -g bm-agents
    id -u prometheus &>/dev/null || useradd prometheus -u 994 --system -g bm-agents
    id -u platform-update-agent &>/dev/null || useradd platform-update-agent --system -g bm-agents
    id -u fluent-bit &>/dev/null || useradd fluent-bit --system -g bm-agents -G adm
    USERNAME="etcd"

    # Check if the etcd already exists
    if id "$USERNAME" &>/dev/null; then
        echo "User '$USERNAME' already exists."
    else
        # Add the etcd if it doesn't exist
        useradd -r -c "etcd user" -s /sbin/nologin -M "$USERNAME" -U
        echo "User '$USERNAME' added successfully."
    fi

    chmod -R 700 /etc/intel_edge_node/client-credentials
    chown -R node-agent:bm-agents /etc/intel_edge_node

    echo "node-agent node-agent/onboarding.serviceURL string ${ORCH_I_URL}" | debconf-set-selections
    echo "node-agent node-agent/auth.accessTokenURL string ${ACCESS_TOKEN_URL}" | debconf-set-selections
    echo "node-agent node-agent/auth.rsTokenURL string ${RELEASE_TOKEN_URL}" | debconf-set-selections
    echo "node-agent node-agent/proxy.aptSourceURL string ${APT_SOURCE_URL}" | debconf-set-selections
    echo "node-agent node-agent/proxy.aptSourceProxyPort string ${APT_SOURCE_PROXY_PORT}" | debconf-set-selections
    echo "node-agent node-agent/proxy.imgRegistryURL string ${IMG_REGISTRY_URL}" | debconf-set-selections
    echo "node-agent node-agent/proxy.imgRegistryProxyPort string ${IMG_REGISTRY_PROXY_PORT}" | debconf-set-selections

    echo "Install caddy for node agent..."

    echo "download caddy deb package..."
    CADDY_VERSION="caddy-VERSION"
    CADDY_PKGFILE="./caddy_${CADDY_VERSION}_linux_amd64.deb"
    echo "${RS_AT}" | oras pull "${IMG_REGISTRY_URL}/one-intel-edge/edge-node/deb/caddy:$CADDY_VERSION" --password-stdin

    if [ ! -f "${CADDY_PKGFILE}" ]; then
        echo "caddy debian package could not be downloaded. Aborting installation"
        exit 1
    fi

    echo "install caddy"
    apt-get install -y "${CADDY_PKGFILE}"

    echo "remove caddy debian"
    rm -f "${CADDY_PKGFILE}"

    echo "Install node agent..."
    echo "download node agent..."
    VERSION="node-agent-VERSION"
    echo $VERSION
    PKGFILE="./node-agent_${VERSION}_amd64.deb"

    echo "download node agent"
    echo "${RS_AT}" | oras pull "${IMG_REGISTRY_URL}/one-intel-edge/edge-node/deb/node-agent:$VERSION" --password-stdin

    if [ ! -f "${PKGFILE}" ]; then
        echo "node agent debian could not be downloaded. Aborting installation"
        exit 1
    fi

    echo "install node agent"
    apt-get install -y -o Dpkg::Options::="--force-confnew" "${PKGFILE}"

    echo "remove node agent debian"
    rm -f "${PKGFILE}"

    echo "wait for node agent and client proxy to start"
    while true; do
        http_status=$(curl -s -o /dev/null -w "%{http_code}" "https://localhost:$APT_SOURCE_PROXY_PORT")
        if [ "$http_status" -eq 200 ]; then
            echo "Client proxy is active"
            break
        else
            echo "HTTP status code is $http_status. Retrying in 5 seconds..."
            sleep 5
        fi
    done

    echo "setup apt source"
    curl -kfsSL "https://$APT_SOURCE_URL/edge-node.asc" -H "Authorization: Bearer $RS_AT" -o /etc/apt/trusted.gpg.d/edge-node.asc
    echo "deb https://localhost:$APT_SOURCE_PROXY_PORT/repository __APT_SRC__ main" | tee /etc/apt/sources.list.d/edge-node.list

    apt-get update
}


# 8. Install Cluster Agent
install_cluster_agent(){
echo "Install Cluster agent..."
VERSION="cluster-agent-VERSION"
echo $VERSION
apt-get update
echo "cluster-agent cluster-agent/cluster-orchestrator-url string ${ORCH_C_URL}" | debconf-set-selections
apt-get install -y -o Dpkg::Options::="--force-confnew" cluster-agent="$VERSION"
systemctl status -l --no-pager cluster-agent
}

# 9. Install Hardware Discovery Agent
install_hardware_discovery_agent(){
echo "Install Hardware discovery agent..."
VERSION="hardware-discovery-agent-VERSION"
echo $VERSION 
apt-get update
echo "hardware-discovery-agent hardware-discovery-agent/onboarding.serviceURL string ${ORCH_I_URL}" | debconf-set-selections
apt-get install -y -o Dpkg::Options::="--force-confnew" hardware-discovery-agent="$VERSION"
systemctl status -l --no-pager hardware-discovery-agent
}

# 10. Install Platform Observability Agent
install_platform_observability_agent(){
echo "install platform-observability-agent"
VERSION="platform-observability-agent-VERSION"
echo $VERSION
apt-get update
echo "platform-observability-agent platform-observability-agent/host string $ORCH_PLATFORM_OBSERVABILITY_HOST" | debconf-set-selections
echo "platform-observability-agent platform-observability-agent/port string $ORCH_PLATFORM_OBSERVABILITY_PORT" | debconf-set-selections
echo "platform-observability-agent platform-observability-agent/metrics-host string $OBSERVABILITY_METRICS_HOST" | debconf-set-selections
echo "platform-observability-agent platform-observability-agent/metrics-port string $OBSERVABILITY_METRICS_PORT" | debconf-set-selections
apt-get install -y -o Dpkg::Options::="--force-confnew" platform-observability-agent="$VERSION"
systemctl status -l --no-pager platform-observability-logging platform-observability-metrics platform-observability-collector
}

# 11. Install TRTL
install_trtl(){
echo "Install TRTL..."
apt-get update
VERSION="trtl-VERSION"
echo $VERSION
apt-get -y install trtl="$VERSION"
}

# 12. Install INBM Cloudadapter Agent
install_inbm_cloudadapter_agent(){
echo "Install inbm-cloudadapter-agent..."
apt-get update
VERSION="inbm-cloudadapter-agent-VERSION"
echo $VERSION
apt-get -y install inbm-cloudadapter-agent="$VERSION"

}

# 13. Install INBM Dispatcher Agent
install_inbm_dispatcher_agent(){
echo "Install inbm-dispatcher-agent..."
apt-get update
VERSION="inbm-dispatcher-agent-VERSION"
echo $VERSION
apt-get -y install inbm-dispatcher-agent="$VERSION"

}

# 14. Install INBM Configuration Agent
install_inbm_configuration_agent(){
echo "Install inbm-configuration-agent..."
apt-get update
VERSION="inbm-configuration-agent-VERSION"
echo $VERSION
apt-get -y install inbm-configuration-agent="$VERSION"

}

# 15. Install INBM Telemetry Agent
install_inbm_telemetry_agent(){
echo "Install inbm-telemetry-agent..."
apt-get update
VERSION="inbm-telemetry-agent-VERSION"
echo $VERSION
apt-get -y install inbm-telemetry-agent="$VERSION"

}

# 16. Install INBM Diagnostic Agent
install_inbm_diagnostic_agent(){
echo "Install inbm-diagnostic-agent..."
apt-get update
VERSION="inbm-diagnostic-agent-VERSION"
echo $VERSION
apt-get -y install inbm-diagnostic-agent="$VERSION"

}

# 17. Install MQTT Agent
install_mqtt(){
echo "Install mqtt..."
apt-get update
VERSION="mqtt-VERSION"
echo $VERSION
apt-get -y install mqtt="$VERSION"

}

# 18. Install TPM Provision
install_tpm_provision(){
echo "Install tpm-provision..."
apt-get update
VERSION="tpm-provision-VERSION"
echo $VERSION
apt-get -y install tpm-provision="$VERSION"

}

# 19. Install INBC Program
install_inbc_program(){
echo "Install inbc-program..."
apt-get update
VERSION="inbc-program-VERSION"
echo $VERSION
apt-get -y install inbc-program="$VERSION"

}

# 20. Install Platform Update Agent
install_platform_update_agent(){
echo "Install Platform Update agent..."
apt-get update
VERSION="platform-update-agent-VERSION"
echo $VERSION

echo "platform-update-agent platform-update-agent/bmaDebURL string ${RELEASE_SERVER}" | debconf-set-selections
echo "platform-update-agent platform-update-agent/updateServiceURL string ${MAINTENANCE_MANAGER_URL}" | debconf-set-selections
apt-get -y install platform-update-agent="$VERSION"
systemctl status -l --no-pager platform-update-agent
}

# 21. SRIOV configurations
install_sriov(){
sudo sed -i 's/GRUB_CMDLINE_LINUX=.*/GRUB_CMDLINE_LINUX="intel_iommu=on iommu=pt pci=realloc console=tty1 console=ttyS0,115200"/' /etc/default/grub
#Update GRUB
sudo update-grub
}

# 22. Update HWE kernel
install_HWE_kernel(){
export DEBIAN_FRONTEND=noninteractive
sudo apt-get update
sudo apt-get install -y linux-image-generic linux-headers-generic
}

# 23. Install Platform Telemetry Agent
install_platform_telemetry_agent(){
echo "install platform-telemetry-agent"
VERSION="platform-telemetry-agent-VERSION"
echo $VERSION
apt-get update
echo "telemetry-agent telemetry-agent/telemetrymanager.serviceURL string ${TELEMETRY_MANAGER_URL}" | debconf-set-selections
apt install -y -o Dpkg::Options::="--force-confnew" platform-telemetry-agent="$VERSION"
systemctl status -l --no-pager platform-telemetry-agent
}

# 24. Install log rotate
install_syslogrotate_job(){
##### Managing log rotation
if ! sudo grep -q "cron.ensp" "/etc/crontab"; then
  sudo sed -i '$ d' /etc/crontab
  echo "*/5 *   * * *   root    cd / && run-parts --report /etc/cron.ensp" | sudo tee -a /etc/crontab
  echo "#" | sudo tee -a /etc/crontab
fi

sudo rm -rf /etc/cron.ensp
sudo mkdir -p /etc/cron.ensp
sudo tee /etc/cron.ensp/logrotate << 'END'
#!/bin/sh
/usr/sbin/logrotate /etc/logrotate.conf
EXITVALUE=$?
if [ $EXITVALUE != 0 ]; then
    /usr/bin/logger -t logrotate "ALERT exited abnormally with [$EXITVALUE]"
fi
exit $EXITVALUE
END

sudo chmod +x /etc/cron.ensp/logrotate

sudo tee /etc/logrotate.d/rsyslog << 'END'
/var/log/syslog
/var/log/mail.info
/var/log/mail.warn
/var/log/mail.err
/var/log/mail.log
/var/log/daemon.log
/var/log/kern.log
/var/log/auth.log
/var/log/user.log
/var/log/lpr.log
/var/log/cron.log
/var/log/debug
/var/log/messages
{
        rotate 4
        weekly
        missingok
        size 1G
        notifempty
        compress
        delaycompress
        sharedscripts
        postrotate
                /usr/lib/rsyslog/rsyslog-rotate
        endscript
}
END

sudo systemctl restart rsyslog.service

sudo systemctl restart cron.service
sudo /usr/sbin/logrotate /etc/logrotate.conf
##### Managing log rotation
}

# 25. Install log end
install_syslogrotate_ufw(){
sudo tee /etc/logrotate.d/ufw << 'END'
/var/log/ufw.log
{
        rotate 4
        weekly
        missingok
        notifempty
        size 1G
        compress
        delaycompress
        sharedscripts
        postrotate
                [ -x /usr/lib/rsyslog/rsyslog-rotate ] && /usr/lib/rsyslog/rsyslog-rotate || true
        endscript
}
END

sudo systemctl restart ufw.service
sudo ufw logging low
}

# 26. Install CA certificate
install_CA_cert(){
    echo "$CA_CERT" > /usr/local/share/ca-certificates/orch-ca.crt && update-ca-certificates -f
}

# 27. Enable netIp
enable_netipplan() {
    # New values to update in the config.yaml file
    new_values="network:
                  version: 2
                  renderer: networkd
                  ethernets:
                    id0:
                      match:
                        name: en*
                      dhcp4: true"


    # Update the content of the config.yaml file with new values
    echo "$new_values" > /etc/netplan/config.yaml

    # Apply the changes using the netplan apply command
    netplan apply

    echo "Config.yaml file updated successfully."
    sed -i '/[Resolve]/d'  /etc/systemd/resolved.conf
    sed -i '/DNS/d'  /etc/systemd/resolved.conf

}

# 28. delete the invalid ubuntu boot menu options
delete_invalid_ubuntu_boot_menuoptions () {
    echo "Inside boot order change function"
    present_boot=$(efibootmgr | grep -i "Bootcurrent" | awk '{print $2}')
    while IFS= read -r boot_part_number; do
    if [[ "$boot_part_number" = "$present_boot" ]]; then
            continue;
    else
         efibootmgr -b "$boot_part_number" -B
    fi
    done < <(efibootmgr | grep -i ubuntu | awk '{print $1}'| cut -c 5-8 )
}

# 29. Set kernel configurations
enable_kernel_config(){
    sysctl -w vm.overcommit_memory=__OVER_COMMIT_MEMORY__ 
    sysctl -w kernel.panic=__KERNEL_PANIC__ 
    sysctl -w kernel.panic_on_oops=__PANIC_ON_OOPS__ 
    sysctl -w fs.inotify.max_user_instances=__MAX_USER_INSTANCE__
    echo vm.overcommit_memory=__OVER_COMMIT_MEMORY__ | tee -a /etc/sysctl.conf
    echo kernel.panic=__KERNEL_PANIC__ | tee -a /etc/sysctl.conf
    echo kernel.panic_on_oops=__PANIC_ON_OOPS__ | tee -a /etc/sysctl.conf
    echo fs.inotify.max_user_instances=__MAX_USER_INSTANCE__ | tee -a /etc/sysctl.conf
    sysctl -p
}

# 30. Enable NTP configuration
install_NTP(){
    apt-get update
    apt-get install -y systemd-timesyncd
    cp /etc/ntp.conf /etc/ntp.conf.bak
    cp /etc/systemd/timesyncd.conf /etc/systemd/timesyncd.conf.bak
    ntpServers=__NTP_SERVERS__
    timeServers="NTP="
    IFS=',' read -ra servers <<< "$ntpServers"
    for server in "${servers[@]}"; do
        if ! grep -q "^server $server" /etc/ntp.conf; then
            echo "server $server" | sudo tee -a /etc/ntp.conf > /dev/null
        fi
        timeServers="$timeServers $server"
    done
    sed  's/.*#NTP=*./'"$timeServers"'/g' /etc/systemd/timesyncd.conf | sudo tee /etc/systemd/timesyncd.conf >/dev/null
    ufw allow 123/udp 
    service ntp reload
    systemctl restart systemd-timesyncd.service
    timedatectl set-ntp true
    systemctl status systemd-timesyncd.service
}

# 31. Disable unattended upgrades
disable_unattended_upgrade(){
config_file="/etc/apt/apt.conf.d/20auto-upgrades"
if [ -f "$config_file" ]; then
    sed -i 's/APT::Periodic::Update-Package-Lists "1";/APT::Periodic::Update-Package-Lists "0";/' "$config_file"
    sed -i 's/APT::Periodic::Unattended-Upgrade "1";/APT::Periodic::Unattended-Upgrade "0";/' "$config_file"
    echo "APT::Periodic::Update-Package-Lists set to \"0\" in $config_file"
else
    echo "Error: $config_file does not exist."
    exit 1
fi
apt remove -y unattended-upgrades
}

# 32. Install License Agent
install_license_agent(){
echo "Install License agent..."
VERSION="license-agent-VERSION"
echo $VERSION
apt-get update
echo " license-agent license-agent/customer.id string 12139414" | debconf-set-selections
apt-get install -y -o Dpkg::Options::="--force-confnew" license-agent="$VERSION"
systemctl status -l --no-pager license-agent
}

enable_inactive_boot_numbers(){
echo "Activating inactive boot numbers..."
while IFS= read -r boot_part_number; do
    last_char="${boot_part_number: -1}"
    # Check if the last character is not an asterisk ,make it activate
    if [ "$last_char" != "*" ]; then
        efibootmgr -b "$boot_part_number" -a
    fi
done < <(efibootmgr | grep "Boot" | grep -i -v -E "BootCurrent|BootOrder" | awk '{print $1}' | cut -c 5-9)
}

#LVM partition 
create_lvm_partition(){
disk=$1
echo "starting the LVM creation for the disk volume $disk"
#erase the disk data if already presnet
dd if=/dev/zero of=/dev/"$disk" bs=512 count=100
echo "successfully deleted the data from the disk" 

#create the partition
parted -s "/dev/$disk" mklabel gpt mkpart primary 0% 100%
partprobe
fdisk -l "/dev/$disk"

if [[ "$disk" == *"nvme"* ]]; then
    part_number=p
else
    part_number=""
fi
#wipse the crypt luck offset if its created during FDE enabled case
wipefs -o 0 "/dev/${disk}${part_number}1"

#remove previously created lvm if exist
vgs=$(vgs --noheadings -o vg_name)
#remove trailing and leading spaces
vgs=$(echo "$vgs" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
if [ -n "$vgs" ]; then
    vgremove -f "$vgs"
    echo "successfully deleted the previous lvm"
fi
#remove previously created pv if exist
pvs=$(pvs --noheadings -o pv_name)
pvs=$(echo "$pvs" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
if [ -n "$pvs" ]; then
    pvremove -f "$pvs"
    echo "successfully deleted the previous pvs"
fi

#pv create
if echo "y" | pvcreate "/dev/${disk}${part_number}1"; then
    echo "Successfuly done pvcreate" 
else
    echo "Failure in pvcreate"  
fi
#vgcreate
if echo "y" | vgcreate lvmvg /dev/"${disk}""${part_number}"1; then
    echo "Successfuly done vgcreate" 
else
    echo "Failure in vgcreate" 
fi
vgscan
vgchange -ay

if vgchange -ay; then
    echo "Successfuly created the logical volume group" 
else
    echo "Failure in creating the logical volume group" 
fi
}

#LVM partition for secondary disk
lvm_part_setup_for_secondary_disk(){

#check if FDE enabled , if not enabled  do the LVM for the secondary disk
if [ ! -L /dev/mapper/rootfs_crypt ]; then
    
    echo "FDE not enabled and starting the LVM creation"    
    #check for NVME && SATA disk types
    disk_list=$(lsblk -o NAME -n -d | grep -v "loop[0-9]*" | awk '{print $1}')

    for disk_name in $disk_list
    do
        #add to disk_list only if its nvme or sata 
        if [[ "$disk_name" == *"nvme"* ]] || [[ "$disk_name" = *"sd"* ]]; then

            #exclude the pendrive from device list if its attahced
            removable=$(lsblk -n -d -o RM "/dev/$disk_name")
            if [ "$removable" -ne 1 ]; then
                final_disk_list+=("$disk_name")
            fi
        else
            continue;
        fi
    done
    #do not do lvm creation if only one disk presnet
    num_disks=${#final_disk_list[@]}

    if [ "$num_disks" -gt 1 ]; then
        echo "found secondary disk for LVM creation"
        #find the disk where os not installed for lvm creation
        rootfs=$(df /boot/efi | awk 'NR==2 {print $1}')
        if [[ "$rootfs" == *"nvme"* ]]; then
            os_disk=$(echo "$rootfs" | grep -oE 'nvme[0-9]+n[0-9]+' | head -n 1)
        fi
        if [[ "$rootfs" == *"sd"* ]]; then
            os_disk=$(echo "$rootfs" | grep -oE 'sd[a-z]+' | head -n 1)
        fi
        #create lvm for the secondary disk
        for lvm_disk in "${final_disk_list[@]}"
        do
	    #skip for rootfs disk
            if [[ "$lvm_disk" == "$os_disk" ]]; then
                    continue;
            else
                 #disk with no rootfs and can be used for the LVM creation
                 create_lvm_partition "$lvm_disk"
                 break
            fi
        done
    fi
fi
}
ssh_config(){
sudo systemctl stop ssh
sudo systemctl disable ssh
#remove enabling ssh from ufw
ufw delete allow ssh &>/dev/null
ufw reload
}

#create the lvm for the seconary disk
lvm_part_setup_for_secondary_disk 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
enable_inactive_boot_numbers  2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
enable_netipplan 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
install_dependencies 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
install_fws 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
if [ ! -f /usr/local/share/ca-certificates/IntelCA7B-Base64.crt ]; then
    echo "File not present"
    install_intel_CAcertificates 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
fi

enable_kernel_config 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
install_NTP 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
install_syslogrotate_job 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
echo "Install agents..........................."
install_CA_cert 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
install_cleanup 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
install_node_agent 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
install_cluster_agent 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
install_hardware_discovery_agent 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
install_platform_observability_agent 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
install_trtl 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
install_inbm_cloudadapter_agent 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
install_inbm_dispatcher_agent 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
install_inbm_configuration_agent 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
install_inbm_telemetry_agent 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
install_inbm_diagnostic_agent 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
install_mqtt 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
install_tpm_provision 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
install_inbc_program 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
install_platform_update_agent 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
install_platform_telemetry_agent 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
#install_license_agent 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
install_sriov 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
install_HWE_kernel 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
install_syslogrotate_ufw 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
disable_unattended_upgrade 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
ssh_config 2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME
#Delete the invalid ubuntu boot numbers created from previous installation from boot menu
delete_invalid_ubuntu_boot_menuoptions  2>&1 | tee -a "$SCRIPT_DIR"/$SETUP_STATUS_FILENAME

echo "Installation done" > "$SCRIPT_DIR"/.base_pkg_install_done
sudo reboot

