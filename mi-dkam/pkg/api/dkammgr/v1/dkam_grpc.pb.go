// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: dkammgr/v1/dkam.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DkamServiceClient is the client API for DkamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DkamServiceClient interface {
	GetArtifacts(ctx context.Context, in *GetArtifactsRequest, opts ...grpc.CallOption) (*GetArtifactsResponse, error)
}

type dkamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDkamServiceClient(cc grpc.ClientConnInterface) DkamServiceClient {
	return &dkamServiceClient{cc}
}

func (c *dkamServiceClient) GetArtifacts(ctx context.Context, in *GetArtifactsRequest, opts ...grpc.CallOption) (*GetArtifactsResponse, error) {
	out := new(GetArtifactsResponse)
	err := c.cc.Invoke(ctx, "/dkammgr.v1.DkamService/GetArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DkamServiceServer is the server API for DkamService service.
// All implementations should embed UnimplementedDkamServiceServer
// for forward compatibility
type DkamServiceServer interface {
	GetArtifacts(context.Context, *GetArtifactsRequest) (*GetArtifactsResponse, error)
}

// UnimplementedDkamServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDkamServiceServer struct {
}

func (UnimplementedDkamServiceServer) GetArtifacts(context.Context, *GetArtifactsRequest) (*GetArtifactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtifacts not implemented")
}

// UnsafeDkamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DkamServiceServer will
// result in compilation errors.
type UnsafeDkamServiceServer interface {
	mustEmbedUnimplementedDkamServiceServer()
}

func RegisterDkamServiceServer(s grpc.ServiceRegistrar, srv DkamServiceServer) {
	s.RegisterService(&DkamService_ServiceDesc, srv)
}

func _DkamService_GetArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtifactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DkamServiceServer).GetArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dkammgr.v1.DkamService/GetArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DkamServiceServer).GetArtifacts(ctx, req.(*GetArtifactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DkamService_ServiceDesc is the grpc.ServiceDesc for DkamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DkamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dkammgr.v1.DkamService",
	HandlerType: (*DkamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArtifacts",
			Handler:    _DkamService_GetArtifacts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dkammgr/v1/dkam.proto",
}
